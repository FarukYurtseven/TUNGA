
faydaliyuk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08006688  08006688  00016688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006938  08006938  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006940  08006940  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006944  08006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001dc  08006b24  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08006b24  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e67d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f18  00000000  00000000  0002e889  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a30  00000000  00000000  000307a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  000311d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d5a6  00000000  00000000  00031b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094e2  00000000  00000000  0004f0a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b674a  00000000  00000000  00058588  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010ecd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000327c  00000000  00000000  0010ed50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001dc 	.word	0x200001dc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006670 	.word	0x08006670

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001e0 	.word	0x200001e0
 8000214:	08006670 	.word	0x08006670

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <strlen>:
 800022c:	4603      	mov	r3, r0
 800022e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000232:	2a00      	cmp	r2, #0
 8000234:	d1fb      	bne.n	800022e <strlen+0x2>
 8000236:	1a18      	subs	r0, r3, r0
 8000238:	3801      	subs	r0, #1
 800023a:	4770      	bx	lr

0800023c <__aeabi_drsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000240:	e002      	b.n	8000248 <__adddf3>
 8000242:	bf00      	nop

08000244 <__aeabi_dsub>:
 8000244:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000248 <__adddf3>:
 8000248:	b530      	push	{r4, r5, lr}
 800024a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000252:	ea94 0f05 	teq	r4, r5
 8000256:	bf08      	it	eq
 8000258:	ea90 0f02 	teqeq	r0, r2
 800025c:	bf1f      	itttt	ne
 800025e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000262:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000266:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026e:	f000 80e2 	beq.w	8000436 <__adddf3+0x1ee>
 8000272:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000276:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027a:	bfb8      	it	lt
 800027c:	426d      	neglt	r5, r5
 800027e:	dd0c      	ble.n	800029a <__adddf3+0x52>
 8000280:	442c      	add	r4, r5
 8000282:	ea80 0202 	eor.w	r2, r0, r2
 8000286:	ea81 0303 	eor.w	r3, r1, r3
 800028a:	ea82 0000 	eor.w	r0, r2, r0
 800028e:	ea83 0101 	eor.w	r1, r3, r1
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	2d36      	cmp	r5, #54	; 0x36
 800029c:	bf88      	it	hi
 800029e:	bd30      	pophi	{r4, r5, pc}
 80002a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x70>
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x84>
 80002c6:	4252      	negs	r2, r2
 80002c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002cc:	ea94 0f05 	teq	r4, r5
 80002d0:	f000 80a7 	beq.w	8000422 <__adddf3+0x1da>
 80002d4:	f1a4 0401 	sub.w	r4, r4, #1
 80002d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002dc:	db0d      	blt.n	80002fa <__adddf3+0xb2>
 80002de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e2:	fa22 f205 	lsr.w	r2, r2, r5
 80002e6:	1880      	adds	r0, r0, r2
 80002e8:	f141 0100 	adc.w	r1, r1, #0
 80002ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f0:	1880      	adds	r0, r0, r2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	4159      	adcs	r1, r3
 80002f8:	e00e      	b.n	8000318 <__adddf3+0xd0>
 80002fa:	f1a5 0520 	sub.w	r5, r5, #32
 80002fe:	f10e 0e20 	add.w	lr, lr, #32
 8000302:	2a01      	cmp	r2, #1
 8000304:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000308:	bf28      	it	cs
 800030a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030e:	fa43 f305 	asr.w	r3, r3, r5
 8000312:	18c0      	adds	r0, r0, r3
 8000314:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800031c:	d507      	bpl.n	800032e <__adddf3+0xe6>
 800031e:	f04f 0e00 	mov.w	lr, #0
 8000322:	f1dc 0c00 	rsbs	ip, ip, #0
 8000326:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032a:	eb6e 0101 	sbc.w	r1, lr, r1
 800032e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000332:	d31b      	bcc.n	800036c <__adddf3+0x124>
 8000334:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000338:	d30c      	bcc.n	8000354 <__adddf3+0x10c>
 800033a:	0849      	lsrs	r1, r1, #1
 800033c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000340:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000344:	f104 0401 	add.w	r4, r4, #1
 8000348:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800034c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000350:	f080 809a 	bcs.w	8000488 <__adddf3+0x240>
 8000354:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000358:	bf08      	it	eq
 800035a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035e:	f150 0000 	adcs.w	r0, r0, #0
 8000362:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000366:	ea41 0105 	orr.w	r1, r1, r5
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000370:	4140      	adcs	r0, r0
 8000372:	eb41 0101 	adc.w	r1, r1, r1
 8000376:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800037a:	f1a4 0401 	sub.w	r4, r4, #1
 800037e:	d1e9      	bne.n	8000354 <__adddf3+0x10c>
 8000380:	f091 0f00 	teq	r1, #0
 8000384:	bf04      	itt	eq
 8000386:	4601      	moveq	r1, r0
 8000388:	2000      	moveq	r0, #0
 800038a:	fab1 f381 	clz	r3, r1
 800038e:	bf08      	it	eq
 8000390:	3320      	addeq	r3, #32
 8000392:	f1a3 030b 	sub.w	r3, r3, #11
 8000396:	f1b3 0220 	subs.w	r2, r3, #32
 800039a:	da0c      	bge.n	80003b6 <__adddf3+0x16e>
 800039c:	320c      	adds	r2, #12
 800039e:	dd08      	ble.n	80003b2 <__adddf3+0x16a>
 80003a0:	f102 0c14 	add.w	ip, r2, #20
 80003a4:	f1c2 020c 	rsb	r2, r2, #12
 80003a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003ac:	fa21 f102 	lsr.w	r1, r1, r2
 80003b0:	e00c      	b.n	80003cc <__adddf3+0x184>
 80003b2:	f102 0214 	add.w	r2, r2, #20
 80003b6:	bfd8      	it	le
 80003b8:	f1c2 0c20 	rsble	ip, r2, #32
 80003bc:	fa01 f102 	lsl.w	r1, r1, r2
 80003c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c4:	bfdc      	itt	le
 80003c6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ca:	4090      	lslle	r0, r2
 80003cc:	1ae4      	subs	r4, r4, r3
 80003ce:	bfa2      	ittt	ge
 80003d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d4:	4329      	orrge	r1, r5
 80003d6:	bd30      	popge	{r4, r5, pc}
 80003d8:	ea6f 0404 	mvn.w	r4, r4
 80003dc:	3c1f      	subs	r4, #31
 80003de:	da1c      	bge.n	800041a <__adddf3+0x1d2>
 80003e0:	340c      	adds	r4, #12
 80003e2:	dc0e      	bgt.n	8000402 <__adddf3+0x1ba>
 80003e4:	f104 0414 	add.w	r4, r4, #20
 80003e8:	f1c4 0220 	rsb	r2, r4, #32
 80003ec:	fa20 f004 	lsr.w	r0, r0, r4
 80003f0:	fa01 f302 	lsl.w	r3, r1, r2
 80003f4:	ea40 0003 	orr.w	r0, r0, r3
 80003f8:	fa21 f304 	lsr.w	r3, r1, r4
 80003fc:	ea45 0103 	orr.w	r1, r5, r3
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	f1c4 040c 	rsb	r4, r4, #12
 8000406:	f1c4 0220 	rsb	r2, r4, #32
 800040a:	fa20 f002 	lsr.w	r0, r0, r2
 800040e:	fa01 f304 	lsl.w	r3, r1, r4
 8000412:	ea40 0003 	orr.w	r0, r0, r3
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	fa21 f004 	lsr.w	r0, r1, r4
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	f094 0f00 	teq	r4, #0
 8000426:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042a:	bf06      	itte	eq
 800042c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000430:	3401      	addeq	r4, #1
 8000432:	3d01      	subne	r5, #1
 8000434:	e74e      	b.n	80002d4 <__adddf3+0x8c>
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf18      	it	ne
 800043c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000440:	d029      	beq.n	8000496 <__adddf3+0x24e>
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	d005      	beq.n	800045a <__adddf3+0x212>
 800044e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000452:	bf04      	itt	eq
 8000454:	4619      	moveq	r1, r3
 8000456:	4610      	moveq	r0, r2
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea91 0f03 	teq	r1, r3
 800045e:	bf1e      	ittt	ne
 8000460:	2100      	movne	r1, #0
 8000462:	2000      	movne	r0, #0
 8000464:	bd30      	popne	{r4, r5, pc}
 8000466:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046a:	d105      	bne.n	8000478 <__adddf3+0x230>
 800046c:	0040      	lsls	r0, r0, #1
 800046e:	4149      	adcs	r1, r1
 8000470:	bf28      	it	cs
 8000472:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000476:	bd30      	pop	{r4, r5, pc}
 8000478:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800047c:	bf3c      	itt	cc
 800047e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000482:	bd30      	popcc	{r4, r5, pc}
 8000484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000488:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800048c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf1a      	itte	ne
 800049c:	4619      	movne	r1, r3
 800049e:	4610      	movne	r0, r2
 80004a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a4:	bf1c      	itt	ne
 80004a6:	460b      	movne	r3, r1
 80004a8:	4602      	movne	r2, r0
 80004aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ae:	bf06      	itte	eq
 80004b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b4:	ea91 0f03 	teqeq	r1, r3
 80004b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	bf00      	nop

080004c0 <__aeabi_ui2d>:
 80004c0:	f090 0f00 	teq	r0, #0
 80004c4:	bf04      	itt	eq
 80004c6:	2100      	moveq	r1, #0
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d4:	f04f 0500 	mov.w	r5, #0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e750      	b.n	8000380 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_i2d>:
 80004e0:	f090 0f00 	teq	r0, #0
 80004e4:	bf04      	itt	eq
 80004e6:	2100      	moveq	r1, #0
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f8:	bf48      	it	mi
 80004fa:	4240      	negmi	r0, r0
 80004fc:	f04f 0100 	mov.w	r1, #0
 8000500:	e73e      	b.n	8000380 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_f2d>:
 8000504:	0042      	lsls	r2, r0, #1
 8000506:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050a:	ea4f 0131 	mov.w	r1, r1, rrx
 800050e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000512:	bf1f      	itttt	ne
 8000514:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800051c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000520:	4770      	bxne	lr
 8000522:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000526:	bf08      	it	eq
 8000528:	4770      	bxeq	lr
 800052a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052e:	bf04      	itt	eq
 8000530:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 7460 	mov.w	r4, #896	; 0x380
 800053c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000540:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000544:	e71c      	b.n	8000380 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_ul2d>:
 8000548:	ea50 0201 	orrs.w	r2, r0, r1
 800054c:	bf08      	it	eq
 800054e:	4770      	bxeq	lr
 8000550:	b530      	push	{r4, r5, lr}
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	e00a      	b.n	800056e <__aeabi_l2d+0x16>

08000558 <__aeabi_l2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000566:	d502      	bpl.n	800056e <__aeabi_l2d+0x16>
 8000568:	4240      	negs	r0, r0
 800056a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000572:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000576:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057a:	f43f aed8 	beq.w	800032e <__adddf3+0xe6>
 800057e:	f04f 0203 	mov.w	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000596:	f1c2 0320 	rsb	r3, r2, #32
 800059a:	fa00 fc03 	lsl.w	ip, r0, r3
 800059e:	fa20 f002 	lsr.w	r0, r0, r2
 80005a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a6:	ea40 000e 	orr.w	r0, r0, lr
 80005aa:	fa21 f102 	lsr.w	r1, r1, r2
 80005ae:	4414      	add	r4, r2
 80005b0:	e6bd      	b.n	800032e <__adddf3+0xe6>
 80005b2:	bf00      	nop

080005b4 <__aeabi_dmul>:
 80005b4:	b570      	push	{r4, r5, r6, lr}
 80005b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c2:	bf1d      	ittte	ne
 80005c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c8:	ea94 0f0c 	teqne	r4, ip
 80005cc:	ea95 0f0c 	teqne	r5, ip
 80005d0:	f000 f8de 	bleq	8000790 <__aeabi_dmul+0x1dc>
 80005d4:	442c      	add	r4, r5
 80005d6:	ea81 0603 	eor.w	r6, r1, r3
 80005da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e6:	bf18      	it	ne
 80005e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f4:	d038      	beq.n	8000668 <__aeabi_dmul+0xb4>
 80005f6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000602:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000606:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060a:	f04f 0600 	mov.w	r6, #0
 800060e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000612:	f09c 0f00 	teq	ip, #0
 8000616:	bf18      	it	ne
 8000618:	f04e 0e01 	orrne.w	lr, lr, #1
 800061c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000620:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000624:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000628:	d204      	bcs.n	8000634 <__aeabi_dmul+0x80>
 800062a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062e:	416d      	adcs	r5, r5
 8000630:	eb46 0606 	adc.w	r6, r6, r6
 8000634:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000638:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800063c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000640:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000644:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000648:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800064c:	bf88      	it	hi
 800064e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000652:	d81e      	bhi.n	8000692 <__aeabi_dmul+0xde>
 8000654:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065e:	f150 0000 	adcs.w	r0, r0, #0
 8000662:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800066c:	ea46 0101 	orr.w	r1, r6, r1
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	ea81 0103 	eor.w	r1, r1, r3
 8000678:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800067c:	bfc2      	ittt	gt
 800067e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000682:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000686:	bd70      	popgt	{r4, r5, r6, pc}
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f04f 0e00 	mov.w	lr, #0
 8000690:	3c01      	subs	r4, #1
 8000692:	f300 80ab 	bgt.w	80007ec <__aeabi_dmul+0x238>
 8000696:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069a:	bfde      	ittt	le
 800069c:	2000      	movle	r0, #0
 800069e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a2:	bd70      	pople	{r4, r5, r6, pc}
 80006a4:	f1c4 0400 	rsb	r4, r4, #0
 80006a8:	3c20      	subs	r4, #32
 80006aa:	da35      	bge.n	8000718 <__aeabi_dmul+0x164>
 80006ac:	340c      	adds	r4, #12
 80006ae:	dc1b      	bgt.n	80006e8 <__aeabi_dmul+0x134>
 80006b0:	f104 0414 	add.w	r4, r4, #20
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f305 	lsl.w	r3, r0, r5
 80006bc:	fa20 f004 	lsr.w	r0, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	fa21 f604 	lsr.w	r6, r1, r4
 80006d8:	eb42 0106 	adc.w	r1, r2, r6
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f1c4 040c 	rsb	r4, r4, #12
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f304 	lsl.w	r3, r0, r4
 80006f4:	fa20 f005 	lsr.w	r0, r0, r5
 80006f8:	fa01 f204 	lsl.w	r2, r1, r4
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	f141 0100 	adc.w	r1, r1, #0
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f205 	lsl.w	r2, r0, r5
 8000720:	ea4e 0e02 	orr.w	lr, lr, r2
 8000724:	fa20 f304 	lsr.w	r3, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea43 0302 	orr.w	r3, r3, r2
 8000730:	fa21 f004 	lsr.w	r0, r1, r4
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	fa21 f204 	lsr.w	r2, r1, r4
 800073c:	ea20 0002 	bic.w	r0, r0, r2
 8000740:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f094 0f00 	teq	r4, #0
 8000754:	d10f      	bne.n	8000776 <__aeabi_dmul+0x1c2>
 8000756:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075a:	0040      	lsls	r0, r0, #1
 800075c:	eb41 0101 	adc.w	r1, r1, r1
 8000760:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000764:	bf08      	it	eq
 8000766:	3c01      	subeq	r4, #1
 8000768:	d0f7      	beq.n	800075a <__aeabi_dmul+0x1a6>
 800076a:	ea41 0106 	orr.w	r1, r1, r6
 800076e:	f095 0f00 	teq	r5, #0
 8000772:	bf18      	it	ne
 8000774:	4770      	bxne	lr
 8000776:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077a:	0052      	lsls	r2, r2, #1
 800077c:	eb43 0303 	adc.w	r3, r3, r3
 8000780:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000784:	bf08      	it	eq
 8000786:	3d01      	subeq	r5, #1
 8000788:	d0f7      	beq.n	800077a <__aeabi_dmul+0x1c6>
 800078a:	ea43 0306 	orr.w	r3, r3, r6
 800078e:	4770      	bx	lr
 8000790:	ea94 0f0c 	teq	r4, ip
 8000794:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000798:	bf18      	it	ne
 800079a:	ea95 0f0c 	teqne	r5, ip
 800079e:	d00c      	beq.n	80007ba <__aeabi_dmul+0x206>
 80007a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a4:	bf18      	it	ne
 80007a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007aa:	d1d1      	bne.n	8000750 <__aeabi_dmul+0x19c>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007be:	bf06      	itte	eq
 80007c0:	4610      	moveq	r0, r2
 80007c2:	4619      	moveq	r1, r3
 80007c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c8:	d019      	beq.n	80007fe <__aeabi_dmul+0x24a>
 80007ca:	ea94 0f0c 	teq	r4, ip
 80007ce:	d102      	bne.n	80007d6 <__aeabi_dmul+0x222>
 80007d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d4:	d113      	bne.n	80007fe <__aeabi_dmul+0x24a>
 80007d6:	ea95 0f0c 	teq	r5, ip
 80007da:	d105      	bne.n	80007e8 <__aeabi_dmul+0x234>
 80007dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e0:	bf1c      	itt	ne
 80007e2:	4610      	movne	r0, r2
 80007e4:	4619      	movne	r1, r3
 80007e6:	d10a      	bne.n	80007fe <__aeabi_dmul+0x24a>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000802:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000806:	bd70      	pop	{r4, r5, r6, pc}

08000808 <__aeabi_ddiv>:
 8000808:	b570      	push	{r4, r5, r6, lr}
 800080a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000812:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000816:	bf1d      	ittte	ne
 8000818:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800081c:	ea94 0f0c 	teqne	r4, ip
 8000820:	ea95 0f0c 	teqne	r5, ip
 8000824:	f000 f8a7 	bleq	8000976 <__aeabi_ddiv+0x16e>
 8000828:	eba4 0405 	sub.w	r4, r4, r5
 800082c:	ea81 0e03 	eor.w	lr, r1, r3
 8000830:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000834:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000838:	f000 8088 	beq.w	800094c <__aeabi_ddiv+0x144>
 800083c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000840:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000844:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000848:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800084c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000850:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000854:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000858:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800085c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000860:	429d      	cmp	r5, r3
 8000862:	bf08      	it	eq
 8000864:	4296      	cmpeq	r6, r2
 8000866:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086e:	d202      	bcs.n	8000876 <__aeabi_ddiv+0x6e>
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	1ab6      	subs	r6, r6, r2
 8000878:	eb65 0503 	sbc.w	r5, r5, r3
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000886:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 000c 	orrcs.w	r0, r0, ip
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e8:	d018      	beq.n	800091c <__aeabi_ddiv+0x114>
 80008ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000902:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000906:	d1c0      	bne.n	800088a <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	d10b      	bne.n	8000926 <__aeabi_ddiv+0x11e>
 800090e:	ea41 0100 	orr.w	r1, r1, r0
 8000912:	f04f 0000 	mov.w	r0, #0
 8000916:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091a:	e7b6      	b.n	800088a <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	bf04      	itt	eq
 8000922:	4301      	orreq	r1, r0
 8000924:	2000      	moveq	r0, #0
 8000926:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092a:	bf88      	it	hi
 800092c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000930:	f63f aeaf 	bhi.w	8000692 <__aeabi_dmul+0xde>
 8000934:	ebb5 0c03 	subs.w	ip, r5, r3
 8000938:	bf04      	itt	eq
 800093a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000942:	f150 0000 	adcs.w	r0, r0, #0
 8000946:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000950:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000954:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000958:	bfc2      	ittt	gt
 800095a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000962:	bd70      	popgt	{r4, r5, r6, pc}
 8000964:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000968:	f04f 0e00 	mov.w	lr, #0
 800096c:	3c01      	subs	r4, #1
 800096e:	e690      	b.n	8000692 <__aeabi_dmul+0xde>
 8000970:	ea45 0e06 	orr.w	lr, r5, r6
 8000974:	e68d      	b.n	8000692 <__aeabi_dmul+0xde>
 8000976:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097a:	ea94 0f0c 	teq	r4, ip
 800097e:	bf08      	it	eq
 8000980:	ea95 0f0c 	teqeq	r5, ip
 8000984:	f43f af3b 	beq.w	80007fe <__aeabi_dmul+0x24a>
 8000988:	ea94 0f0c 	teq	r4, ip
 800098c:	d10a      	bne.n	80009a4 <__aeabi_ddiv+0x19c>
 800098e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000992:	f47f af34 	bne.w	80007fe <__aeabi_dmul+0x24a>
 8000996:	ea95 0f0c 	teq	r5, ip
 800099a:	f47f af25 	bne.w	80007e8 <__aeabi_dmul+0x234>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e72c      	b.n	80007fe <__aeabi_dmul+0x24a>
 80009a4:	ea95 0f0c 	teq	r5, ip
 80009a8:	d106      	bne.n	80009b8 <__aeabi_ddiv+0x1b0>
 80009aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ae:	f43f aefd 	beq.w	80007ac <__aeabi_dmul+0x1f8>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e722      	b.n	80007fe <__aeabi_dmul+0x24a>
 80009b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c2:	f47f aec5 	bne.w	8000750 <__aeabi_dmul+0x19c>
 80009c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ca:	f47f af0d 	bne.w	80007e8 <__aeabi_dmul+0x234>
 80009ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d2:	f47f aeeb 	bne.w	80007ac <__aeabi_dmul+0x1f8>
 80009d6:	e712      	b.n	80007fe <__aeabi_dmul+0x24a>

080009d8 <__gedf2>:
 80009d8:	f04f 3cff 	mov.w	ip, #4294967295
 80009dc:	e006      	b.n	80009ec <__cmpdf2+0x4>
 80009de:	bf00      	nop

080009e0 <__ledf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	e002      	b.n	80009ec <__cmpdf2+0x4>
 80009e6:	bf00      	nop

080009e8 <__cmpdf2>:
 80009e8:	f04f 0c01 	mov.w	ip, #1
 80009ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	bf18      	it	ne
 80009fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a02:	d01b      	beq.n	8000a3c <__cmpdf2+0x54>
 8000a04:	b001      	add	sp, #4
 8000a06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0a:	bf0c      	ite	eq
 8000a0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a10:	ea91 0f03 	teqne	r1, r3
 8000a14:	bf02      	ittt	eq
 8000a16:	ea90 0f02 	teqeq	r0, r2
 8000a1a:	2000      	moveq	r0, #0
 8000a1c:	4770      	bxeq	lr
 8000a1e:	f110 0f00 	cmn.w	r0, #0
 8000a22:	ea91 0f03 	teq	r1, r3
 8000a26:	bf58      	it	pl
 8000a28:	4299      	cmppl	r1, r3
 8000a2a:	bf08      	it	eq
 8000a2c:	4290      	cmpeq	r0, r2
 8000a2e:	bf2c      	ite	cs
 8000a30:	17d8      	asrcs	r0, r3, #31
 8000a32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a36:	f040 0001 	orr.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__cmpdf2+0x64>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d107      	bne.n	8000a5c <__cmpdf2+0x74>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d1d6      	bne.n	8000a04 <__cmpdf2+0x1c>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d0d3      	beq.n	8000a04 <__cmpdf2+0x1c>
 8000a5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_cdrcmple>:
 8000a64:	4684      	mov	ip, r0
 8000a66:	4610      	mov	r0, r2
 8000a68:	4662      	mov	r2, ip
 8000a6a:	468c      	mov	ip, r1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4663      	mov	r3, ip
 8000a70:	e000      	b.n	8000a74 <__aeabi_cdcmpeq>
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdcmpeq>:
 8000a74:	b501      	push	{r0, lr}
 8000a76:	f7ff ffb7 	bl	80009e8 <__cmpdf2>
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	bf48      	it	mi
 8000a7e:	f110 0f00 	cmnmi.w	r0, #0
 8000a82:	bd01      	pop	{r0, pc}

08000a84 <__aeabi_dcmpeq>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff fff4 	bl	8000a74 <__aeabi_cdcmpeq>
 8000a8c:	bf0c      	ite	eq
 8000a8e:	2001      	moveq	r0, #1
 8000a90:	2000      	movne	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmplt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffea 	bl	8000a74 <__aeabi_cdcmpeq>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmple>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffe0 	bl	8000a74 <__aeabi_cdcmpeq>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpge>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffce 	bl	8000a64 <__aeabi_cdrcmple>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpgt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffc4 	bl	8000a64 <__aeabi_cdrcmple>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_d2iz>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d215      	bcs.n	8000b1e <__aeabi_d2iz+0x36>
 8000af2:	d511      	bpl.n	8000b18 <__aeabi_d2iz+0x30>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d912      	bls.n	8000b24 <__aeabi_d2iz+0x3c>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d105      	bne.n	8000b30 <__aeabi_d2iz+0x48>
 8000b24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	bf08      	it	eq
 8000b2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_d2uiz>:
 8000b38:	004a      	lsls	r2, r1, #1
 8000b3a:	d211      	bcs.n	8000b60 <__aeabi_d2uiz+0x28>
 8000b3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b40:	d211      	bcs.n	8000b66 <__aeabi_d2uiz+0x2e>
 8000b42:	d50d      	bpl.n	8000b60 <__aeabi_d2uiz+0x28>
 8000b44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b4c:	d40e      	bmi.n	8000b6c <__aeabi_d2uiz+0x34>
 8000b4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_d2uiz+0x3a>
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0000 	mov.w	r0, #0
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b972 	b.w	8000f14 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	4688      	mov	r8, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14b      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4615      	mov	r5, r2
 8000c5a:	d967      	bls.n	8000d2c <__udivmoddi4+0xe4>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0720 	rsb	r7, r2, #32
 8000c66:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c6e:	4095      	lsls	r5, r2
 8000c70:	ea47 0803 	orr.w	r8, r7, r3
 8000c74:	4094      	lsls	r4, r2
 8000c76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c7a:	0c23      	lsrs	r3, r4, #16
 8000c7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c80:	fa1f fc85 	uxth.w	ip, r5
 8000c84:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x60>
 8000c94:	18eb      	adds	r3, r5, r3
 8000c96:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c9a:	f080 811b 	bcs.w	8000ed4 <__udivmoddi4+0x28c>
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	f240 8118 	bls.w	8000ed4 <__udivmoddi4+0x28c>
 8000ca4:	3f02      	subs	r7, #2
 8000ca6:	442b      	add	r3, r5
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cbc:	45a4      	cmp	ip, r4
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x8c>
 8000cc0:	192c      	adds	r4, r5, r4
 8000cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc6:	f080 8107 	bcs.w	8000ed8 <__udivmoddi4+0x290>
 8000cca:	45a4      	cmp	ip, r4
 8000ccc:	f240 8104 	bls.w	8000ed8 <__udivmoddi4+0x290>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	442c      	add	r4, r5
 8000cd4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cd8:	eba4 040c 	sub.w	r4, r4, ip
 8000cdc:	2700      	movs	r7, #0
 8000cde:	b11e      	cbz	r6, 8000ce8 <__udivmoddi4+0xa0>
 8000ce0:	40d4      	lsrs	r4, r2
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ce8:	4639      	mov	r1, r7
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0xbe>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80eb 	beq.w	8000ece <__udivmoddi4+0x286>
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cfe:	4638      	mov	r0, r7
 8000d00:	4639      	mov	r1, r7
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f783 	clz	r7, r3
 8000d0a:	2f00      	cmp	r7, #0
 8000d0c:	d147      	bne.n	8000d9e <__udivmoddi4+0x156>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0xd0>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80fa 	bhi.w	8000f0c <__udivmoddi4+0x2c4>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	4698      	mov	r8, r3
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d0e0      	beq.n	8000ce8 <__udivmoddi4+0xa0>
 8000d26:	e9c6 4800 	strd	r4, r8, [r6]
 8000d2a:	e7dd      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000d2c:	b902      	cbnz	r2, 8000d30 <__udivmoddi4+0xe8>
 8000d2e:	deff      	udf	#255	; 0xff
 8000d30:	fab2 f282 	clz	r2, r2
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	f040 808f 	bne.w	8000e58 <__udivmoddi4+0x210>
 8000d3a:	1b49      	subs	r1, r1, r5
 8000d3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d40:	fa1f f885 	uxth.w	r8, r5
 8000d44:	2701      	movs	r7, #1
 8000d46:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d4a:	0c23      	lsrs	r3, r4, #16
 8000d4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb08 f10c 	mul.w	r1, r8, ip
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x124>
 8000d5c:	18eb      	adds	r3, r5, r3
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x122>
 8000d64:	4299      	cmp	r1, r3
 8000d66:	f200 80cd 	bhi.w	8000f04 <__udivmoddi4+0x2bc>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1a59      	subs	r1, r3, r1
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x14c>
 8000d84:	192c      	adds	r4, r5, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x14a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80b6 	bhi.w	8000efe <__udivmoddi4+0x2b6>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e79f      	b.n	8000cde <__udivmoddi4+0x96>
 8000d9e:	f1c7 0c20 	rsb	ip, r7, #32
 8000da2:	40bb      	lsls	r3, r7
 8000da4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000da8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dac:	fa01 f407 	lsl.w	r4, r1, r7
 8000db0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000db4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000db8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dbc:	4325      	orrs	r5, r4
 8000dbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dc2:	0c2c      	lsrs	r4, r5, #16
 8000dc4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dc8:	fa1f fa8e 	uxth.w	sl, lr
 8000dcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dd0:	fb09 f40a 	mul.w	r4, r9, sl
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dda:	fa00 f107 	lsl.w	r1, r0, r7
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b0>
 8000de0:	eb1e 0303 	adds.w	r3, lr, r3
 8000de4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000de8:	f080 8087 	bcs.w	8000efa <__udivmoddi4+0x2b2>
 8000dec:	429c      	cmp	r4, r3
 8000dee:	f240 8084 	bls.w	8000efa <__udivmoddi4+0x2b2>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4473      	add	r3, lr
 8000df8:	1b1b      	subs	r3, r3, r4
 8000dfa:	b2ad      	uxth	r5, r5
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e08:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e0c:	45a2      	cmp	sl, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1da>
 8000e10:	eb1e 0404 	adds.w	r4, lr, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e18:	d26b      	bcs.n	8000ef2 <__udivmoddi4+0x2aa>
 8000e1a:	45a2      	cmp	sl, r4
 8000e1c:	d969      	bls.n	8000ef2 <__udivmoddi4+0x2aa>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4474      	add	r4, lr
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2a:	eba4 040a 	sub.w	r4, r4, sl
 8000e2e:	454c      	cmp	r4, r9
 8000e30:	46c2      	mov	sl, r8
 8000e32:	464b      	mov	r3, r9
 8000e34:	d354      	bcc.n	8000ee0 <__udivmoddi4+0x298>
 8000e36:	d051      	beq.n	8000edc <__udivmoddi4+0x294>
 8000e38:	2e00      	cmp	r6, #0
 8000e3a:	d069      	beq.n	8000f10 <__udivmoddi4+0x2c8>
 8000e3c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e40:	eb64 0403 	sbc.w	r4, r4, r3
 8000e44:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e48:	40fd      	lsrs	r5, r7
 8000e4a:	40fc      	lsrs	r4, r7
 8000e4c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e50:	e9c6 5400 	strd	r5, r4, [r6]
 8000e54:	2700      	movs	r7, #0
 8000e56:	e747      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000e58:	f1c2 0320 	rsb	r3, r2, #32
 8000e5c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e60:	4095      	lsls	r5, r2
 8000e62:	fa01 f002 	lsl.w	r0, r1, r2
 8000e66:	fa21 f303 	lsr.w	r3, r1, r3
 8000e6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e6e:	4338      	orrs	r0, r7
 8000e70:	0c01      	lsrs	r1, r0, #16
 8000e72:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e76:	fa1f f885 	uxth.w	r8, r5
 8000e7a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb07 f308 	mul.w	r3, r7, r8
 8000e86:	428b      	cmp	r3, r1
 8000e88:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8c:	d907      	bls.n	8000e9e <__udivmoddi4+0x256>
 8000e8e:	1869      	adds	r1, r5, r1
 8000e90:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e94:	d22f      	bcs.n	8000ef6 <__udivmoddi4+0x2ae>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d92d      	bls.n	8000ef6 <__udivmoddi4+0x2ae>
 8000e9a:	3f02      	subs	r7, #2
 8000e9c:	4429      	add	r1, r5
 8000e9e:	1acb      	subs	r3, r1, r3
 8000ea0:	b281      	uxth	r1, r0
 8000ea2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ea6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eaa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eae:	fb00 f308 	mul.w	r3, r0, r8
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x27e>
 8000eb6:	1869      	adds	r1, r5, r1
 8000eb8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ebc:	d217      	bcs.n	8000eee <__udivmoddi4+0x2a6>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d915      	bls.n	8000eee <__udivmoddi4+0x2a6>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4429      	add	r1, r5
 8000ec6:	1ac9      	subs	r1, r1, r3
 8000ec8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ecc:	e73b      	b.n	8000d46 <__udivmoddi4+0xfe>
 8000ece:	4637      	mov	r7, r6
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	e709      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000ed4:	4607      	mov	r7, r0
 8000ed6:	e6e7      	b.n	8000ca8 <__udivmoddi4+0x60>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6fb      	b.n	8000cd4 <__udivmoddi4+0x8c>
 8000edc:	4541      	cmp	r1, r8
 8000ede:	d2ab      	bcs.n	8000e38 <__udivmoddi4+0x1f0>
 8000ee0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ee4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ee8:	3801      	subs	r0, #1
 8000eea:	4613      	mov	r3, r2
 8000eec:	e7a4      	b.n	8000e38 <__udivmoddi4+0x1f0>
 8000eee:	4660      	mov	r0, ip
 8000ef0:	e7e9      	b.n	8000ec6 <__udivmoddi4+0x27e>
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	e795      	b.n	8000e22 <__udivmoddi4+0x1da>
 8000ef6:	4667      	mov	r7, ip
 8000ef8:	e7d1      	b.n	8000e9e <__udivmoddi4+0x256>
 8000efa:	4681      	mov	r9, r0
 8000efc:	e77c      	b.n	8000df8 <__udivmoddi4+0x1b0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	442c      	add	r4, r5
 8000f02:	e747      	b.n	8000d94 <__udivmoddi4+0x14c>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	442b      	add	r3, r5
 8000f0a:	e72f      	b.n	8000d6c <__udivmoddi4+0x124>
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	e708      	b.n	8000d22 <__udivmoddi4+0xda>
 8000f10:	4637      	mov	r7, r6
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0xa0>

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <isEmpty>:

extern UART_HandleTypeDef huart1;



int isEmpty(char *pStart) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	     if (',' != *pStart && '*' != *pStart && pStart != NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b2c      	cmp	r3, #44	; 0x2c
 8000f26:	d008      	beq.n	8000f3a <isEmpty+0x22>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8000f2e:	d004      	beq.n	8000f3a <isEmpty+0x22>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <isEmpty+0x22>
	       return 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <isEmpty+0x24>
	     else
	       return 1;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <parseCoord>:



int parseCoord(sGPS_handle_t *hGPS, char *pStart, float *angleDegrees, float *angle, int32_t *angle_fixed, char *dir){
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b093      	sub	sp, #76	; 0x4c
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
 char *p = pStart;
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 if (!isEmpty(p)) {
 8000f5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f5c:	f7ff ffdc 	bl	8000f18 <isEmpty>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f040 80f8 	bne.w	8001158 <parseCoord+0x210>
   // get the number in DDDMM.mmmm format and break into components
   char degreebuff[10] = {0}; // Ensure string is terminated after strncpy
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	811a      	strh	r2, [r3, #8]
   char *e = strchr(p, '.');
 8000f74:	212e      	movs	r1, #46	; 0x2e
 8000f76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f78:	f003 fcb6 	bl	80048e8 <strchr>
 8000f7c:	63b8      	str	r0, [r7, #56]	; 0x38
   if (e == NULL || e - p > 6)
 8000f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d004      	beq.n	8000f8e <parseCoord+0x46>
 8000f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	dd01      	ble.n	8000f92 <parseCoord+0x4a>
     return 0;                // no decimal point in range
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e0e5      	b.n	800115e <parseCoord+0x216>
   strncpy(degreebuff, p, e - p); // get DDDMM
 8000f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 fcae 	bl	8004902 <strncpy>
   long dddmm = atol(degreebuff);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 fc65 	bl	800487a <atol>
 8000fb0:	6378      	str	r0, [r7, #52]	; 0x34
   long degrees = (dddmm / 100);         // truncate the minutes
 8000fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb4:	4a6c      	ldr	r2, [pc, #432]	; (8001168 <parseCoord+0x220>)
 8000fb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fba:	1152      	asrs	r2, r2, #5
 8000fbc:	17db      	asrs	r3, r3, #31
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
   long minutes = dddmm - degrees * 100; // remove the degrees
 8000fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fc4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000fc8:	fb02 f303 	mul.w	r3, r2, r3
 8000fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fce:	4413      	add	r3, r2
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   p = e;                                // start from the decimal point
 8000fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   float decminutes = atof(e); // the fraction after the decimal point
 8000fd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000fd8:	f003 fc4c 	bl	8004874 <atof>
 8000fdc:	ec54 3b10 	vmov	r3, r4, d0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	4621      	mov	r1, r4
 8000fe4:	f7ff fdc8 	bl	8000b78 <__aeabi_d2f>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
   p = strchr(p, ',') + 1;            // go to the next field
 8000fec:	212c      	movs	r1, #44	; 0x2c
 8000fee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ff0:	f003 fc7a 	bl	80048e8 <strchr>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c

   // get the NSEW direction as a character
   char nsew = 'X';
 8000ffa:	2358      	movs	r3, #88	; 0x58
 8000ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   if (!isEmpty(p))
 8001000:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001002:	f7ff ff89 	bl	8000f18 <isEmpty>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d148      	bne.n	800109e <parseCoord+0x156>
     nsew = *p; // field is not empty
 800100c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   else
     return 0; // no direction provided

   // set the various numerical formats to their values
   long fixed = degrees * 10000000 + (minutes * 10000000) / 60 +
 8001014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001016:	4a55      	ldr	r2, [pc, #340]	; (800116c <parseCoord+0x224>)
 8001018:	fb02 f203 	mul.w	r2, r2, r3
 800101c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101e:	4953      	ldr	r1, [pc, #332]	; (800116c <parseCoord+0x224>)
 8001020:	fb01 f303 	mul.w	r3, r1, r3
 8001024:	4952      	ldr	r1, [pc, #328]	; (8001170 <parseCoord+0x228>)
 8001026:	fb81 0103 	smull	r0, r1, r1, r3
 800102a:	4419      	add	r1, r3
 800102c:	1149      	asrs	r1, r1, #5
 800102e:	17db      	asrs	r3, r3, #31
 8001030:	1acb      	subs	r3, r1, r3
 8001032:	4413      	add	r3, r2
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                (decminutes * 10000000) / 60;
 800103c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001040:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8001174 <parseCoord+0x22c>
 8001044:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001048:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 8001178 <parseCoord+0x230>
 800104c:	eec6 7a86 	vdiv.f32	s15, s13, s12
   long fixed = degrees * 10000000 + (minutes * 10000000) / 60 +
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001058:	ee17 3a90 	vmov	r3, s15
 800105c:	647b      	str	r3, [r7, #68]	; 0x44
   float ang = degrees * 100 + minutes + decminutes;
 800105e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001060:	2264      	movs	r2, #100	; 0x64
 8001062:	fb02 f203 	mul.w	r2, r2, r3
 8001066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001068:	4413      	add	r3, r2
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001072:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107a:	edc7 7a08 	vstr	s15, [r7, #32]
   float deg = fixed / (float)10000000.;
 800107e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001088:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001174 <parseCoord+0x22c>
 800108c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001090:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
   if (nsew == 'S' ||
 8001094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001098:	2b53      	cmp	r3, #83	; 0x53
 800109a:	d006      	beq.n	80010aa <parseCoord+0x162>
 800109c:	e001      	b.n	80010a2 <parseCoord+0x15a>
     return 0; // no direction provided
 800109e:	2300      	movs	r3, #0
 80010a0:	e05d      	b.n	800115e <parseCoord+0x216>
   if (nsew == 'S' ||
 80010a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010a6:	2b57      	cmp	r3, #87	; 0x57
 80010a8:	d108      	bne.n	80010bc <parseCoord+0x174>
       nsew == 'W') { // fixed and deg are signed, but DDDMM.mmmm is not
     fixed = -fixed;
 80010aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010ac:	425b      	negs	r3, r3
 80010ae:	647b      	str	r3, [r7, #68]	; 0x44
     deg = -deg;
 80010b0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80010b4:	eef1 7a67 	vneg.f32	s15, s15
 80010b8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
   }

   // reject directions that are not NSEW
   if (nsew != 'N' && nsew != 'S' && nsew != 'E' && nsew != 'W')
 80010bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010c0:	2b4e      	cmp	r3, #78	; 0x4e
 80010c2:	d00d      	beq.n	80010e0 <parseCoord+0x198>
 80010c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010c8:	2b53      	cmp	r3, #83	; 0x53
 80010ca:	d009      	beq.n	80010e0 <parseCoord+0x198>
 80010cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010d0:	2b45      	cmp	r3, #69	; 0x45
 80010d2:	d005      	beq.n	80010e0 <parseCoord+0x198>
 80010d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010d8:	2b57      	cmp	r3, #87	; 0x57
 80010da:	d001      	beq.n	80010e0 <parseCoord+0x198>
     return 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	e03e      	b.n	800115e <parseCoord+0x216>

   // reject angles that are out of range
   if (nsew == 'N' || nsew == 'S')
 80010e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e4:	2b4e      	cmp	r3, #78	; 0x4e
 80010e6:	d003      	beq.n	80010f0 <parseCoord+0x1a8>
 80010e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010ec:	2b53      	cmp	r3, #83	; 0x53
 80010ee:	d10c      	bne.n	800110a <parseCoord+0x1c2>
     if (abs(deg) > 90)
 80010f0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80010f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f8:	ee17 3a90 	vmov	r3, s15
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	bfb8      	it	lt
 8001100:	425b      	neglt	r3, r3
 8001102:	2b5a      	cmp	r3, #90	; 0x5a
 8001104:	dd01      	ble.n	800110a <parseCoord+0x1c2>
       return 0;
 8001106:	2300      	movs	r3, #0
 8001108:	e029      	b.n	800115e <parseCoord+0x216>
   if (abs(deg) > 180)
 800110a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800110e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001112:	ee17 3a90 	vmov	r3, s15
 8001116:	2b00      	cmp	r3, #0
 8001118:	bfb8      	it	lt
 800111a:	425b      	neglt	r3, r3
 800111c:	2bb4      	cmp	r3, #180	; 0xb4
 800111e:	dd01      	ble.n	8001124 <parseCoord+0x1dc>
     return 0;
 8001120:	2300      	movs	r3, #0
 8001122:	e01c      	b.n	800115e <parseCoord+0x216>

   // store in locations passed as args
   if (angle != NULL)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <parseCoord+0x1e8>
     *angle = ang;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	6a3a      	ldr	r2, [r7, #32]
 800112e:	601a      	str	r2, [r3, #0]
   if (angle_fixed != NULL)
 8001130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <parseCoord+0x1f4>
     *angle_fixed = fixed;
 8001136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001138:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800113a:	601a      	str	r2, [r3, #0]
   if (angleDegrees != NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <parseCoord+0x200>
     *angleDegrees = deg;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001146:	601a      	str	r2, [r3, #0]
   if (dir != NULL)
 8001148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <parseCoord+0x214>
     *dir = nsew;
 800114e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001150:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	e001      	b.n	800115c <parseCoord+0x214>
 } else
   return 0; // no number
 8001158:	2300      	movs	r3, #0
 800115a:	e000      	b.n	800115e <parseCoord+0x216>
 return 1;
 800115c:	2301      	movs	r3, #1
}
 800115e:	4618      	mov	r0, r3
 8001160:	374c      	adds	r7, #76	; 0x4c
 8001162:	46bd      	mov	sp, r7
 8001164:	bd90      	pop	{r4, r7, pc}
 8001166:	bf00      	nop
 8001168:	51eb851f 	.word	0x51eb851f
 800116c:	00989680 	.word	0x00989680
 8001170:	88888889 	.word	0x88888889
 8001174:	4b189680 	.word	0x4b189680
 8001178:	42700000 	.word	0x42700000

0800117c <parseGPS>:

int parseGPS(sGPS_handle_t *hGPS){
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]

	  char *p = hGPS->gpsBuffer; // Pointer to move through the sentence -- good parsers are
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3303      	adds	r3, #3
 8001188:	60fb      	str	r3, [r7, #12]
	                  // non-destructive
	  p+=3;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3303      	adds	r3, #3
 800118e:	60fb      	str	r3, [r7, #12]

	  strncpy(hGPS->thisSentence, p, 3);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3367      	adds	r3, #103	; 0x67
 8001194:	2203      	movs	r2, #3
 8001196:	68f9      	ldr	r1, [r7, #12]
 8001198:	4618      	mov	r0, r3
 800119a:	f003 fbb2 	bl	8004902 <strncpy>
	  p = strchr(p, ',') + 1; // Skip to char after the next comma, then check.
 800119e:	212c      	movs	r1, #44	; 0x2c
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f003 fba1 	bl	80048e8 <strchr>
 80011a6:	4603      	mov	r3, r0
 80011a8:	3301      	adds	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]

	  // This may look inefficient, but an M0 will get down the list in about 1 us /
	  // strcmp()! Put the GPS sentences from Adafruit_GPS at the top to make
	  // pruning excess code easier. Otherwise, keep them alphabetical for ease of
	  // reading.
	  if (!strcmp(hGPS->thisSentence, "GGA")) { //************************************GGA
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3367      	adds	r3, #103	; 0x67
 80011b0:	4923      	ldr	r1, [pc, #140]	; (8001240 <parseGPS+0xc4>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f830 	bl	8000218 <strcmp>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d13a      	bne.n	8001234 <parseGPS+0xb8>
	    // Adafruit from Actisense NGW-1 from SH CP150C

	    p = strchr(p, ',') + 1; // parse time with specialized function
 80011be:	212c      	movs	r1, #44	; 0x2c
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f003 fb91 	bl	80048e8 <strchr>
 80011c6:	4603      	mov	r3, r0
 80011c8:	3301      	adds	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
	    // parse out both latitude and direction, then go to next field, or fail
	    parseCoord(hGPS, p, &hGPS->latitudeDegrees, &hGPS->latitude, &hGPS->latitude_fixed, &hGPS->lat);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3374      	adds	r3, #116	; 0x74
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	32a4      	adds	r2, #164	; 0xa4
 80011e0:	9201      	str	r2, [sp, #4]
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	4603      	mov	r3, r0
 80011e6:	460a      	mov	r2, r1
 80011e8:	68f9      	ldr	r1, [r7, #12]
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff feac 	bl	8000f48 <parseCoord>

	    p = strchr(p, ',') + 1;
 80011f0:	212c      	movs	r1, #44	; 0x2c
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f003 fb78 	bl	80048e8 <strchr>
 80011f8:	4603      	mov	r3, r0
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
	    p = strchr(p, ',') + 1;
 80011fe:	212c      	movs	r1, #44	; 0x2c
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f003 fb71 	bl	80048e8 <strchr>
 8001206:	4603      	mov	r3, r0
 8001208:	3301      	adds	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
	    // parse out both longitude and direction, then go to next field, or fail
	    parseCoord(hGPS, p, &hGPS->longitudeDegrees, &hGPS->longitude, &hGPS->longitude_fixed, &hGPS->lon);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3378      	adds	r3, #120	; 0x78
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	32a5      	adds	r2, #165	; 0xa5
 8001220:	9201      	str	r2, [sp, #4]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	4603      	mov	r3, r0
 8001226:	460a      	mov	r2, r1
 8001228:	68f9      	ldr	r1, [r7, #12]
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fe8c 	bl	8000f48 <parseCoord>

	    else {
	      return 0; // didn't find the required sentence definition
	    }

	    return 1;
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <parseGPS+0xba>
	      return 0; // didn't find the required sentence definition
 8001234:	2300      	movs	r3, #0

}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	08006688 	.word	0x08006688

08001244 <Telemetry_send_data>:
#include "stdio.h"


extern UART_HandleTypeDef huart2;

void Telemetry_send_data(sGPS_handle_t *hGPS){
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	uint8_t data_byte[12];
	float data_float[2];
	data_float[0] = hGPS->longitude;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001250:	60bb      	str	r3, [r7, #8]
	data_float[1] = hGPS->latitude;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001256:	60fb      	str	r3, [r7, #12]


	int i = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
	while(i<2){
 800125c:	e015      	b.n	800128a <Telemetry_send_data+0x46>
		float_to_uint8(data_float[i], &data_byte[(i*4)+2]);
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	f107 0220 	add.w	r2, r7, #32
 8001266:	4413      	add	r3, r2
 8001268:	3b18      	subs	r3, #24
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	f107 0210 	add.w	r2, r7, #16
 8001278:	4413      	add	r3, r2
 800127a:	4618      	mov	r0, r3
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	f000 f81c 	bl	80012bc <float_to_uint8>
		i++;
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	3301      	adds	r3, #1
 8001288:	61fb      	str	r3, [r7, #28]
	while(i<2){
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	2b01      	cmp	r3, #1
 800128e:	dde6      	ble.n	800125e <Telemetry_send_data+0x1a>
	}

	data_byte[0] = 36;
 8001290:	2324      	movs	r3, #36	; 0x24
 8001292:	743b      	strb	r3, [r7, #16]
	data_byte[1] = 36;
 8001294:	2324      	movs	r3, #36	; 0x24
 8001296:	747b      	strb	r3, [r7, #17]
	data_byte[10] = 10;
 8001298:	230a      	movs	r3, #10
 800129a:	76bb      	strb	r3, [r7, #26]
	data_byte[11] = 10;
 800129c:	230a      	movs	r3, #10
 800129e:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit(&huart2, data_byte, 12, 1000);
 80012a0:	f107 0110 	add.w	r1, r7, #16
 80012a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a8:	220c      	movs	r2, #12
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <Telemetry_send_data+0x74>)
 80012ac:	f002 f9e4 	bl	8003678 <HAL_UART_Transmit>

}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200003a4 	.word	0x200003a4

080012bc <float_to_uint8>:


void float_to_uint8(float dataIn, uint8_t *adress){
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80012c6:	6038      	str	r0, [r7, #0]
			unsigned int sign : 1;
		} raw;
		float f;
	}number;

	number.f = dataIn;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	60fb      	str	r3, [r7, #12]
	*(adress+3) = (number.raw.mantissa) | 0x00;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f3c3 0216 	ubfx	r2, r3, #0, #23
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	3303      	adds	r3, #3
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]
	*(adress+2) = (number.raw.mantissa >> 8) | 0x00;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80012e0:	121a      	asrs	r2, r3, #8
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	3302      	adds	r3, #2
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]
	*(adress+1) = (number.raw.mantissa >> 16) | (number.raw.exponent << 7);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80012f0:	141b      	asrs	r3, r3, #16
 80012f2:	b25a      	sxtb	r2, r3
 80012f4:	89fb      	ldrh	r3, [r7, #14]
 80012f6:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	01db      	lsls	r3, r3, #7
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b25a      	sxtb	r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	701a      	strb	r2, [r3, #0]
	*(adress+0) = (number.raw.exponent >> 1) | (number.raw.sign << 7);
 800130c:	89fb      	ldrh	r3, [r7, #14]
 800130e:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8001312:	b2db      	uxtb	r3, r3
 8001314:	085b      	lsrs	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	b25a      	sxtb	r2, r3
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	01db      	lsls	r3, r3, #7
 8001324:	b25b      	sxtb	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b25b      	sxtb	r3, r3
 800132a:	b2da      	uxtb	r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	701a      	strb	r2, [r3, #0]
};
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int data_index = 0;
uint8_t package_find = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	  if(huart->Instance == USART1){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <HAL_UART_RxCpltCallback+0x80>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d132      	bne.n	80013b4 <HAL_UART_RxCpltCallback+0x78>
			if(hGPS.checkBuffer == 36){
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_UART_RxCpltCallback+0x84>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b24      	cmp	r3, #36	; 0x24
 8001354:	d102      	bne.n	800135c <HAL_UART_RxCpltCallback+0x20>
				package_find = 1;
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_UART_RxCpltCallback+0x88>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
			}

		 if(hGPS.checkBuffer != 10 && package_find == 1){
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_UART_RxCpltCallback+0x84>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b0a      	cmp	r3, #10
 8001362:	d011      	beq.n	8001388 <HAL_UART_RxCpltCallback+0x4c>
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_UART_RxCpltCallback+0x88>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d10d      	bne.n	8001388 <HAL_UART_RxCpltCallback+0x4c>
			 hGPS.gpsBuffer[data_index] = hGPS.checkBuffer;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_UART_RxCpltCallback+0x8c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <HAL_UART_RxCpltCallback+0x84>)
 8001372:	7811      	ldrb	r1, [r2, #0]
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <HAL_UART_RxCpltCallback+0x84>)
 8001376:	4413      	add	r3, r2
 8001378:	460a      	mov	r2, r1
 800137a:	70da      	strb	r2, [r3, #3]
			 data_index++;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_UART_RxCpltCallback+0x8c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_UART_RxCpltCallback+0x8c>)
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e010      	b.n	80013aa <HAL_UART_RxCpltCallback+0x6e>
		 }else{
			 hGPS.gpsBuffer[data_index] = hGPS.checkBuffer;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_UART_RxCpltCallback+0x8c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <HAL_UART_RxCpltCallback+0x84>)
 800138e:	7811      	ldrb	r1, [r2, #0]
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_UART_RxCpltCallback+0x84>)
 8001392:	4413      	add	r3, r2
 8001394:	460a      	mov	r2, r1
 8001396:	70da      	strb	r2, [r3, #3]
			parseGPS(&hGPS);
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <HAL_UART_RxCpltCallback+0x84>)
 800139a:	f7ff feef 	bl	800117c <parseGPS>

			data_index = 0;
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_UART_RxCpltCallback+0x8c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
			package_find = 0;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <HAL_UART_RxCpltCallback+0x88>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
		 }

		 HAL_UART_Receive_DMA(&huart1,&hGPS.checkBuffer,1);
 80013aa:	2201      	movs	r2, #1
 80013ac:	4904      	ldr	r1, [pc, #16]	; (80013c0 <HAL_UART_RxCpltCallback+0x84>)
 80013ae:	4807      	ldr	r0, [pc, #28]	; (80013cc <HAL_UART_RxCpltCallback+0x90>)
 80013b0:	f002 f9f8 	bl	80037a4 <HAL_UART_Receive_DMA>
		}

}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40013800 	.word	0x40013800
 80013c0:	2000020c 	.word	0x2000020c
 80013c4:	200001fc 	.word	0x200001fc
 80013c8:	200001f8 	.word	0x200001f8
 80013cc:	20000318 	.word	0x20000318

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d4:	f000 fb11 	bl	80019fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d8:	f000 f81a 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013dc:	f000 f940 	bl	8001660 <MX_GPIO_Init>
  MX_DMA_Init();
 80013e0:	f000 f914 	bl	800160c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80013e4:	f000 f87a 	bl	80014dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80013e8:	f000 f8c4 	bl	8001574 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	 HAL_UART_Receive_DMA(&huart1,&hGPS.checkBuffer,1);
 80013ec:	2201      	movs	r2, #1
 80013ee:	4906      	ldr	r1, [pc, #24]	; (8001408 <main+0x38>)
 80013f0:	4806      	ldr	r0, [pc, #24]	; (800140c <main+0x3c>)
 80013f2:	f002 f9d7 	bl	80037a4 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
Telemetry_send_data(&hGPS);
 80013f6:	4804      	ldr	r0, [pc, #16]	; (8001408 <main+0x38>)
 80013f8:	f7ff ff24 	bl	8001244 <Telemetry_send_data>
HAL_Delay(3000);
 80013fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001400:	f000 fb6c 	bl	8001adc <HAL_Delay>
Telemetry_send_data(&hGPS);
 8001404:	e7f7      	b.n	80013f6 <main+0x26>
 8001406:	bf00      	nop
 8001408:	2000020c 	.word	0x2000020c
 800140c:	20000318 	.word	0x20000318

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b0a4      	sub	sp, #144	; 0x90
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800141a:	2238      	movs	r2, #56	; 0x38
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fa5a 	bl	80048d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001434:	463b      	mov	r3, r7
 8001436:	2244      	movs	r2, #68	; 0x44
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fa4c 	bl	80048d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001440:	2000      	movs	r0, #0
 8001442:	f001 f8f1 	bl	8002628 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001446:	2302      	movs	r3, #2
 8001448:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001450:	2340      	movs	r3, #64	; 0x40
 8001452:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001454:	2302      	movs	r3, #2
 8001456:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001458:	2302      	movs	r3, #2
 800145a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800145c:	2304      	movs	r3, #4
 800145e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001460:	2355      	movs	r3, #85	; 0x55
 8001462:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800146c:	2302      	movs	r3, #2
 800146e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001472:	2302      	movs	r3, #2
 8001474:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800147c:	4618      	mov	r0, r3
 800147e:	f001 f987 	bl	8002790 <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001488:	f000 f92a 	bl	80016e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2303      	movs	r3, #3
 8001492:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014a4:	2104      	movs	r1, #4
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fc8a 	bl	8002dc0 <HAL_RCC_ClockConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014b2:	f000 f915 	bl	80016e0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80014b6:	2303      	movs	r3, #3
 80014b8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 fe97 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014d0:	f000 f906 	bl	80016e0 <Error_Handler>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3790      	adds	r7, #144	; 0x90
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <MX_USART1_UART_Init+0x90>)
 80014e2:	4a23      	ldr	r2, [pc, #140]	; (8001570 <MX_USART1_UART_Init+0x94>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <MX_USART1_UART_Init+0x90>)
 80014e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <MX_USART1_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_USART1_UART_Init+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_USART1_UART_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_USART1_UART_Init+0x90>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_USART1_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_USART1_UART_Init+0x90>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_USART1_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_USART1_UART_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_USART1_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001524:	4811      	ldr	r0, [pc, #68]	; (800156c <MX_USART1_UART_Init+0x90>)
 8001526:	f002 f857 	bl	80035d8 <HAL_UART_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001530:	f000 f8d6 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001534:	2100      	movs	r1, #0
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_USART1_UART_Init+0x90>)
 8001538:	f003 f8b7 	bl	80046aa <HAL_UARTEx_SetTxFifoThreshold>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001542:	f000 f8cd 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001546:	2100      	movs	r1, #0
 8001548:	4808      	ldr	r0, [pc, #32]	; (800156c <MX_USART1_UART_Init+0x90>)
 800154a:	f003 f8ec 	bl	8004726 <HAL_UARTEx_SetRxFifoThreshold>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001554:	f000 f8c4 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_USART1_UART_Init+0x90>)
 800155a:	f003 f86d 	bl	8004638 <HAL_UARTEx_DisableFifoMode>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001564:	f000 f8bc 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000318 	.word	0x20000318
 8001570:	40013800 	.word	0x40013800

08001574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <MX_USART2_UART_Init+0x90>)
 800157a:	4a23      	ldr	r2, [pc, #140]	; (8001608 <MX_USART2_UART_Init+0x94>)
 800157c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <MX_USART2_UART_Init+0x90>)
 8001580:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <MX_USART2_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_USART2_UART_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MX_USART2_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_USART2_UART_Init+0x90>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_USART2_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <MX_USART2_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_USART2_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_USART2_UART_Init+0x90>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_USART2_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <MX_USART2_UART_Init+0x90>)
 80015be:	f002 f80b 	bl	80035d8 <HAL_UART_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015c8:	f000 f88a 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015cc:	2100      	movs	r1, #0
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_USART2_UART_Init+0x90>)
 80015d0:	f003 f86b 	bl	80046aa <HAL_UARTEx_SetTxFifoThreshold>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015da:	f000 f881 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015de:	2100      	movs	r1, #0
 80015e0:	4808      	ldr	r0, [pc, #32]	; (8001604 <MX_USART2_UART_Init+0x90>)
 80015e2:	f003 f8a0 	bl	8004726 <HAL_UARTEx_SetRxFifoThreshold>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015ec:	f000 f878 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_USART2_UART_Init+0x90>)
 80015f2:	f003 f821 	bl	8004638 <HAL_UARTEx_DisableFifoMode>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015fc:	f000 f870 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200003a4 	.word	0x200003a4
 8001608:	40004400 	.word	0x40004400

0800160c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_DMA_Init+0x50>)
 8001614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001616:	4a11      	ldr	r2, [pc, #68]	; (800165c <MX_DMA_Init+0x50>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6493      	str	r3, [r2, #72]	; 0x48
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_DMA_Init+0x50>)
 8001620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_DMA_Init+0x50>)
 800162c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <MX_DMA_Init+0x50>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6493      	str	r3, [r2, #72]	; 0x48
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_DMA_Init+0x50>)
 8001638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	200b      	movs	r0, #11
 8001648:	f000 fb45 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800164c:	200b      	movs	r0, #11
 800164e:	f000 fb5c 	bl	8001d0a <HAL_NVIC_EnableIRQ>

}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <MX_GPIO_Init+0x78>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <MX_GPIO_Init+0x78>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <MX_GPIO_Init+0x78>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <MX_GPIO_Init+0x78>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <MX_GPIO_Init+0x78>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_GPIO_Init+0x78>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ac:	480b      	ldr	r0, [pc, #44]	; (80016dc <MX_GPIO_Init+0x7c>)
 80016ae:	f000 ffa3 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	4619      	mov	r1, r3
 80016ca:	4804      	ldr	r0, [pc, #16]	; (80016dc <MX_GPIO_Init+0x7c>)
 80016cc:	f000 fe12 	bl	80022f4 <HAL_GPIO_Init>

}
 80016d0:	bf00      	nop
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000
 80016dc:	48000400 	.word	0x48000400

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_MspInit+0x44>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <HAL_MspInit+0x44>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6613      	str	r3, [r2, #96]	; 0x60
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_MspInit+0x44>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_MspInit+0x44>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <HAL_MspInit+0x44>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6593      	str	r3, [r2, #88]	; 0x58
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_MspInit+0x44>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001726:	f001 f823 	bl	8002770 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08c      	sub	sp, #48	; 0x30
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a48      	ldr	r2, [pc, #288]	; (8001878 <HAL_UART_MspInit+0x140>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d15b      	bne.n	8001812 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800175a:	4b48      	ldr	r3, [pc, #288]	; (800187c <HAL_UART_MspInit+0x144>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	4a47      	ldr	r2, [pc, #284]	; (800187c <HAL_UART_MspInit+0x144>)
 8001760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001764:	6613      	str	r3, [r2, #96]	; 0x60
 8001766:	4b45      	ldr	r3, [pc, #276]	; (800187c <HAL_UART_MspInit+0x144>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176e:	61bb      	str	r3, [r7, #24]
 8001770:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b42      	ldr	r3, [pc, #264]	; (800187c <HAL_UART_MspInit+0x144>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4a41      	ldr	r2, [pc, #260]	; (800187c <HAL_UART_MspInit+0x144>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_UART_MspInit+0x144>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800178a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800179c:	2307      	movs	r3, #7
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f000 fda3 	bl	80022f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80017ae:	4b34      	ldr	r3, [pc, #208]	; (8001880 <HAL_UART_MspInit+0x148>)
 80017b0:	4a34      	ldr	r2, [pc, #208]	; (8001884 <HAL_UART_MspInit+0x14c>)
 80017b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80017b4:	4b32      	ldr	r3, [pc, #200]	; (8001880 <HAL_UART_MspInit+0x148>)
 80017b6:	2218      	movs	r2, #24
 80017b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ba:	4b31      	ldr	r3, [pc, #196]	; (8001880 <HAL_UART_MspInit+0x148>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c0:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <HAL_UART_MspInit+0x148>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017c6:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <HAL_UART_MspInit+0x148>)
 80017c8:	2280      	movs	r2, #128	; 0x80
 80017ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017cc:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <HAL_UART_MspInit+0x148>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d2:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_UART_MspInit+0x148>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <HAL_UART_MspInit+0x148>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <HAL_UART_MspInit+0x148>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017e4:	4826      	ldr	r0, [pc, #152]	; (8001880 <HAL_UART_MspInit+0x148>)
 80017e6:	f000 faab 	bl	8001d40 <HAL_DMA_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 80017f0:	f7ff ff76 	bl	80016e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a22      	ldr	r2, [pc, #136]	; (8001880 <HAL_UART_MspInit+0x148>)
 80017f8:	679a      	str	r2, [r3, #120]	; 0x78
 80017fa:	4a21      	ldr	r2, [pc, #132]	; (8001880 <HAL_UART_MspInit+0x148>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	2025      	movs	r0, #37	; 0x25
 8001806:	f000 fa66 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800180a:	2025      	movs	r0, #37	; 0x25
 800180c:	f000 fa7d 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001810:	e02d      	b.n	800186e <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <HAL_UART_MspInit+0x150>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d128      	bne.n	800186e <HAL_UART_MspInit+0x136>
    __HAL_RCC_USART2_CLK_ENABLE();
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_UART_MspInit+0x144>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	4a16      	ldr	r2, [pc, #88]	; (800187c <HAL_UART_MspInit+0x144>)
 8001822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001826:	6593      	str	r3, [r2, #88]	; 0x58
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_UART_MspInit+0x144>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_UART_MspInit+0x144>)
 8001836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001838:	4a10      	ldr	r2, [pc, #64]	; (800187c <HAL_UART_MspInit+0x144>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_UART_MspInit+0x144>)
 8001842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800184c:	230c      	movs	r3, #12
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800185c:	2307      	movs	r3, #7
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186a:	f000 fd43 	bl	80022f4 <HAL_GPIO_Init>
}
 800186e:	bf00      	nop
 8001870:	3730      	adds	r7, #48	; 0x30
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40013800 	.word	0x40013800
 800187c:	40021000 	.word	0x40021000
 8001880:	200002b8 	.word	0x200002b8
 8001884:	40020008 	.word	0x40020008
 8001888:	40004400 	.word	0x40004400

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <HardFault_Handler+0x4>

080018a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <MemManage_Handler+0x4>

080018a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <BusFault_Handler+0x4>

080018ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <UsageFault_Handler+0x4>

080018b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e0:	f000 f8de 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <DMA1_Channel1_IRQHandler+0x10>)
 80018ee:	f000 fbb1 	bl	8002054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200002b8 	.word	0x200002b8

080018fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <USART1_IRQHandler+0x10>)
 8001902:	f001 ffd7 	bl	80038b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000318 	.word	0x20000318

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f002 ffa0 	bl	8004884 <__errno>
 8001944:	4602      	mov	r2, r0
 8001946:	230c      	movs	r3, #12
 8001948:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20008000 	.word	0x20008000
 8001970:	00000400 	.word	0x00000400
 8001974:	20000200 	.word	0x20000200
 8001978:	20000438 	.word	0x20000438

0800197c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <SystemInit+0x28>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <SystemInit+0x28>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <SystemInit+0x28>)
 8001992:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001996:	609a      	str	r2, [r3, #8]
#endif
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a8:	480d      	ldr	r0, [pc, #52]	; (80019e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ac:	480d      	ldr	r0, [pc, #52]	; (80019e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ae:	490e      	ldr	r1, [pc, #56]	; (80019e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b0:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <LoopForever+0xe>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c4:	4c0b      	ldr	r4, [pc, #44]	; (80019f4 <LoopForever+0x16>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019d2:	f7ff ffd3 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d6:	f002 ff5b 	bl	8004890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019da:	f7ff fcf9 	bl	80013d0 <main>

080019de <LoopForever>:

LoopForever:
    b LoopForever
 80019de:	e7fe      	b.n	80019de <LoopForever>
  ldr   r0, =_estack
 80019e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80019ec:	08006948 	.word	0x08006948
  ldr r2, =_sbss
 80019f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80019f4:	20000438 	.word	0x20000438

080019f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC1_2_IRQHandler>

080019fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f95b 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f000 f80e 	bl	8001a2c <HAL_InitTick>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	e001      	b.n	8001a20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a1c:	f7ff fe68 	bl	80016f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a20:	79fb      	ldrb	r3, [r7, #7]

}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_InitTick+0x68>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d022      	beq.n	8001a86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_InitTick+0x6c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_InitTick+0x68>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f966 	bl	8001d26 <HAL_SYSTICK_Config>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10f      	bne.n	8001a80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b0f      	cmp	r3, #15
 8001a64:	d809      	bhi.n	8001a7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a66:	2200      	movs	r2, #0
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6e:	f000 f932 	bl	8001cd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_InitTick+0x70>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e007      	b.n	8001a8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	e004      	b.n	8001a8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e001      	b.n	8001a8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_IncTick+0x1c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_IncTick+0x20>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_IncTick+0x1c>)
 8001ab0:	6013      	str	r3, [r2, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	20000430 	.word	0x20000430
 8001ac0:	20000008 	.word	0x20000008

08001ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_GetTick+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000430 	.word	0x20000430

08001adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff ffee 	bl	8001ac4 <HAL_GetTick>
 8001ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d004      	beq.n	8001b00 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_Delay+0x40>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4413      	add	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b00:	bf00      	nop
 8001b02:	f7ff ffdf 	bl	8001ac4 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d8f7      	bhi.n	8001b02 <HAL_Delay+0x26>
  {
  }
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000008 	.word	0x20000008

08001b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b52:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	60d3      	str	r3, [r2, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <__NVIC_GetPriorityGrouping+0x18>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	f003 0307 	and.w	r3, r3, #7
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	db0b      	blt.n	8001bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	f003 021f 	and.w	r2, r3, #31
 8001b9c:	4907      	ldr	r1, [pc, #28]	; (8001bbc <__NVIC_EnableIRQ+0x38>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	095b      	lsrs	r3, r3, #5
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8001baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000e100 	.word	0xe000e100

08001bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db0a      	blt.n	8001bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	490c      	ldr	r1, [pc, #48]	; (8001c0c <__NVIC_SetPriority+0x4c>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	440b      	add	r3, r1
 8001be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be8:	e00a      	b.n	8001c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4908      	ldr	r1, [pc, #32]	; (8001c10 <__NVIC_SetPriority+0x50>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	761a      	strb	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000e100 	.word	0xe000e100
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f1c3 0307 	rsb	r3, r3, #7
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	bf28      	it	cs
 8001c32:	2304      	movcs	r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d902      	bls.n	8001c44 <NVIC_EncodePriority+0x30>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b03      	subs	r3, #3
 8001c42:	e000      	b.n	8001c46 <NVIC_EncodePriority+0x32>
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	4313      	orrs	r3, r2
         );
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <SysTick_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f7ff ff8e 	bl	8001bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <SysTick_Config+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <SysTick_Config+0x40>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff29 	bl	8001b20 <__NVIC_SetPriorityGrouping>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff40 	bl	8001b68 <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff90 	bl	8001c14 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5f 	bl	8001bc0 <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff33 	bl	8001b84 <__NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffa4 	bl	8001c7c <SysTick_Config>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e08d      	b.n	8001e6e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <HAL_DMA_Init+0x138>)
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d80f      	bhi.n	8001d7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b45      	ldr	r3, [pc, #276]	; (8001e7c <HAL_DMA_Init+0x13c>)
 8001d66:	4413      	add	r3, r2
 8001d68:	4a45      	ldr	r2, [pc, #276]	; (8001e80 <HAL_DMA_Init+0x140>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	009a      	lsls	r2, r3, #2
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a42      	ldr	r2, [pc, #264]	; (8001e84 <HAL_DMA_Init+0x144>)
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d7c:	e00e      	b.n	8001d9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <HAL_DMA_Init+0x148>)
 8001d86:	4413      	add	r3, r2
 8001d88:	4a3d      	ldr	r2, [pc, #244]	; (8001e80 <HAL_DMA_Init+0x140>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	009a      	lsls	r2, r3, #2
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a3c      	ldr	r2, [pc, #240]	; (8001e8c <HAL_DMA_Init+0x14c>)
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001db6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fa1e 	bl	8002230 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dfc:	d102      	bne.n	8001e04 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e18:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d010      	beq.n	8001e44 <HAL_DMA_Init+0x104>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d80c      	bhi.n	8001e44 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fa3e 	bl	80022ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	e008      	b.n	8001e56 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40020407 	.word	0x40020407
 8001e7c:	bffdfff8 	.word	0xbffdfff8
 8001e80:	cccccccd 	.word	0xcccccccd
 8001e84:	40020000 	.word	0x40020000
 8001e88:	bffdfbf8 	.word	0xbffdfbf8
 8001e8c:	40020400 	.word	0x40020400

08001e90 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_DMA_Start_IT+0x20>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e066      	b.n	8001f7e <HAL_DMA_Start_IT+0xee>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d155      	bne.n	8001f70 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0201 	bic.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f962 	bl	80021b2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 020e 	orr.w	r2, r2, #14
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e00f      	b.n	8001f28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0204 	bic.w	r2, r2, #4
 8001f16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 020a 	orr.w	r2, r2, #10
 8001f26:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f44:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f5c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e005      	b.n	8001f7c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d00d      	beq.n	8001fba <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e047      	b.n	800204a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 020e 	bic.w	r2, r2, #14
 8001fc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fe8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f003 021f 	and.w	r2, r3, #31
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002006:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00c      	beq.n	800202a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800201e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002028:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
    }
  }
  return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2204      	movs	r2, #4
 8002076:	409a      	lsls	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d026      	beq.n	80020ce <HAL_DMA_IRQHandler+0x7a>
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d021      	beq.n	80020ce <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d107      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0204 	bic.w	r2, r2, #4
 80020a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	2104      	movs	r1, #4
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d071      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020cc:	e06c      	b.n	80021a8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2202      	movs	r2, #2
 80020d8:	409a      	lsls	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d02e      	beq.n	8002140 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d029      	beq.n	8002140 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10b      	bne.n	8002112 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 020a 	bic.w	r2, r2, #10
 8002108:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f003 021f 	and.w	r2, r3, #31
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	2102      	movs	r1, #2
 8002120:	fa01 f202 	lsl.w	r2, r1, r2
 8002124:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	2b00      	cmp	r3, #0
 8002134:	d038      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800213e:	e033      	b.n	80021a8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	2208      	movs	r2, #8
 800214a:	409a      	lsls	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d02a      	beq.n	80021aa <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d025      	beq.n	80021aa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 020e 	bic.w	r2, r2, #14
 800216c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f003 021f 	and.w	r2, r3, #31
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
}
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021c8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021da:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	2101      	movs	r1, #1
 80021ea:	fa01 f202 	lsl.w	r2, r1, r2
 80021ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d108      	bne.n	8002212 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002210:	e007      	b.n	8002222 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	60da      	str	r2, [r3, #12]
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002240:	429a      	cmp	r2, r3
 8002242:	d802      	bhi.n	800224a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	e001      	b.n	800224e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800224c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	3b08      	subs	r3, #8
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	009a      	lsls	r2, r3, #2
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	461a      	mov	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800227a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2201      	movs	r2, #1
 8002284:	409a      	lsls	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	651a      	str	r2, [r3, #80]	; 0x50
}
 800228a:	bf00      	nop
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40020407 	.word	0x40020407
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020820 	.word	0x40020820
 80022a4:	cccccccd 	.word	0xcccccccd
 80022a8:	40020880 	.word	0x40020880

080022ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	461a      	mov	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a08      	ldr	r2, [pc, #32]	; (80022f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022ce:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	2201      	movs	r2, #1
 80022da:	409a      	lsls	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	1000823f 	.word	0x1000823f
 80022f0:	40020940 	.word	0x40020940

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002302:	e15a      	b.n	80025ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 814c 	beq.w	80025b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d00b      	beq.n	800233c <HAL_GPIO_Init+0x48>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d007      	beq.n	800233c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002330:	2b11      	cmp	r3, #17
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b12      	cmp	r3, #18
 800233a:	d130      	bne.n	800239e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002372:	2201      	movs	r2, #1
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	f003 0201 	and.w	r2, r3, #1
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0xea>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b12      	cmp	r3, #18
 80023dc:	d123      	bne.n	8002426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	08da      	lsrs	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3208      	adds	r2, #8
 80023e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	220f      	movs	r2, #15
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	08da      	lsrs	r2, r3, #3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3208      	adds	r2, #8
 8002420:	6939      	ldr	r1, [r7, #16]
 8002422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0203 	and.w	r2, r3, #3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80a6 	beq.w	80025b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002468:	4b5b      	ldr	r3, [pc, #364]	; (80025d8 <HAL_GPIO_Init+0x2e4>)
 800246a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246c:	4a5a      	ldr	r2, [pc, #360]	; (80025d8 <HAL_GPIO_Init+0x2e4>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6613      	str	r3, [r2, #96]	; 0x60
 8002474:	4b58      	ldr	r3, [pc, #352]	; (80025d8 <HAL_GPIO_Init+0x2e4>)
 8002476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002480:	4a56      	ldr	r2, [pc, #344]	; (80025dc <HAL_GPIO_Init+0x2e8>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	220f      	movs	r2, #15
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024aa:	d01f      	beq.n	80024ec <HAL_GPIO_Init+0x1f8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a4c      	ldr	r2, [pc, #304]	; (80025e0 <HAL_GPIO_Init+0x2ec>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d019      	beq.n	80024e8 <HAL_GPIO_Init+0x1f4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a4b      	ldr	r2, [pc, #300]	; (80025e4 <HAL_GPIO_Init+0x2f0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <HAL_GPIO_Init+0x1f0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a4a      	ldr	r2, [pc, #296]	; (80025e8 <HAL_GPIO_Init+0x2f4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00d      	beq.n	80024e0 <HAL_GPIO_Init+0x1ec>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a49      	ldr	r2, [pc, #292]	; (80025ec <HAL_GPIO_Init+0x2f8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d007      	beq.n	80024dc <HAL_GPIO_Init+0x1e8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a48      	ldr	r2, [pc, #288]	; (80025f0 <HAL_GPIO_Init+0x2fc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d101      	bne.n	80024d8 <HAL_GPIO_Init+0x1e4>
 80024d4:	2305      	movs	r3, #5
 80024d6:	e00a      	b.n	80024ee <HAL_GPIO_Init+0x1fa>
 80024d8:	2306      	movs	r3, #6
 80024da:	e008      	b.n	80024ee <HAL_GPIO_Init+0x1fa>
 80024dc:	2304      	movs	r3, #4
 80024de:	e006      	b.n	80024ee <HAL_GPIO_Init+0x1fa>
 80024e0:	2303      	movs	r3, #3
 80024e2:	e004      	b.n	80024ee <HAL_GPIO_Init+0x1fa>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e002      	b.n	80024ee <HAL_GPIO_Init+0x1fa>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <HAL_GPIO_Init+0x1fa>
 80024ec:	2300      	movs	r3, #0
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	f002 0203 	and.w	r2, r2, #3
 80024f4:	0092      	lsls	r2, r2, #2
 80024f6:	4093      	lsls	r3, r2
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024fe:	4937      	ldr	r1, [pc, #220]	; (80025dc <HAL_GPIO_Init+0x2e8>)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <HAL_GPIO_Init+0x300>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002530:	4a30      	ldr	r2, [pc, #192]	; (80025f4 <HAL_GPIO_Init+0x300>)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002536:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <HAL_GPIO_Init+0x300>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800255a:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <HAL_GPIO_Init+0x300>)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002560:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_GPIO_Init+0x300>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002584:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <HAL_GPIO_Init+0x300>)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <HAL_GPIO_Init+0x300>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025ae:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <HAL_GPIO_Init+0x300>)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3301      	adds	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f47f ae9d 	bne.w	8002304 <HAL_GPIO_Init+0x10>
  }
}
 80025ca:	bf00      	nop
 80025cc:	371c      	adds	r7, #28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40010000 	.word	0x40010000
 80025e0:	48000400 	.word	0x48000400
 80025e4:	48000800 	.word	0x48000800
 80025e8:	48000c00 	.word	0x48000c00
 80025ec:	48001000 	.word	0x48001000
 80025f0:	48001400 	.word	0x48001400
 80025f4:	40010400 	.word	0x40010400

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002614:	e002      	b.n	800261c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d141      	bne.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002636:	4b4b      	ldr	r3, [pc, #300]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800263e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002642:	d131      	bne.n	80026a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002644:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800264a:	4a46      	ldr	r2, [pc, #280]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002650:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002654:	4b43      	ldr	r3, [pc, #268]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800265c:	4a41      	ldr	r2, [pc, #260]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002662:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002664:	4b40      	ldr	r3, [pc, #256]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2232      	movs	r2, #50	; 0x32
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	4a3f      	ldr	r2, [pc, #252]	; (800276c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	0c9b      	lsrs	r3, r3, #18
 8002676:	3301      	adds	r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800267a:	e002      	b.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3b01      	subs	r3, #1
 8002680:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002682:	4b38      	ldr	r3, [pc, #224]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268e:	d102      	bne.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f2      	bne.n	800267c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002696:	4b33      	ldr	r3, [pc, #204]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a2:	d158      	bne.n	8002756 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e057      	b.n	8002758 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026a8:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ae:	4a2d      	ldr	r2, [pc, #180]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026b8:	e04d      	b.n	8002756 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c0:	d141      	bne.n	8002746 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026c2:	4b28      	ldr	r3, [pc, #160]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ce:	d131      	bne.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026d0:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026d6:	4a23      	ldr	r2, [pc, #140]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e0:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026e8:	4a1e      	ldr	r2, [pc, #120]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026f0:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2232      	movs	r2, #50	; 0x32
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	4a1c      	ldr	r2, [pc, #112]	; (800276c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	0c9b      	lsrs	r3, r3, #18
 8002702:	3301      	adds	r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002706:	e002      	b.n	800270e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3b01      	subs	r3, #1
 800270c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271a:	d102      	bne.n	8002722 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f2      	bne.n	8002708 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272e:	d112      	bne.n	8002756 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e011      	b.n	8002758 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800273a:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002744:	e007      	b.n	8002756 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002746:	4b07      	ldr	r3, [pc, #28]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002750:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002754:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40007000 	.word	0x40007000
 8002768:	20000000 	.word	0x20000000
 800276c:	431bde83 	.word	0x431bde83

08002770 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800277a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277e:	6093      	str	r3, [r2, #8]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40007000 	.word	0x40007000

08002790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e308      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d075      	beq.n	800289a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ae:	4ba3      	ldr	r3, [pc, #652]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b8:	4ba0      	ldr	r3, [pc, #640]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d102      	bne.n	80027ce <HAL_RCC_OscConfig+0x3e>
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d002      	beq.n	80027d4 <HAL_RCC_OscConfig+0x44>
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d10b      	bne.n	80027ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d4:	4b99      	ldr	r3, [pc, #612]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05b      	beq.n	8002898 <HAL_RCC_OscConfig+0x108>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d157      	bne.n	8002898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e2e3      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d106      	bne.n	8002804 <HAL_RCC_OscConfig+0x74>
 80027f6:	4b91      	ldr	r3, [pc, #580]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a90      	ldr	r2, [pc, #576]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e01d      	b.n	8002840 <HAL_RCC_OscConfig+0xb0>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x98>
 800280e:	4b8b      	ldr	r3, [pc, #556]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a8a      	ldr	r2, [pc, #552]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b88      	ldr	r3, [pc, #544]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a87      	ldr	r2, [pc, #540]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0xb0>
 8002828:	4b84      	ldr	r3, [pc, #528]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a83      	ldr	r2, [pc, #524]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800282e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b81      	ldr	r3, [pc, #516]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a80      	ldr	r2, [pc, #512]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800283a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d013      	beq.n	8002870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7ff f93c 	bl	8001ac4 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002850:	f7ff f938 	bl	8001ac4 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e2a8      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002862:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0xc0>
 800286e:	e014      	b.n	800289a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7ff f928 	bl	8001ac4 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7ff f924 	bl	8001ac4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e294      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800288a:	4b6c      	ldr	r3, [pc, #432]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0xe8>
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d075      	beq.n	8002992 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a6:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b0:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	2b0c      	cmp	r3, #12
 80028be:	d102      	bne.n	80028c6 <HAL_RCC_OscConfig+0x136>
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d002      	beq.n	80028cc <HAL_RCC_OscConfig+0x13c>
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d11f      	bne.n	800290c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028cc:	4b5b      	ldr	r3, [pc, #364]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_OscConfig+0x154>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e267      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e4:	4b55      	ldr	r3, [pc, #340]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	4952      	ldr	r1, [pc, #328]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028f8:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <HAL_RCC_OscConfig+0x2b0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff f895 	bl	8001a2c <HAL_InitTick>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d043      	beq.n	8002990 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e253      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d023      	beq.n	800295c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002914:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a48      	ldr	r2, [pc, #288]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800291a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7ff f8d0 	bl	8001ac4 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002928:	f7ff f8cc 	bl	8001ac4 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e23c      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800293a:	4b40      	ldr	r3, [pc, #256]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002946:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	061b      	lsls	r3, r3, #24
 8002954:	4939      	ldr	r1, [pc, #228]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
 800295a:	e01a      	b.n	8002992 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295c:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a36      	ldr	r2, [pc, #216]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7ff f8ac 	bl	8001ac4 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002970:	f7ff f8a8 	bl	8001ac4 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e218      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002982:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x1e0>
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002990:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03c      	beq.n	8002a18 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d01c      	beq.n	80029e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a6:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ac:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7ff f885 	bl	8001ac4 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029be:	f7ff f881 	bl	8001ac4 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e1f1      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0ef      	beq.n	80029be <HAL_RCC_OscConfig+0x22e>
 80029de:	e01b      	b.n	8002a18 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e0:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80029e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e6:	4a15      	ldr	r2, [pc, #84]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7ff f868 	bl	8001ac4 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f8:	f7ff f864 	bl	8001ac4 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e1d4      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ef      	bne.n	80029f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80ab 	beq.w	8002b7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2b4>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e005      	b.n	8002a46 <HAL_RCC_OscConfig+0x2b6>
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	20000004 	.word	0x20000004
 8002a44:	2300      	movs	r3, #0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	4baf      	ldr	r3, [pc, #700]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	4aae      	ldr	r2, [pc, #696]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a54:	6593      	str	r3, [r2, #88]	; 0x58
 8002a56:	4bac      	ldr	r3, [pc, #688]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a62:	2301      	movs	r3, #1
 8002a64:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a66:	4ba9      	ldr	r3, [pc, #676]	; (8002d0c <HAL_RCC_OscConfig+0x57c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d118      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a72:	4ba6      	ldr	r3, [pc, #664]	; (8002d0c <HAL_RCC_OscConfig+0x57c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4aa5      	ldr	r2, [pc, #660]	; (8002d0c <HAL_RCC_OscConfig+0x57c>)
 8002a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7e:	f7ff f821 	bl	8001ac4 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a86:	f7ff f81d 	bl	8001ac4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e18d      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a98:	4b9c      	ldr	r3, [pc, #624]	; (8002d0c <HAL_RCC_OscConfig+0x57c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d108      	bne.n	8002abe <HAL_RCC_OscConfig+0x32e>
 8002aac:	4b96      	ldr	r3, [pc, #600]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	4a95      	ldr	r2, [pc, #596]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002abc:	e024      	b.n	8002b08 <HAL_RCC_OscConfig+0x378>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d110      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x358>
 8002ac6:	4b90      	ldr	r3, [pc, #576]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002acc:	4a8e      	ldr	r2, [pc, #568]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ad6:	4b8c      	ldr	r3, [pc, #560]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	4a8a      	ldr	r2, [pc, #552]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ae6:	e00f      	b.n	8002b08 <HAL_RCC_OscConfig+0x378>
 8002ae8:	4b87      	ldr	r3, [pc, #540]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aee:	4a86      	ldr	r2, [pc, #536]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af8:	4b83      	ldr	r3, [pc, #524]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	4a82      	ldr	r2, [pc, #520]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d016      	beq.n	8002b3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7fe ffd8 	bl	8001ac4 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe ffd4 	bl	8001ac4 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e142      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2e:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ed      	beq.n	8002b18 <HAL_RCC_OscConfig+0x388>
 8002b3c:	e015      	b.n	8002b6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7fe ffc1 	bl	8001ac4 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7fe ffbd 	bl	8001ac4 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e12b      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ed      	bne.n	8002b46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4b65      	ldr	r3, [pc, #404]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b74:	4a64      	ldr	r2, [pc, #400]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d03c      	beq.n	8002c02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01c      	beq.n	8002bca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b90:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b96:	4a5c      	ldr	r2, [pc, #368]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe ff90 	bl	8001ac4 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ba8:	f7fe ff8c 	bl	8001ac4 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e0fc      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bba:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ef      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x418>
 8002bc8:	e01b      	b.n	8002c02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bca:	4b4f      	ldr	r3, [pc, #316]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bd0:	4a4d      	ldr	r2, [pc, #308]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bda:	f7fe ff73 	bl	8001ac4 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002be2:	f7fe ff6f 	bl	8001ac4 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e0df      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bf4:	4b44      	ldr	r3, [pc, #272]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1ef      	bne.n	8002be2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 80d3 	beq.w	8002db2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c0c:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b0c      	cmp	r3, #12
 8002c16:	f000 808d 	beq.w	8002d34 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d15a      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c22:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a38      	ldr	r2, [pc, #224]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2e:	f7fe ff49 	bl	8001ac4 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c36:	f7fe ff45 	bl	8001ac4 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e0b5      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c48:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f0      	bne.n	8002c36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c54:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <HAL_RCC_OscConfig+0x580>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6a11      	ldr	r1, [r2, #32]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c64:	3a01      	subs	r2, #1
 8002c66:	0112      	lsls	r2, r2, #4
 8002c68:	4311      	orrs	r1, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002c6e:	0212      	lsls	r2, r2, #8
 8002c70:	4311      	orrs	r1, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c76:	0852      	lsrs	r2, r2, #1
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	0552      	lsls	r2, r2, #21
 8002c7c:	4311      	orrs	r1, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c82:	0852      	lsrs	r2, r2, #1
 8002c84:	3a01      	subs	r2, #1
 8002c86:	0652      	lsls	r2, r2, #25
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c8e:	06d2      	lsls	r2, r2, #27
 8002c90:	430a      	orrs	r2, r1
 8002c92:	491d      	ldr	r1, [pc, #116]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ca4:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe ff08 	bl	8001ac4 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fe ff04 	bl	8001ac4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e074      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cca:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x528>
 8002cd6:	e06c      	b.n	8002db2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_RCC_OscConfig+0x578>)
 8002cf6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fee0 	bl	8001ac4 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d06:	e00e      	b.n	8002d26 <HAL_RCC_OscConfig+0x596>
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d14:	f7fe fed6 	bl	8001ac4 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e046      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d26:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <HAL_RCC_OscConfig+0x62c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x584>
 8002d32:	e03e      	b.n	8002db2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e039      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d40:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_RCC_OscConfig+0x62c>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f003 0203 	and.w	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d12c      	bne.n	8002dae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d123      	bne.n	8002dae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d11b      	bne.n	8002dae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d113      	bne.n	8002dae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	3b01      	subs	r3, #1
 8002d94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d109      	bne.n	8002dae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	3b01      	subs	r3, #1
 8002da8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e11e      	b.n	8003016 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b91      	ldr	r3, [pc, #580]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d910      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b8e      	ldr	r3, [pc, #568]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 020f 	bic.w	r2, r3, #15
 8002dee:	498c      	ldr	r1, [pc, #560]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b8a      	ldr	r3, [pc, #552]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e106      	b.n	8003016 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d073      	beq.n	8002efc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d129      	bne.n	8002e70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1c:	4b81      	ldr	r3, [pc, #516]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0f4      	b.n	8003016 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e2c:	f000 f99e 	bl	800316c <RCC_GetSysClockFreqFromPLLSource>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4a7c      	ldr	r2, [pc, #496]	; (8003028 <HAL_RCC_ClockConfig+0x268>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d93f      	bls.n	8002eba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e3a:	4b7a      	ldr	r3, [pc, #488]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d033      	beq.n	8002eba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d12f      	bne.n	8002eba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e5a:	4b72      	ldr	r3, [pc, #456]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e62:	4a70      	ldr	r2, [pc, #448]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	e024      	b.n	8002eba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0c6      	b.n	8003016 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e88:	4b66      	ldr	r3, [pc, #408]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0be      	b.n	8003016 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e98:	f000 f8ce 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4a61      	ldr	r2, [pc, #388]	; (8003028 <HAL_RCC_ClockConfig+0x268>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d909      	bls.n	8002eba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ea6:	4b5f      	ldr	r3, [pc, #380]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eae:	4a5d      	ldr	r2, [pc, #372]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eba:	4b5a      	ldr	r3, [pc, #360]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f023 0203 	bic.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4957      	ldr	r1, [pc, #348]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ecc:	f7fe fdfa 	bl	8001ac4 <HAL_GetTick>
 8002ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed4:	f7fe fdf6 	bl	8001ac4 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e095      	b.n	8003016 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	4b4e      	ldr	r3, [pc, #312]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 020c 	and.w	r2, r3, #12
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d1eb      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d023      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f14:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4a42      	ldr	r2, [pc, #264]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f2c:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f34:	4a3b      	ldr	r2, [pc, #236]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002f36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f3c:	4b39      	ldr	r3, [pc, #228]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4936      	ldr	r1, [pc, #216]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d105      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f56:	4b33      	ldr	r3, [pc, #204]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4a32      	ldr	r2, [pc, #200]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002f5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f62:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d21d      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f70:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f023 020f 	bic.w	r2, r3, #15
 8002f78:	4929      	ldr	r1, [pc, #164]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f80:	f7fe fda0 	bl	8001ac4 <HAL_GetTick>
 8002f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f88:	f7fe fd9c 	bl	8001ac4 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e03b      	b.n	8003016 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d1ed      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4917      	ldr	r1, [pc, #92]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d009      	beq.n	8002fea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd6:	4b13      	ldr	r3, [pc, #76]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	490f      	ldr	r1, [pc, #60]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fea:	f000 f825 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002fee:	4601      	mov	r1, r0
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <HAL_RCC_ClockConfig+0x264>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	; (800302c <HAL_RCC_ClockConfig+0x26c>)
 8002ffc:	5cd3      	ldrb	r3, [r2, r3]
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	fa21 f303 	lsr.w	r3, r1, r3
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <HAL_RCC_ClockConfig+0x270>)
 8003008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800300a:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <HAL_RCC_ClockConfig+0x274>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fd0c 	bl	8001a2c <HAL_InitTick>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40022000 	.word	0x40022000
 8003024:	40021000 	.word	0x40021000
 8003028:	04c4b400 	.word	0x04c4b400
 800302c:	0800669c 	.word	0x0800669c
 8003030:	20000000 	.word	0x20000000
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800303e:	4b2c      	ldr	r3, [pc, #176]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b04      	cmp	r3, #4
 8003048:	d102      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800304a:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	e047      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003050:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b08      	cmp	r3, #8
 800305a:	d102      	bne.n	8003062 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800305c:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	e03e      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003062:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d136      	bne.n	80030dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	3301      	adds	r3, #1
 8003084:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d10c      	bne.n	80030a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800308c:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003096:	68d2      	ldr	r2, [r2, #12]
 8003098:	0a12      	lsrs	r2, r2, #8
 800309a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	617b      	str	r3, [r7, #20]
      break;
 80030a4:	e00c      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030a6:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	4a10      	ldr	r2, [pc, #64]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b0:	68d2      	ldr	r2, [r2, #12]
 80030b2:	0a12      	lsrs	r2, r2, #8
 80030b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	617b      	str	r3, [r7, #20]
      break;
 80030be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	0e5b      	lsrs	r3, r3, #25
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	3301      	adds	r3, #1
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	e001      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030e0:	693b      	ldr	r3, [r7, #16]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40021000 	.word	0x40021000
 80030f4:	00f42400 	.word	0x00f42400
 80030f8:	007a1200 	.word	0x007a1200

080030fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <HAL_RCC_GetHCLKFreq+0x14>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20000000 	.word	0x20000000

08003114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003118:	f7ff fff0 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 800311c:	4601      	mov	r1, r0
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_RCC_GetPCLK1Freq+0x28>)
 800312a:	5cd3      	ldrb	r3, [r2, r3]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40021000 	.word	0x40021000
 800313c:	080066ac 	.word	0x080066ac

08003140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003144:	f7ff ffda 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 8003148:	4601      	mov	r1, r0
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	0adb      	lsrs	r3, r3, #11
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	4a04      	ldr	r2, [pc, #16]	; (8003168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021000 	.word	0x40021000
 8003168:	080066ac 	.word	0x080066ac

0800316c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003172:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	3301      	adds	r3, #1
 8003188:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d10c      	bne.n	80031aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003190:	4a17      	ldr	r2, [pc, #92]	; (80031f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	4a14      	ldr	r2, [pc, #80]	; (80031ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800319a:	68d2      	ldr	r2, [r2, #12]
 800319c:	0a12      	lsrs	r2, r2, #8
 800319e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	617b      	str	r3, [r7, #20]
    break;
 80031a8:	e00c      	b.n	80031c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031aa:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	4a0e      	ldr	r2, [pc, #56]	; (80031ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031b4:	68d2      	ldr	r2, [r2, #12]
 80031b6:	0a12      	lsrs	r2, r2, #8
 80031b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]
    break;
 80031c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031c4:	4b09      	ldr	r3, [pc, #36]	; (80031ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	0e5b      	lsrs	r3, r3, #25
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	3301      	adds	r3, #1
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80031de:	687b      	ldr	r3, [r7, #4]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40021000 	.word	0x40021000
 80031f0:	007a1200 	.word	0x007a1200
 80031f4:	00f42400 	.word	0x00f42400

080031f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003200:	2300      	movs	r3, #0
 8003202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003204:	2300      	movs	r3, #0
 8003206:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8098 	beq.w	8003346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321a:	4b43      	ldr	r3, [pc, #268]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10d      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	4b40      	ldr	r3, [pc, #256]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	4a3f      	ldr	r2, [pc, #252]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	6593      	str	r3, [r2, #88]	; 0x58
 8003232:	4b3d      	ldr	r3, [pc, #244]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323e:	2301      	movs	r3, #1
 8003240:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003242:	4b3a      	ldr	r3, [pc, #232]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a39      	ldr	r2, [pc, #228]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800324e:	f7fe fc39 	bl	8001ac4 <HAL_GetTick>
 8003252:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003254:	e009      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003256:	f7fe fc35 	bl	8001ac4 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d902      	bls.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	74fb      	strb	r3, [r7, #19]
        break;
 8003268:	e005      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800326a:	4b30      	ldr	r3, [pc, #192]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0ef      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d159      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800327c:	4b2a      	ldr	r3, [pc, #168]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003286:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d01e      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	429a      	cmp	r2, r3
 8003296:	d019      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003298:	4b23      	ldr	r3, [pc, #140]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032a4:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032b4:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ba:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032c4:	4a18      	ldr	r2, [pc, #96]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d016      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7fe fbf5 	bl	8001ac4 <HAL_GetTick>
 80032da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032dc:	e00b      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe fbf1 	bl	8001ac4 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d902      	bls.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	74fb      	strb	r3, [r7, #19]
            break;
 80032f4:	e006      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ec      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10b      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	4903      	ldr	r1, [pc, #12]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003320:	e008      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	74bb      	strb	r3, [r7, #18]
 8003326:	e005      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003328:	40021000 	.word	0x40021000
 800332c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003334:	7c7b      	ldrb	r3, [r7, #17]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333a:	4ba6      	ldr	r3, [pc, #664]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	4aa5      	ldr	r2, [pc, #660]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003344:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003352:	4ba0      	ldr	r3, [pc, #640]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	f023 0203 	bic.w	r2, r3, #3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	499c      	ldr	r1, [pc, #624]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003374:	4b97      	ldr	r3, [pc, #604]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	f023 020c 	bic.w	r2, r3, #12
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	4994      	ldr	r1, [pc, #592]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003396:	4b8f      	ldr	r3, [pc, #572]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	498b      	ldr	r1, [pc, #556]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033b8:	4b86      	ldr	r3, [pc, #536]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	4983      	ldr	r1, [pc, #524]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033da:	4b7e      	ldr	r3, [pc, #504]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	497a      	ldr	r1, [pc, #488]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033fc:	4b75      	ldr	r3, [pc, #468]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	4972      	ldr	r1, [pc, #456]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800341e:	4b6d      	ldr	r3, [pc, #436]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	4969      	ldr	r1, [pc, #420]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003440:	4b64      	ldr	r3, [pc, #400]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	4961      	ldr	r1, [pc, #388]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003462:	4b5c      	ldr	r3, [pc, #368]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	4958      	ldr	r1, [pc, #352]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003484:	4b53      	ldr	r3, [pc, #332]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	4950      	ldr	r1, [pc, #320]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034a2:	d105      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a4:	4b4b      	ldr	r3, [pc, #300]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a4a      	ldr	r2, [pc, #296]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d015      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034bc:	4b45      	ldr	r3, [pc, #276]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	4942      	ldr	r1, [pc, #264]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034da:	d105      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034dc:	4b3d      	ldr	r3, [pc, #244]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4a3c      	ldr	r2, [pc, #240]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d015      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034f4:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4934      	ldr	r1, [pc, #208]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003512:	d105      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a2e      	ldr	r2, [pc, #184]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800351e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d015      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800352c:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353a:	4926      	ldr	r1, [pc, #152]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800354a:	d105      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800354c:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003556:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d015      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	4918      	ldr	r1, [pc, #96]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003582:	d105      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800358e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d015      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800359c:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	490a      	ldr	r1, [pc, #40]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ba:	d105      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80035c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000

080035d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e042      	b.n	8003670 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d106      	bne.n	8003602 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7fe f89b 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2224      	movs	r2, #36	; 0x24
 8003606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fae8 	bl	8003bf0 <UART_SetConfig>
 8003620:	4603      	mov	r3, r0
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e022      	b.n	8003670 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fd84 	bl	8004140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fe0b 	bl	8004284 <UART_CheckIdleState>
 800366e:	4603      	mov	r3, r0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	; 0x28
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800368e:	2b20      	cmp	r3, #32
 8003690:	f040 8083 	bne.w	800379a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_UART_Transmit+0x28>
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e07b      	b.n	800379c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_UART_Transmit+0x3a>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e074      	b.n	800379c <HAL_UART_Transmit+0x124>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2221      	movs	r2, #33	; 0x21
 80036c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ca:	f7fe f9fb 	bl	8001ac4 <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e8:	d108      	bne.n	80036fc <HAL_UART_Transmit+0x84>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d104      	bne.n	80036fc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	e003      	b.n	8003704 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800370c:	e02c      	b.n	8003768 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2200      	movs	r2, #0
 8003716:	2180      	movs	r1, #128	; 0x80
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fdfb 	bl	8004314 <UART_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e039      	b.n	800379c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10b      	bne.n	8003746 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800373c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	3302      	adds	r3, #2
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	e007      	b.n	8003756 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	3301      	adds	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1cc      	bne.n	800370e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2200      	movs	r2, #0
 800377c:	2140      	movs	r1, #64	; 0x40
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fdc8 	bl	8004314 <UART_WaitOnFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e006      	b.n	800379c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	e000      	b.n	800379c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
  }
}
 800379c:	4618      	mov	r0, r3
 800379e:	3720      	adds	r7, #32
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	4613      	mov	r3, r2
 80037b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d170      	bne.n	800389e <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_UART_Receive_DMA+0x24>
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e069      	b.n	80038a0 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_UART_Receive_DMA+0x36>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e062      	b.n	80038a0 <HAL_UART_Receive_DMA+0xfc>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2222      	movs	r2, #34	; 0x22
 80037fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003804:	2b00      	cmp	r3, #0
 8003806:	d02c      	beq.n	8003862 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800380c:	4a26      	ldr	r2, [pc, #152]	; (80038a8 <HAL_UART_Receive_DMA+0x104>)
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003814:	4a25      	ldr	r2, [pc, #148]	; (80038ac <HAL_UART_Receive_DMA+0x108>)
 8003816:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381c:	4a24      	ldr	r2, [pc, #144]	; (80038b0 <HAL_UART_Receive_DMA+0x10c>)
 800381e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003824:	2200      	movs	r2, #0
 8003826:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3324      	adds	r3, #36	; 0x24
 8003832:	4619      	mov	r1, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	461a      	mov	r2, r3
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	f7fe fb28 	bl	8001e90 <HAL_DMA_Start_IT>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2210      	movs	r2, #16
 800384a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e01e      	b.n	80038a0 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003878:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003898:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	e000      	b.n	80038a0 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800389e:	2302      	movs	r3, #2
  }
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	08004497 	.word	0x08004497
 80038ac:	08004501 	.word	0x08004501
 80038b0:	0800451d 	.word	0x0800451d

080038b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d118      	bne.n	8003916 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d013      	beq.n	8003916 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8145 	beq.w	8003b96 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
      }
      return;
 8003914:	e13f      	b.n	8003b96 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80e8 	beq.w	8003aee <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4ba1      	ldr	r3, [pc, #644]	; (8003ba8 <HAL_UART_IRQHandler+0x2f4>)
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4ba0      	ldr	r3, [pc, #640]	; (8003bac <HAL_UART_IRQHandler+0x2f8>)
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80dd 	beq.w	8003aee <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d010      	beq.n	8003960 <HAL_UART_IRQHandler+0xac>
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2201      	movs	r2, #1
 800394e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003956:	f043 0201 	orr.w	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d010      	beq.n	800398c <HAL_UART_IRQHandler+0xd8>
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2202      	movs	r2, #2
 800397a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	f043 0204 	orr.w	r2, r3, #4
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d010      	beq.n	80039b8 <HAL_UART_IRQHandler+0x104>
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00b      	beq.n	80039b8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2204      	movs	r2, #4
 80039a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f043 0202 	orr.w	r2, r3, #2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d015      	beq.n	80039ee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4b76      	ldr	r3, [pc, #472]	; (8003ba8 <HAL_UART_IRQHandler+0x2f4>)
 80039d0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2208      	movs	r2, #8
 80039dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	f043 0208 	orr.w	r2, r3, #8
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d011      	beq.n	8003a1c <HAL_UART_IRQHandler+0x168>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00c      	beq.n	8003a1c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80b9 	beq.w	8003b9a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d011      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d104      	bne.n	8003a46 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d004      	beq.n	8003a76 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d031      	beq.n	8003ada <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fcea 	bl	8004450 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d123      	bne.n	8003ad2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a98:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d013      	beq.n	8003aca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa6:	4a42      	ldr	r2, [pc, #264]	; (8003bb0 <HAL_UART_IRQHandler+0x2fc>)
 8003aa8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fa69 	bl	8001f86 <HAL_DMA_Abort_IT>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d017      	beq.n	8003aea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	e00f      	b.n	8003aea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f886 	bl	8003bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad0:	e00b      	b.n	8003aea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f882 	bl	8003bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad8:	e007      	b.n	8003aea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f87e 	bl	8003bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8003ae8:	e057      	b.n	8003b9a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aea:	bf00      	nop
    return;
 8003aec:	e055      	b.n	8003b9a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <HAL_UART_IRQHandler+0x260>
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fd75 	bl	80045fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b12:	e045      	b.n	8003ba0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d012      	beq.n	8003b44 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d104      	bne.n	8003b32 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d031      	beq.n	8003b9e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
    }
    return;
 8003b42:	e02c      	b.n	8003b9e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_UART_IRQHandler+0x2ac>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fd35 	bl	80045c8 <UART_EndTransmit_IT>
    return;
 8003b5e:	e01f      	b.n	8003ba0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_UART_IRQHandler+0x2c8>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fd55 	bl	8004624 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b7a:	e011      	b.n	8003ba0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00c      	beq.n	8003ba0 <HAL_UART_IRQHandler+0x2ec>
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	da09      	bge.n	8003ba0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fd3f 	bl	8004610 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b92:	bf00      	nop
 8003b94:	e004      	b.n	8003ba0 <HAL_UART_IRQHandler+0x2ec>
      return;
 8003b96:	bf00      	nop
 8003b98:	e002      	b.n	8003ba0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8003b9e:	bf00      	nop
  }
}
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	10000001 	.word	0x10000001
 8003bac:	04000120 	.word	0x04000120
 8003bb0:	0800459d 	.word	0x0800459d

08003bb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003bf4:	b088      	sub	sp, #32
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4bb0      	ldr	r3, [pc, #704]	; (8003ee8 <UART_SetConfig+0x2f8>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	69f9      	ldr	r1, [r7, #28]
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4aa5      	ldr	r2, [pc, #660]	; (8003eec <UART_SetConfig+0x2fc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	69f9      	ldr	r1, [r7, #28]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	f023 010f 	bic.w	r1, r3, #15
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a96      	ldr	r2, [pc, #600]	; (8003ef0 <UART_SetConfig+0x300>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d121      	bne.n	8003ce0 <UART_SetConfig+0xf0>
 8003c9c:	4b95      	ldr	r3, [pc, #596]	; (8003ef4 <UART_SetConfig+0x304>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d816      	bhi.n	8003cd8 <UART_SetConfig+0xe8>
 8003caa:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <UART_SetConfig+0xc0>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003ccd 	.word	0x08003ccd
 8003cb8:	08003cc7 	.word	0x08003cc7
 8003cbc:	08003cd3 	.word	0x08003cd3
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	76fb      	strb	r3, [r7, #27]
 8003cc4:	e0be      	b.n	8003e44 <UART_SetConfig+0x254>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	76fb      	strb	r3, [r7, #27]
 8003cca:	e0bb      	b.n	8003e44 <UART_SetConfig+0x254>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	76fb      	strb	r3, [r7, #27]
 8003cd0:	e0b8      	b.n	8003e44 <UART_SetConfig+0x254>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	76fb      	strb	r3, [r7, #27]
 8003cd6:	e0b5      	b.n	8003e44 <UART_SetConfig+0x254>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	76fb      	strb	r3, [r7, #27]
 8003cdc:	bf00      	nop
 8003cde:	e0b1      	b.n	8003e44 <UART_SetConfig+0x254>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a84      	ldr	r2, [pc, #528]	; (8003ef8 <UART_SetConfig+0x308>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d134      	bne.n	8003d54 <UART_SetConfig+0x164>
 8003cea:	4b82      	ldr	r3, [pc, #520]	; (8003ef4 <UART_SetConfig+0x304>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b0c      	cmp	r3, #12
 8003cf6:	d829      	bhi.n	8003d4c <UART_SetConfig+0x15c>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <UART_SetConfig+0x110>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	08003d4d 	.word	0x08003d4d
 8003d08:	08003d4d 	.word	0x08003d4d
 8003d0c:	08003d4d 	.word	0x08003d4d
 8003d10:	08003d41 	.word	0x08003d41
 8003d14:	08003d4d 	.word	0x08003d4d
 8003d18:	08003d4d 	.word	0x08003d4d
 8003d1c:	08003d4d 	.word	0x08003d4d
 8003d20:	08003d3b 	.word	0x08003d3b
 8003d24:	08003d4d 	.word	0x08003d4d
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d4d 	.word	0x08003d4d
 8003d30:	08003d47 	.word	0x08003d47
 8003d34:	2300      	movs	r3, #0
 8003d36:	76fb      	strb	r3, [r7, #27]
 8003d38:	e084      	b.n	8003e44 <UART_SetConfig+0x254>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	76fb      	strb	r3, [r7, #27]
 8003d3e:	e081      	b.n	8003e44 <UART_SetConfig+0x254>
 8003d40:	2304      	movs	r3, #4
 8003d42:	76fb      	strb	r3, [r7, #27]
 8003d44:	e07e      	b.n	8003e44 <UART_SetConfig+0x254>
 8003d46:	2308      	movs	r3, #8
 8003d48:	76fb      	strb	r3, [r7, #27]
 8003d4a:	e07b      	b.n	8003e44 <UART_SetConfig+0x254>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	76fb      	strb	r3, [r7, #27]
 8003d50:	bf00      	nop
 8003d52:	e077      	b.n	8003e44 <UART_SetConfig+0x254>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a68      	ldr	r2, [pc, #416]	; (8003efc <UART_SetConfig+0x30c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d120      	bne.n	8003da0 <UART_SetConfig+0x1b0>
 8003d5e:	4b65      	ldr	r3, [pc, #404]	; (8003ef4 <UART_SetConfig+0x304>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d00f      	beq.n	8003d8c <UART_SetConfig+0x19c>
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d802      	bhi.n	8003d76 <UART_SetConfig+0x186>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <UART_SetConfig+0x190>
 8003d74:	e010      	b.n	8003d98 <UART_SetConfig+0x1a8>
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d005      	beq.n	8003d86 <UART_SetConfig+0x196>
 8003d7a:	2b30      	cmp	r3, #48	; 0x30
 8003d7c:	d009      	beq.n	8003d92 <UART_SetConfig+0x1a2>
 8003d7e:	e00b      	b.n	8003d98 <UART_SetConfig+0x1a8>
 8003d80:	2300      	movs	r3, #0
 8003d82:	76fb      	strb	r3, [r7, #27]
 8003d84:	e05e      	b.n	8003e44 <UART_SetConfig+0x254>
 8003d86:	2302      	movs	r3, #2
 8003d88:	76fb      	strb	r3, [r7, #27]
 8003d8a:	e05b      	b.n	8003e44 <UART_SetConfig+0x254>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	76fb      	strb	r3, [r7, #27]
 8003d90:	e058      	b.n	8003e44 <UART_SetConfig+0x254>
 8003d92:	2308      	movs	r3, #8
 8003d94:	76fb      	strb	r3, [r7, #27]
 8003d96:	e055      	b.n	8003e44 <UART_SetConfig+0x254>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	76fb      	strb	r3, [r7, #27]
 8003d9c:	bf00      	nop
 8003d9e:	e051      	b.n	8003e44 <UART_SetConfig+0x254>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a56      	ldr	r2, [pc, #344]	; (8003f00 <UART_SetConfig+0x310>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d120      	bne.n	8003dec <UART_SetConfig+0x1fc>
 8003daa:	4b52      	ldr	r3, [pc, #328]	; (8003ef4 <UART_SetConfig+0x304>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	d00f      	beq.n	8003dd8 <UART_SetConfig+0x1e8>
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d802      	bhi.n	8003dc2 <UART_SetConfig+0x1d2>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <UART_SetConfig+0x1dc>
 8003dc0:	e010      	b.n	8003de4 <UART_SetConfig+0x1f4>
 8003dc2:	2b80      	cmp	r3, #128	; 0x80
 8003dc4:	d005      	beq.n	8003dd2 <UART_SetConfig+0x1e2>
 8003dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8003dc8:	d009      	beq.n	8003dde <UART_SetConfig+0x1ee>
 8003dca:	e00b      	b.n	8003de4 <UART_SetConfig+0x1f4>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	76fb      	strb	r3, [r7, #27]
 8003dd0:	e038      	b.n	8003e44 <UART_SetConfig+0x254>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	76fb      	strb	r3, [r7, #27]
 8003dd6:	e035      	b.n	8003e44 <UART_SetConfig+0x254>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	76fb      	strb	r3, [r7, #27]
 8003ddc:	e032      	b.n	8003e44 <UART_SetConfig+0x254>
 8003dde:	2308      	movs	r3, #8
 8003de0:	76fb      	strb	r3, [r7, #27]
 8003de2:	e02f      	b.n	8003e44 <UART_SetConfig+0x254>
 8003de4:	2310      	movs	r3, #16
 8003de6:	76fb      	strb	r3, [r7, #27]
 8003de8:	bf00      	nop
 8003dea:	e02b      	b.n	8003e44 <UART_SetConfig+0x254>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a3e      	ldr	r2, [pc, #248]	; (8003eec <UART_SetConfig+0x2fc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d124      	bne.n	8003e40 <UART_SetConfig+0x250>
 8003df6:	4b3f      	ldr	r3, [pc, #252]	; (8003ef4 <UART_SetConfig+0x304>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e04:	d012      	beq.n	8003e2c <UART_SetConfig+0x23c>
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0a:	d802      	bhi.n	8003e12 <UART_SetConfig+0x222>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d007      	beq.n	8003e20 <UART_SetConfig+0x230>
 8003e10:	e012      	b.n	8003e38 <UART_SetConfig+0x248>
 8003e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e16:	d006      	beq.n	8003e26 <UART_SetConfig+0x236>
 8003e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e1c:	d009      	beq.n	8003e32 <UART_SetConfig+0x242>
 8003e1e:	e00b      	b.n	8003e38 <UART_SetConfig+0x248>
 8003e20:	2300      	movs	r3, #0
 8003e22:	76fb      	strb	r3, [r7, #27]
 8003e24:	e00e      	b.n	8003e44 <UART_SetConfig+0x254>
 8003e26:	2302      	movs	r3, #2
 8003e28:	76fb      	strb	r3, [r7, #27]
 8003e2a:	e00b      	b.n	8003e44 <UART_SetConfig+0x254>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	76fb      	strb	r3, [r7, #27]
 8003e30:	e008      	b.n	8003e44 <UART_SetConfig+0x254>
 8003e32:	2308      	movs	r3, #8
 8003e34:	76fb      	strb	r3, [r7, #27]
 8003e36:	e005      	b.n	8003e44 <UART_SetConfig+0x254>
 8003e38:	2310      	movs	r3, #16
 8003e3a:	76fb      	strb	r3, [r7, #27]
 8003e3c:	bf00      	nop
 8003e3e:	e001      	b.n	8003e44 <UART_SetConfig+0x254>
 8003e40:	2310      	movs	r3, #16
 8003e42:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a28      	ldr	r2, [pc, #160]	; (8003eec <UART_SetConfig+0x2fc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	f040 80a1 	bne.w	8003f92 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e50:	7efb      	ldrb	r3, [r7, #27]
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d823      	bhi.n	8003e9e <UART_SetConfig+0x2ae>
 8003e56:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <UART_SetConfig+0x26c>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003e81 	.word	0x08003e81
 8003e60:	08003e9f 	.word	0x08003e9f
 8003e64:	08003e89 	.word	0x08003e89
 8003e68:	08003e9f 	.word	0x08003e9f
 8003e6c:	08003e8f 	.word	0x08003e8f
 8003e70:	08003e9f 	.word	0x08003e9f
 8003e74:	08003e9f 	.word	0x08003e9f
 8003e78:	08003e9f 	.word	0x08003e9f
 8003e7c:	08003e97 	.word	0x08003e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e80:	f7ff f948 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 8003e84:	6178      	str	r0, [r7, #20]
        break;
 8003e86:	e00f      	b.n	8003ea8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e88:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <UART_SetConfig+0x314>)
 8003e8a:	617b      	str	r3, [r7, #20]
        break;
 8003e8c:	e00c      	b.n	8003ea8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e8e:	f7ff f8d3 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8003e92:	6178      	str	r0, [r7, #20]
        break;
 8003e94:	e008      	b.n	8003ea8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9a:	617b      	str	r3, [r7, #20]
        break;
 8003e9c:	e004      	b.n	8003ea8 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	76bb      	strb	r3, [r7, #26]
        break;
 8003ea6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 8130 	beq.w	8004110 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <UART_SetConfig+0x318>)
 8003eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4413      	add	r3, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d305      	bcc.n	8003ee0 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d915      	bls.n	8003f0c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	76bb      	strb	r3, [r7, #26]
 8003ee4:	e114      	b.n	8004110 <UART_SetConfig+0x520>
 8003ee6:	bf00      	nop
 8003ee8:	cfff69f3 	.word	0xcfff69f3
 8003eec:	40008000 	.word	0x40008000
 8003ef0:	40013800 	.word	0x40013800
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40004400 	.word	0x40004400
 8003efc:	40004800 	.word	0x40004800
 8003f00:	40004c00 	.word	0x40004c00
 8003f04:	00f42400 	.word	0x00f42400
 8003f08:	080066b4 	.word	0x080066b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	4a87      	ldr	r2, [pc, #540]	; (8004138 <UART_SetConfig+0x548>)
 8003f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f04f 0400 	mov.w	r4, #0
 8003f24:	461a      	mov	r2, r3
 8003f26:	4623      	mov	r3, r4
 8003f28:	f7fc fe76 	bl	8000c18 <__aeabi_uldivmod>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	4619      	mov	r1, r3
 8003f32:	4622      	mov	r2, r4
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	f04f 0400 	mov.w	r4, #0
 8003f3c:	0214      	lsls	r4, r2, #8
 8003f3e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003f42:	020b      	lsls	r3, r1, #8
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6852      	ldr	r2, [r2, #4]
 8003f48:	0852      	lsrs	r2, r2, #1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	eb13 0b01 	adds.w	fp, r3, r1
 8003f54:	eb44 0c02 	adc.w	ip, r4, r2
 8003f58:	4658      	mov	r0, fp
 8003f5a:	4661      	mov	r1, ip
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f04f 0400 	mov.w	r4, #0
 8003f64:	461a      	mov	r2, r3
 8003f66:	4623      	mov	r3, r4
 8003f68:	f7fc fe56 	bl	8000c18 <__aeabi_uldivmod>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	460c      	mov	r4, r1
 8003f70:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f78:	d308      	bcc.n	8003f8c <UART_SetConfig+0x39c>
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f80:	d204      	bcs.n	8003f8c <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	60da      	str	r2, [r3, #12]
 8003f8a:	e0c1      	b.n	8004110 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	76bb      	strb	r3, [r7, #26]
 8003f90:	e0be      	b.n	8004110 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9a:	d164      	bne.n	8004066 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8003f9c:	7efb      	ldrb	r3, [r7, #27]
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d827      	bhi.n	8003ff2 <UART_SetConfig+0x402>
 8003fa2:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <UART_SetConfig+0x3b8>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	08003fcd 	.word	0x08003fcd
 8003fac:	08003fd5 	.word	0x08003fd5
 8003fb0:	08003fdd 	.word	0x08003fdd
 8003fb4:	08003ff3 	.word	0x08003ff3
 8003fb8:	08003fe3 	.word	0x08003fe3
 8003fbc:	08003ff3 	.word	0x08003ff3
 8003fc0:	08003ff3 	.word	0x08003ff3
 8003fc4:	08003ff3 	.word	0x08003ff3
 8003fc8:	08003feb 	.word	0x08003feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fcc:	f7ff f8a2 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 8003fd0:	6178      	str	r0, [r7, #20]
        break;
 8003fd2:	e013      	b.n	8003ffc <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fd4:	f7ff f8b4 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
 8003fd8:	6178      	str	r0, [r7, #20]
        break;
 8003fda:	e00f      	b.n	8003ffc <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fdc:	4b57      	ldr	r3, [pc, #348]	; (800413c <UART_SetConfig+0x54c>)
 8003fde:	617b      	str	r3, [r7, #20]
        break;
 8003fe0:	e00c      	b.n	8003ffc <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe2:	f7ff f829 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8003fe6:	6178      	str	r0, [r7, #20]
        break;
 8003fe8:	e008      	b.n	8003ffc <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fee:	617b      	str	r3, [r7, #20]
        break;
 8003ff0:	e004      	b.n	8003ffc <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	76bb      	strb	r3, [r7, #26]
        break;
 8003ffa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 8086 	beq.w	8004110 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	4a4b      	ldr	r2, [pc, #300]	; (8004138 <UART_SetConfig+0x548>)
 800400a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800400e:	461a      	mov	r2, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	fbb3 f3f2 	udiv	r3, r3, r2
 8004016:	005a      	lsls	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	441a      	add	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	b29b      	uxth	r3, r3
 800402a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	d916      	bls.n	8004060 <UART_SetConfig+0x470>
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004038:	d212      	bcs.n	8004060 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f023 030f 	bic.w	r3, r3, #15
 8004042:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	b29b      	uxth	r3, r3
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	b29a      	uxth	r2, r3
 8004050:	89fb      	ldrh	r3, [r7, #14]
 8004052:	4313      	orrs	r3, r2
 8004054:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	89fa      	ldrh	r2, [r7, #14]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	e057      	b.n	8004110 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	76bb      	strb	r3, [r7, #26]
 8004064:	e054      	b.n	8004110 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004066:	7efb      	ldrb	r3, [r7, #27]
 8004068:	2b08      	cmp	r3, #8
 800406a:	d828      	bhi.n	80040be <UART_SetConfig+0x4ce>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0x484>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004099 	.word	0x08004099
 8004078:	080040a1 	.word	0x080040a1
 800407c:	080040a9 	.word	0x080040a9
 8004080:	080040bf 	.word	0x080040bf
 8004084:	080040af 	.word	0x080040af
 8004088:	080040bf 	.word	0x080040bf
 800408c:	080040bf 	.word	0x080040bf
 8004090:	080040bf 	.word	0x080040bf
 8004094:	080040b7 	.word	0x080040b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004098:	f7ff f83c 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 800409c:	6178      	str	r0, [r7, #20]
        break;
 800409e:	e013      	b.n	80040c8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7ff f84e 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
 80040a4:	6178      	str	r0, [r7, #20]
        break;
 80040a6:	e00f      	b.n	80040c8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a8:	4b24      	ldr	r3, [pc, #144]	; (800413c <UART_SetConfig+0x54c>)
 80040aa:	617b      	str	r3, [r7, #20]
        break;
 80040ac:	e00c      	b.n	80040c8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ae:	f7fe ffc3 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 80040b2:	6178      	str	r0, [r7, #20]
        break;
 80040b4:	e008      	b.n	80040c8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ba:	617b      	str	r3, [r7, #20]
        break;
 80040bc:	e004      	b.n	80040c8 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	76bb      	strb	r3, [r7, #26]
        break;
 80040c6:	bf00      	nop
    }

    if (pclk != 0U)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d020      	beq.n	8004110 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	4a19      	ldr	r2, [pc, #100]	; (8004138 <UART_SetConfig+0x548>)
 80040d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040d8:	461a      	mov	r2, r3
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	441a      	add	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2b0f      	cmp	r3, #15
 80040f8:	d908      	bls.n	800410c <UART_SetConfig+0x51c>
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004100:	d204      	bcs.n	800410c <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	e001      	b.n	8004110 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800412c:	7ebb      	ldrb	r3, [r7, #26]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004138:	080066b4 	.word	0x080066b4
 800413c:	00f42400 	.word	0x00f42400

08004140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01a      	beq.n	8004256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800423e:	d10a      	bne.n	8004256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	605a      	str	r2, [r3, #4]
  }
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af02      	add	r7, sp, #8
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004294:	f7fd fc16 	bl	8001ac4 <HAL_GetTick>
 8004298:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d10e      	bne.n	80042c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f82c 	bl	8004314 <UART_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e022      	b.n	800430c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d10e      	bne.n	80042f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f816 	bl	8004314 <UART_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e00c      	b.n	800430c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004324:	e062      	b.n	80043ec <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d05e      	beq.n	80043ec <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432e:	f7fd fbc9 	bl	8001ac4 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	429a      	cmp	r2, r3
 800433c:	d302      	bcc.n	8004344 <UART_WaitOnFlagUntilTimeout+0x30>
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d11d      	bne.n	8004380 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004352:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0201 	bic.w	r2, r2, #1
 8004362:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e045      	b.n	800440c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d02e      	beq.n	80043ec <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439c:	d126      	bne.n	80043ec <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043b6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0201 	bic.w	r2, r2, #1
 80043c6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e00f      	b.n	800440c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69da      	ldr	r2, [r3, #28]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4013      	ands	r3, r2
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	429a      	cmp	r2, r3
 8004408:	d08d      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800442a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800443a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004466:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d11f      	bne.n	80044f2 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044c8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0201 	bic.w	r2, r2, #1
 80044d8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e8:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7fc ff22 	bl	800133c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7ff fb5a 	bl	8003bc8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004530:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004538:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004544:	2b80      	cmp	r3, #128	; 0x80
 8004546:	d109      	bne.n	800455c <UART_DMAError+0x40>
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b21      	cmp	r3, #33	; 0x21
 800454c:	d106      	bne.n	800455c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004556:	6978      	ldr	r0, [r7, #20]
 8004558:	f7ff ff5c 	bl	8004414 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d109      	bne.n	800457e <UART_DMAError+0x62>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b22      	cmp	r3, #34	; 0x22
 800456e:	d106      	bne.n	800457e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2200      	movs	r2, #0
 8004574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004578:	6978      	ldr	r0, [r7, #20]
 800457a:	f7ff ff69 	bl	8004450 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	f043 0210 	orr.w	r2, r3, #16
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800458e:	6978      	ldr	r0, [r7, #20]
 8004590:	f7ff fb24 	bl	8003bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004594:	bf00      	nop
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f7ff fb0e 	bl	8003bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045de:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff fae0 	bl	8003bb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_UARTEx_DisableFifoMode+0x16>
 800464a:	2302      	movs	r3, #2
 800464c:	e027      	b.n	800469e <HAL_UARTEx_DisableFifoMode+0x66>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2224      	movs	r2, #36	; 0x24
 800465a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800467c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046be:	2302      	movs	r3, #2
 80046c0:	e02d      	b.n	800471e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2224      	movs	r2, #36	; 0x24
 80046ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0201 	bic.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f850 	bl	80047a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800473a:	2302      	movs	r3, #2
 800473c:	e02d      	b.n	800479a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2224      	movs	r2, #36	; 0x24
 800474a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f812 	bl	80047a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b089      	sub	sp, #36	; 0x24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80047ac:	4a2f      	ldr	r2, [pc, #188]	; (800486c <UARTEx_SetNbDataToProcess+0xc8>)
 80047ae:	f107 0314 	add.w	r3, r7, #20
 80047b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047b6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80047ba:	4a2d      	ldr	r2, [pc, #180]	; (8004870 <UARTEx_SetNbDataToProcess+0xcc>)
 80047bc:	f107 030c 	add.w	r3, r7, #12
 80047c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047c4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d108      	bne.n	80047e2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047e0:	e03d      	b.n	800485e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047e2:	2308      	movs	r3, #8
 80047e4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047e6:	2308      	movs	r3, #8
 80047e8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	0e5b      	lsrs	r3, r3, #25
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	0f5b      	lsrs	r3, r3, #29
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800480a:	7fbb      	ldrb	r3, [r7, #30]
 800480c:	7f3a      	ldrb	r2, [r7, #28]
 800480e:	f107 0120 	add.w	r1, r7, #32
 8004812:	440a      	add	r2, r1
 8004814:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004818:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800481c:	7f3a      	ldrb	r2, [r7, #28]
 800481e:	f107 0120 	add.w	r1, r7, #32
 8004822:	440a      	add	r2, r1
 8004824:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004828:	fb93 f3f2 	sdiv	r3, r3, r2
 800482c:	b29a      	uxth	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004834:	7ffb      	ldrb	r3, [r7, #31]
 8004836:	7f7a      	ldrb	r2, [r7, #29]
 8004838:	f107 0120 	add.w	r1, r7, #32
 800483c:	440a      	add	r2, r1
 800483e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004846:	7f7a      	ldrb	r2, [r7, #29]
 8004848:	f107 0120 	add.w	r1, r7, #32
 800484c:	440a      	add	r2, r1
 800484e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004852:	fb93 f3f2 	sdiv	r3, r3, r2
 8004856:	b29a      	uxth	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800485e:	bf00      	nop
 8004860:	3724      	adds	r7, #36	; 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	0800668c 	.word	0x0800668c
 8004870:	08006694 	.word	0x08006694

08004874 <atof>:
 8004874:	2100      	movs	r1, #0
 8004876:	f000 be6b 	b.w	8005550 <strtod>

0800487a <atol>:
 800487a:	220a      	movs	r2, #10
 800487c:	2100      	movs	r1, #0
 800487e:	f000 bef7 	b.w	8005670 <strtol>
	...

08004884 <__errno>:
 8004884:	4b01      	ldr	r3, [pc, #4]	; (800488c <__errno+0x8>)
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	2000000c 	.word	0x2000000c

08004890 <__libc_init_array>:
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	4e0d      	ldr	r6, [pc, #52]	; (80048c8 <__libc_init_array+0x38>)
 8004894:	4c0d      	ldr	r4, [pc, #52]	; (80048cc <__libc_init_array+0x3c>)
 8004896:	1ba4      	subs	r4, r4, r6
 8004898:	10a4      	asrs	r4, r4, #2
 800489a:	2500      	movs	r5, #0
 800489c:	42a5      	cmp	r5, r4
 800489e:	d109      	bne.n	80048b4 <__libc_init_array+0x24>
 80048a0:	4e0b      	ldr	r6, [pc, #44]	; (80048d0 <__libc_init_array+0x40>)
 80048a2:	4c0c      	ldr	r4, [pc, #48]	; (80048d4 <__libc_init_array+0x44>)
 80048a4:	f001 fee4 	bl	8006670 <_init>
 80048a8:	1ba4      	subs	r4, r4, r6
 80048aa:	10a4      	asrs	r4, r4, #2
 80048ac:	2500      	movs	r5, #0
 80048ae:	42a5      	cmp	r5, r4
 80048b0:	d105      	bne.n	80048be <__libc_init_array+0x2e>
 80048b2:	bd70      	pop	{r4, r5, r6, pc}
 80048b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048b8:	4798      	blx	r3
 80048ba:	3501      	adds	r5, #1
 80048bc:	e7ee      	b.n	800489c <__libc_init_array+0xc>
 80048be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048c2:	4798      	blx	r3
 80048c4:	3501      	adds	r5, #1
 80048c6:	e7f2      	b.n	80048ae <__libc_init_array+0x1e>
 80048c8:	08006940 	.word	0x08006940
 80048cc:	08006940 	.word	0x08006940
 80048d0:	08006940 	.word	0x08006940
 80048d4:	08006944 	.word	0x08006944

080048d8 <memset>:
 80048d8:	4402      	add	r2, r0
 80048da:	4603      	mov	r3, r0
 80048dc:	4293      	cmp	r3, r2
 80048de:	d100      	bne.n	80048e2 <memset+0xa>
 80048e0:	4770      	bx	lr
 80048e2:	f803 1b01 	strb.w	r1, [r3], #1
 80048e6:	e7f9      	b.n	80048dc <memset+0x4>

080048e8 <strchr>:
 80048e8:	b2c9      	uxtb	r1, r1
 80048ea:	4603      	mov	r3, r0
 80048ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048f0:	b11a      	cbz	r2, 80048fa <strchr+0x12>
 80048f2:	428a      	cmp	r2, r1
 80048f4:	d1f9      	bne.n	80048ea <strchr+0x2>
 80048f6:	4618      	mov	r0, r3
 80048f8:	4770      	bx	lr
 80048fa:	2900      	cmp	r1, #0
 80048fc:	bf18      	it	ne
 80048fe:	2300      	movne	r3, #0
 8004900:	e7f9      	b.n	80048f6 <strchr+0xe>

08004902 <strncpy>:
 8004902:	b570      	push	{r4, r5, r6, lr}
 8004904:	3901      	subs	r1, #1
 8004906:	4604      	mov	r4, r0
 8004908:	b902      	cbnz	r2, 800490c <strncpy+0xa>
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	4623      	mov	r3, r4
 800490e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8004912:	f803 5b01 	strb.w	r5, [r3], #1
 8004916:	1e56      	subs	r6, r2, #1
 8004918:	b92d      	cbnz	r5, 8004926 <strncpy+0x24>
 800491a:	4414      	add	r4, r2
 800491c:	42a3      	cmp	r3, r4
 800491e:	d0f4      	beq.n	800490a <strncpy+0x8>
 8004920:	f803 5b01 	strb.w	r5, [r3], #1
 8004924:	e7fa      	b.n	800491c <strncpy+0x1a>
 8004926:	461c      	mov	r4, r3
 8004928:	4632      	mov	r2, r6
 800492a:	e7ed      	b.n	8004908 <strncpy+0x6>

0800492c <sulp>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4604      	mov	r4, r0
 8004930:	460d      	mov	r5, r1
 8004932:	ec45 4b10 	vmov	d0, r4, r5
 8004936:	4616      	mov	r6, r2
 8004938:	f001 fcc4 	bl	80062c4 <__ulp>
 800493c:	ec51 0b10 	vmov	r0, r1, d0
 8004940:	b17e      	cbz	r6, 8004962 <sulp+0x36>
 8004942:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004946:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800494a:	2b00      	cmp	r3, #0
 800494c:	dd09      	ble.n	8004962 <sulp+0x36>
 800494e:	051b      	lsls	r3, r3, #20
 8004950:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004954:	2400      	movs	r4, #0
 8004956:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800495a:	4622      	mov	r2, r4
 800495c:	462b      	mov	r3, r5
 800495e:	f7fb fe29 	bl	80005b4 <__aeabi_dmul>
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	0000      	movs	r0, r0
	...

08004968 <_strtod_l>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	461f      	mov	r7, r3
 800496e:	b0a1      	sub	sp, #132	; 0x84
 8004970:	2300      	movs	r3, #0
 8004972:	4681      	mov	r9, r0
 8004974:	4638      	mov	r0, r7
 8004976:	460e      	mov	r6, r1
 8004978:	9217      	str	r2, [sp, #92]	; 0x5c
 800497a:	931c      	str	r3, [sp, #112]	; 0x70
 800497c:	f001 f9b7 	bl	8005cee <__localeconv_l>
 8004980:	4680      	mov	r8, r0
 8004982:	6800      	ldr	r0, [r0, #0]
 8004984:	f7fb fc52 	bl	800022c <strlen>
 8004988:	f04f 0a00 	mov.w	sl, #0
 800498c:	4604      	mov	r4, r0
 800498e:	f04f 0b00 	mov.w	fp, #0
 8004992:	961b      	str	r6, [sp, #108]	; 0x6c
 8004994:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004996:	781a      	ldrb	r2, [r3, #0]
 8004998:	2a0d      	cmp	r2, #13
 800499a:	d832      	bhi.n	8004a02 <_strtod_l+0x9a>
 800499c:	2a09      	cmp	r2, #9
 800499e:	d236      	bcs.n	8004a0e <_strtod_l+0xa6>
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	d03e      	beq.n	8004a22 <_strtod_l+0xba>
 80049a4:	2300      	movs	r3, #0
 80049a6:	930d      	str	r3, [sp, #52]	; 0x34
 80049a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80049aa:	782b      	ldrb	r3, [r5, #0]
 80049ac:	2b30      	cmp	r3, #48	; 0x30
 80049ae:	f040 80ac 	bne.w	8004b0a <_strtod_l+0x1a2>
 80049b2:	786b      	ldrb	r3, [r5, #1]
 80049b4:	2b58      	cmp	r3, #88	; 0x58
 80049b6:	d001      	beq.n	80049bc <_strtod_l+0x54>
 80049b8:	2b78      	cmp	r3, #120	; 0x78
 80049ba:	d167      	bne.n	8004a8c <_strtod_l+0x124>
 80049bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	ab1c      	add	r3, sp, #112	; 0x70
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	9702      	str	r7, [sp, #8]
 80049c6:	ab1d      	add	r3, sp, #116	; 0x74
 80049c8:	4a88      	ldr	r2, [pc, #544]	; (8004bec <_strtod_l+0x284>)
 80049ca:	a91b      	add	r1, sp, #108	; 0x6c
 80049cc:	4648      	mov	r0, r9
 80049ce:	f000 feb4 	bl	800573a <__gethex>
 80049d2:	f010 0407 	ands.w	r4, r0, #7
 80049d6:	4606      	mov	r6, r0
 80049d8:	d005      	beq.n	80049e6 <_strtod_l+0x7e>
 80049da:	2c06      	cmp	r4, #6
 80049dc:	d12b      	bne.n	8004a36 <_strtod_l+0xce>
 80049de:	3501      	adds	r5, #1
 80049e0:	2300      	movs	r3, #0
 80049e2:	951b      	str	r5, [sp, #108]	; 0x6c
 80049e4:	930d      	str	r3, [sp, #52]	; 0x34
 80049e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f040 859a 	bne.w	8005522 <_strtod_l+0xbba>
 80049ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049f0:	b1e3      	cbz	r3, 8004a2c <_strtod_l+0xc4>
 80049f2:	4652      	mov	r2, sl
 80049f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80049f8:	ec43 2b10 	vmov	d0, r2, r3
 80049fc:	b021      	add	sp, #132	; 0x84
 80049fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a02:	2a2b      	cmp	r2, #43	; 0x2b
 8004a04:	d015      	beq.n	8004a32 <_strtod_l+0xca>
 8004a06:	2a2d      	cmp	r2, #45	; 0x2d
 8004a08:	d004      	beq.n	8004a14 <_strtod_l+0xac>
 8004a0a:	2a20      	cmp	r2, #32
 8004a0c:	d1ca      	bne.n	80049a4 <_strtod_l+0x3c>
 8004a0e:	3301      	adds	r3, #1
 8004a10:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a12:	e7bf      	b.n	8004994 <_strtod_l+0x2c>
 8004a14:	2201      	movs	r2, #1
 8004a16:	920d      	str	r2, [sp, #52]	; 0x34
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	921b      	str	r2, [sp, #108]	; 0x6c
 8004a1c:	785b      	ldrb	r3, [r3, #1]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1c2      	bne.n	80049a8 <_strtod_l+0x40>
 8004a22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a24:	961b      	str	r6, [sp, #108]	; 0x6c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f040 8579 	bne.w	800551e <_strtod_l+0xbb6>
 8004a2c:	4652      	mov	r2, sl
 8004a2e:	465b      	mov	r3, fp
 8004a30:	e7e2      	b.n	80049f8 <_strtod_l+0x90>
 8004a32:	2200      	movs	r2, #0
 8004a34:	e7ef      	b.n	8004a16 <_strtod_l+0xae>
 8004a36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004a38:	b13a      	cbz	r2, 8004a4a <_strtod_l+0xe2>
 8004a3a:	2135      	movs	r1, #53	; 0x35
 8004a3c:	a81e      	add	r0, sp, #120	; 0x78
 8004a3e:	f001 fd39 	bl	80064b4 <__copybits>
 8004a42:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004a44:	4648      	mov	r0, r9
 8004a46:	f001 f9a5 	bl	8005d94 <_Bfree>
 8004a4a:	3c01      	subs	r4, #1
 8004a4c:	2c04      	cmp	r4, #4
 8004a4e:	d806      	bhi.n	8004a5e <_strtod_l+0xf6>
 8004a50:	e8df f004 	tbb	[pc, r4]
 8004a54:	1714030a 	.word	0x1714030a
 8004a58:	0a          	.byte	0x0a
 8004a59:	00          	.byte	0x00
 8004a5a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8004a5e:	0730      	lsls	r0, r6, #28
 8004a60:	d5c1      	bpl.n	80049e6 <_strtod_l+0x7e>
 8004a62:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004a66:	e7be      	b.n	80049e6 <_strtod_l+0x7e>
 8004a68:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004a6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004a6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004a72:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004a76:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004a7a:	e7f0      	b.n	8004a5e <_strtod_l+0xf6>
 8004a7c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8004bf0 <_strtod_l+0x288>
 8004a80:	e7ed      	b.n	8004a5e <_strtod_l+0xf6>
 8004a82:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004a86:	f04f 3aff 	mov.w	sl, #4294967295
 8004a8a:	e7e8      	b.n	8004a5e <_strtod_l+0xf6>
 8004a8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	921b      	str	r2, [sp, #108]	; 0x6c
 8004a92:	785b      	ldrb	r3, [r3, #1]
 8004a94:	2b30      	cmp	r3, #48	; 0x30
 8004a96:	d0f9      	beq.n	8004a8c <_strtod_l+0x124>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0a4      	beq.n	80049e6 <_strtod_l+0x7e>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	2500      	movs	r5, #0
 8004aa0:	9306      	str	r3, [sp, #24]
 8004aa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004aa4:	9308      	str	r3, [sp, #32]
 8004aa6:	9507      	str	r5, [sp, #28]
 8004aa8:	9505      	str	r5, [sp, #20]
 8004aaa:	220a      	movs	r2, #10
 8004aac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004aae:	7807      	ldrb	r7, [r0, #0]
 8004ab0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004ab4:	b2d9      	uxtb	r1, r3
 8004ab6:	2909      	cmp	r1, #9
 8004ab8:	d929      	bls.n	8004b0e <_strtod_l+0x1a6>
 8004aba:	4622      	mov	r2, r4
 8004abc:	f8d8 1000 	ldr.w	r1, [r8]
 8004ac0:	f001 fdac 	bl	800661c <strncmp>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d031      	beq.n	8004b2c <_strtod_l+0x1c4>
 8004ac8:	2000      	movs	r0, #0
 8004aca:	9c05      	ldr	r4, [sp, #20]
 8004acc:	9004      	str	r0, [sp, #16]
 8004ace:	463b      	mov	r3, r7
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	2b65      	cmp	r3, #101	; 0x65
 8004ad4:	d001      	beq.n	8004ada <_strtod_l+0x172>
 8004ad6:	2b45      	cmp	r3, #69	; 0x45
 8004ad8:	d114      	bne.n	8004b04 <_strtod_l+0x19c>
 8004ada:	b924      	cbnz	r4, 8004ae6 <_strtod_l+0x17e>
 8004adc:	b910      	cbnz	r0, 8004ae4 <_strtod_l+0x17c>
 8004ade:	9b06      	ldr	r3, [sp, #24]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d09e      	beq.n	8004a22 <_strtod_l+0xba>
 8004ae4:	2400      	movs	r4, #0
 8004ae6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004ae8:	1c73      	adds	r3, r6, #1
 8004aea:	931b      	str	r3, [sp, #108]	; 0x6c
 8004aec:	7873      	ldrb	r3, [r6, #1]
 8004aee:	2b2b      	cmp	r3, #43	; 0x2b
 8004af0:	d078      	beq.n	8004be4 <_strtod_l+0x27c>
 8004af2:	2b2d      	cmp	r3, #45	; 0x2d
 8004af4:	d070      	beq.n	8004bd8 <_strtod_l+0x270>
 8004af6:	f04f 0c00 	mov.w	ip, #0
 8004afa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004afe:	2f09      	cmp	r7, #9
 8004b00:	d97c      	bls.n	8004bfc <_strtod_l+0x294>
 8004b02:	961b      	str	r6, [sp, #108]	; 0x6c
 8004b04:	f04f 0e00 	mov.w	lr, #0
 8004b08:	e09a      	b.n	8004c40 <_strtod_l+0x2d8>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e7c7      	b.n	8004a9e <_strtod_l+0x136>
 8004b0e:	9905      	ldr	r1, [sp, #20]
 8004b10:	2908      	cmp	r1, #8
 8004b12:	bfdd      	ittte	le
 8004b14:	9907      	ldrle	r1, [sp, #28]
 8004b16:	fb02 3301 	mlale	r3, r2, r1, r3
 8004b1a:	9307      	strle	r3, [sp, #28]
 8004b1c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004b20:	9b05      	ldr	r3, [sp, #20]
 8004b22:	3001      	adds	r0, #1
 8004b24:	3301      	adds	r3, #1
 8004b26:	9305      	str	r3, [sp, #20]
 8004b28:	901b      	str	r0, [sp, #108]	; 0x6c
 8004b2a:	e7bf      	b.n	8004aac <_strtod_l+0x144>
 8004b2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b2e:	191a      	adds	r2, r3, r4
 8004b30:	921b      	str	r2, [sp, #108]	; 0x6c
 8004b32:	9a05      	ldr	r2, [sp, #20]
 8004b34:	5d1b      	ldrb	r3, [r3, r4]
 8004b36:	2a00      	cmp	r2, #0
 8004b38:	d037      	beq.n	8004baa <_strtod_l+0x242>
 8004b3a:	9c05      	ldr	r4, [sp, #20]
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004b42:	2909      	cmp	r1, #9
 8004b44:	d913      	bls.n	8004b6e <_strtod_l+0x206>
 8004b46:	2101      	movs	r1, #1
 8004b48:	9104      	str	r1, [sp, #16]
 8004b4a:	e7c2      	b.n	8004ad2 <_strtod_l+0x16a>
 8004b4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	921b      	str	r2, [sp, #108]	; 0x6c
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	3001      	adds	r0, #1
 8004b56:	2b30      	cmp	r3, #48	; 0x30
 8004b58:	d0f8      	beq.n	8004b4c <_strtod_l+0x1e4>
 8004b5a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004b5e:	2a08      	cmp	r2, #8
 8004b60:	f200 84e4 	bhi.w	800552c <_strtod_l+0xbc4>
 8004b64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004b66:	9208      	str	r2, [sp, #32]
 8004b68:	4602      	mov	r2, r0
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004b72:	f100 0101 	add.w	r1, r0, #1
 8004b76:	d012      	beq.n	8004b9e <_strtod_l+0x236>
 8004b78:	440a      	add	r2, r1
 8004b7a:	eb00 0c04 	add.w	ip, r0, r4
 8004b7e:	4621      	mov	r1, r4
 8004b80:	270a      	movs	r7, #10
 8004b82:	458c      	cmp	ip, r1
 8004b84:	d113      	bne.n	8004bae <_strtod_l+0x246>
 8004b86:	1821      	adds	r1, r4, r0
 8004b88:	2908      	cmp	r1, #8
 8004b8a:	f104 0401 	add.w	r4, r4, #1
 8004b8e:	4404      	add	r4, r0
 8004b90:	dc19      	bgt.n	8004bc6 <_strtod_l+0x25e>
 8004b92:	9b07      	ldr	r3, [sp, #28]
 8004b94:	210a      	movs	r1, #10
 8004b96:	fb01 e303 	mla	r3, r1, r3, lr
 8004b9a:	9307      	str	r3, [sp, #28]
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ba0:	1c58      	adds	r0, r3, #1
 8004ba2:	901b      	str	r0, [sp, #108]	; 0x6c
 8004ba4:	785b      	ldrb	r3, [r3, #1]
 8004ba6:	4608      	mov	r0, r1
 8004ba8:	e7c9      	b.n	8004b3e <_strtod_l+0x1d6>
 8004baa:	9805      	ldr	r0, [sp, #20]
 8004bac:	e7d3      	b.n	8004b56 <_strtod_l+0x1ee>
 8004bae:	2908      	cmp	r1, #8
 8004bb0:	f101 0101 	add.w	r1, r1, #1
 8004bb4:	dc03      	bgt.n	8004bbe <_strtod_l+0x256>
 8004bb6:	9b07      	ldr	r3, [sp, #28]
 8004bb8:	437b      	muls	r3, r7
 8004bba:	9307      	str	r3, [sp, #28]
 8004bbc:	e7e1      	b.n	8004b82 <_strtod_l+0x21a>
 8004bbe:	2910      	cmp	r1, #16
 8004bc0:	bfd8      	it	le
 8004bc2:	437d      	mulle	r5, r7
 8004bc4:	e7dd      	b.n	8004b82 <_strtod_l+0x21a>
 8004bc6:	2c10      	cmp	r4, #16
 8004bc8:	bfdc      	itt	le
 8004bca:	210a      	movle	r1, #10
 8004bcc:	fb01 e505 	mlale	r5, r1, r5, lr
 8004bd0:	e7e4      	b.n	8004b9c <_strtod_l+0x234>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	9304      	str	r3, [sp, #16]
 8004bd6:	e781      	b.n	8004adc <_strtod_l+0x174>
 8004bd8:	f04f 0c01 	mov.w	ip, #1
 8004bdc:	1cb3      	adds	r3, r6, #2
 8004bde:	931b      	str	r3, [sp, #108]	; 0x6c
 8004be0:	78b3      	ldrb	r3, [r6, #2]
 8004be2:	e78a      	b.n	8004afa <_strtod_l+0x192>
 8004be4:	f04f 0c00 	mov.w	ip, #0
 8004be8:	e7f8      	b.n	8004bdc <_strtod_l+0x274>
 8004bea:	bf00      	nop
 8004bec:	080066d8 	.word	0x080066d8
 8004bf0:	7ff00000 	.word	0x7ff00000
 8004bf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bf6:	1c5f      	adds	r7, r3, #1
 8004bf8:	971b      	str	r7, [sp, #108]	; 0x6c
 8004bfa:	785b      	ldrb	r3, [r3, #1]
 8004bfc:	2b30      	cmp	r3, #48	; 0x30
 8004bfe:	d0f9      	beq.n	8004bf4 <_strtod_l+0x28c>
 8004c00:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004c04:	2f08      	cmp	r7, #8
 8004c06:	f63f af7d 	bhi.w	8004b04 <_strtod_l+0x19c>
 8004c0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004c0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c10:	930a      	str	r3, [sp, #40]	; 0x28
 8004c12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c14:	1c5f      	adds	r7, r3, #1
 8004c16:	971b      	str	r7, [sp, #108]	; 0x6c
 8004c18:	785b      	ldrb	r3, [r3, #1]
 8004c1a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004c1e:	f1b8 0f09 	cmp.w	r8, #9
 8004c22:	d937      	bls.n	8004c94 <_strtod_l+0x32c>
 8004c24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004c26:	1a7f      	subs	r7, r7, r1
 8004c28:	2f08      	cmp	r7, #8
 8004c2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004c2e:	dc37      	bgt.n	8004ca0 <_strtod_l+0x338>
 8004c30:	45be      	cmp	lr, r7
 8004c32:	bfa8      	it	ge
 8004c34:	46be      	movge	lr, r7
 8004c36:	f1bc 0f00 	cmp.w	ip, #0
 8004c3a:	d001      	beq.n	8004c40 <_strtod_l+0x2d8>
 8004c3c:	f1ce 0e00 	rsb	lr, lr, #0
 8004c40:	2c00      	cmp	r4, #0
 8004c42:	d151      	bne.n	8004ce8 <_strtod_l+0x380>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	f47f aece 	bne.w	80049e6 <_strtod_l+0x7e>
 8004c4a:	9a06      	ldr	r2, [sp, #24]
 8004c4c:	2a00      	cmp	r2, #0
 8004c4e:	f47f aeca 	bne.w	80049e6 <_strtod_l+0x7e>
 8004c52:	9a04      	ldr	r2, [sp, #16]
 8004c54:	2a00      	cmp	r2, #0
 8004c56:	f47f aee4 	bne.w	8004a22 <_strtod_l+0xba>
 8004c5a:	2b4e      	cmp	r3, #78	; 0x4e
 8004c5c:	d027      	beq.n	8004cae <_strtod_l+0x346>
 8004c5e:	dc21      	bgt.n	8004ca4 <_strtod_l+0x33c>
 8004c60:	2b49      	cmp	r3, #73	; 0x49
 8004c62:	f47f aede 	bne.w	8004a22 <_strtod_l+0xba>
 8004c66:	49a0      	ldr	r1, [pc, #640]	; (8004ee8 <_strtod_l+0x580>)
 8004c68:	a81b      	add	r0, sp, #108	; 0x6c
 8004c6a:	f000 ff99 	bl	8005ba0 <__match>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	f43f aed7 	beq.w	8004a22 <_strtod_l+0xba>
 8004c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c76:	499d      	ldr	r1, [pc, #628]	; (8004eec <_strtod_l+0x584>)
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	a81b      	add	r0, sp, #108	; 0x6c
 8004c7c:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c7e:	f000 ff8f 	bl	8005ba0 <__match>
 8004c82:	b910      	cbnz	r0, 8004c8a <_strtod_l+0x322>
 8004c84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c86:	3301      	adds	r3, #1
 8004c88:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c8a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8004f00 <_strtod_l+0x598>
 8004c8e:	f04f 0a00 	mov.w	sl, #0
 8004c92:	e6a8      	b.n	80049e6 <_strtod_l+0x7e>
 8004c94:	210a      	movs	r1, #10
 8004c96:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004c9a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004c9e:	e7b8      	b.n	8004c12 <_strtod_l+0x2aa>
 8004ca0:	46be      	mov	lr, r7
 8004ca2:	e7c8      	b.n	8004c36 <_strtod_l+0x2ce>
 8004ca4:	2b69      	cmp	r3, #105	; 0x69
 8004ca6:	d0de      	beq.n	8004c66 <_strtod_l+0x2fe>
 8004ca8:	2b6e      	cmp	r3, #110	; 0x6e
 8004caa:	f47f aeba 	bne.w	8004a22 <_strtod_l+0xba>
 8004cae:	4990      	ldr	r1, [pc, #576]	; (8004ef0 <_strtod_l+0x588>)
 8004cb0:	a81b      	add	r0, sp, #108	; 0x6c
 8004cb2:	f000 ff75 	bl	8005ba0 <__match>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	f43f aeb3 	beq.w	8004a22 <_strtod_l+0xba>
 8004cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b28      	cmp	r3, #40	; 0x28
 8004cc2:	d10e      	bne.n	8004ce2 <_strtod_l+0x37a>
 8004cc4:	aa1e      	add	r2, sp, #120	; 0x78
 8004cc6:	498b      	ldr	r1, [pc, #556]	; (8004ef4 <_strtod_l+0x58c>)
 8004cc8:	a81b      	add	r0, sp, #108	; 0x6c
 8004cca:	f000 ff7d 	bl	8005bc8 <__hexnan>
 8004cce:	2805      	cmp	r0, #5
 8004cd0:	d107      	bne.n	8004ce2 <_strtod_l+0x37a>
 8004cd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004cd4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004cd8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004cdc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004ce0:	e681      	b.n	80049e6 <_strtod_l+0x7e>
 8004ce2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8004f08 <_strtod_l+0x5a0>
 8004ce6:	e7d2      	b.n	8004c8e <_strtod_l+0x326>
 8004ce8:	ebae 0302 	sub.w	r3, lr, r2
 8004cec:	9306      	str	r3, [sp, #24]
 8004cee:	9b05      	ldr	r3, [sp, #20]
 8004cf0:	9807      	ldr	r0, [sp, #28]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf08      	it	eq
 8004cf6:	4623      	moveq	r3, r4
 8004cf8:	2c10      	cmp	r4, #16
 8004cfa:	9305      	str	r3, [sp, #20]
 8004cfc:	46a0      	mov	r8, r4
 8004cfe:	bfa8      	it	ge
 8004d00:	f04f 0810 	movge.w	r8, #16
 8004d04:	f7fb fbdc 	bl	80004c0 <__aeabi_ui2d>
 8004d08:	2c09      	cmp	r4, #9
 8004d0a:	4682      	mov	sl, r0
 8004d0c:	468b      	mov	fp, r1
 8004d0e:	dc13      	bgt.n	8004d38 <_strtod_l+0x3d0>
 8004d10:	9b06      	ldr	r3, [sp, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f43f ae67 	beq.w	80049e6 <_strtod_l+0x7e>
 8004d18:	9b06      	ldr	r3, [sp, #24]
 8004d1a:	dd7a      	ble.n	8004e12 <_strtod_l+0x4aa>
 8004d1c:	2b16      	cmp	r3, #22
 8004d1e:	dc61      	bgt.n	8004de4 <_strtod_l+0x47c>
 8004d20:	4a75      	ldr	r2, [pc, #468]	; (8004ef8 <_strtod_l+0x590>)
 8004d22:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004d26:	e9de 0100 	ldrd	r0, r1, [lr]
 8004d2a:	4652      	mov	r2, sl
 8004d2c:	465b      	mov	r3, fp
 8004d2e:	f7fb fc41 	bl	80005b4 <__aeabi_dmul>
 8004d32:	4682      	mov	sl, r0
 8004d34:	468b      	mov	fp, r1
 8004d36:	e656      	b.n	80049e6 <_strtod_l+0x7e>
 8004d38:	4b6f      	ldr	r3, [pc, #444]	; (8004ef8 <_strtod_l+0x590>)
 8004d3a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004d3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004d42:	f7fb fc37 	bl	80005b4 <__aeabi_dmul>
 8004d46:	4606      	mov	r6, r0
 8004d48:	4628      	mov	r0, r5
 8004d4a:	460f      	mov	r7, r1
 8004d4c:	f7fb fbb8 	bl	80004c0 <__aeabi_ui2d>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4630      	mov	r0, r6
 8004d56:	4639      	mov	r1, r7
 8004d58:	f7fb fa76 	bl	8000248 <__adddf3>
 8004d5c:	2c0f      	cmp	r4, #15
 8004d5e:	4682      	mov	sl, r0
 8004d60:	468b      	mov	fp, r1
 8004d62:	ddd5      	ble.n	8004d10 <_strtod_l+0x3a8>
 8004d64:	9b06      	ldr	r3, [sp, #24]
 8004d66:	eba4 0808 	sub.w	r8, r4, r8
 8004d6a:	4498      	add	r8, r3
 8004d6c:	f1b8 0f00 	cmp.w	r8, #0
 8004d70:	f340 8096 	ble.w	8004ea0 <_strtod_l+0x538>
 8004d74:	f018 030f 	ands.w	r3, r8, #15
 8004d78:	d00a      	beq.n	8004d90 <_strtod_l+0x428>
 8004d7a:	495f      	ldr	r1, [pc, #380]	; (8004ef8 <_strtod_l+0x590>)
 8004d7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004d80:	4652      	mov	r2, sl
 8004d82:	465b      	mov	r3, fp
 8004d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d88:	f7fb fc14 	bl	80005b4 <__aeabi_dmul>
 8004d8c:	4682      	mov	sl, r0
 8004d8e:	468b      	mov	fp, r1
 8004d90:	f038 080f 	bics.w	r8, r8, #15
 8004d94:	d073      	beq.n	8004e7e <_strtod_l+0x516>
 8004d96:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004d9a:	dd47      	ble.n	8004e2c <_strtod_l+0x4c4>
 8004d9c:	2400      	movs	r4, #0
 8004d9e:	46a0      	mov	r8, r4
 8004da0:	9407      	str	r4, [sp, #28]
 8004da2:	9405      	str	r4, [sp, #20]
 8004da4:	2322      	movs	r3, #34	; 0x22
 8004da6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8004f00 <_strtod_l+0x598>
 8004daa:	f8c9 3000 	str.w	r3, [r9]
 8004dae:	f04f 0a00 	mov.w	sl, #0
 8004db2:	9b07      	ldr	r3, [sp, #28]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f43f ae16 	beq.w	80049e6 <_strtod_l+0x7e>
 8004dba:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004dbc:	4648      	mov	r0, r9
 8004dbe:	f000 ffe9 	bl	8005d94 <_Bfree>
 8004dc2:	9905      	ldr	r1, [sp, #20]
 8004dc4:	4648      	mov	r0, r9
 8004dc6:	f000 ffe5 	bl	8005d94 <_Bfree>
 8004dca:	4641      	mov	r1, r8
 8004dcc:	4648      	mov	r0, r9
 8004dce:	f000 ffe1 	bl	8005d94 <_Bfree>
 8004dd2:	9907      	ldr	r1, [sp, #28]
 8004dd4:	4648      	mov	r0, r9
 8004dd6:	f000 ffdd 	bl	8005d94 <_Bfree>
 8004dda:	4621      	mov	r1, r4
 8004ddc:	4648      	mov	r0, r9
 8004dde:	f000 ffd9 	bl	8005d94 <_Bfree>
 8004de2:	e600      	b.n	80049e6 <_strtod_l+0x7e>
 8004de4:	9a06      	ldr	r2, [sp, #24]
 8004de6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004dea:	4293      	cmp	r3, r2
 8004dec:	dbba      	blt.n	8004d64 <_strtod_l+0x3fc>
 8004dee:	4d42      	ldr	r5, [pc, #264]	; (8004ef8 <_strtod_l+0x590>)
 8004df0:	f1c4 040f 	rsb	r4, r4, #15
 8004df4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004df8:	4652      	mov	r2, sl
 8004dfa:	465b      	mov	r3, fp
 8004dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e00:	f7fb fbd8 	bl	80005b4 <__aeabi_dmul>
 8004e04:	9b06      	ldr	r3, [sp, #24]
 8004e06:	1b1c      	subs	r4, r3, r4
 8004e08:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004e0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e10:	e78d      	b.n	8004d2e <_strtod_l+0x3c6>
 8004e12:	f113 0f16 	cmn.w	r3, #22
 8004e16:	dba5      	blt.n	8004d64 <_strtod_l+0x3fc>
 8004e18:	4a37      	ldr	r2, [pc, #220]	; (8004ef8 <_strtod_l+0x590>)
 8004e1a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004e1e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004e22:	4650      	mov	r0, sl
 8004e24:	4659      	mov	r1, fp
 8004e26:	f7fb fcef 	bl	8000808 <__aeabi_ddiv>
 8004e2a:	e782      	b.n	8004d32 <_strtod_l+0x3ca>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	4e33      	ldr	r6, [pc, #204]	; (8004efc <_strtod_l+0x594>)
 8004e30:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004e34:	4650      	mov	r0, sl
 8004e36:	4659      	mov	r1, fp
 8004e38:	461d      	mov	r5, r3
 8004e3a:	f1b8 0f01 	cmp.w	r8, #1
 8004e3e:	dc21      	bgt.n	8004e84 <_strtod_l+0x51c>
 8004e40:	b10b      	cbz	r3, 8004e46 <_strtod_l+0x4de>
 8004e42:	4682      	mov	sl, r0
 8004e44:	468b      	mov	fp, r1
 8004e46:	4b2d      	ldr	r3, [pc, #180]	; (8004efc <_strtod_l+0x594>)
 8004e48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004e4c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004e50:	4652      	mov	r2, sl
 8004e52:	465b      	mov	r3, fp
 8004e54:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004e58:	f7fb fbac 	bl	80005b4 <__aeabi_dmul>
 8004e5c:	4b28      	ldr	r3, [pc, #160]	; (8004f00 <_strtod_l+0x598>)
 8004e5e:	460a      	mov	r2, r1
 8004e60:	400b      	ands	r3, r1
 8004e62:	4928      	ldr	r1, [pc, #160]	; (8004f04 <_strtod_l+0x59c>)
 8004e64:	428b      	cmp	r3, r1
 8004e66:	4682      	mov	sl, r0
 8004e68:	d898      	bhi.n	8004d9c <_strtod_l+0x434>
 8004e6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004e6e:	428b      	cmp	r3, r1
 8004e70:	bf86      	itte	hi
 8004e72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004f0c <_strtod_l+0x5a4>
 8004e76:	f04f 3aff 	movhi.w	sl, #4294967295
 8004e7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9304      	str	r3, [sp, #16]
 8004e82:	e077      	b.n	8004f74 <_strtod_l+0x60c>
 8004e84:	f018 0f01 	tst.w	r8, #1
 8004e88:	d006      	beq.n	8004e98 <_strtod_l+0x530>
 8004e8a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	f7fb fb8f 	bl	80005b4 <__aeabi_dmul>
 8004e96:	2301      	movs	r3, #1
 8004e98:	3501      	adds	r5, #1
 8004e9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004e9e:	e7cc      	b.n	8004e3a <_strtod_l+0x4d2>
 8004ea0:	d0ed      	beq.n	8004e7e <_strtod_l+0x516>
 8004ea2:	f1c8 0800 	rsb	r8, r8, #0
 8004ea6:	f018 020f 	ands.w	r2, r8, #15
 8004eaa:	d00a      	beq.n	8004ec2 <_strtod_l+0x55a>
 8004eac:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <_strtod_l+0x590>)
 8004eae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004eb2:	4650      	mov	r0, sl
 8004eb4:	4659      	mov	r1, fp
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	f7fb fca5 	bl	8000808 <__aeabi_ddiv>
 8004ebe:	4682      	mov	sl, r0
 8004ec0:	468b      	mov	fp, r1
 8004ec2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004ec6:	d0da      	beq.n	8004e7e <_strtod_l+0x516>
 8004ec8:	f1b8 0f1f 	cmp.w	r8, #31
 8004ecc:	dd20      	ble.n	8004f10 <_strtod_l+0x5a8>
 8004ece:	2400      	movs	r4, #0
 8004ed0:	46a0      	mov	r8, r4
 8004ed2:	9407      	str	r4, [sp, #28]
 8004ed4:	9405      	str	r4, [sp, #20]
 8004ed6:	2322      	movs	r3, #34	; 0x22
 8004ed8:	f04f 0a00 	mov.w	sl, #0
 8004edc:	f04f 0b00 	mov.w	fp, #0
 8004ee0:	f8c9 3000 	str.w	r3, [r9]
 8004ee4:	e765      	b.n	8004db2 <_strtod_l+0x44a>
 8004ee6:	bf00      	nop
 8004ee8:	080066cc 	.word	0x080066cc
 8004eec:	080066cf 	.word	0x080066cf
 8004ef0:	080066d5 	.word	0x080066d5
 8004ef4:	080066ec 	.word	0x080066ec
 8004ef8:	08006760 	.word	0x08006760
 8004efc:	08006738 	.word	0x08006738
 8004f00:	7ff00000 	.word	0x7ff00000
 8004f04:	7ca00000 	.word	0x7ca00000
 8004f08:	fff80000 	.word	0xfff80000
 8004f0c:	7fefffff 	.word	0x7fefffff
 8004f10:	f018 0310 	ands.w	r3, r8, #16
 8004f14:	bf18      	it	ne
 8004f16:	236a      	movne	r3, #106	; 0x6a
 8004f18:	4da0      	ldr	r5, [pc, #640]	; (800519c <_strtod_l+0x834>)
 8004f1a:	9304      	str	r3, [sp, #16]
 8004f1c:	4650      	mov	r0, sl
 8004f1e:	4659      	mov	r1, fp
 8004f20:	2300      	movs	r3, #0
 8004f22:	f1b8 0f00 	cmp.w	r8, #0
 8004f26:	f300 810a 	bgt.w	800513e <_strtod_l+0x7d6>
 8004f2a:	b10b      	cbz	r3, 8004f30 <_strtod_l+0x5c8>
 8004f2c:	4682      	mov	sl, r0
 8004f2e:	468b      	mov	fp, r1
 8004f30:	9b04      	ldr	r3, [sp, #16]
 8004f32:	b1bb      	cbz	r3, 8004f64 <_strtod_l+0x5fc>
 8004f34:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004f38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	4659      	mov	r1, fp
 8004f40:	dd10      	ble.n	8004f64 <_strtod_l+0x5fc>
 8004f42:	2b1f      	cmp	r3, #31
 8004f44:	f340 8107 	ble.w	8005156 <_strtod_l+0x7ee>
 8004f48:	2b34      	cmp	r3, #52	; 0x34
 8004f4a:	bfde      	ittt	le
 8004f4c:	3b20      	suble	r3, #32
 8004f4e:	f04f 32ff 	movle.w	r2, #4294967295
 8004f52:	fa02 f303 	lslle.w	r3, r2, r3
 8004f56:	f04f 0a00 	mov.w	sl, #0
 8004f5a:	bfcc      	ite	gt
 8004f5c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004f60:	ea03 0b01 	andle.w	fp, r3, r1
 8004f64:	2200      	movs	r2, #0
 8004f66:	2300      	movs	r3, #0
 8004f68:	4650      	mov	r0, sl
 8004f6a:	4659      	mov	r1, fp
 8004f6c:	f7fb fd8a 	bl	8000a84 <__aeabi_dcmpeq>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d1ac      	bne.n	8004ece <_strtod_l+0x566>
 8004f74:	9b07      	ldr	r3, [sp, #28]
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	9a05      	ldr	r2, [sp, #20]
 8004f7a:	9908      	ldr	r1, [sp, #32]
 8004f7c:	4623      	mov	r3, r4
 8004f7e:	4648      	mov	r0, r9
 8004f80:	f000 ff5a 	bl	8005e38 <__s2b>
 8004f84:	9007      	str	r0, [sp, #28]
 8004f86:	2800      	cmp	r0, #0
 8004f88:	f43f af08 	beq.w	8004d9c <_strtod_l+0x434>
 8004f8c:	9a06      	ldr	r2, [sp, #24]
 8004f8e:	9b06      	ldr	r3, [sp, #24]
 8004f90:	2a00      	cmp	r2, #0
 8004f92:	f1c3 0300 	rsb	r3, r3, #0
 8004f96:	bfa8      	it	ge
 8004f98:	2300      	movge	r3, #0
 8004f9a:	930e      	str	r3, [sp, #56]	; 0x38
 8004f9c:	2400      	movs	r4, #0
 8004f9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004fa2:	9316      	str	r3, [sp, #88]	; 0x58
 8004fa4:	46a0      	mov	r8, r4
 8004fa6:	9b07      	ldr	r3, [sp, #28]
 8004fa8:	4648      	mov	r0, r9
 8004faa:	6859      	ldr	r1, [r3, #4]
 8004fac:	f000 febe 	bl	8005d2c <_Balloc>
 8004fb0:	9005      	str	r0, [sp, #20]
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	f43f aef6 	beq.w	8004da4 <_strtod_l+0x43c>
 8004fb8:	9b07      	ldr	r3, [sp, #28]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	3202      	adds	r2, #2
 8004fbe:	f103 010c 	add.w	r1, r3, #12
 8004fc2:	0092      	lsls	r2, r2, #2
 8004fc4:	300c      	adds	r0, #12
 8004fc6:	f000 fea6 	bl	8005d16 <memcpy>
 8004fca:	aa1e      	add	r2, sp, #120	; 0x78
 8004fcc:	a91d      	add	r1, sp, #116	; 0x74
 8004fce:	ec4b ab10 	vmov	d0, sl, fp
 8004fd2:	4648      	mov	r0, r9
 8004fd4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004fd8:	f001 f9ea 	bl	80063b0 <__d2b>
 8004fdc:	901c      	str	r0, [sp, #112]	; 0x70
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	f43f aee0 	beq.w	8004da4 <_strtod_l+0x43c>
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	4648      	mov	r0, r9
 8004fe8:	f000 ffb2 	bl	8005f50 <__i2b>
 8004fec:	4680      	mov	r8, r0
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f43f aed8 	beq.w	8004da4 <_strtod_l+0x43c>
 8004ff4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004ff6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004ff8:	2e00      	cmp	r6, #0
 8004ffa:	bfab      	itete	ge
 8004ffc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004ffe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005000:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005002:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005004:	bfac      	ite	ge
 8005006:	18f7      	addge	r7, r6, r3
 8005008:	1b9d      	sublt	r5, r3, r6
 800500a:	9b04      	ldr	r3, [sp, #16]
 800500c:	1af6      	subs	r6, r6, r3
 800500e:	4416      	add	r6, r2
 8005010:	4b63      	ldr	r3, [pc, #396]	; (80051a0 <_strtod_l+0x838>)
 8005012:	3e01      	subs	r6, #1
 8005014:	429e      	cmp	r6, r3
 8005016:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800501a:	f280 80af 	bge.w	800517c <_strtod_l+0x814>
 800501e:	1b9b      	subs	r3, r3, r6
 8005020:	2b1f      	cmp	r3, #31
 8005022:	eba2 0203 	sub.w	r2, r2, r3
 8005026:	f04f 0101 	mov.w	r1, #1
 800502a:	f300 809b 	bgt.w	8005164 <_strtod_l+0x7fc>
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	930f      	str	r3, [sp, #60]	; 0x3c
 8005034:	2300      	movs	r3, #0
 8005036:	930a      	str	r3, [sp, #40]	; 0x28
 8005038:	18be      	adds	r6, r7, r2
 800503a:	9b04      	ldr	r3, [sp, #16]
 800503c:	42b7      	cmp	r7, r6
 800503e:	4415      	add	r5, r2
 8005040:	441d      	add	r5, r3
 8005042:	463b      	mov	r3, r7
 8005044:	bfa8      	it	ge
 8005046:	4633      	movge	r3, r6
 8005048:	42ab      	cmp	r3, r5
 800504a:	bfa8      	it	ge
 800504c:	462b      	movge	r3, r5
 800504e:	2b00      	cmp	r3, #0
 8005050:	bfc2      	ittt	gt
 8005052:	1af6      	subgt	r6, r6, r3
 8005054:	1aed      	subgt	r5, r5, r3
 8005056:	1aff      	subgt	r7, r7, r3
 8005058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800505a:	b1bb      	cbz	r3, 800508c <_strtod_l+0x724>
 800505c:	4641      	mov	r1, r8
 800505e:	461a      	mov	r2, r3
 8005060:	4648      	mov	r0, r9
 8005062:	f001 f815 	bl	8006090 <__pow5mult>
 8005066:	4680      	mov	r8, r0
 8005068:	2800      	cmp	r0, #0
 800506a:	f43f ae9b 	beq.w	8004da4 <_strtod_l+0x43c>
 800506e:	4601      	mov	r1, r0
 8005070:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005072:	4648      	mov	r0, r9
 8005074:	f000 ff75 	bl	8005f62 <__multiply>
 8005078:	900c      	str	r0, [sp, #48]	; 0x30
 800507a:	2800      	cmp	r0, #0
 800507c:	f43f ae92 	beq.w	8004da4 <_strtod_l+0x43c>
 8005080:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005082:	4648      	mov	r0, r9
 8005084:	f000 fe86 	bl	8005d94 <_Bfree>
 8005088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800508a:	931c      	str	r3, [sp, #112]	; 0x70
 800508c:	2e00      	cmp	r6, #0
 800508e:	dc7a      	bgt.n	8005186 <_strtod_l+0x81e>
 8005090:	9b06      	ldr	r3, [sp, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	dd08      	ble.n	80050a8 <_strtod_l+0x740>
 8005096:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005098:	9905      	ldr	r1, [sp, #20]
 800509a:	4648      	mov	r0, r9
 800509c:	f000 fff8 	bl	8006090 <__pow5mult>
 80050a0:	9005      	str	r0, [sp, #20]
 80050a2:	2800      	cmp	r0, #0
 80050a4:	f43f ae7e 	beq.w	8004da4 <_strtod_l+0x43c>
 80050a8:	2d00      	cmp	r5, #0
 80050aa:	dd08      	ble.n	80050be <_strtod_l+0x756>
 80050ac:	462a      	mov	r2, r5
 80050ae:	9905      	ldr	r1, [sp, #20]
 80050b0:	4648      	mov	r0, r9
 80050b2:	f001 f83b 	bl	800612c <__lshift>
 80050b6:	9005      	str	r0, [sp, #20]
 80050b8:	2800      	cmp	r0, #0
 80050ba:	f43f ae73 	beq.w	8004da4 <_strtod_l+0x43c>
 80050be:	2f00      	cmp	r7, #0
 80050c0:	dd08      	ble.n	80050d4 <_strtod_l+0x76c>
 80050c2:	4641      	mov	r1, r8
 80050c4:	463a      	mov	r2, r7
 80050c6:	4648      	mov	r0, r9
 80050c8:	f001 f830 	bl	800612c <__lshift>
 80050cc:	4680      	mov	r8, r0
 80050ce:	2800      	cmp	r0, #0
 80050d0:	f43f ae68 	beq.w	8004da4 <_strtod_l+0x43c>
 80050d4:	9a05      	ldr	r2, [sp, #20]
 80050d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050d8:	4648      	mov	r0, r9
 80050da:	f001 f895 	bl	8006208 <__mdiff>
 80050de:	4604      	mov	r4, r0
 80050e0:	2800      	cmp	r0, #0
 80050e2:	f43f ae5f 	beq.w	8004da4 <_strtod_l+0x43c>
 80050e6:	68c3      	ldr	r3, [r0, #12]
 80050e8:	930c      	str	r3, [sp, #48]	; 0x30
 80050ea:	2300      	movs	r3, #0
 80050ec:	60c3      	str	r3, [r0, #12]
 80050ee:	4641      	mov	r1, r8
 80050f0:	f001 f870 	bl	80061d4 <__mcmp>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	da55      	bge.n	80051a4 <_strtod_l+0x83c>
 80050f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050fa:	b9e3      	cbnz	r3, 8005136 <_strtod_l+0x7ce>
 80050fc:	f1ba 0f00 	cmp.w	sl, #0
 8005100:	d119      	bne.n	8005136 <_strtod_l+0x7ce>
 8005102:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005106:	b9b3      	cbnz	r3, 8005136 <_strtod_l+0x7ce>
 8005108:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800510c:	0d1b      	lsrs	r3, r3, #20
 800510e:	051b      	lsls	r3, r3, #20
 8005110:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005114:	d90f      	bls.n	8005136 <_strtod_l+0x7ce>
 8005116:	6963      	ldr	r3, [r4, #20]
 8005118:	b913      	cbnz	r3, 8005120 <_strtod_l+0x7b8>
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	2b01      	cmp	r3, #1
 800511e:	dd0a      	ble.n	8005136 <_strtod_l+0x7ce>
 8005120:	4621      	mov	r1, r4
 8005122:	2201      	movs	r2, #1
 8005124:	4648      	mov	r0, r9
 8005126:	f001 f801 	bl	800612c <__lshift>
 800512a:	4641      	mov	r1, r8
 800512c:	4604      	mov	r4, r0
 800512e:	f001 f851 	bl	80061d4 <__mcmp>
 8005132:	2800      	cmp	r0, #0
 8005134:	dc67      	bgt.n	8005206 <_strtod_l+0x89e>
 8005136:	9b04      	ldr	r3, [sp, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d171      	bne.n	8005220 <_strtod_l+0x8b8>
 800513c:	e63d      	b.n	8004dba <_strtod_l+0x452>
 800513e:	f018 0f01 	tst.w	r8, #1
 8005142:	d004      	beq.n	800514e <_strtod_l+0x7e6>
 8005144:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005148:	f7fb fa34 	bl	80005b4 <__aeabi_dmul>
 800514c:	2301      	movs	r3, #1
 800514e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005152:	3508      	adds	r5, #8
 8005154:	e6e5      	b.n	8004f22 <_strtod_l+0x5ba>
 8005156:	f04f 32ff 	mov.w	r2, #4294967295
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	ea03 0a0a 	and.w	sl, r3, sl
 8005162:	e6ff      	b.n	8004f64 <_strtod_l+0x5fc>
 8005164:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005168:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800516c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005170:	36e2      	adds	r6, #226	; 0xe2
 8005172:	fa01 f306 	lsl.w	r3, r1, r6
 8005176:	930a      	str	r3, [sp, #40]	; 0x28
 8005178:	910f      	str	r1, [sp, #60]	; 0x3c
 800517a:	e75d      	b.n	8005038 <_strtod_l+0x6d0>
 800517c:	2300      	movs	r3, #0
 800517e:	930a      	str	r3, [sp, #40]	; 0x28
 8005180:	2301      	movs	r3, #1
 8005182:	930f      	str	r3, [sp, #60]	; 0x3c
 8005184:	e758      	b.n	8005038 <_strtod_l+0x6d0>
 8005186:	4632      	mov	r2, r6
 8005188:	991c      	ldr	r1, [sp, #112]	; 0x70
 800518a:	4648      	mov	r0, r9
 800518c:	f000 ffce 	bl	800612c <__lshift>
 8005190:	901c      	str	r0, [sp, #112]	; 0x70
 8005192:	2800      	cmp	r0, #0
 8005194:	f47f af7c 	bne.w	8005090 <_strtod_l+0x728>
 8005198:	e604      	b.n	8004da4 <_strtod_l+0x43c>
 800519a:	bf00      	nop
 800519c:	08006700 	.word	0x08006700
 80051a0:	fffffc02 	.word	0xfffffc02
 80051a4:	465d      	mov	r5, fp
 80051a6:	f040 8086 	bne.w	80052b6 <_strtod_l+0x94e>
 80051aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80051b0:	b32a      	cbz	r2, 80051fe <_strtod_l+0x896>
 80051b2:	4aaf      	ldr	r2, [pc, #700]	; (8005470 <_strtod_l+0xb08>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d153      	bne.n	8005260 <_strtod_l+0x8f8>
 80051b8:	9b04      	ldr	r3, [sp, #16]
 80051ba:	4650      	mov	r0, sl
 80051bc:	b1d3      	cbz	r3, 80051f4 <_strtod_l+0x88c>
 80051be:	4aad      	ldr	r2, [pc, #692]	; (8005474 <_strtod_l+0xb0c>)
 80051c0:	402a      	ands	r2, r5
 80051c2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80051c6:	f04f 31ff 	mov.w	r1, #4294967295
 80051ca:	d816      	bhi.n	80051fa <_strtod_l+0x892>
 80051cc:	0d12      	lsrs	r2, r2, #20
 80051ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	4298      	cmp	r0, r3
 80051d8:	d142      	bne.n	8005260 <_strtod_l+0x8f8>
 80051da:	4ba7      	ldr	r3, [pc, #668]	; (8005478 <_strtod_l+0xb10>)
 80051dc:	429d      	cmp	r5, r3
 80051de:	d102      	bne.n	80051e6 <_strtod_l+0x87e>
 80051e0:	3001      	adds	r0, #1
 80051e2:	f43f addf 	beq.w	8004da4 <_strtod_l+0x43c>
 80051e6:	4ba3      	ldr	r3, [pc, #652]	; (8005474 <_strtod_l+0xb0c>)
 80051e8:	402b      	ands	r3, r5
 80051ea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80051ee:	f04f 0a00 	mov.w	sl, #0
 80051f2:	e7a0      	b.n	8005136 <_strtod_l+0x7ce>
 80051f4:	f04f 33ff 	mov.w	r3, #4294967295
 80051f8:	e7ed      	b.n	80051d6 <_strtod_l+0x86e>
 80051fa:	460b      	mov	r3, r1
 80051fc:	e7eb      	b.n	80051d6 <_strtod_l+0x86e>
 80051fe:	bb7b      	cbnz	r3, 8005260 <_strtod_l+0x8f8>
 8005200:	f1ba 0f00 	cmp.w	sl, #0
 8005204:	d12c      	bne.n	8005260 <_strtod_l+0x8f8>
 8005206:	9904      	ldr	r1, [sp, #16]
 8005208:	4a9a      	ldr	r2, [pc, #616]	; (8005474 <_strtod_l+0xb0c>)
 800520a:	465b      	mov	r3, fp
 800520c:	b1f1      	cbz	r1, 800524c <_strtod_l+0x8e4>
 800520e:	ea02 010b 	and.w	r1, r2, fp
 8005212:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005216:	dc19      	bgt.n	800524c <_strtod_l+0x8e4>
 8005218:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800521c:	f77f ae5b 	ble.w	8004ed6 <_strtod_l+0x56e>
 8005220:	4a96      	ldr	r2, [pc, #600]	; (800547c <_strtod_l+0xb14>)
 8005222:	2300      	movs	r3, #0
 8005224:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005228:	4650      	mov	r0, sl
 800522a:	4659      	mov	r1, fp
 800522c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005230:	f7fb f9c0 	bl	80005b4 <__aeabi_dmul>
 8005234:	4682      	mov	sl, r0
 8005236:	468b      	mov	fp, r1
 8005238:	2900      	cmp	r1, #0
 800523a:	f47f adbe 	bne.w	8004dba <_strtod_l+0x452>
 800523e:	2800      	cmp	r0, #0
 8005240:	f47f adbb 	bne.w	8004dba <_strtod_l+0x452>
 8005244:	2322      	movs	r3, #34	; 0x22
 8005246:	f8c9 3000 	str.w	r3, [r9]
 800524a:	e5b6      	b.n	8004dba <_strtod_l+0x452>
 800524c:	4013      	ands	r3, r2
 800524e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005252:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005256:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800525a:	f04f 3aff 	mov.w	sl, #4294967295
 800525e:	e76a      	b.n	8005136 <_strtod_l+0x7ce>
 8005260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005262:	b193      	cbz	r3, 800528a <_strtod_l+0x922>
 8005264:	422b      	tst	r3, r5
 8005266:	f43f af66 	beq.w	8005136 <_strtod_l+0x7ce>
 800526a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800526c:	9a04      	ldr	r2, [sp, #16]
 800526e:	4650      	mov	r0, sl
 8005270:	4659      	mov	r1, fp
 8005272:	b173      	cbz	r3, 8005292 <_strtod_l+0x92a>
 8005274:	f7ff fb5a 	bl	800492c <sulp>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005280:	f7fa ffe2 	bl	8000248 <__adddf3>
 8005284:	4682      	mov	sl, r0
 8005286:	468b      	mov	fp, r1
 8005288:	e755      	b.n	8005136 <_strtod_l+0x7ce>
 800528a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800528c:	ea13 0f0a 	tst.w	r3, sl
 8005290:	e7e9      	b.n	8005266 <_strtod_l+0x8fe>
 8005292:	f7ff fb4b 	bl	800492c <sulp>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800529e:	f7fa ffd1 	bl	8000244 <__aeabi_dsub>
 80052a2:	2200      	movs	r2, #0
 80052a4:	2300      	movs	r3, #0
 80052a6:	4682      	mov	sl, r0
 80052a8:	468b      	mov	fp, r1
 80052aa:	f7fb fbeb 	bl	8000a84 <__aeabi_dcmpeq>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	f47f ae11 	bne.w	8004ed6 <_strtod_l+0x56e>
 80052b4:	e73f      	b.n	8005136 <_strtod_l+0x7ce>
 80052b6:	4641      	mov	r1, r8
 80052b8:	4620      	mov	r0, r4
 80052ba:	f001 f8c8 	bl	800644e <__ratio>
 80052be:	ec57 6b10 	vmov	r6, r7, d0
 80052c2:	2200      	movs	r2, #0
 80052c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052c8:	ee10 0a10 	vmov	r0, s0
 80052cc:	4639      	mov	r1, r7
 80052ce:	f7fb fbed 	bl	8000aac <__aeabi_dcmple>
 80052d2:	2800      	cmp	r0, #0
 80052d4:	d077      	beq.n	80053c6 <_strtod_l+0xa5e>
 80052d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d04a      	beq.n	8005372 <_strtod_l+0xa0a>
 80052dc:	4b68      	ldr	r3, [pc, #416]	; (8005480 <_strtod_l+0xb18>)
 80052de:	2200      	movs	r2, #0
 80052e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80052e4:	4f66      	ldr	r7, [pc, #408]	; (8005480 <_strtod_l+0xb18>)
 80052e6:	2600      	movs	r6, #0
 80052e8:	4b62      	ldr	r3, [pc, #392]	; (8005474 <_strtod_l+0xb0c>)
 80052ea:	402b      	ands	r3, r5
 80052ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80052ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80052f0:	4b64      	ldr	r3, [pc, #400]	; (8005484 <_strtod_l+0xb1c>)
 80052f2:	429a      	cmp	r2, r3
 80052f4:	f040 80ce 	bne.w	8005494 <_strtod_l+0xb2c>
 80052f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005300:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005304:	ec4b ab10 	vmov	d0, sl, fp
 8005308:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800530c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005310:	f000 ffd8 	bl	80062c4 <__ulp>
 8005314:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005318:	ec53 2b10 	vmov	r2, r3, d0
 800531c:	f7fb f94a 	bl	80005b4 <__aeabi_dmul>
 8005320:	4652      	mov	r2, sl
 8005322:	465b      	mov	r3, fp
 8005324:	f7fa ff90 	bl	8000248 <__adddf3>
 8005328:	460b      	mov	r3, r1
 800532a:	4952      	ldr	r1, [pc, #328]	; (8005474 <_strtod_l+0xb0c>)
 800532c:	4a56      	ldr	r2, [pc, #344]	; (8005488 <_strtod_l+0xb20>)
 800532e:	4019      	ands	r1, r3
 8005330:	4291      	cmp	r1, r2
 8005332:	4682      	mov	sl, r0
 8005334:	d95b      	bls.n	80053ee <_strtod_l+0xa86>
 8005336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005338:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800533c:	4293      	cmp	r3, r2
 800533e:	d103      	bne.n	8005348 <_strtod_l+0x9e0>
 8005340:	9b08      	ldr	r3, [sp, #32]
 8005342:	3301      	adds	r3, #1
 8005344:	f43f ad2e 	beq.w	8004da4 <_strtod_l+0x43c>
 8005348:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005478 <_strtod_l+0xb10>
 800534c:	f04f 3aff 	mov.w	sl, #4294967295
 8005350:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005352:	4648      	mov	r0, r9
 8005354:	f000 fd1e 	bl	8005d94 <_Bfree>
 8005358:	9905      	ldr	r1, [sp, #20]
 800535a:	4648      	mov	r0, r9
 800535c:	f000 fd1a 	bl	8005d94 <_Bfree>
 8005360:	4641      	mov	r1, r8
 8005362:	4648      	mov	r0, r9
 8005364:	f000 fd16 	bl	8005d94 <_Bfree>
 8005368:	4621      	mov	r1, r4
 800536a:	4648      	mov	r0, r9
 800536c:	f000 fd12 	bl	8005d94 <_Bfree>
 8005370:	e619      	b.n	8004fa6 <_strtod_l+0x63e>
 8005372:	f1ba 0f00 	cmp.w	sl, #0
 8005376:	d11a      	bne.n	80053ae <_strtod_l+0xa46>
 8005378:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800537c:	b9eb      	cbnz	r3, 80053ba <_strtod_l+0xa52>
 800537e:	2200      	movs	r2, #0
 8005380:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <_strtod_l+0xb18>)
 8005382:	4630      	mov	r0, r6
 8005384:	4639      	mov	r1, r7
 8005386:	f7fb fb87 	bl	8000a98 <__aeabi_dcmplt>
 800538a:	b9c8      	cbnz	r0, 80053c0 <_strtod_l+0xa58>
 800538c:	4630      	mov	r0, r6
 800538e:	4639      	mov	r1, r7
 8005390:	2200      	movs	r2, #0
 8005392:	4b3e      	ldr	r3, [pc, #248]	; (800548c <_strtod_l+0xb24>)
 8005394:	f7fb f90e 	bl	80005b4 <__aeabi_dmul>
 8005398:	4606      	mov	r6, r0
 800539a:	460f      	mov	r7, r1
 800539c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80053a0:	9618      	str	r6, [sp, #96]	; 0x60
 80053a2:	9319      	str	r3, [sp, #100]	; 0x64
 80053a4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80053a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80053ac:	e79c      	b.n	80052e8 <_strtod_l+0x980>
 80053ae:	f1ba 0f01 	cmp.w	sl, #1
 80053b2:	d102      	bne.n	80053ba <_strtod_l+0xa52>
 80053b4:	2d00      	cmp	r5, #0
 80053b6:	f43f ad8e 	beq.w	8004ed6 <_strtod_l+0x56e>
 80053ba:	2200      	movs	r2, #0
 80053bc:	4b34      	ldr	r3, [pc, #208]	; (8005490 <_strtod_l+0xb28>)
 80053be:	e78f      	b.n	80052e0 <_strtod_l+0x978>
 80053c0:	2600      	movs	r6, #0
 80053c2:	4f32      	ldr	r7, [pc, #200]	; (800548c <_strtod_l+0xb24>)
 80053c4:	e7ea      	b.n	800539c <_strtod_l+0xa34>
 80053c6:	4b31      	ldr	r3, [pc, #196]	; (800548c <_strtod_l+0xb24>)
 80053c8:	4630      	mov	r0, r6
 80053ca:	4639      	mov	r1, r7
 80053cc:	2200      	movs	r2, #0
 80053ce:	f7fb f8f1 	bl	80005b4 <__aeabi_dmul>
 80053d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053d4:	4606      	mov	r6, r0
 80053d6:	460f      	mov	r7, r1
 80053d8:	b933      	cbnz	r3, 80053e8 <_strtod_l+0xa80>
 80053da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053de:	9010      	str	r0, [sp, #64]	; 0x40
 80053e0:	9311      	str	r3, [sp, #68]	; 0x44
 80053e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053e6:	e7df      	b.n	80053a8 <_strtod_l+0xa40>
 80053e8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80053ec:	e7f9      	b.n	80053e2 <_strtod_l+0xa7a>
 80053ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80053f2:	9b04      	ldr	r3, [sp, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1ab      	bne.n	8005350 <_strtod_l+0x9e8>
 80053f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80053fc:	0d1b      	lsrs	r3, r3, #20
 80053fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005400:	051b      	lsls	r3, r3, #20
 8005402:	429a      	cmp	r2, r3
 8005404:	465d      	mov	r5, fp
 8005406:	d1a3      	bne.n	8005350 <_strtod_l+0x9e8>
 8005408:	4639      	mov	r1, r7
 800540a:	4630      	mov	r0, r6
 800540c:	f7fb fb6c 	bl	8000ae8 <__aeabi_d2iz>
 8005410:	f7fb f866 	bl	80004e0 <__aeabi_i2d>
 8005414:	460b      	mov	r3, r1
 8005416:	4602      	mov	r2, r0
 8005418:	4639      	mov	r1, r7
 800541a:	4630      	mov	r0, r6
 800541c:	f7fa ff12 	bl	8000244 <__aeabi_dsub>
 8005420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005422:	4606      	mov	r6, r0
 8005424:	460f      	mov	r7, r1
 8005426:	b933      	cbnz	r3, 8005436 <_strtod_l+0xace>
 8005428:	f1ba 0f00 	cmp.w	sl, #0
 800542c:	d103      	bne.n	8005436 <_strtod_l+0xace>
 800542e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005432:	2d00      	cmp	r5, #0
 8005434:	d06d      	beq.n	8005512 <_strtod_l+0xbaa>
 8005436:	a30a      	add	r3, pc, #40	; (adr r3, 8005460 <_strtod_l+0xaf8>)
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	4630      	mov	r0, r6
 800543e:	4639      	mov	r1, r7
 8005440:	f7fb fb2a 	bl	8000a98 <__aeabi_dcmplt>
 8005444:	2800      	cmp	r0, #0
 8005446:	f47f acb8 	bne.w	8004dba <_strtod_l+0x452>
 800544a:	a307      	add	r3, pc, #28	; (adr r3, 8005468 <_strtod_l+0xb00>)
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	4630      	mov	r0, r6
 8005452:	4639      	mov	r1, r7
 8005454:	f7fb fb3e 	bl	8000ad4 <__aeabi_dcmpgt>
 8005458:	2800      	cmp	r0, #0
 800545a:	f43f af79 	beq.w	8005350 <_strtod_l+0x9e8>
 800545e:	e4ac      	b.n	8004dba <_strtod_l+0x452>
 8005460:	94a03595 	.word	0x94a03595
 8005464:	3fdfffff 	.word	0x3fdfffff
 8005468:	35afe535 	.word	0x35afe535
 800546c:	3fe00000 	.word	0x3fe00000
 8005470:	000fffff 	.word	0x000fffff
 8005474:	7ff00000 	.word	0x7ff00000
 8005478:	7fefffff 	.word	0x7fefffff
 800547c:	39500000 	.word	0x39500000
 8005480:	3ff00000 	.word	0x3ff00000
 8005484:	7fe00000 	.word	0x7fe00000
 8005488:	7c9fffff 	.word	0x7c9fffff
 800548c:	3fe00000 	.word	0x3fe00000
 8005490:	bff00000 	.word	0xbff00000
 8005494:	9b04      	ldr	r3, [sp, #16]
 8005496:	b333      	cbz	r3, 80054e6 <_strtod_l+0xb7e>
 8005498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800549a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800549e:	d822      	bhi.n	80054e6 <_strtod_l+0xb7e>
 80054a0:	a327      	add	r3, pc, #156	; (adr r3, 8005540 <_strtod_l+0xbd8>)
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	4630      	mov	r0, r6
 80054a8:	4639      	mov	r1, r7
 80054aa:	f7fb faff 	bl	8000aac <__aeabi_dcmple>
 80054ae:	b1a0      	cbz	r0, 80054da <_strtod_l+0xb72>
 80054b0:	4639      	mov	r1, r7
 80054b2:	4630      	mov	r0, r6
 80054b4:	f7fb fb40 	bl	8000b38 <__aeabi_d2uiz>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	bf08      	it	eq
 80054bc:	2001      	moveq	r0, #1
 80054be:	f7fa ffff 	bl	80004c0 <__aeabi_ui2d>
 80054c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054c4:	4606      	mov	r6, r0
 80054c6:	460f      	mov	r7, r1
 80054c8:	bb03      	cbnz	r3, 800550c <_strtod_l+0xba4>
 80054ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054ce:	9012      	str	r0, [sp, #72]	; 0x48
 80054d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80054d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80054d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80054da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80054de:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80054e2:	1a9b      	subs	r3, r3, r2
 80054e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80054e6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80054ea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80054ee:	f000 fee9 	bl	80062c4 <__ulp>
 80054f2:	4650      	mov	r0, sl
 80054f4:	ec53 2b10 	vmov	r2, r3, d0
 80054f8:	4659      	mov	r1, fp
 80054fa:	f7fb f85b 	bl	80005b4 <__aeabi_dmul>
 80054fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005502:	f7fa fea1 	bl	8000248 <__adddf3>
 8005506:	4682      	mov	sl, r0
 8005508:	468b      	mov	fp, r1
 800550a:	e772      	b.n	80053f2 <_strtod_l+0xa8a>
 800550c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005510:	e7df      	b.n	80054d2 <_strtod_l+0xb6a>
 8005512:	a30d      	add	r3, pc, #52	; (adr r3, 8005548 <_strtod_l+0xbe0>)
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f7fb fabe 	bl	8000a98 <__aeabi_dcmplt>
 800551c:	e79c      	b.n	8005458 <_strtod_l+0xaf0>
 800551e:	2300      	movs	r3, #0
 8005520:	930d      	str	r3, [sp, #52]	; 0x34
 8005522:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	f7ff ba61 	b.w	80049ee <_strtod_l+0x86>
 800552c:	2b65      	cmp	r3, #101	; 0x65
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f43f ab4e 	beq.w	8004bd2 <_strtod_l+0x26a>
 8005536:	2101      	movs	r1, #1
 8005538:	4614      	mov	r4, r2
 800553a:	9104      	str	r1, [sp, #16]
 800553c:	f7ff bacb 	b.w	8004ad6 <_strtod_l+0x16e>
 8005540:	ffc00000 	.word	0xffc00000
 8005544:	41dfffff 	.word	0x41dfffff
 8005548:	94a03595 	.word	0x94a03595
 800554c:	3fcfffff 	.word	0x3fcfffff

08005550 <strtod>:
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <strtod+0x20>)
 8005552:	4a08      	ldr	r2, [pc, #32]	; (8005574 <strtod+0x24>)
 8005554:	b410      	push	{r4}
 8005556:	681c      	ldr	r4, [r3, #0]
 8005558:	6a23      	ldr	r3, [r4, #32]
 800555a:	2b00      	cmp	r3, #0
 800555c:	bf08      	it	eq
 800555e:	4613      	moveq	r3, r2
 8005560:	460a      	mov	r2, r1
 8005562:	4601      	mov	r1, r0
 8005564:	4620      	mov	r0, r4
 8005566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800556a:	f7ff b9fd 	b.w	8004968 <_strtod_l>
 800556e:	bf00      	nop
 8005570:	2000000c 	.word	0x2000000c
 8005574:	20000070 	.word	0x20000070

08005578 <_strtol_l.isra.0>:
 8005578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800557c:	4680      	mov	r8, r0
 800557e:	4689      	mov	r9, r1
 8005580:	4692      	mov	sl, r2
 8005582:	461e      	mov	r6, r3
 8005584:	460f      	mov	r7, r1
 8005586:	463d      	mov	r5, r7
 8005588:	9808      	ldr	r0, [sp, #32]
 800558a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800558e:	f000 fbab 	bl	8005ce8 <__locale_ctype_ptr_l>
 8005592:	4420      	add	r0, r4
 8005594:	7843      	ldrb	r3, [r0, #1]
 8005596:	f013 0308 	ands.w	r3, r3, #8
 800559a:	d132      	bne.n	8005602 <_strtol_l.isra.0+0x8a>
 800559c:	2c2d      	cmp	r4, #45	; 0x2d
 800559e:	d132      	bne.n	8005606 <_strtol_l.isra.0+0x8e>
 80055a0:	787c      	ldrb	r4, [r7, #1]
 80055a2:	1cbd      	adds	r5, r7, #2
 80055a4:	2201      	movs	r2, #1
 80055a6:	2e00      	cmp	r6, #0
 80055a8:	d05d      	beq.n	8005666 <_strtol_l.isra.0+0xee>
 80055aa:	2e10      	cmp	r6, #16
 80055ac:	d109      	bne.n	80055c2 <_strtol_l.isra.0+0x4a>
 80055ae:	2c30      	cmp	r4, #48	; 0x30
 80055b0:	d107      	bne.n	80055c2 <_strtol_l.isra.0+0x4a>
 80055b2:	782b      	ldrb	r3, [r5, #0]
 80055b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80055b8:	2b58      	cmp	r3, #88	; 0x58
 80055ba:	d14f      	bne.n	800565c <_strtol_l.isra.0+0xe4>
 80055bc:	786c      	ldrb	r4, [r5, #1]
 80055be:	2610      	movs	r6, #16
 80055c0:	3502      	adds	r5, #2
 80055c2:	2a00      	cmp	r2, #0
 80055c4:	bf14      	ite	ne
 80055c6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80055ca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80055ce:	2700      	movs	r7, #0
 80055d0:	fbb1 fcf6 	udiv	ip, r1, r6
 80055d4:	4638      	mov	r0, r7
 80055d6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80055da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80055de:	2b09      	cmp	r3, #9
 80055e0:	d817      	bhi.n	8005612 <_strtol_l.isra.0+0x9a>
 80055e2:	461c      	mov	r4, r3
 80055e4:	42a6      	cmp	r6, r4
 80055e6:	dd23      	ble.n	8005630 <_strtol_l.isra.0+0xb8>
 80055e8:	1c7b      	adds	r3, r7, #1
 80055ea:	d007      	beq.n	80055fc <_strtol_l.isra.0+0x84>
 80055ec:	4584      	cmp	ip, r0
 80055ee:	d31c      	bcc.n	800562a <_strtol_l.isra.0+0xb2>
 80055f0:	d101      	bne.n	80055f6 <_strtol_l.isra.0+0x7e>
 80055f2:	45a6      	cmp	lr, r4
 80055f4:	db19      	blt.n	800562a <_strtol_l.isra.0+0xb2>
 80055f6:	fb00 4006 	mla	r0, r0, r6, r4
 80055fa:	2701      	movs	r7, #1
 80055fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005600:	e7eb      	b.n	80055da <_strtol_l.isra.0+0x62>
 8005602:	462f      	mov	r7, r5
 8005604:	e7bf      	b.n	8005586 <_strtol_l.isra.0+0xe>
 8005606:	2c2b      	cmp	r4, #43	; 0x2b
 8005608:	bf04      	itt	eq
 800560a:	1cbd      	addeq	r5, r7, #2
 800560c:	787c      	ldrbeq	r4, [r7, #1]
 800560e:	461a      	mov	r2, r3
 8005610:	e7c9      	b.n	80055a6 <_strtol_l.isra.0+0x2e>
 8005612:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005616:	2b19      	cmp	r3, #25
 8005618:	d801      	bhi.n	800561e <_strtol_l.isra.0+0xa6>
 800561a:	3c37      	subs	r4, #55	; 0x37
 800561c:	e7e2      	b.n	80055e4 <_strtol_l.isra.0+0x6c>
 800561e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005622:	2b19      	cmp	r3, #25
 8005624:	d804      	bhi.n	8005630 <_strtol_l.isra.0+0xb8>
 8005626:	3c57      	subs	r4, #87	; 0x57
 8005628:	e7dc      	b.n	80055e4 <_strtol_l.isra.0+0x6c>
 800562a:	f04f 37ff 	mov.w	r7, #4294967295
 800562e:	e7e5      	b.n	80055fc <_strtol_l.isra.0+0x84>
 8005630:	1c7b      	adds	r3, r7, #1
 8005632:	d108      	bne.n	8005646 <_strtol_l.isra.0+0xce>
 8005634:	2322      	movs	r3, #34	; 0x22
 8005636:	f8c8 3000 	str.w	r3, [r8]
 800563a:	4608      	mov	r0, r1
 800563c:	f1ba 0f00 	cmp.w	sl, #0
 8005640:	d107      	bne.n	8005652 <_strtol_l.isra.0+0xda>
 8005642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005646:	b102      	cbz	r2, 800564a <_strtol_l.isra.0+0xd2>
 8005648:	4240      	negs	r0, r0
 800564a:	f1ba 0f00 	cmp.w	sl, #0
 800564e:	d0f8      	beq.n	8005642 <_strtol_l.isra.0+0xca>
 8005650:	b10f      	cbz	r7, 8005656 <_strtol_l.isra.0+0xde>
 8005652:	f105 39ff 	add.w	r9, r5, #4294967295
 8005656:	f8ca 9000 	str.w	r9, [sl]
 800565a:	e7f2      	b.n	8005642 <_strtol_l.isra.0+0xca>
 800565c:	2430      	movs	r4, #48	; 0x30
 800565e:	2e00      	cmp	r6, #0
 8005660:	d1af      	bne.n	80055c2 <_strtol_l.isra.0+0x4a>
 8005662:	2608      	movs	r6, #8
 8005664:	e7ad      	b.n	80055c2 <_strtol_l.isra.0+0x4a>
 8005666:	2c30      	cmp	r4, #48	; 0x30
 8005668:	d0a3      	beq.n	80055b2 <_strtol_l.isra.0+0x3a>
 800566a:	260a      	movs	r6, #10
 800566c:	e7a9      	b.n	80055c2 <_strtol_l.isra.0+0x4a>
	...

08005670 <strtol>:
 8005670:	4b08      	ldr	r3, [pc, #32]	; (8005694 <strtol+0x24>)
 8005672:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005674:	681c      	ldr	r4, [r3, #0]
 8005676:	4d08      	ldr	r5, [pc, #32]	; (8005698 <strtol+0x28>)
 8005678:	6a23      	ldr	r3, [r4, #32]
 800567a:	2b00      	cmp	r3, #0
 800567c:	bf08      	it	eq
 800567e:	462b      	moveq	r3, r5
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	4613      	mov	r3, r2
 8005684:	460a      	mov	r2, r1
 8005686:	4601      	mov	r1, r0
 8005688:	4620      	mov	r0, r4
 800568a:	f7ff ff75 	bl	8005578 <_strtol_l.isra.0>
 800568e:	b003      	add	sp, #12
 8005690:	bd30      	pop	{r4, r5, pc}
 8005692:	bf00      	nop
 8005694:	2000000c 	.word	0x2000000c
 8005698:	20000070 	.word	0x20000070

0800569c <rshift>:
 800569c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800569e:	6906      	ldr	r6, [r0, #16]
 80056a0:	114b      	asrs	r3, r1, #5
 80056a2:	429e      	cmp	r6, r3
 80056a4:	f100 0414 	add.w	r4, r0, #20
 80056a8:	dd30      	ble.n	800570c <rshift+0x70>
 80056aa:	f011 011f 	ands.w	r1, r1, #31
 80056ae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80056b2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80056b6:	d108      	bne.n	80056ca <rshift+0x2e>
 80056b8:	4621      	mov	r1, r4
 80056ba:	42b2      	cmp	r2, r6
 80056bc:	460b      	mov	r3, r1
 80056be:	d211      	bcs.n	80056e4 <rshift+0x48>
 80056c0:	f852 3b04 	ldr.w	r3, [r2], #4
 80056c4:	f841 3b04 	str.w	r3, [r1], #4
 80056c8:	e7f7      	b.n	80056ba <rshift+0x1e>
 80056ca:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80056ce:	f1c1 0c20 	rsb	ip, r1, #32
 80056d2:	40cd      	lsrs	r5, r1
 80056d4:	3204      	adds	r2, #4
 80056d6:	4623      	mov	r3, r4
 80056d8:	42b2      	cmp	r2, r6
 80056da:	4617      	mov	r7, r2
 80056dc:	d30c      	bcc.n	80056f8 <rshift+0x5c>
 80056de:	601d      	str	r5, [r3, #0]
 80056e0:	b105      	cbz	r5, 80056e4 <rshift+0x48>
 80056e2:	3304      	adds	r3, #4
 80056e4:	1b1a      	subs	r2, r3, r4
 80056e6:	42a3      	cmp	r3, r4
 80056e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80056ec:	bf08      	it	eq
 80056ee:	2300      	moveq	r3, #0
 80056f0:	6102      	str	r2, [r0, #16]
 80056f2:	bf08      	it	eq
 80056f4:	6143      	streq	r3, [r0, #20]
 80056f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f8:	683f      	ldr	r7, [r7, #0]
 80056fa:	fa07 f70c 	lsl.w	r7, r7, ip
 80056fe:	433d      	orrs	r5, r7
 8005700:	f843 5b04 	str.w	r5, [r3], #4
 8005704:	f852 5b04 	ldr.w	r5, [r2], #4
 8005708:	40cd      	lsrs	r5, r1
 800570a:	e7e5      	b.n	80056d8 <rshift+0x3c>
 800570c:	4623      	mov	r3, r4
 800570e:	e7e9      	b.n	80056e4 <rshift+0x48>

08005710 <__hexdig_fun>:
 8005710:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005714:	2b09      	cmp	r3, #9
 8005716:	d802      	bhi.n	800571e <__hexdig_fun+0xe>
 8005718:	3820      	subs	r0, #32
 800571a:	b2c0      	uxtb	r0, r0
 800571c:	4770      	bx	lr
 800571e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005722:	2b05      	cmp	r3, #5
 8005724:	d801      	bhi.n	800572a <__hexdig_fun+0x1a>
 8005726:	3847      	subs	r0, #71	; 0x47
 8005728:	e7f7      	b.n	800571a <__hexdig_fun+0xa>
 800572a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800572e:	2b05      	cmp	r3, #5
 8005730:	d801      	bhi.n	8005736 <__hexdig_fun+0x26>
 8005732:	3827      	subs	r0, #39	; 0x27
 8005734:	e7f1      	b.n	800571a <__hexdig_fun+0xa>
 8005736:	2000      	movs	r0, #0
 8005738:	4770      	bx	lr

0800573a <__gethex>:
 800573a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573e:	b08b      	sub	sp, #44	; 0x2c
 8005740:	468a      	mov	sl, r1
 8005742:	9002      	str	r0, [sp, #8]
 8005744:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005746:	9306      	str	r3, [sp, #24]
 8005748:	4690      	mov	r8, r2
 800574a:	f000 fad0 	bl	8005cee <__localeconv_l>
 800574e:	6803      	ldr	r3, [r0, #0]
 8005750:	9303      	str	r3, [sp, #12]
 8005752:	4618      	mov	r0, r3
 8005754:	f7fa fd6a 	bl	800022c <strlen>
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	9001      	str	r0, [sp, #4]
 800575c:	4403      	add	r3, r0
 800575e:	f04f 0b00 	mov.w	fp, #0
 8005762:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005766:	9307      	str	r3, [sp, #28]
 8005768:	f8da 3000 	ldr.w	r3, [sl]
 800576c:	3302      	adds	r3, #2
 800576e:	461f      	mov	r7, r3
 8005770:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005774:	2830      	cmp	r0, #48	; 0x30
 8005776:	d06c      	beq.n	8005852 <__gethex+0x118>
 8005778:	f7ff ffca 	bl	8005710 <__hexdig_fun>
 800577c:	4604      	mov	r4, r0
 800577e:	2800      	cmp	r0, #0
 8005780:	d16a      	bne.n	8005858 <__gethex+0x11e>
 8005782:	9a01      	ldr	r2, [sp, #4]
 8005784:	9903      	ldr	r1, [sp, #12]
 8005786:	4638      	mov	r0, r7
 8005788:	f000 ff48 	bl	800661c <strncmp>
 800578c:	2800      	cmp	r0, #0
 800578e:	d166      	bne.n	800585e <__gethex+0x124>
 8005790:	9b01      	ldr	r3, [sp, #4]
 8005792:	5cf8      	ldrb	r0, [r7, r3]
 8005794:	18fe      	adds	r6, r7, r3
 8005796:	f7ff ffbb 	bl	8005710 <__hexdig_fun>
 800579a:	2800      	cmp	r0, #0
 800579c:	d062      	beq.n	8005864 <__gethex+0x12a>
 800579e:	4633      	mov	r3, r6
 80057a0:	7818      	ldrb	r0, [r3, #0]
 80057a2:	2830      	cmp	r0, #48	; 0x30
 80057a4:	461f      	mov	r7, r3
 80057a6:	f103 0301 	add.w	r3, r3, #1
 80057aa:	d0f9      	beq.n	80057a0 <__gethex+0x66>
 80057ac:	f7ff ffb0 	bl	8005710 <__hexdig_fun>
 80057b0:	fab0 f580 	clz	r5, r0
 80057b4:	096d      	lsrs	r5, r5, #5
 80057b6:	4634      	mov	r4, r6
 80057b8:	f04f 0b01 	mov.w	fp, #1
 80057bc:	463a      	mov	r2, r7
 80057be:	4616      	mov	r6, r2
 80057c0:	3201      	adds	r2, #1
 80057c2:	7830      	ldrb	r0, [r6, #0]
 80057c4:	f7ff ffa4 	bl	8005710 <__hexdig_fun>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d1f8      	bne.n	80057be <__gethex+0x84>
 80057cc:	9a01      	ldr	r2, [sp, #4]
 80057ce:	9903      	ldr	r1, [sp, #12]
 80057d0:	4630      	mov	r0, r6
 80057d2:	f000 ff23 	bl	800661c <strncmp>
 80057d6:	b950      	cbnz	r0, 80057ee <__gethex+0xb4>
 80057d8:	b954      	cbnz	r4, 80057f0 <__gethex+0xb6>
 80057da:	9b01      	ldr	r3, [sp, #4]
 80057dc:	18f4      	adds	r4, r6, r3
 80057de:	4622      	mov	r2, r4
 80057e0:	4616      	mov	r6, r2
 80057e2:	3201      	adds	r2, #1
 80057e4:	7830      	ldrb	r0, [r6, #0]
 80057e6:	f7ff ff93 	bl	8005710 <__hexdig_fun>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d1f8      	bne.n	80057e0 <__gethex+0xa6>
 80057ee:	b10c      	cbz	r4, 80057f4 <__gethex+0xba>
 80057f0:	1ba4      	subs	r4, r4, r6
 80057f2:	00a4      	lsls	r4, r4, #2
 80057f4:	7833      	ldrb	r3, [r6, #0]
 80057f6:	2b50      	cmp	r3, #80	; 0x50
 80057f8:	d001      	beq.n	80057fe <__gethex+0xc4>
 80057fa:	2b70      	cmp	r3, #112	; 0x70
 80057fc:	d140      	bne.n	8005880 <__gethex+0x146>
 80057fe:	7873      	ldrb	r3, [r6, #1]
 8005800:	2b2b      	cmp	r3, #43	; 0x2b
 8005802:	d031      	beq.n	8005868 <__gethex+0x12e>
 8005804:	2b2d      	cmp	r3, #45	; 0x2d
 8005806:	d033      	beq.n	8005870 <__gethex+0x136>
 8005808:	1c71      	adds	r1, r6, #1
 800580a:	f04f 0900 	mov.w	r9, #0
 800580e:	7808      	ldrb	r0, [r1, #0]
 8005810:	f7ff ff7e 	bl	8005710 <__hexdig_fun>
 8005814:	1e43      	subs	r3, r0, #1
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b18      	cmp	r3, #24
 800581a:	d831      	bhi.n	8005880 <__gethex+0x146>
 800581c:	f1a0 0210 	sub.w	r2, r0, #16
 8005820:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005824:	f7ff ff74 	bl	8005710 <__hexdig_fun>
 8005828:	1e43      	subs	r3, r0, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b18      	cmp	r3, #24
 800582e:	d922      	bls.n	8005876 <__gethex+0x13c>
 8005830:	f1b9 0f00 	cmp.w	r9, #0
 8005834:	d000      	beq.n	8005838 <__gethex+0xfe>
 8005836:	4252      	negs	r2, r2
 8005838:	4414      	add	r4, r2
 800583a:	f8ca 1000 	str.w	r1, [sl]
 800583e:	b30d      	cbz	r5, 8005884 <__gethex+0x14a>
 8005840:	f1bb 0f00 	cmp.w	fp, #0
 8005844:	bf0c      	ite	eq
 8005846:	2706      	moveq	r7, #6
 8005848:	2700      	movne	r7, #0
 800584a:	4638      	mov	r0, r7
 800584c:	b00b      	add	sp, #44	; 0x2c
 800584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005852:	f10b 0b01 	add.w	fp, fp, #1
 8005856:	e78a      	b.n	800576e <__gethex+0x34>
 8005858:	2500      	movs	r5, #0
 800585a:	462c      	mov	r4, r5
 800585c:	e7ae      	b.n	80057bc <__gethex+0x82>
 800585e:	463e      	mov	r6, r7
 8005860:	2501      	movs	r5, #1
 8005862:	e7c7      	b.n	80057f4 <__gethex+0xba>
 8005864:	4604      	mov	r4, r0
 8005866:	e7fb      	b.n	8005860 <__gethex+0x126>
 8005868:	f04f 0900 	mov.w	r9, #0
 800586c:	1cb1      	adds	r1, r6, #2
 800586e:	e7ce      	b.n	800580e <__gethex+0xd4>
 8005870:	f04f 0901 	mov.w	r9, #1
 8005874:	e7fa      	b.n	800586c <__gethex+0x132>
 8005876:	230a      	movs	r3, #10
 8005878:	fb03 0202 	mla	r2, r3, r2, r0
 800587c:	3a10      	subs	r2, #16
 800587e:	e7cf      	b.n	8005820 <__gethex+0xe6>
 8005880:	4631      	mov	r1, r6
 8005882:	e7da      	b.n	800583a <__gethex+0x100>
 8005884:	1bf3      	subs	r3, r6, r7
 8005886:	3b01      	subs	r3, #1
 8005888:	4629      	mov	r1, r5
 800588a:	2b07      	cmp	r3, #7
 800588c:	dc49      	bgt.n	8005922 <__gethex+0x1e8>
 800588e:	9802      	ldr	r0, [sp, #8]
 8005890:	f000 fa4c 	bl	8005d2c <_Balloc>
 8005894:	9b01      	ldr	r3, [sp, #4]
 8005896:	f100 0914 	add.w	r9, r0, #20
 800589a:	f04f 0b00 	mov.w	fp, #0
 800589e:	f1c3 0301 	rsb	r3, r3, #1
 80058a2:	4605      	mov	r5, r0
 80058a4:	f8cd 9010 	str.w	r9, [sp, #16]
 80058a8:	46da      	mov	sl, fp
 80058aa:	9308      	str	r3, [sp, #32]
 80058ac:	42b7      	cmp	r7, r6
 80058ae:	d33b      	bcc.n	8005928 <__gethex+0x1ee>
 80058b0:	9804      	ldr	r0, [sp, #16]
 80058b2:	f840 ab04 	str.w	sl, [r0], #4
 80058b6:	eba0 0009 	sub.w	r0, r0, r9
 80058ba:	1080      	asrs	r0, r0, #2
 80058bc:	6128      	str	r0, [r5, #16]
 80058be:	0147      	lsls	r7, r0, #5
 80058c0:	4650      	mov	r0, sl
 80058c2:	f000 faf7 	bl	8005eb4 <__hi0bits>
 80058c6:	f8d8 6000 	ldr.w	r6, [r8]
 80058ca:	1a3f      	subs	r7, r7, r0
 80058cc:	42b7      	cmp	r7, r6
 80058ce:	dd64      	ble.n	800599a <__gethex+0x260>
 80058d0:	1bbf      	subs	r7, r7, r6
 80058d2:	4639      	mov	r1, r7
 80058d4:	4628      	mov	r0, r5
 80058d6:	f000 fe07 	bl	80064e8 <__any_on>
 80058da:	4682      	mov	sl, r0
 80058dc:	b178      	cbz	r0, 80058fe <__gethex+0x1c4>
 80058de:	1e7b      	subs	r3, r7, #1
 80058e0:	1159      	asrs	r1, r3, #5
 80058e2:	f003 021f 	and.w	r2, r3, #31
 80058e6:	f04f 0a01 	mov.w	sl, #1
 80058ea:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80058ee:	fa0a f202 	lsl.w	r2, sl, r2
 80058f2:	420a      	tst	r2, r1
 80058f4:	d003      	beq.n	80058fe <__gethex+0x1c4>
 80058f6:	4553      	cmp	r3, sl
 80058f8:	dc46      	bgt.n	8005988 <__gethex+0x24e>
 80058fa:	f04f 0a02 	mov.w	sl, #2
 80058fe:	4639      	mov	r1, r7
 8005900:	4628      	mov	r0, r5
 8005902:	f7ff fecb 	bl	800569c <rshift>
 8005906:	443c      	add	r4, r7
 8005908:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800590c:	42a3      	cmp	r3, r4
 800590e:	da52      	bge.n	80059b6 <__gethex+0x27c>
 8005910:	4629      	mov	r1, r5
 8005912:	9802      	ldr	r0, [sp, #8]
 8005914:	f000 fa3e 	bl	8005d94 <_Bfree>
 8005918:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800591a:	2300      	movs	r3, #0
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	27a3      	movs	r7, #163	; 0xa3
 8005920:	e793      	b.n	800584a <__gethex+0x110>
 8005922:	3101      	adds	r1, #1
 8005924:	105b      	asrs	r3, r3, #1
 8005926:	e7b0      	b.n	800588a <__gethex+0x150>
 8005928:	1e73      	subs	r3, r6, #1
 800592a:	9305      	str	r3, [sp, #20]
 800592c:	9a07      	ldr	r2, [sp, #28]
 800592e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005932:	4293      	cmp	r3, r2
 8005934:	d018      	beq.n	8005968 <__gethex+0x22e>
 8005936:	f1bb 0f20 	cmp.w	fp, #32
 800593a:	d107      	bne.n	800594c <__gethex+0x212>
 800593c:	9b04      	ldr	r3, [sp, #16]
 800593e:	f8c3 a000 	str.w	sl, [r3]
 8005942:	3304      	adds	r3, #4
 8005944:	f04f 0a00 	mov.w	sl, #0
 8005948:	9304      	str	r3, [sp, #16]
 800594a:	46d3      	mov	fp, sl
 800594c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005950:	f7ff fede 	bl	8005710 <__hexdig_fun>
 8005954:	f000 000f 	and.w	r0, r0, #15
 8005958:	fa00 f00b 	lsl.w	r0, r0, fp
 800595c:	ea4a 0a00 	orr.w	sl, sl, r0
 8005960:	f10b 0b04 	add.w	fp, fp, #4
 8005964:	9b05      	ldr	r3, [sp, #20]
 8005966:	e00d      	b.n	8005984 <__gethex+0x24a>
 8005968:	9b05      	ldr	r3, [sp, #20]
 800596a:	9a08      	ldr	r2, [sp, #32]
 800596c:	4413      	add	r3, r2
 800596e:	42bb      	cmp	r3, r7
 8005970:	d3e1      	bcc.n	8005936 <__gethex+0x1fc>
 8005972:	4618      	mov	r0, r3
 8005974:	9a01      	ldr	r2, [sp, #4]
 8005976:	9903      	ldr	r1, [sp, #12]
 8005978:	9309      	str	r3, [sp, #36]	; 0x24
 800597a:	f000 fe4f 	bl	800661c <strncmp>
 800597e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005980:	2800      	cmp	r0, #0
 8005982:	d1d8      	bne.n	8005936 <__gethex+0x1fc>
 8005984:	461e      	mov	r6, r3
 8005986:	e791      	b.n	80058ac <__gethex+0x172>
 8005988:	1eb9      	subs	r1, r7, #2
 800598a:	4628      	mov	r0, r5
 800598c:	f000 fdac 	bl	80064e8 <__any_on>
 8005990:	2800      	cmp	r0, #0
 8005992:	d0b2      	beq.n	80058fa <__gethex+0x1c0>
 8005994:	f04f 0a03 	mov.w	sl, #3
 8005998:	e7b1      	b.n	80058fe <__gethex+0x1c4>
 800599a:	da09      	bge.n	80059b0 <__gethex+0x276>
 800599c:	1bf7      	subs	r7, r6, r7
 800599e:	4629      	mov	r1, r5
 80059a0:	463a      	mov	r2, r7
 80059a2:	9802      	ldr	r0, [sp, #8]
 80059a4:	f000 fbc2 	bl	800612c <__lshift>
 80059a8:	1be4      	subs	r4, r4, r7
 80059aa:	4605      	mov	r5, r0
 80059ac:	f100 0914 	add.w	r9, r0, #20
 80059b0:	f04f 0a00 	mov.w	sl, #0
 80059b4:	e7a8      	b.n	8005908 <__gethex+0x1ce>
 80059b6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80059ba:	42a0      	cmp	r0, r4
 80059bc:	dd6a      	ble.n	8005a94 <__gethex+0x35a>
 80059be:	1b04      	subs	r4, r0, r4
 80059c0:	42a6      	cmp	r6, r4
 80059c2:	dc2e      	bgt.n	8005a22 <__gethex+0x2e8>
 80059c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d022      	beq.n	8005a12 <__gethex+0x2d8>
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d024      	beq.n	8005a1a <__gethex+0x2e0>
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d115      	bne.n	8005a00 <__gethex+0x2c6>
 80059d4:	42a6      	cmp	r6, r4
 80059d6:	d113      	bne.n	8005a00 <__gethex+0x2c6>
 80059d8:	2e01      	cmp	r6, #1
 80059da:	dc0b      	bgt.n	80059f4 <__gethex+0x2ba>
 80059dc:	9a06      	ldr	r2, [sp, #24]
 80059de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	2301      	movs	r3, #1
 80059e6:	612b      	str	r3, [r5, #16]
 80059e8:	f8c9 3000 	str.w	r3, [r9]
 80059ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80059ee:	2762      	movs	r7, #98	; 0x62
 80059f0:	601d      	str	r5, [r3, #0]
 80059f2:	e72a      	b.n	800584a <__gethex+0x110>
 80059f4:	1e71      	subs	r1, r6, #1
 80059f6:	4628      	mov	r0, r5
 80059f8:	f000 fd76 	bl	80064e8 <__any_on>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d1ed      	bne.n	80059dc <__gethex+0x2a2>
 8005a00:	4629      	mov	r1, r5
 8005a02:	9802      	ldr	r0, [sp, #8]
 8005a04:	f000 f9c6 	bl	8005d94 <_Bfree>
 8005a08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	2750      	movs	r7, #80	; 0x50
 8005a10:	e71b      	b.n	800584a <__gethex+0x110>
 8005a12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0e1      	beq.n	80059dc <__gethex+0x2a2>
 8005a18:	e7f2      	b.n	8005a00 <__gethex+0x2c6>
 8005a1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1dd      	bne.n	80059dc <__gethex+0x2a2>
 8005a20:	e7ee      	b.n	8005a00 <__gethex+0x2c6>
 8005a22:	1e67      	subs	r7, r4, #1
 8005a24:	f1ba 0f00 	cmp.w	sl, #0
 8005a28:	d131      	bne.n	8005a8e <__gethex+0x354>
 8005a2a:	b127      	cbz	r7, 8005a36 <__gethex+0x2fc>
 8005a2c:	4639      	mov	r1, r7
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f000 fd5a 	bl	80064e8 <__any_on>
 8005a34:	4682      	mov	sl, r0
 8005a36:	117a      	asrs	r2, r7, #5
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f007 071f 	and.w	r7, r7, #31
 8005a3e:	fa03 f707 	lsl.w	r7, r3, r7
 8005a42:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005a46:	4621      	mov	r1, r4
 8005a48:	421f      	tst	r7, r3
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	bf18      	it	ne
 8005a4e:	f04a 0a02 	orrne.w	sl, sl, #2
 8005a52:	1b36      	subs	r6, r6, r4
 8005a54:	f7ff fe22 	bl	800569c <rshift>
 8005a58:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005a5c:	2702      	movs	r7, #2
 8005a5e:	f1ba 0f00 	cmp.w	sl, #0
 8005a62:	d048      	beq.n	8005af6 <__gethex+0x3bc>
 8005a64:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d015      	beq.n	8005a98 <__gethex+0x35e>
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d017      	beq.n	8005aa0 <__gethex+0x366>
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d109      	bne.n	8005a88 <__gethex+0x34e>
 8005a74:	f01a 0f02 	tst.w	sl, #2
 8005a78:	d006      	beq.n	8005a88 <__gethex+0x34e>
 8005a7a:	f8d9 3000 	ldr.w	r3, [r9]
 8005a7e:	ea4a 0a03 	orr.w	sl, sl, r3
 8005a82:	f01a 0f01 	tst.w	sl, #1
 8005a86:	d10e      	bne.n	8005aa6 <__gethex+0x36c>
 8005a88:	f047 0710 	orr.w	r7, r7, #16
 8005a8c:	e033      	b.n	8005af6 <__gethex+0x3bc>
 8005a8e:	f04f 0a01 	mov.w	sl, #1
 8005a92:	e7d0      	b.n	8005a36 <__gethex+0x2fc>
 8005a94:	2701      	movs	r7, #1
 8005a96:	e7e2      	b.n	8005a5e <__gethex+0x324>
 8005a98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a9a:	f1c3 0301 	rsb	r3, r3, #1
 8005a9e:	9315      	str	r3, [sp, #84]	; 0x54
 8005aa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0f0      	beq.n	8005a88 <__gethex+0x34e>
 8005aa6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005aaa:	f105 0314 	add.w	r3, r5, #20
 8005aae:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005ab2:	eb03 010a 	add.w	r1, r3, sl
 8005ab6:	f04f 0c00 	mov.w	ip, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005ac4:	d01c      	beq.n	8005b00 <__gethex+0x3c6>
 8005ac6:	3201      	adds	r2, #1
 8005ac8:	6002      	str	r2, [r0, #0]
 8005aca:	2f02      	cmp	r7, #2
 8005acc:	f105 0314 	add.w	r3, r5, #20
 8005ad0:	d138      	bne.n	8005b44 <__gethex+0x40a>
 8005ad2:	f8d8 2000 	ldr.w	r2, [r8]
 8005ad6:	3a01      	subs	r2, #1
 8005ad8:	42b2      	cmp	r2, r6
 8005ada:	d10a      	bne.n	8005af2 <__gethex+0x3b8>
 8005adc:	1171      	asrs	r1, r6, #5
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f006 061f 	and.w	r6, r6, #31
 8005ae4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005ae8:	fa02 f606 	lsl.w	r6, r2, r6
 8005aec:	421e      	tst	r6, r3
 8005aee:	bf18      	it	ne
 8005af0:	4617      	movne	r7, r2
 8005af2:	f047 0720 	orr.w	r7, r7, #32
 8005af6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005af8:	601d      	str	r5, [r3, #0]
 8005afa:	9b06      	ldr	r3, [sp, #24]
 8005afc:	601c      	str	r4, [r3, #0]
 8005afe:	e6a4      	b.n	800584a <__gethex+0x110>
 8005b00:	4299      	cmp	r1, r3
 8005b02:	f843 cc04 	str.w	ip, [r3, #-4]
 8005b06:	d8d8      	bhi.n	8005aba <__gethex+0x380>
 8005b08:	68ab      	ldr	r3, [r5, #8]
 8005b0a:	4599      	cmp	r9, r3
 8005b0c:	db12      	blt.n	8005b34 <__gethex+0x3fa>
 8005b0e:	6869      	ldr	r1, [r5, #4]
 8005b10:	9802      	ldr	r0, [sp, #8]
 8005b12:	3101      	adds	r1, #1
 8005b14:	f000 f90a 	bl	8005d2c <_Balloc>
 8005b18:	692a      	ldr	r2, [r5, #16]
 8005b1a:	3202      	adds	r2, #2
 8005b1c:	f105 010c 	add.w	r1, r5, #12
 8005b20:	4683      	mov	fp, r0
 8005b22:	0092      	lsls	r2, r2, #2
 8005b24:	300c      	adds	r0, #12
 8005b26:	f000 f8f6 	bl	8005d16 <memcpy>
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	9802      	ldr	r0, [sp, #8]
 8005b2e:	f000 f931 	bl	8005d94 <_Bfree>
 8005b32:	465d      	mov	r5, fp
 8005b34:	692b      	ldr	r3, [r5, #16]
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005b3c:	612a      	str	r2, [r5, #16]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	615a      	str	r2, [r3, #20]
 8005b42:	e7c2      	b.n	8005aca <__gethex+0x390>
 8005b44:	692a      	ldr	r2, [r5, #16]
 8005b46:	454a      	cmp	r2, r9
 8005b48:	dd0b      	ble.n	8005b62 <__gethex+0x428>
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f7ff fda5 	bl	800569c <rshift>
 8005b52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b56:	3401      	adds	r4, #1
 8005b58:	42a3      	cmp	r3, r4
 8005b5a:	f6ff aed9 	blt.w	8005910 <__gethex+0x1d6>
 8005b5e:	2701      	movs	r7, #1
 8005b60:	e7c7      	b.n	8005af2 <__gethex+0x3b8>
 8005b62:	f016 061f 	ands.w	r6, r6, #31
 8005b66:	d0fa      	beq.n	8005b5e <__gethex+0x424>
 8005b68:	449a      	add	sl, r3
 8005b6a:	f1c6 0620 	rsb	r6, r6, #32
 8005b6e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005b72:	f000 f99f 	bl	8005eb4 <__hi0bits>
 8005b76:	42b0      	cmp	r0, r6
 8005b78:	dbe7      	blt.n	8005b4a <__gethex+0x410>
 8005b7a:	e7f0      	b.n	8005b5e <__gethex+0x424>

08005b7c <L_shift>:
 8005b7c:	f1c2 0208 	rsb	r2, r2, #8
 8005b80:	0092      	lsls	r2, r2, #2
 8005b82:	b570      	push	{r4, r5, r6, lr}
 8005b84:	f1c2 0620 	rsb	r6, r2, #32
 8005b88:	6843      	ldr	r3, [r0, #4]
 8005b8a:	6804      	ldr	r4, [r0, #0]
 8005b8c:	fa03 f506 	lsl.w	r5, r3, r6
 8005b90:	432c      	orrs	r4, r5
 8005b92:	40d3      	lsrs	r3, r2
 8005b94:	6004      	str	r4, [r0, #0]
 8005b96:	f840 3f04 	str.w	r3, [r0, #4]!
 8005b9a:	4288      	cmp	r0, r1
 8005b9c:	d3f4      	bcc.n	8005b88 <L_shift+0xc>
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}

08005ba0 <__match>:
 8005ba0:	b530      	push	{r4, r5, lr}
 8005ba2:	6803      	ldr	r3, [r0, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005baa:	b914      	cbnz	r4, 8005bb2 <__match+0x12>
 8005bac:	6003      	str	r3, [r0, #0]
 8005bae:	2001      	movs	r0, #1
 8005bb0:	bd30      	pop	{r4, r5, pc}
 8005bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005bba:	2d19      	cmp	r5, #25
 8005bbc:	bf98      	it	ls
 8005bbe:	3220      	addls	r2, #32
 8005bc0:	42a2      	cmp	r2, r4
 8005bc2:	d0f0      	beq.n	8005ba6 <__match+0x6>
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	e7f3      	b.n	8005bb0 <__match+0x10>

08005bc8 <__hexnan>:
 8005bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	680b      	ldr	r3, [r1, #0]
 8005bce:	6801      	ldr	r1, [r0, #0]
 8005bd0:	115f      	asrs	r7, r3, #5
 8005bd2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005bd6:	f013 031f 	ands.w	r3, r3, #31
 8005bda:	b087      	sub	sp, #28
 8005bdc:	bf18      	it	ne
 8005bde:	3704      	addne	r7, #4
 8005be0:	2500      	movs	r5, #0
 8005be2:	1f3e      	subs	r6, r7, #4
 8005be4:	4682      	mov	sl, r0
 8005be6:	4690      	mov	r8, r2
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	f847 5c04 	str.w	r5, [r7, #-4]
 8005bee:	46b1      	mov	r9, r6
 8005bf0:	4634      	mov	r4, r6
 8005bf2:	9502      	str	r5, [sp, #8]
 8005bf4:	46ab      	mov	fp, r5
 8005bf6:	784a      	ldrb	r2, [r1, #1]
 8005bf8:	1c4b      	adds	r3, r1, #1
 8005bfa:	9303      	str	r3, [sp, #12]
 8005bfc:	b342      	cbz	r2, 8005c50 <__hexnan+0x88>
 8005bfe:	4610      	mov	r0, r2
 8005c00:	9105      	str	r1, [sp, #20]
 8005c02:	9204      	str	r2, [sp, #16]
 8005c04:	f7ff fd84 	bl	8005710 <__hexdig_fun>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d143      	bne.n	8005c94 <__hexnan+0xcc>
 8005c0c:	9a04      	ldr	r2, [sp, #16]
 8005c0e:	9905      	ldr	r1, [sp, #20]
 8005c10:	2a20      	cmp	r2, #32
 8005c12:	d818      	bhi.n	8005c46 <__hexnan+0x7e>
 8005c14:	9b02      	ldr	r3, [sp, #8]
 8005c16:	459b      	cmp	fp, r3
 8005c18:	dd13      	ble.n	8005c42 <__hexnan+0x7a>
 8005c1a:	454c      	cmp	r4, r9
 8005c1c:	d206      	bcs.n	8005c2c <__hexnan+0x64>
 8005c1e:	2d07      	cmp	r5, #7
 8005c20:	dc04      	bgt.n	8005c2c <__hexnan+0x64>
 8005c22:	462a      	mov	r2, r5
 8005c24:	4649      	mov	r1, r9
 8005c26:	4620      	mov	r0, r4
 8005c28:	f7ff ffa8 	bl	8005b7c <L_shift>
 8005c2c:	4544      	cmp	r4, r8
 8005c2e:	d944      	bls.n	8005cba <__hexnan+0xf2>
 8005c30:	2300      	movs	r3, #0
 8005c32:	f1a4 0904 	sub.w	r9, r4, #4
 8005c36:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c3a:	f8cd b008 	str.w	fp, [sp, #8]
 8005c3e:	464c      	mov	r4, r9
 8005c40:	461d      	mov	r5, r3
 8005c42:	9903      	ldr	r1, [sp, #12]
 8005c44:	e7d7      	b.n	8005bf6 <__hexnan+0x2e>
 8005c46:	2a29      	cmp	r2, #41	; 0x29
 8005c48:	d14a      	bne.n	8005ce0 <__hexnan+0x118>
 8005c4a:	3102      	adds	r1, #2
 8005c4c:	f8ca 1000 	str.w	r1, [sl]
 8005c50:	f1bb 0f00 	cmp.w	fp, #0
 8005c54:	d044      	beq.n	8005ce0 <__hexnan+0x118>
 8005c56:	454c      	cmp	r4, r9
 8005c58:	d206      	bcs.n	8005c68 <__hexnan+0xa0>
 8005c5a:	2d07      	cmp	r5, #7
 8005c5c:	dc04      	bgt.n	8005c68 <__hexnan+0xa0>
 8005c5e:	462a      	mov	r2, r5
 8005c60:	4649      	mov	r1, r9
 8005c62:	4620      	mov	r0, r4
 8005c64:	f7ff ff8a 	bl	8005b7c <L_shift>
 8005c68:	4544      	cmp	r4, r8
 8005c6a:	d928      	bls.n	8005cbe <__hexnan+0xf6>
 8005c6c:	4643      	mov	r3, r8
 8005c6e:	f854 2b04 	ldr.w	r2, [r4], #4
 8005c72:	f843 2b04 	str.w	r2, [r3], #4
 8005c76:	42a6      	cmp	r6, r4
 8005c78:	d2f9      	bcs.n	8005c6e <__hexnan+0xa6>
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f843 2b04 	str.w	r2, [r3], #4
 8005c80:	429e      	cmp	r6, r3
 8005c82:	d2fb      	bcs.n	8005c7c <__hexnan+0xb4>
 8005c84:	6833      	ldr	r3, [r6, #0]
 8005c86:	b91b      	cbnz	r3, 8005c90 <__hexnan+0xc8>
 8005c88:	4546      	cmp	r6, r8
 8005c8a:	d127      	bne.n	8005cdc <__hexnan+0x114>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	6033      	str	r3, [r6, #0]
 8005c90:	2005      	movs	r0, #5
 8005c92:	e026      	b.n	8005ce2 <__hexnan+0x11a>
 8005c94:	3501      	adds	r5, #1
 8005c96:	2d08      	cmp	r5, #8
 8005c98:	f10b 0b01 	add.w	fp, fp, #1
 8005c9c:	dd06      	ble.n	8005cac <__hexnan+0xe4>
 8005c9e:	4544      	cmp	r4, r8
 8005ca0:	d9cf      	bls.n	8005c42 <__hexnan+0x7a>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f844 3c04 	str.w	r3, [r4, #-4]
 8005ca8:	2501      	movs	r5, #1
 8005caa:	3c04      	subs	r4, #4
 8005cac:	6822      	ldr	r2, [r4, #0]
 8005cae:	f000 000f 	and.w	r0, r0, #15
 8005cb2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005cb6:	6020      	str	r0, [r4, #0]
 8005cb8:	e7c3      	b.n	8005c42 <__hexnan+0x7a>
 8005cba:	2508      	movs	r5, #8
 8005cbc:	e7c1      	b.n	8005c42 <__hexnan+0x7a>
 8005cbe:	9b01      	ldr	r3, [sp, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0df      	beq.n	8005c84 <__hexnan+0xbc>
 8005cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc8:	f1c3 0320 	rsb	r3, r3, #32
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005cd4:	401a      	ands	r2, r3
 8005cd6:	f847 2c04 	str.w	r2, [r7, #-4]
 8005cda:	e7d3      	b.n	8005c84 <__hexnan+0xbc>
 8005cdc:	3e04      	subs	r6, #4
 8005cde:	e7d1      	b.n	8005c84 <__hexnan+0xbc>
 8005ce0:	2004      	movs	r0, #4
 8005ce2:	b007      	add	sp, #28
 8005ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ce8 <__locale_ctype_ptr_l>:
 8005ce8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005cec:	4770      	bx	lr

08005cee <__localeconv_l>:
 8005cee:	30f0      	adds	r0, #240	; 0xf0
 8005cf0:	4770      	bx	lr

08005cf2 <__ascii_mbtowc>:
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	b901      	cbnz	r1, 8005cf8 <__ascii_mbtowc+0x6>
 8005cf6:	a901      	add	r1, sp, #4
 8005cf8:	b142      	cbz	r2, 8005d0c <__ascii_mbtowc+0x1a>
 8005cfa:	b14b      	cbz	r3, 8005d10 <__ascii_mbtowc+0x1e>
 8005cfc:	7813      	ldrb	r3, [r2, #0]
 8005cfe:	600b      	str	r3, [r1, #0]
 8005d00:	7812      	ldrb	r2, [r2, #0]
 8005d02:	1c10      	adds	r0, r2, #0
 8005d04:	bf18      	it	ne
 8005d06:	2001      	movne	r0, #1
 8005d08:	b002      	add	sp, #8
 8005d0a:	4770      	bx	lr
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	e7fb      	b.n	8005d08 <__ascii_mbtowc+0x16>
 8005d10:	f06f 0001 	mvn.w	r0, #1
 8005d14:	e7f8      	b.n	8005d08 <__ascii_mbtowc+0x16>

08005d16 <memcpy>:
 8005d16:	b510      	push	{r4, lr}
 8005d18:	1e43      	subs	r3, r0, #1
 8005d1a:	440a      	add	r2, r1
 8005d1c:	4291      	cmp	r1, r2
 8005d1e:	d100      	bne.n	8005d22 <memcpy+0xc>
 8005d20:	bd10      	pop	{r4, pc}
 8005d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d2a:	e7f7      	b.n	8005d1c <memcpy+0x6>

08005d2c <_Balloc>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d30:	4604      	mov	r4, r0
 8005d32:	460e      	mov	r6, r1
 8005d34:	b93d      	cbnz	r5, 8005d46 <_Balloc+0x1a>
 8005d36:	2010      	movs	r0, #16
 8005d38:	f000 fc90 	bl	800665c <malloc>
 8005d3c:	6260      	str	r0, [r4, #36]	; 0x24
 8005d3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d42:	6005      	str	r5, [r0, #0]
 8005d44:	60c5      	str	r5, [r0, #12]
 8005d46:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d48:	68eb      	ldr	r3, [r5, #12]
 8005d4a:	b183      	cbz	r3, 8005d6e <_Balloc+0x42>
 8005d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d54:	b9b8      	cbnz	r0, 8005d86 <_Balloc+0x5a>
 8005d56:	2101      	movs	r1, #1
 8005d58:	fa01 f506 	lsl.w	r5, r1, r6
 8005d5c:	1d6a      	adds	r2, r5, #5
 8005d5e:	0092      	lsls	r2, r2, #2
 8005d60:	4620      	mov	r0, r4
 8005d62:	f000 fbe2 	bl	800652a <_calloc_r>
 8005d66:	b160      	cbz	r0, 8005d82 <_Balloc+0x56>
 8005d68:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005d6c:	e00e      	b.n	8005d8c <_Balloc+0x60>
 8005d6e:	2221      	movs	r2, #33	; 0x21
 8005d70:	2104      	movs	r1, #4
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 fbd9 	bl	800652a <_calloc_r>
 8005d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d7a:	60e8      	str	r0, [r5, #12]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e4      	bne.n	8005d4c <_Balloc+0x20>
 8005d82:	2000      	movs	r0, #0
 8005d84:	bd70      	pop	{r4, r5, r6, pc}
 8005d86:	6802      	ldr	r2, [r0, #0]
 8005d88:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d92:	e7f7      	b.n	8005d84 <_Balloc+0x58>

08005d94 <_Bfree>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d98:	4606      	mov	r6, r0
 8005d9a:	460d      	mov	r5, r1
 8005d9c:	b93c      	cbnz	r4, 8005dae <_Bfree+0x1a>
 8005d9e:	2010      	movs	r0, #16
 8005da0:	f000 fc5c 	bl	800665c <malloc>
 8005da4:	6270      	str	r0, [r6, #36]	; 0x24
 8005da6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005daa:	6004      	str	r4, [r0, #0]
 8005dac:	60c4      	str	r4, [r0, #12]
 8005dae:	b13d      	cbz	r5, 8005dc0 <_Bfree+0x2c>
 8005db0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005db2:	686a      	ldr	r2, [r5, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005dba:	6029      	str	r1, [r5, #0]
 8005dbc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005dc0:	bd70      	pop	{r4, r5, r6, pc}

08005dc2 <__multadd>:
 8005dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc6:	690d      	ldr	r5, [r1, #16]
 8005dc8:	461f      	mov	r7, r3
 8005dca:	4606      	mov	r6, r0
 8005dcc:	460c      	mov	r4, r1
 8005dce:	f101 0c14 	add.w	ip, r1, #20
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f8dc 0000 	ldr.w	r0, [ip]
 8005dd8:	b281      	uxth	r1, r0
 8005dda:	fb02 7101 	mla	r1, r2, r1, r7
 8005dde:	0c0f      	lsrs	r7, r1, #16
 8005de0:	0c00      	lsrs	r0, r0, #16
 8005de2:	fb02 7000 	mla	r0, r2, r0, r7
 8005de6:	b289      	uxth	r1, r1
 8005de8:	3301      	adds	r3, #1
 8005dea:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005dee:	429d      	cmp	r5, r3
 8005df0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005df4:	f84c 1b04 	str.w	r1, [ip], #4
 8005df8:	dcec      	bgt.n	8005dd4 <__multadd+0x12>
 8005dfa:	b1d7      	cbz	r7, 8005e32 <__multadd+0x70>
 8005dfc:	68a3      	ldr	r3, [r4, #8]
 8005dfe:	42ab      	cmp	r3, r5
 8005e00:	dc12      	bgt.n	8005e28 <__multadd+0x66>
 8005e02:	6861      	ldr	r1, [r4, #4]
 8005e04:	4630      	mov	r0, r6
 8005e06:	3101      	adds	r1, #1
 8005e08:	f7ff ff90 	bl	8005d2c <_Balloc>
 8005e0c:	6922      	ldr	r2, [r4, #16]
 8005e0e:	3202      	adds	r2, #2
 8005e10:	f104 010c 	add.w	r1, r4, #12
 8005e14:	4680      	mov	r8, r0
 8005e16:	0092      	lsls	r2, r2, #2
 8005e18:	300c      	adds	r0, #12
 8005e1a:	f7ff ff7c 	bl	8005d16 <memcpy>
 8005e1e:	4621      	mov	r1, r4
 8005e20:	4630      	mov	r0, r6
 8005e22:	f7ff ffb7 	bl	8005d94 <_Bfree>
 8005e26:	4644      	mov	r4, r8
 8005e28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e2c:	3501      	adds	r5, #1
 8005e2e:	615f      	str	r7, [r3, #20]
 8005e30:	6125      	str	r5, [r4, #16]
 8005e32:	4620      	mov	r0, r4
 8005e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e38 <__s2b>:
 8005e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	4615      	mov	r5, r2
 8005e40:	461f      	mov	r7, r3
 8005e42:	2209      	movs	r2, #9
 8005e44:	3308      	adds	r3, #8
 8005e46:	4606      	mov	r6, r0
 8005e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	2201      	movs	r2, #1
 8005e50:	429a      	cmp	r2, r3
 8005e52:	db20      	blt.n	8005e96 <__s2b+0x5e>
 8005e54:	4630      	mov	r0, r6
 8005e56:	f7ff ff69 	bl	8005d2c <_Balloc>
 8005e5a:	9b08      	ldr	r3, [sp, #32]
 8005e5c:	6143      	str	r3, [r0, #20]
 8005e5e:	2d09      	cmp	r5, #9
 8005e60:	f04f 0301 	mov.w	r3, #1
 8005e64:	6103      	str	r3, [r0, #16]
 8005e66:	dd19      	ble.n	8005e9c <__s2b+0x64>
 8005e68:	f104 0809 	add.w	r8, r4, #9
 8005e6c:	46c1      	mov	r9, r8
 8005e6e:	442c      	add	r4, r5
 8005e70:	f819 3b01 	ldrb.w	r3, [r9], #1
 8005e74:	4601      	mov	r1, r0
 8005e76:	3b30      	subs	r3, #48	; 0x30
 8005e78:	220a      	movs	r2, #10
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f7ff ffa1 	bl	8005dc2 <__multadd>
 8005e80:	45a1      	cmp	r9, r4
 8005e82:	d1f5      	bne.n	8005e70 <__s2b+0x38>
 8005e84:	eb08 0405 	add.w	r4, r8, r5
 8005e88:	3c08      	subs	r4, #8
 8005e8a:	1b2d      	subs	r5, r5, r4
 8005e8c:	1963      	adds	r3, r4, r5
 8005e8e:	42bb      	cmp	r3, r7
 8005e90:	db07      	blt.n	8005ea2 <__s2b+0x6a>
 8005e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e96:	0052      	lsls	r2, r2, #1
 8005e98:	3101      	adds	r1, #1
 8005e9a:	e7d9      	b.n	8005e50 <__s2b+0x18>
 8005e9c:	340a      	adds	r4, #10
 8005e9e:	2509      	movs	r5, #9
 8005ea0:	e7f3      	b.n	8005e8a <__s2b+0x52>
 8005ea2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ea6:	4601      	mov	r1, r0
 8005ea8:	3b30      	subs	r3, #48	; 0x30
 8005eaa:	220a      	movs	r2, #10
 8005eac:	4630      	mov	r0, r6
 8005eae:	f7ff ff88 	bl	8005dc2 <__multadd>
 8005eb2:	e7eb      	b.n	8005e8c <__s2b+0x54>

08005eb4 <__hi0bits>:
 8005eb4:	0c02      	lsrs	r2, r0, #16
 8005eb6:	0412      	lsls	r2, r2, #16
 8005eb8:	4603      	mov	r3, r0
 8005eba:	b9b2      	cbnz	r2, 8005eea <__hi0bits+0x36>
 8005ebc:	0403      	lsls	r3, r0, #16
 8005ebe:	2010      	movs	r0, #16
 8005ec0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ec4:	bf04      	itt	eq
 8005ec6:	021b      	lsleq	r3, r3, #8
 8005ec8:	3008      	addeq	r0, #8
 8005eca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ece:	bf04      	itt	eq
 8005ed0:	011b      	lsleq	r3, r3, #4
 8005ed2:	3004      	addeq	r0, #4
 8005ed4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ed8:	bf04      	itt	eq
 8005eda:	009b      	lsleq	r3, r3, #2
 8005edc:	3002      	addeq	r0, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	db06      	blt.n	8005ef0 <__hi0bits+0x3c>
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	d503      	bpl.n	8005eee <__hi0bits+0x3a>
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	4770      	bx	lr
 8005eea:	2000      	movs	r0, #0
 8005eec:	e7e8      	b.n	8005ec0 <__hi0bits+0xc>
 8005eee:	2020      	movs	r0, #32
 8005ef0:	4770      	bx	lr

08005ef2 <__lo0bits>:
 8005ef2:	6803      	ldr	r3, [r0, #0]
 8005ef4:	f013 0207 	ands.w	r2, r3, #7
 8005ef8:	4601      	mov	r1, r0
 8005efa:	d00b      	beq.n	8005f14 <__lo0bits+0x22>
 8005efc:	07da      	lsls	r2, r3, #31
 8005efe:	d423      	bmi.n	8005f48 <__lo0bits+0x56>
 8005f00:	0798      	lsls	r0, r3, #30
 8005f02:	bf49      	itett	mi
 8005f04:	085b      	lsrmi	r3, r3, #1
 8005f06:	089b      	lsrpl	r3, r3, #2
 8005f08:	2001      	movmi	r0, #1
 8005f0a:	600b      	strmi	r3, [r1, #0]
 8005f0c:	bf5c      	itt	pl
 8005f0e:	600b      	strpl	r3, [r1, #0]
 8005f10:	2002      	movpl	r0, #2
 8005f12:	4770      	bx	lr
 8005f14:	b298      	uxth	r0, r3
 8005f16:	b9a8      	cbnz	r0, 8005f44 <__lo0bits+0x52>
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	2010      	movs	r0, #16
 8005f1c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f20:	bf04      	itt	eq
 8005f22:	0a1b      	lsreq	r3, r3, #8
 8005f24:	3008      	addeq	r0, #8
 8005f26:	071a      	lsls	r2, r3, #28
 8005f28:	bf04      	itt	eq
 8005f2a:	091b      	lsreq	r3, r3, #4
 8005f2c:	3004      	addeq	r0, #4
 8005f2e:	079a      	lsls	r2, r3, #30
 8005f30:	bf04      	itt	eq
 8005f32:	089b      	lsreq	r3, r3, #2
 8005f34:	3002      	addeq	r0, #2
 8005f36:	07da      	lsls	r2, r3, #31
 8005f38:	d402      	bmi.n	8005f40 <__lo0bits+0x4e>
 8005f3a:	085b      	lsrs	r3, r3, #1
 8005f3c:	d006      	beq.n	8005f4c <__lo0bits+0x5a>
 8005f3e:	3001      	adds	r0, #1
 8005f40:	600b      	str	r3, [r1, #0]
 8005f42:	4770      	bx	lr
 8005f44:	4610      	mov	r0, r2
 8005f46:	e7e9      	b.n	8005f1c <__lo0bits+0x2a>
 8005f48:	2000      	movs	r0, #0
 8005f4a:	4770      	bx	lr
 8005f4c:	2020      	movs	r0, #32
 8005f4e:	4770      	bx	lr

08005f50 <__i2b>:
 8005f50:	b510      	push	{r4, lr}
 8005f52:	460c      	mov	r4, r1
 8005f54:	2101      	movs	r1, #1
 8005f56:	f7ff fee9 	bl	8005d2c <_Balloc>
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	6144      	str	r4, [r0, #20]
 8005f5e:	6102      	str	r2, [r0, #16]
 8005f60:	bd10      	pop	{r4, pc}

08005f62 <__multiply>:
 8005f62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f66:	4614      	mov	r4, r2
 8005f68:	690a      	ldr	r2, [r1, #16]
 8005f6a:	6923      	ldr	r3, [r4, #16]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	bfb8      	it	lt
 8005f70:	460b      	movlt	r3, r1
 8005f72:	4688      	mov	r8, r1
 8005f74:	bfbc      	itt	lt
 8005f76:	46a0      	movlt	r8, r4
 8005f78:	461c      	movlt	r4, r3
 8005f7a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f7e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f86:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f8a:	eb07 0609 	add.w	r6, r7, r9
 8005f8e:	42b3      	cmp	r3, r6
 8005f90:	bfb8      	it	lt
 8005f92:	3101      	addlt	r1, #1
 8005f94:	f7ff feca 	bl	8005d2c <_Balloc>
 8005f98:	f100 0514 	add.w	r5, r0, #20
 8005f9c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	4573      	cmp	r3, lr
 8005fa6:	d316      	bcc.n	8005fd6 <__multiply+0x74>
 8005fa8:	f104 0214 	add.w	r2, r4, #20
 8005fac:	f108 0114 	add.w	r1, r8, #20
 8005fb0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005fb4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	9b00      	ldr	r3, [sp, #0]
 8005fbc:	9201      	str	r2, [sp, #4]
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d80c      	bhi.n	8005fdc <__multiply+0x7a>
 8005fc2:	2e00      	cmp	r6, #0
 8005fc4:	dd03      	ble.n	8005fce <__multiply+0x6c>
 8005fc6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d05d      	beq.n	800608a <__multiply+0x128>
 8005fce:	6106      	str	r6, [r0, #16]
 8005fd0:	b003      	add	sp, #12
 8005fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd6:	f843 2b04 	str.w	r2, [r3], #4
 8005fda:	e7e3      	b.n	8005fa4 <__multiply+0x42>
 8005fdc:	f8b2 b000 	ldrh.w	fp, [r2]
 8005fe0:	f1bb 0f00 	cmp.w	fp, #0
 8005fe4:	d023      	beq.n	800602e <__multiply+0xcc>
 8005fe6:	4689      	mov	r9, r1
 8005fe8:	46ac      	mov	ip, r5
 8005fea:	f04f 0800 	mov.w	r8, #0
 8005fee:	f859 4b04 	ldr.w	r4, [r9], #4
 8005ff2:	f8dc a000 	ldr.w	sl, [ip]
 8005ff6:	b2a3      	uxth	r3, r4
 8005ff8:	fa1f fa8a 	uxth.w	sl, sl
 8005ffc:	fb0b a303 	mla	r3, fp, r3, sl
 8006000:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006004:	f8dc 4000 	ldr.w	r4, [ip]
 8006008:	4443      	add	r3, r8
 800600a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800600e:	fb0b 840a 	mla	r4, fp, sl, r8
 8006012:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006016:	46e2      	mov	sl, ip
 8006018:	b29b      	uxth	r3, r3
 800601a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800601e:	454f      	cmp	r7, r9
 8006020:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006024:	f84a 3b04 	str.w	r3, [sl], #4
 8006028:	d82b      	bhi.n	8006082 <__multiply+0x120>
 800602a:	f8cc 8004 	str.w	r8, [ip, #4]
 800602e:	9b01      	ldr	r3, [sp, #4]
 8006030:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006034:	3204      	adds	r2, #4
 8006036:	f1ba 0f00 	cmp.w	sl, #0
 800603a:	d020      	beq.n	800607e <__multiply+0x11c>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	4689      	mov	r9, r1
 8006040:	46a8      	mov	r8, r5
 8006042:	f04f 0b00 	mov.w	fp, #0
 8006046:	f8b9 c000 	ldrh.w	ip, [r9]
 800604a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800604e:	fb0a 440c 	mla	r4, sl, ip, r4
 8006052:	445c      	add	r4, fp
 8006054:	46c4      	mov	ip, r8
 8006056:	b29b      	uxth	r3, r3
 8006058:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800605c:	f84c 3b04 	str.w	r3, [ip], #4
 8006060:	f859 3b04 	ldr.w	r3, [r9], #4
 8006064:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006068:	0c1b      	lsrs	r3, r3, #16
 800606a:	fb0a b303 	mla	r3, sl, r3, fp
 800606e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006072:	454f      	cmp	r7, r9
 8006074:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006078:	d805      	bhi.n	8006086 <__multiply+0x124>
 800607a:	f8c8 3004 	str.w	r3, [r8, #4]
 800607e:	3504      	adds	r5, #4
 8006080:	e79b      	b.n	8005fba <__multiply+0x58>
 8006082:	46d4      	mov	ip, sl
 8006084:	e7b3      	b.n	8005fee <__multiply+0x8c>
 8006086:	46e0      	mov	r8, ip
 8006088:	e7dd      	b.n	8006046 <__multiply+0xe4>
 800608a:	3e01      	subs	r6, #1
 800608c:	e799      	b.n	8005fc2 <__multiply+0x60>
	...

08006090 <__pow5mult>:
 8006090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006094:	4615      	mov	r5, r2
 8006096:	f012 0203 	ands.w	r2, r2, #3
 800609a:	4606      	mov	r6, r0
 800609c:	460f      	mov	r7, r1
 800609e:	d007      	beq.n	80060b0 <__pow5mult+0x20>
 80060a0:	3a01      	subs	r2, #1
 80060a2:	4c21      	ldr	r4, [pc, #132]	; (8006128 <__pow5mult+0x98>)
 80060a4:	2300      	movs	r3, #0
 80060a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060aa:	f7ff fe8a 	bl	8005dc2 <__multadd>
 80060ae:	4607      	mov	r7, r0
 80060b0:	10ad      	asrs	r5, r5, #2
 80060b2:	d035      	beq.n	8006120 <__pow5mult+0x90>
 80060b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060b6:	b93c      	cbnz	r4, 80060c8 <__pow5mult+0x38>
 80060b8:	2010      	movs	r0, #16
 80060ba:	f000 facf 	bl	800665c <malloc>
 80060be:	6270      	str	r0, [r6, #36]	; 0x24
 80060c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060c4:	6004      	str	r4, [r0, #0]
 80060c6:	60c4      	str	r4, [r0, #12]
 80060c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060d0:	b94c      	cbnz	r4, 80060e6 <__pow5mult+0x56>
 80060d2:	f240 2171 	movw	r1, #625	; 0x271
 80060d6:	4630      	mov	r0, r6
 80060d8:	f7ff ff3a 	bl	8005f50 <__i2b>
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c8 0008 	str.w	r0, [r8, #8]
 80060e2:	4604      	mov	r4, r0
 80060e4:	6003      	str	r3, [r0, #0]
 80060e6:	f04f 0800 	mov.w	r8, #0
 80060ea:	07eb      	lsls	r3, r5, #31
 80060ec:	d50a      	bpl.n	8006104 <__pow5mult+0x74>
 80060ee:	4639      	mov	r1, r7
 80060f0:	4622      	mov	r2, r4
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7ff ff35 	bl	8005f62 <__multiply>
 80060f8:	4639      	mov	r1, r7
 80060fa:	4681      	mov	r9, r0
 80060fc:	4630      	mov	r0, r6
 80060fe:	f7ff fe49 	bl	8005d94 <_Bfree>
 8006102:	464f      	mov	r7, r9
 8006104:	106d      	asrs	r5, r5, #1
 8006106:	d00b      	beq.n	8006120 <__pow5mult+0x90>
 8006108:	6820      	ldr	r0, [r4, #0]
 800610a:	b938      	cbnz	r0, 800611c <__pow5mult+0x8c>
 800610c:	4622      	mov	r2, r4
 800610e:	4621      	mov	r1, r4
 8006110:	4630      	mov	r0, r6
 8006112:	f7ff ff26 	bl	8005f62 <__multiply>
 8006116:	6020      	str	r0, [r4, #0]
 8006118:	f8c0 8000 	str.w	r8, [r0]
 800611c:	4604      	mov	r4, r0
 800611e:	e7e4      	b.n	80060ea <__pow5mult+0x5a>
 8006120:	4638      	mov	r0, r7
 8006122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006126:	bf00      	nop
 8006128:	08006828 	.word	0x08006828

0800612c <__lshift>:
 800612c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	460c      	mov	r4, r1
 8006132:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006136:	6923      	ldr	r3, [r4, #16]
 8006138:	6849      	ldr	r1, [r1, #4]
 800613a:	eb0a 0903 	add.w	r9, sl, r3
 800613e:	68a3      	ldr	r3, [r4, #8]
 8006140:	4607      	mov	r7, r0
 8006142:	4616      	mov	r6, r2
 8006144:	f109 0501 	add.w	r5, r9, #1
 8006148:	42ab      	cmp	r3, r5
 800614a:	db32      	blt.n	80061b2 <__lshift+0x86>
 800614c:	4638      	mov	r0, r7
 800614e:	f7ff fded 	bl	8005d2c <_Balloc>
 8006152:	2300      	movs	r3, #0
 8006154:	4680      	mov	r8, r0
 8006156:	f100 0114 	add.w	r1, r0, #20
 800615a:	461a      	mov	r2, r3
 800615c:	4553      	cmp	r3, sl
 800615e:	db2b      	blt.n	80061b8 <__lshift+0x8c>
 8006160:	6920      	ldr	r0, [r4, #16]
 8006162:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006166:	f104 0314 	add.w	r3, r4, #20
 800616a:	f016 021f 	ands.w	r2, r6, #31
 800616e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006172:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006176:	d025      	beq.n	80061c4 <__lshift+0x98>
 8006178:	f1c2 0e20 	rsb	lr, r2, #32
 800617c:	2000      	movs	r0, #0
 800617e:	681e      	ldr	r6, [r3, #0]
 8006180:	468a      	mov	sl, r1
 8006182:	4096      	lsls	r6, r2
 8006184:	4330      	orrs	r0, r6
 8006186:	f84a 0b04 	str.w	r0, [sl], #4
 800618a:	f853 0b04 	ldr.w	r0, [r3], #4
 800618e:	459c      	cmp	ip, r3
 8006190:	fa20 f00e 	lsr.w	r0, r0, lr
 8006194:	d814      	bhi.n	80061c0 <__lshift+0x94>
 8006196:	6048      	str	r0, [r1, #4]
 8006198:	b108      	cbz	r0, 800619e <__lshift+0x72>
 800619a:	f109 0502 	add.w	r5, r9, #2
 800619e:	3d01      	subs	r5, #1
 80061a0:	4638      	mov	r0, r7
 80061a2:	f8c8 5010 	str.w	r5, [r8, #16]
 80061a6:	4621      	mov	r1, r4
 80061a8:	f7ff fdf4 	bl	8005d94 <_Bfree>
 80061ac:	4640      	mov	r0, r8
 80061ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b2:	3101      	adds	r1, #1
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	e7c7      	b.n	8006148 <__lshift+0x1c>
 80061b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80061bc:	3301      	adds	r3, #1
 80061be:	e7cd      	b.n	800615c <__lshift+0x30>
 80061c0:	4651      	mov	r1, sl
 80061c2:	e7dc      	b.n	800617e <__lshift+0x52>
 80061c4:	3904      	subs	r1, #4
 80061c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80061ce:	459c      	cmp	ip, r3
 80061d0:	d8f9      	bhi.n	80061c6 <__lshift+0x9a>
 80061d2:	e7e4      	b.n	800619e <__lshift+0x72>

080061d4 <__mcmp>:
 80061d4:	6903      	ldr	r3, [r0, #16]
 80061d6:	690a      	ldr	r2, [r1, #16]
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	b530      	push	{r4, r5, lr}
 80061dc:	d10c      	bne.n	80061f8 <__mcmp+0x24>
 80061de:	0092      	lsls	r2, r2, #2
 80061e0:	3014      	adds	r0, #20
 80061e2:	3114      	adds	r1, #20
 80061e4:	1884      	adds	r4, r0, r2
 80061e6:	4411      	add	r1, r2
 80061e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061f0:	4295      	cmp	r5, r2
 80061f2:	d003      	beq.n	80061fc <__mcmp+0x28>
 80061f4:	d305      	bcc.n	8006202 <__mcmp+0x2e>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4618      	mov	r0, r3
 80061fa:	bd30      	pop	{r4, r5, pc}
 80061fc:	42a0      	cmp	r0, r4
 80061fe:	d3f3      	bcc.n	80061e8 <__mcmp+0x14>
 8006200:	e7fa      	b.n	80061f8 <__mcmp+0x24>
 8006202:	f04f 33ff 	mov.w	r3, #4294967295
 8006206:	e7f7      	b.n	80061f8 <__mcmp+0x24>

08006208 <__mdiff>:
 8006208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	460d      	mov	r5, r1
 800620e:	4607      	mov	r7, r0
 8006210:	4611      	mov	r1, r2
 8006212:	4628      	mov	r0, r5
 8006214:	4614      	mov	r4, r2
 8006216:	f7ff ffdd 	bl	80061d4 <__mcmp>
 800621a:	1e06      	subs	r6, r0, #0
 800621c:	d108      	bne.n	8006230 <__mdiff+0x28>
 800621e:	4631      	mov	r1, r6
 8006220:	4638      	mov	r0, r7
 8006222:	f7ff fd83 	bl	8005d2c <_Balloc>
 8006226:	2301      	movs	r3, #1
 8006228:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800622c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006230:	bfa4      	itt	ge
 8006232:	4623      	movge	r3, r4
 8006234:	462c      	movge	r4, r5
 8006236:	4638      	mov	r0, r7
 8006238:	6861      	ldr	r1, [r4, #4]
 800623a:	bfa6      	itte	ge
 800623c:	461d      	movge	r5, r3
 800623e:	2600      	movge	r6, #0
 8006240:	2601      	movlt	r6, #1
 8006242:	f7ff fd73 	bl	8005d2c <_Balloc>
 8006246:	692b      	ldr	r3, [r5, #16]
 8006248:	60c6      	str	r6, [r0, #12]
 800624a:	6926      	ldr	r6, [r4, #16]
 800624c:	f105 0914 	add.w	r9, r5, #20
 8006250:	f104 0214 	add.w	r2, r4, #20
 8006254:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006258:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800625c:	f100 0514 	add.w	r5, r0, #20
 8006260:	f04f 0e00 	mov.w	lr, #0
 8006264:	f852 ab04 	ldr.w	sl, [r2], #4
 8006268:	f859 4b04 	ldr.w	r4, [r9], #4
 800626c:	fa1e f18a 	uxtah	r1, lr, sl
 8006270:	b2a3      	uxth	r3, r4
 8006272:	1ac9      	subs	r1, r1, r3
 8006274:	0c23      	lsrs	r3, r4, #16
 8006276:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800627a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800627e:	b289      	uxth	r1, r1
 8006280:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006284:	45c8      	cmp	r8, r9
 8006286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800628a:	4694      	mov	ip, r2
 800628c:	f845 3b04 	str.w	r3, [r5], #4
 8006290:	d8e8      	bhi.n	8006264 <__mdiff+0x5c>
 8006292:	45bc      	cmp	ip, r7
 8006294:	d304      	bcc.n	80062a0 <__mdiff+0x98>
 8006296:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800629a:	b183      	cbz	r3, 80062be <__mdiff+0xb6>
 800629c:	6106      	str	r6, [r0, #16]
 800629e:	e7c5      	b.n	800622c <__mdiff+0x24>
 80062a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80062a4:	fa1e f381 	uxtah	r3, lr, r1
 80062a8:	141a      	asrs	r2, r3, #16
 80062aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80062b8:	f845 3b04 	str.w	r3, [r5], #4
 80062bc:	e7e9      	b.n	8006292 <__mdiff+0x8a>
 80062be:	3e01      	subs	r6, #1
 80062c0:	e7e9      	b.n	8006296 <__mdiff+0x8e>
	...

080062c4 <__ulp>:
 80062c4:	4b12      	ldr	r3, [pc, #72]	; (8006310 <__ulp+0x4c>)
 80062c6:	ee10 2a90 	vmov	r2, s1
 80062ca:	401a      	ands	r2, r3
 80062cc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	dd04      	ble.n	80062de <__ulp+0x1a>
 80062d4:	2000      	movs	r0, #0
 80062d6:	4619      	mov	r1, r3
 80062d8:	ec41 0b10 	vmov	d0, r0, r1
 80062dc:	4770      	bx	lr
 80062de:	425b      	negs	r3, r3
 80062e0:	151b      	asrs	r3, r3, #20
 80062e2:	2b13      	cmp	r3, #19
 80062e4:	f04f 0000 	mov.w	r0, #0
 80062e8:	f04f 0100 	mov.w	r1, #0
 80062ec:	dc04      	bgt.n	80062f8 <__ulp+0x34>
 80062ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80062f2:	fa42 f103 	asr.w	r1, r2, r3
 80062f6:	e7ef      	b.n	80062d8 <__ulp+0x14>
 80062f8:	3b14      	subs	r3, #20
 80062fa:	2b1e      	cmp	r3, #30
 80062fc:	f04f 0201 	mov.w	r2, #1
 8006300:	bfda      	itte	le
 8006302:	f1c3 031f 	rsble	r3, r3, #31
 8006306:	fa02 f303 	lslle.w	r3, r2, r3
 800630a:	4613      	movgt	r3, r2
 800630c:	4618      	mov	r0, r3
 800630e:	e7e3      	b.n	80062d8 <__ulp+0x14>
 8006310:	7ff00000 	.word	0x7ff00000

08006314 <__b2d>:
 8006314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006316:	6905      	ldr	r5, [r0, #16]
 8006318:	f100 0714 	add.w	r7, r0, #20
 800631c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006320:	1f2e      	subs	r6, r5, #4
 8006322:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006326:	4620      	mov	r0, r4
 8006328:	f7ff fdc4 	bl	8005eb4 <__hi0bits>
 800632c:	f1c0 0320 	rsb	r3, r0, #32
 8006330:	280a      	cmp	r0, #10
 8006332:	600b      	str	r3, [r1, #0]
 8006334:	f8df c074 	ldr.w	ip, [pc, #116]	; 80063ac <__b2d+0x98>
 8006338:	dc14      	bgt.n	8006364 <__b2d+0x50>
 800633a:	f1c0 0e0b 	rsb	lr, r0, #11
 800633e:	fa24 f10e 	lsr.w	r1, r4, lr
 8006342:	42b7      	cmp	r7, r6
 8006344:	ea41 030c 	orr.w	r3, r1, ip
 8006348:	bf34      	ite	cc
 800634a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800634e:	2100      	movcs	r1, #0
 8006350:	3015      	adds	r0, #21
 8006352:	fa04 f000 	lsl.w	r0, r4, r0
 8006356:	fa21 f10e 	lsr.w	r1, r1, lr
 800635a:	ea40 0201 	orr.w	r2, r0, r1
 800635e:	ec43 2b10 	vmov	d0, r2, r3
 8006362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006364:	42b7      	cmp	r7, r6
 8006366:	bf3a      	itte	cc
 8006368:	f1a5 0608 	subcc.w	r6, r5, #8
 800636c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006370:	2100      	movcs	r1, #0
 8006372:	380b      	subs	r0, #11
 8006374:	d015      	beq.n	80063a2 <__b2d+0x8e>
 8006376:	4084      	lsls	r4, r0
 8006378:	f1c0 0520 	rsb	r5, r0, #32
 800637c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8006380:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8006384:	42be      	cmp	r6, r7
 8006386:	fa21 fc05 	lsr.w	ip, r1, r5
 800638a:	ea44 030c 	orr.w	r3, r4, ip
 800638e:	bf8c      	ite	hi
 8006390:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006394:	2400      	movls	r4, #0
 8006396:	fa01 f000 	lsl.w	r0, r1, r0
 800639a:	40ec      	lsrs	r4, r5
 800639c:	ea40 0204 	orr.w	r2, r0, r4
 80063a0:	e7dd      	b.n	800635e <__b2d+0x4a>
 80063a2:	ea44 030c 	orr.w	r3, r4, ip
 80063a6:	460a      	mov	r2, r1
 80063a8:	e7d9      	b.n	800635e <__b2d+0x4a>
 80063aa:	bf00      	nop
 80063ac:	3ff00000 	.word	0x3ff00000

080063b0 <__d2b>:
 80063b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063b4:	460e      	mov	r6, r1
 80063b6:	2101      	movs	r1, #1
 80063b8:	ec59 8b10 	vmov	r8, r9, d0
 80063bc:	4615      	mov	r5, r2
 80063be:	f7ff fcb5 	bl	8005d2c <_Balloc>
 80063c2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80063c6:	4607      	mov	r7, r0
 80063c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063cc:	bb34      	cbnz	r4, 800641c <__d2b+0x6c>
 80063ce:	9301      	str	r3, [sp, #4]
 80063d0:	f1b8 0300 	subs.w	r3, r8, #0
 80063d4:	d027      	beq.n	8006426 <__d2b+0x76>
 80063d6:	a802      	add	r0, sp, #8
 80063d8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80063dc:	f7ff fd89 	bl	8005ef2 <__lo0bits>
 80063e0:	9900      	ldr	r1, [sp, #0]
 80063e2:	b1f0      	cbz	r0, 8006422 <__d2b+0x72>
 80063e4:	9a01      	ldr	r2, [sp, #4]
 80063e6:	f1c0 0320 	rsb	r3, r0, #32
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	430b      	orrs	r3, r1
 80063f0:	40c2      	lsrs	r2, r0
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	9201      	str	r2, [sp, #4]
 80063f6:	9b01      	ldr	r3, [sp, #4]
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	bf14      	ite	ne
 80063fe:	2102      	movne	r1, #2
 8006400:	2101      	moveq	r1, #1
 8006402:	6139      	str	r1, [r7, #16]
 8006404:	b1c4      	cbz	r4, 8006438 <__d2b+0x88>
 8006406:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800640a:	4404      	add	r4, r0
 800640c:	6034      	str	r4, [r6, #0]
 800640e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006412:	6028      	str	r0, [r5, #0]
 8006414:	4638      	mov	r0, r7
 8006416:	b003      	add	sp, #12
 8006418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800641c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006420:	e7d5      	b.n	80063ce <__d2b+0x1e>
 8006422:	6179      	str	r1, [r7, #20]
 8006424:	e7e7      	b.n	80063f6 <__d2b+0x46>
 8006426:	a801      	add	r0, sp, #4
 8006428:	f7ff fd63 	bl	8005ef2 <__lo0bits>
 800642c:	9b01      	ldr	r3, [sp, #4]
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	2101      	movs	r1, #1
 8006432:	6139      	str	r1, [r7, #16]
 8006434:	3020      	adds	r0, #32
 8006436:	e7e5      	b.n	8006404 <__d2b+0x54>
 8006438:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800643c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006440:	6030      	str	r0, [r6, #0]
 8006442:	6918      	ldr	r0, [r3, #16]
 8006444:	f7ff fd36 	bl	8005eb4 <__hi0bits>
 8006448:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800644c:	e7e1      	b.n	8006412 <__d2b+0x62>

0800644e <__ratio>:
 800644e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006452:	4688      	mov	r8, r1
 8006454:	4669      	mov	r1, sp
 8006456:	4681      	mov	r9, r0
 8006458:	f7ff ff5c 	bl	8006314 <__b2d>
 800645c:	a901      	add	r1, sp, #4
 800645e:	4640      	mov	r0, r8
 8006460:	ec57 6b10 	vmov	r6, r7, d0
 8006464:	f7ff ff56 	bl	8006314 <__b2d>
 8006468:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800646c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006470:	eba3 0c02 	sub.w	ip, r3, r2
 8006474:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800647e:	ec5b ab10 	vmov	sl, fp, d0
 8006482:	2b00      	cmp	r3, #0
 8006484:	bfce      	itee	gt
 8006486:	463a      	movgt	r2, r7
 8006488:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800648c:	465a      	movle	r2, fp
 800648e:	4659      	mov	r1, fp
 8006490:	463d      	mov	r5, r7
 8006492:	bfd4      	ite	le
 8006494:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8006498:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800649c:	4630      	mov	r0, r6
 800649e:	ee10 2a10 	vmov	r2, s0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4629      	mov	r1, r5
 80064a6:	f7fa f9af 	bl	8000808 <__aeabi_ddiv>
 80064aa:	ec41 0b10 	vmov	d0, r0, r1
 80064ae:	b003      	add	sp, #12
 80064b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064b4 <__copybits>:
 80064b4:	3901      	subs	r1, #1
 80064b6:	b510      	push	{r4, lr}
 80064b8:	1149      	asrs	r1, r1, #5
 80064ba:	6914      	ldr	r4, [r2, #16]
 80064bc:	3101      	adds	r1, #1
 80064be:	f102 0314 	add.w	r3, r2, #20
 80064c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80064ca:	42a3      	cmp	r3, r4
 80064cc:	4602      	mov	r2, r0
 80064ce:	d303      	bcc.n	80064d8 <__copybits+0x24>
 80064d0:	2300      	movs	r3, #0
 80064d2:	428a      	cmp	r2, r1
 80064d4:	d305      	bcc.n	80064e2 <__copybits+0x2e>
 80064d6:	bd10      	pop	{r4, pc}
 80064d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80064dc:	f840 2b04 	str.w	r2, [r0], #4
 80064e0:	e7f3      	b.n	80064ca <__copybits+0x16>
 80064e2:	f842 3b04 	str.w	r3, [r2], #4
 80064e6:	e7f4      	b.n	80064d2 <__copybits+0x1e>

080064e8 <__any_on>:
 80064e8:	f100 0214 	add.w	r2, r0, #20
 80064ec:	6900      	ldr	r0, [r0, #16]
 80064ee:	114b      	asrs	r3, r1, #5
 80064f0:	4298      	cmp	r0, r3
 80064f2:	b510      	push	{r4, lr}
 80064f4:	db11      	blt.n	800651a <__any_on+0x32>
 80064f6:	dd0a      	ble.n	800650e <__any_on+0x26>
 80064f8:	f011 011f 	ands.w	r1, r1, #31
 80064fc:	d007      	beq.n	800650e <__any_on+0x26>
 80064fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006502:	fa24 f001 	lsr.w	r0, r4, r1
 8006506:	fa00 f101 	lsl.w	r1, r0, r1
 800650a:	428c      	cmp	r4, r1
 800650c:	d10b      	bne.n	8006526 <__any_on+0x3e>
 800650e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006512:	4293      	cmp	r3, r2
 8006514:	d803      	bhi.n	800651e <__any_on+0x36>
 8006516:	2000      	movs	r0, #0
 8006518:	bd10      	pop	{r4, pc}
 800651a:	4603      	mov	r3, r0
 800651c:	e7f7      	b.n	800650e <__any_on+0x26>
 800651e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006522:	2900      	cmp	r1, #0
 8006524:	d0f5      	beq.n	8006512 <__any_on+0x2a>
 8006526:	2001      	movs	r0, #1
 8006528:	e7f6      	b.n	8006518 <__any_on+0x30>

0800652a <_calloc_r>:
 800652a:	b538      	push	{r3, r4, r5, lr}
 800652c:	fb02 f401 	mul.w	r4, r2, r1
 8006530:	4621      	mov	r1, r4
 8006532:	f000 f809 	bl	8006548 <_malloc_r>
 8006536:	4605      	mov	r5, r0
 8006538:	b118      	cbz	r0, 8006542 <_calloc_r+0x18>
 800653a:	4622      	mov	r2, r4
 800653c:	2100      	movs	r1, #0
 800653e:	f7fe f9cb 	bl	80048d8 <memset>
 8006542:	4628      	mov	r0, r5
 8006544:	bd38      	pop	{r3, r4, r5, pc}
	...

08006548 <_malloc_r>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	1ccd      	adds	r5, r1, #3
 800654c:	f025 0503 	bic.w	r5, r5, #3
 8006550:	3508      	adds	r5, #8
 8006552:	2d0c      	cmp	r5, #12
 8006554:	bf38      	it	cc
 8006556:	250c      	movcc	r5, #12
 8006558:	2d00      	cmp	r5, #0
 800655a:	4606      	mov	r6, r0
 800655c:	db01      	blt.n	8006562 <_malloc_r+0x1a>
 800655e:	42a9      	cmp	r1, r5
 8006560:	d903      	bls.n	800656a <_malloc_r+0x22>
 8006562:	230c      	movs	r3, #12
 8006564:	6033      	str	r3, [r6, #0]
 8006566:	2000      	movs	r0, #0
 8006568:	bd70      	pop	{r4, r5, r6, pc}
 800656a:	f000 f87f 	bl	800666c <__malloc_lock>
 800656e:	4a21      	ldr	r2, [pc, #132]	; (80065f4 <_malloc_r+0xac>)
 8006570:	6814      	ldr	r4, [r2, #0]
 8006572:	4621      	mov	r1, r4
 8006574:	b991      	cbnz	r1, 800659c <_malloc_r+0x54>
 8006576:	4c20      	ldr	r4, [pc, #128]	; (80065f8 <_malloc_r+0xb0>)
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	b91b      	cbnz	r3, 8006584 <_malloc_r+0x3c>
 800657c:	4630      	mov	r0, r6
 800657e:	f000 f83d 	bl	80065fc <_sbrk_r>
 8006582:	6020      	str	r0, [r4, #0]
 8006584:	4629      	mov	r1, r5
 8006586:	4630      	mov	r0, r6
 8006588:	f000 f838 	bl	80065fc <_sbrk_r>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	d124      	bne.n	80065da <_malloc_r+0x92>
 8006590:	230c      	movs	r3, #12
 8006592:	6033      	str	r3, [r6, #0]
 8006594:	4630      	mov	r0, r6
 8006596:	f000 f86a 	bl	800666e <__malloc_unlock>
 800659a:	e7e4      	b.n	8006566 <_malloc_r+0x1e>
 800659c:	680b      	ldr	r3, [r1, #0]
 800659e:	1b5b      	subs	r3, r3, r5
 80065a0:	d418      	bmi.n	80065d4 <_malloc_r+0x8c>
 80065a2:	2b0b      	cmp	r3, #11
 80065a4:	d90f      	bls.n	80065c6 <_malloc_r+0x7e>
 80065a6:	600b      	str	r3, [r1, #0]
 80065a8:	50cd      	str	r5, [r1, r3]
 80065aa:	18cc      	adds	r4, r1, r3
 80065ac:	4630      	mov	r0, r6
 80065ae:	f000 f85e 	bl	800666e <__malloc_unlock>
 80065b2:	f104 000b 	add.w	r0, r4, #11
 80065b6:	1d23      	adds	r3, r4, #4
 80065b8:	f020 0007 	bic.w	r0, r0, #7
 80065bc:	1ac3      	subs	r3, r0, r3
 80065be:	d0d3      	beq.n	8006568 <_malloc_r+0x20>
 80065c0:	425a      	negs	r2, r3
 80065c2:	50e2      	str	r2, [r4, r3]
 80065c4:	e7d0      	b.n	8006568 <_malloc_r+0x20>
 80065c6:	428c      	cmp	r4, r1
 80065c8:	684b      	ldr	r3, [r1, #4]
 80065ca:	bf16      	itet	ne
 80065cc:	6063      	strne	r3, [r4, #4]
 80065ce:	6013      	streq	r3, [r2, #0]
 80065d0:	460c      	movne	r4, r1
 80065d2:	e7eb      	b.n	80065ac <_malloc_r+0x64>
 80065d4:	460c      	mov	r4, r1
 80065d6:	6849      	ldr	r1, [r1, #4]
 80065d8:	e7cc      	b.n	8006574 <_malloc_r+0x2c>
 80065da:	1cc4      	adds	r4, r0, #3
 80065dc:	f024 0403 	bic.w	r4, r4, #3
 80065e0:	42a0      	cmp	r0, r4
 80065e2:	d005      	beq.n	80065f0 <_malloc_r+0xa8>
 80065e4:	1a21      	subs	r1, r4, r0
 80065e6:	4630      	mov	r0, r6
 80065e8:	f000 f808 	bl	80065fc <_sbrk_r>
 80065ec:	3001      	adds	r0, #1
 80065ee:	d0cf      	beq.n	8006590 <_malloc_r+0x48>
 80065f0:	6025      	str	r5, [r4, #0]
 80065f2:	e7db      	b.n	80065ac <_malloc_r+0x64>
 80065f4:	20000204 	.word	0x20000204
 80065f8:	20000208 	.word	0x20000208

080065fc <_sbrk_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	4c06      	ldr	r4, [pc, #24]	; (8006618 <_sbrk_r+0x1c>)
 8006600:	2300      	movs	r3, #0
 8006602:	4605      	mov	r5, r0
 8006604:	4608      	mov	r0, r1
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	f7fb f982 	bl	8001910 <_sbrk>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d102      	bne.n	8006616 <_sbrk_r+0x1a>
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	b103      	cbz	r3, 8006616 <_sbrk_r+0x1a>
 8006614:	602b      	str	r3, [r5, #0]
 8006616:	bd38      	pop	{r3, r4, r5, pc}
 8006618:	20000434 	.word	0x20000434

0800661c <strncmp>:
 800661c:	b510      	push	{r4, lr}
 800661e:	b16a      	cbz	r2, 800663c <strncmp+0x20>
 8006620:	3901      	subs	r1, #1
 8006622:	1884      	adds	r4, r0, r2
 8006624:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006628:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800662c:	4293      	cmp	r3, r2
 800662e:	d103      	bne.n	8006638 <strncmp+0x1c>
 8006630:	42a0      	cmp	r0, r4
 8006632:	d001      	beq.n	8006638 <strncmp+0x1c>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1f5      	bne.n	8006624 <strncmp+0x8>
 8006638:	1a98      	subs	r0, r3, r2
 800663a:	bd10      	pop	{r4, pc}
 800663c:	4610      	mov	r0, r2
 800663e:	e7fc      	b.n	800663a <strncmp+0x1e>

08006640 <__ascii_wctomb>:
 8006640:	b149      	cbz	r1, 8006656 <__ascii_wctomb+0x16>
 8006642:	2aff      	cmp	r2, #255	; 0xff
 8006644:	bf85      	ittet	hi
 8006646:	238a      	movhi	r3, #138	; 0x8a
 8006648:	6003      	strhi	r3, [r0, #0]
 800664a:	700a      	strbls	r2, [r1, #0]
 800664c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006650:	bf98      	it	ls
 8006652:	2001      	movls	r0, #1
 8006654:	4770      	bx	lr
 8006656:	4608      	mov	r0, r1
 8006658:	4770      	bx	lr
	...

0800665c <malloc>:
 800665c:	4b02      	ldr	r3, [pc, #8]	; (8006668 <malloc+0xc>)
 800665e:	4601      	mov	r1, r0
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	f7ff bf71 	b.w	8006548 <_malloc_r>
 8006666:	bf00      	nop
 8006668:	2000000c 	.word	0x2000000c

0800666c <__malloc_lock>:
 800666c:	4770      	bx	lr

0800666e <__malloc_unlock>:
 800666e:	4770      	bx	lr

08006670 <_init>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	bf00      	nop
 8006674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006676:	bc08      	pop	{r3}
 8006678:	469e      	mov	lr, r3
 800667a:	4770      	bx	lr

0800667c <_fini>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	bf00      	nop
 8006680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006682:	bc08      	pop	{r3}
 8006684:	469e      	mov	lr, r3
 8006686:	4770      	bx	lr


yedek.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cdc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007ec0  08007ec0  00017ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f98  08007f98  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007f98  08007f98  00017f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fa0  08007fa0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fa0  08007fa0  00017fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa4  08007fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a34  20000078  08008020  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aac  08008020  00021aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e333  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035b3  00000000  00000000  0003e3db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001750  00000000  00000000  00041990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015c8  00000000  00000000  000430e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f48c  00000000  00000000  000446a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013724  00000000  00000000  00063b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbb82  00000000  00000000  00077258  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142dda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066a4  00000000  00000000  00142e58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007ea4 	.word	0x08007ea4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08007ea4 	.word	0x08007ea4

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_ldivmod>:
 8000b98:	b97b      	cbnz	r3, 8000bba <__aeabi_ldivmod+0x22>
 8000b9a:	b972      	cbnz	r2, 8000bba <__aeabi_ldivmod+0x22>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bfbe      	ittt	lt
 8000ba0:	2000      	movlt	r0, #0
 8000ba2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ba6:	e006      	blt.n	8000bb6 <__aeabi_ldivmod+0x1e>
 8000ba8:	bf08      	it	eq
 8000baa:	2800      	cmpeq	r0, #0
 8000bac:	bf1c      	itt	ne
 8000bae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb6:	f000 b9a5 	b.w	8000f04 <__aeabi_idiv0>
 8000bba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	db09      	blt.n	8000bda <__aeabi_ldivmod+0x42>
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db1a      	blt.n	8000c00 <__aeabi_ldivmod+0x68>
 8000bca:	f000 f835 	bl	8000c38 <__udivmoddi4>
 8000bce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd6:	b004      	add	sp, #16
 8000bd8:	4770      	bx	lr
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db1b      	blt.n	8000c1c <__aeabi_ldivmod+0x84>
 8000be4:	f000 f828 	bl	8000c38 <__udivmoddi4>
 8000be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	4252      	negs	r2, r2
 8000bfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfe:	4770      	bx	lr
 8000c00:	4252      	negs	r2, r2
 8000c02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c06:	f000 f817 	bl	8000c38 <__udivmoddi4>
 8000c0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c12:	b004      	add	sp, #16
 8000c14:	4240      	negs	r0, r0
 8000c16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1a:	4770      	bx	lr
 8000c1c:	4252      	negs	r2, r2
 8000c1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c22:	f000 f809 	bl	8000c38 <__udivmoddi4>
 8000c26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2e:	b004      	add	sp, #16
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4688      	mov	r8, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14b      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4615      	mov	r5, r2
 8000c4a:	d967      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0720 	rsb	r7, r2, #32
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c5e:	4095      	lsls	r5, r2
 8000c60:	ea47 0803 	orr.w	r8, r7, r3
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c70:	fa1f fc85 	uxth.w	ip, r5
 8000c74:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c78:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c8a:	f080 811b 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8118 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000c94:	3f02      	subs	r7, #2
 8000c96:	442b      	add	r3, r5
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cac:	45a4      	cmp	ip, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	192c      	adds	r4, r5, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8107 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	f240 8104 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	442c      	add	r4, r5
 8000cc4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cc8:	eba4 040c 	sub.w	r4, r4, ip
 8000ccc:	2700      	movs	r7, #0
 8000cce:	b11e      	cbz	r6, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd8:	4639      	mov	r1, r7
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0xbe>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80eb 	beq.w	8000ebe <__udivmoddi4+0x286>
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e9c6 0100 	strd	r0, r1, [r6]
 8000cee:	4638      	mov	r0, r7
 8000cf0:	4639      	mov	r1, r7
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f783 	clz	r7, r3
 8000cfa:	2f00      	cmp	r7, #0
 8000cfc:	d147      	bne.n	8000d8e <__udivmoddi4+0x156>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xd0>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80fa 	bhi.w	8000efc <__udivmoddi4+0x2c4>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	4698      	mov	r8, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d0e0      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d16:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1a:	e7dd      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d1c:	b902      	cbnz	r2, 8000d20 <__udivmoddi4+0xe8>
 8000d1e:	deff      	udf	#255	; 0xff
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f040 808f 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d2a:	1b49      	subs	r1, r1, r5
 8000d2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d30:	fa1f f885 	uxth.w	r8, r5
 8000d34:	2701      	movs	r7, #1
 8000d36:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb08 f10c 	mul.w	r1, r8, ip
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4c:	18eb      	adds	r3, r5, r3
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4299      	cmp	r1, r3
 8000d56:	f200 80cd 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x14c>
 8000d74:	192c      	adds	r4, r5, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x14a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80b6 	bhi.w	8000eee <__udivmoddi4+0x2b6>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e79f      	b.n	8000cce <__udivmoddi4+0x96>
 8000d8e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d92:	40bb      	lsls	r3, r7
 8000d94:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d98:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d9c:	fa01 f407 	lsl.w	r4, r1, r7
 8000da0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000da4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000da8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dac:	4325      	orrs	r5, r4
 8000dae:	fbb3 f9f8 	udiv	r9, r3, r8
 8000db2:	0c2c      	lsrs	r4, r5, #16
 8000db4:	fb08 3319 	mls	r3, r8, r9, r3
 8000db8:	fa1f fa8e 	uxth.w	sl, lr
 8000dbc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dc0:	fb09 f40a 	mul.w	r4, r9, sl
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dca:	fa00 f107 	lsl.w	r1, r0, r7
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd8:	f080 8087 	bcs.w	8000eea <__udivmoddi4+0x2b2>
 8000ddc:	429c      	cmp	r4, r3
 8000dde:	f240 8084 	bls.w	8000eea <__udivmoddi4+0x2b2>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4473      	add	r3, lr
 8000de8:	1b1b      	subs	r3, r3, r4
 8000dea:	b2ad      	uxth	r5, r5
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000df8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dfc:	45a2      	cmp	sl, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1e 0404 	adds.w	r4, lr, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	d26b      	bcs.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0a:	45a2      	cmp	sl, r4
 8000e0c:	d969      	bls.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4474      	add	r4, lr
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1a:	eba4 040a 	sub.w	r4, r4, sl
 8000e1e:	454c      	cmp	r4, r9
 8000e20:	46c2      	mov	sl, r8
 8000e22:	464b      	mov	r3, r9
 8000e24:	d354      	bcc.n	8000ed0 <__udivmoddi4+0x298>
 8000e26:	d051      	beq.n	8000ecc <__udivmoddi4+0x294>
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d069      	beq.n	8000f00 <__udivmoddi4+0x2c8>
 8000e2c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e30:	eb64 0403 	sbc.w	r4, r4, r3
 8000e34:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e38:	40fd      	lsrs	r5, r7
 8000e3a:	40fc      	lsrs	r4, r7
 8000e3c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e40:	e9c6 5400 	strd	r5, r4, [r6]
 8000e44:	2700      	movs	r7, #0
 8000e46:	e747      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000e48:	f1c2 0320 	rsb	r3, r2, #32
 8000e4c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e50:	4095      	lsls	r5, r2
 8000e52:	fa01 f002 	lsl.w	r0, r1, r2
 8000e56:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e5e:	4338      	orrs	r0, r7
 8000e60:	0c01      	lsrs	r1, r0, #16
 8000e62:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e66:	fa1f f885 	uxth.w	r8, r5
 8000e6a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb07 f308 	mul.w	r3, r7, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x256>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e84:	d22f      	bcs.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d92d      	bls.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e8a:	3f02      	subs	r7, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1acb      	subs	r3, r1, r3
 8000e90:	b281      	uxth	r1, r0
 8000e92:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e96:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e9e:	fb00 f308 	mul.w	r3, r0, r8
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x27e>
 8000ea6:	1869      	adds	r1, r5, r1
 8000ea8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eac:	d217      	bcs.n	8000ede <__udivmoddi4+0x2a6>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d915      	bls.n	8000ede <__udivmoddi4+0x2a6>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4429      	add	r1, r5
 8000eb6:	1ac9      	subs	r1, r1, r3
 8000eb8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ebc:	e73b      	b.n	8000d36 <__udivmoddi4+0xfe>
 8000ebe:	4637      	mov	r7, r6
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	e709      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec4:	4607      	mov	r7, r0
 8000ec6:	e6e7      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6fb      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ecc:	4541      	cmp	r1, r8
 8000ece:	d2ab      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ed4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ed8:	3801      	subs	r0, #1
 8000eda:	4613      	mov	r3, r2
 8000edc:	e7a4      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ede:	4660      	mov	r0, ip
 8000ee0:	e7e9      	b.n	8000eb6 <__udivmoddi4+0x27e>
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	e795      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee6:	4667      	mov	r7, ip
 8000ee8:	e7d1      	b.n	8000e8e <__udivmoddi4+0x256>
 8000eea:	4681      	mov	r9, r0
 8000eec:	e77c      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	442c      	add	r4, r5
 8000ef2:	e747      	b.n	8000d84 <__udivmoddi4+0x14c>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	442b      	add	r3, r5
 8000efa:	e72f      	b.n	8000d5c <__udivmoddi4+0x124>
 8000efc:	4638      	mov	r0, r7
 8000efe:	e708      	b.n	8000d12 <__udivmoddi4+0xda>
 8000f00:	4637      	mov	r7, r6
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0xa0>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <BMP280_init>:
#include "BMP280.h"
#include "math.h"

extern I2C_HandleTypeDef hi2c1;

void BMP280_init(sBMP280_handle_t *hBMP280){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	uint8_t chip_id, reset = 0xB6;
 8000f10:	23b6      	movs	r3, #182	; 0xb6
 8000f12:	73bb      	strb	r3, [r7, #14]
	BMP280_writeReg(0xE0, &reset, 1);
 8000f14:	f107 030e 	add.w	r3, r7, #14
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	20e0      	movs	r0, #224	; 0xe0
 8000f1e:	f000 fb0f 	bl	8001540 <BMP280_writeReg>
	BMP280_readReg(0xD0, &chip_id, 1);
 8000f22:	f107 030f 	add.w	r3, r7, #15
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	20d0      	movs	r0, #208	; 0xd0
 8000f2c:	f000 faea 	bl	8001504 <BMP280_readReg>

	HAL_Delay(500);
 8000f30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f34:	f000 fe8e 	bl	8001c54 <HAL_Delay>
	uint8_t data[2];
	data[0] = 0b10110111;
 8000f38:	23b7      	movs	r3, #183	; 0xb7
 8000f3a:	733b      	strb	r3, [r7, #12]
	data[1] = 0b01010100;
 8000f3c:	2354      	movs	r3, #84	; 0x54
 8000f3e:	737b      	strb	r3, [r7, #13]
	BMP280_writeReg(0xF4, data, 2);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2202      	movs	r2, #2
 8000f46:	4619      	mov	r1, r3
 8000f48:	20f4      	movs	r0, #244	; 0xf4
 8000f4a:	f000 faf9 	bl	8001540 <BMP280_writeReg>
	HAL_Delay(500);
 8000f4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f52:	f000 fe7f 	bl	8001c54 <HAL_Delay>

	BMP280_get_calibrate(hBMP280);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f808 	bl	8000f6c <BMP280_get_calibrate>

	HAL_Delay(500);
 8000f5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f60:	f000 fe78 	bl	8001c54 <HAL_Delay>
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <BMP280_get_calibrate>:


void BMP280_get_calibrate(sBMP280_handle_t *hBMP280){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]


	uint8_t rx_buff[24];
	BMP280_readReg(0x88, rx_buff, 24);
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	2218      	movs	r2, #24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	2088      	movs	r0, #136	; 0x88
 8000f7e:	f000 fac1 	bl	8001504 <BMP280_readReg>

	hBMP280->t1 =(rx_buff[0])+(rx_buff[1]<<8);
 8000f82:	7a3b      	ldrb	r3, [r7, #8]
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	7a7b      	ldrb	r3, [r7, #9]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	4413      	add	r3, r2
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	809a      	strh	r2, [r3, #4]
	hBMP280->t2 =(rx_buff[2])+(rx_buff[3]<<8);
 8000f96:	7abb      	ldrb	r3, [r7, #10]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	7afb      	ldrb	r3, [r7, #11]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	80da      	strh	r2, [r3, #6]
	hBMP280->t3 =(rx_buff[4])+(rx_buff[5]<<8);
 8000fac:	7b3b      	ldrb	r3, [r7, #12]
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	7b7b      	ldrb	r3, [r7, #13]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4413      	add	r3, r2
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	811a      	strh	r2, [r3, #8]
	hBMP280->p1 =(rx_buff[6])+(rx_buff[7]<<8);
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	4413      	add	r3, r2
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	815a      	strh	r2, [r3, #10]
	hBMP280->p2 =(rx_buff[8])+(rx_buff[9]<<8);
 8000fd6:	7c3b      	ldrb	r3, [r7, #16]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	7c7b      	ldrb	r3, [r7, #17]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	819a      	strh	r2, [r3, #12]
	hBMP280->p3 =(rx_buff[10])+(rx_buff[11]<<8);
 8000fec:	7cbb      	ldrb	r3, [r7, #18]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	7cfb      	ldrb	r3, [r7, #19]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	81da      	strh	r2, [r3, #14]
	hBMP280->p4 =(rx_buff[12])+(rx_buff[13]<<8);
 8001002:	7d3b      	ldrb	r3, [r7, #20]
 8001004:	b29a      	uxth	r2, r3
 8001006:	7d7b      	ldrb	r3, [r7, #21]
 8001008:	b29b      	uxth	r3, r3
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b29b      	uxth	r3, r3
 800100e:	4413      	add	r3, r2
 8001010:	b29b      	uxth	r3, r3
 8001012:	b21a      	sxth	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	821a      	strh	r2, [r3, #16]
	hBMP280->p5 =(rx_buff[14])+(rx_buff[15]<<8);
 8001018:	7dbb      	ldrb	r3, [r7, #22]
 800101a:	b29a      	uxth	r2, r3
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	b29b      	uxth	r3, r3
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b29b      	uxth	r3, r3
 8001024:	4413      	add	r3, r2
 8001026:	b29b      	uxth	r3, r3
 8001028:	b21a      	sxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	825a      	strh	r2, [r3, #18]
	hBMP280->p6 =(rx_buff[16])+(rx_buff[17]<<8);
 800102e:	7e3b      	ldrb	r3, [r7, #24]
 8001030:	b29a      	uxth	r2, r3
 8001032:	7e7b      	ldrb	r3, [r7, #25]
 8001034:	b29b      	uxth	r3, r3
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b29b      	uxth	r3, r3
 800103a:	4413      	add	r3, r2
 800103c:	b29b      	uxth	r3, r3
 800103e:	b21a      	sxth	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	829a      	strh	r2, [r3, #20]
	hBMP280->p7 =(rx_buff[18])+(rx_buff[19]<<8);
 8001044:	7ebb      	ldrb	r3, [r7, #26]
 8001046:	b29a      	uxth	r2, r3
 8001048:	7efb      	ldrb	r3, [r7, #27]
 800104a:	b29b      	uxth	r3, r3
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b29b      	uxth	r3, r3
 8001050:	4413      	add	r3, r2
 8001052:	b29b      	uxth	r3, r3
 8001054:	b21a      	sxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	82da      	strh	r2, [r3, #22]
	hBMP280->p8 =(rx_buff[20])+(rx_buff[21]<<8);
 800105a:	7f3b      	ldrb	r3, [r7, #28]
 800105c:	b29a      	uxth	r2, r3
 800105e:	7f7b      	ldrb	r3, [r7, #29]
 8001060:	b29b      	uxth	r3, r3
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b29b      	uxth	r3, r3
 8001066:	4413      	add	r3, r2
 8001068:	b29b      	uxth	r3, r3
 800106a:	b21a      	sxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	831a      	strh	r2, [r3, #24]
	hBMP280->p9 =(rx_buff[22])+(rx_buff[23]<<8);
 8001070:	7fbb      	ldrb	r3, [r7, #30]
 8001072:	b29a      	uxth	r2, r3
 8001074:	7ffb      	ldrb	r3, [r7, #31]
 8001076:	b29b      	uxth	r3, r3
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b29b      	uxth	r3, r3
 800107c:	4413      	add	r3, r2
 800107e:	b29b      	uxth	r3, r3
 8001080:	b21a      	sxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	835a      	strh	r2, [r3, #26]
}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <BMP280_calc_alt>:

void BMP280_calc_alt(sBMP280_handle_t *hBMP280){
 8001090:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001094:	b090      	sub	sp, #64	; 0x40
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]

	uint8_t data[6];

	BMP280_readReg(0xf7, data, 6);
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	2206      	movs	r2, #6
 80010a0:	4619      	mov	r1, r3
 80010a2:	20f7      	movs	r0, #247	; 0xf7
 80010a4:	f000 fa2e 	bl	8001504 <BMP280_readReg>
	int32_t press_raw =(int32_t)((data[0] << 12) | (data[1] << 4) | (data[2] >> 4));
 80010a8:	7a3b      	ldrb	r3, [r7, #8]
 80010aa:	031a      	lsls	r2, r3, #12
 80010ac:	7a7b      	ldrb	r3, [r7, #9]
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	4313      	orrs	r3, r2
 80010b2:	7aba      	ldrb	r2, [r7, #10]
 80010b4:	0912      	lsrs	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	4313      	orrs	r3, r2
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t	temp_raw = (int32_t)((data[3] << 12) | (data[4] << 4) | (data[5] >> 4));
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	031a      	lsls	r2, r3, #12
 80010c0:	7b3b      	ldrb	r3, [r7, #12]
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	4313      	orrs	r3, r2
 80010c6:	7b7a      	ldrb	r2, [r7, #13]
 80010c8:	0912      	lsrs	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	4313      	orrs	r3, r2
 80010ce:	63bb      	str	r3, [r7, #56]	; 0x38

	int32_t   v_t1, v_t2;
	int64_t   v_p1, v_p2, pressure;
	int32_t   t_fine;

	v_t1 = ((((temp_raw >> 3) - ((int32_t) hBMP280->t1 << 1))) * ((int32_t) hBMP280->t2)) >> 11;
 80010d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010d2:	10da      	asrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	889b      	ldrh	r3, [r3, #4]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80010e2:	fb02 f303 	mul.w	r3, r2, r3
 80010e6:	12db      	asrs	r3, r3, #11
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
	v_t2 = (((((temp_raw >> 4) - ((int32_t) hBMP280->t1)) * ((temp_raw >> 4) - ((int32_t) hBMP280->t1))) >> 12) * ((int32_t) hBMP280->t3)) >> 14;
 80010ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ec:	111b      	asrs	r3, r3, #4
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	8892      	ldrh	r2, [r2, #4]
 80010f2:	1a9b      	subs	r3, r3, r2
 80010f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010f6:	1112      	asrs	r2, r2, #4
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	8889      	ldrh	r1, [r1, #4]
 80010fc:	1a52      	subs	r2, r2, r1
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	131b      	asrs	r3, r3, #12
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	139b      	asrs	r3, r3, #14
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
	t_fine = v_t1 + v_t2;
 8001112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001116:	4413      	add	r3, r2
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c

	v_p1 = ((int64_t) t_fine) - 128000;
 800111a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111c:	4619      	mov	r1, r3
 800111e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001122:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001126:	f142 34ff 	adc.w	r4, r2, #4294967295
 800112a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	v_p2 = v_p1 * v_p1 * (int64_t) hBMP280->p6;
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	6a3a      	ldr	r2, [r7, #32]
 8001132:	fb02 f203 	mul.w	r2, r2, r3
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	6a39      	ldr	r1, [r7, #32]
 800113a:	fb01 f303 	mul.w	r3, r1, r3
 800113e:	441a      	add	r2, r3
 8001140:	6a39      	ldr	r1, [r7, #32]
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	fba1 3403 	umull	r3, r4, r1, r3
 8001148:	4422      	add	r2, r4
 800114a:	4614      	mov	r4, r2
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001152:	b211      	sxth	r1, r2
 8001154:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001158:	fb01 f504 	mul.w	r5, r1, r4
 800115c:	fb03 f002 	mul.w	r0, r3, r2
 8001160:	4428      	add	r0, r5
 8001162:	fba3 3401 	umull	r3, r4, r3, r1
 8001166:	1902      	adds	r2, r0, r4
 8001168:	4614      	mov	r4, r2
 800116a:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800116e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_p2 = v_p2 + ((v_p1 * (int64_t) hBMP280->p5) << 17);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001178:	b21b      	sxth	r3, r3
 800117a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800117e:	6a3a      	ldr	r2, [r7, #32]
 8001180:	fb04 f102 	mul.w	r1, r4, r2
 8001184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001186:	fb03 f202 	mul.w	r2, r3, r2
 800118a:	1888      	adds	r0, r1, r2
 800118c:	6a3a      	ldr	r2, [r7, #32]
 800118e:	fba2 1203 	umull	r1, r2, r2, r3
 8001192:	1883      	adds	r3, r0, r2
 8001194:	461a      	mov	r2, r3
 8001196:	f04f 0500 	mov.w	r5, #0
 800119a:	f04f 0600 	mov.w	r6, #0
 800119e:	0456      	lsls	r6, r2, #17
 80011a0:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80011a4:	044d      	lsls	r5, r1, #17
 80011a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80011aa:	186b      	adds	r3, r5, r1
 80011ac:	eb46 0402 	adc.w	r4, r6, r2
 80011b0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_p2 = v_p2 + (((int64_t) hBMP280->p4) << 35);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80011ba:	b219      	sxth	r1, r3
 80011bc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80011c0:	f04f 0500 	mov.w	r5, #0
 80011c4:	f04f 0600 	mov.w	r6, #0
 80011c8:	00ce      	lsls	r6, r1, #3
 80011ca:	2500      	movs	r5, #0
 80011cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80011d0:	186b      	adds	r3, r5, r1
 80011d2:	eb46 0402 	adc.w	r4, r6, r2
 80011d6:	e9c7 3406 	strd	r3, r4, [r7, #24]
    v_p1 = ((v_p1 * v_p1 * (int64_t) hBMP280->p3) >> 8) + ((v_p1 * (int64_t) hBMP280->p2) << 12);
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	6a3a      	ldr	r2, [r7, #32]
 80011de:	fb02 f203 	mul.w	r2, r2, r3
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	6a39      	ldr	r1, [r7, #32]
 80011e6:	fb01 f303 	mul.w	r3, r1, r3
 80011ea:	441a      	add	r2, r3
 80011ec:	6a39      	ldr	r1, [r7, #32]
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	fba1 3403 	umull	r3, r4, r1, r3
 80011f4:	4422      	add	r2, r4
 80011f6:	4614      	mov	r4, r2
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80011fe:	b211      	sxth	r1, r2
 8001200:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001204:	fb01 f504 	mul.w	r5, r1, r4
 8001208:	fb03 f002 	mul.w	r0, r3, r2
 800120c:	4428      	add	r0, r5
 800120e:	fba3 3401 	umull	r3, r4, r3, r1
 8001212:	1902      	adds	r2, r0, r4
 8001214:	4614      	mov	r4, r2
 8001216:	f04f 0100 	mov.w	r1, #0
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	0a19      	lsrs	r1, r3, #8
 8001220:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001224:	1222      	asrs	r2, r4, #8
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800122c:	b21b      	sxth	r3, r3
 800122e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001232:	6a38      	ldr	r0, [r7, #32]
 8001234:	fb04 f500 	mul.w	r5, r4, r0
 8001238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800123a:	fb03 f000 	mul.w	r0, r3, r0
 800123e:	4428      	add	r0, r5
 8001240:	6a3d      	ldr	r5, [r7, #32]
 8001242:	fba5 5603 	umull	r5, r6, r5, r3
 8001246:	1983      	adds	r3, r0, r6
 8001248:	461e      	mov	r6, r3
 800124a:	f04f 0b00 	mov.w	fp, #0
 800124e:	f04f 0c00 	mov.w	ip, #0
 8001252:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001256:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 800125a:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 800125e:	eb1b 0301 	adds.w	r3, fp, r1
 8001262:	eb4c 0402 	adc.w	r4, ip, r2
 8001266:	e9c7 3408 	strd	r3, r4, [r7, #32]
    v_p1 = (((((int64_t) 1) << 47) + v_p1)) * ((int64_t) hBMP280->p1) >> 33;
 800126a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800126e:	1c19      	adds	r1, r3, #0
 8001270:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	895b      	ldrh	r3, [r3, #10]
 8001278:	b29b      	uxth	r3, r3
 800127a:	f04f 0400 	mov.w	r4, #0
 800127e:	fb03 f502 	mul.w	r5, r3, r2
 8001282:	fb01 f004 	mul.w	r0, r1, r4
 8001286:	4428      	add	r0, r5
 8001288:	fba1 3403 	umull	r3, r4, r1, r3
 800128c:	1902      	adds	r2, r0, r4
 800128e:	4614      	mov	r4, r2
 8001290:	f04f 0100 	mov.w	r1, #0
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	1061      	asrs	r1, r4, #1
 800129a:	17e2      	asrs	r2, r4, #31
 800129c:	e9c7 1208 	strd	r1, r2, [r7, #32]

    if(v_p1 == 0) return;
 80012a0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80012a4:	4323      	orrs	r3, r4
 80012a6:	f000 8118 	beq.w	80014da <BMP280_calc_alt+0x44a>

    pressure = 1048576 - press_raw;
 80012aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ac:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80012b0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80012b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
    pressure = (((pressure << 31) - v_p2) * 3125) / v_p1;
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	ea4f 0963 	mov.w	r9, r3, asr #1
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80012c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80012c8:	4645      	mov	r5, r8
 80012ca:	464e      	mov	r6, r9
 80012cc:	1aed      	subs	r5, r5, r3
 80012ce:	eb66 0604 	sbc.w	r6, r6, r4
 80012d2:	46a8      	mov	r8, r5
 80012d4:	46b1      	mov	r9, r6
 80012d6:	eb18 0308 	adds.w	r3, r8, r8
 80012da:	eb49 0409 	adc.w	r4, r9, r9
 80012de:	4698      	mov	r8, r3
 80012e0:	46a1      	mov	r9, r4
 80012e2:	eb18 0805 	adds.w	r8, r8, r5
 80012e6:	eb49 0906 	adc.w	r9, r9, r6
 80012ea:	f04f 0100 	mov.w	r1, #0
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80012f6:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80012fa:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80012fe:	eb18 0801 	adds.w	r8, r8, r1
 8001302:	eb49 0902 	adc.w	r9, r9, r2
 8001306:	f04f 0100 	mov.w	r1, #0
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001312:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001316:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800131a:	4688      	mov	r8, r1
 800131c:	4691      	mov	r9, r2
 800131e:	eb18 0805 	adds.w	r8, r8, r5
 8001322:	eb49 0906 	adc.w	r9, r9, r6
 8001326:	f04f 0100 	mov.w	r1, #0
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001332:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001336:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800133a:	4688      	mov	r8, r1
 800133c:	4691      	mov	r9, r2
 800133e:	eb18 0005 	adds.w	r0, r8, r5
 8001342:	eb49 0106 	adc.w	r1, r9, r6
 8001346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800134a:	f7ff fc25 	bl	8000b98 <__aeabi_ldivmod>
 800134e:	4603      	mov	r3, r0
 8001350:	460c      	mov	r4, r1
 8001352:	e9c7 3404 	strd	r3, r4, [r7, #16]
    v_p1 = (((int64_t) hBMP280->p9) * (pressure >> 13) * (pressure >> 13)) >> 25;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800135c:	b219      	sxth	r1, r3
 800135e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001362:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	f04f 0400 	mov.w	r4, #0
 800136e:	0b6b      	lsrs	r3, r5, #13
 8001370:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001374:	1374      	asrs	r4, r6, #13
 8001376:	fb03 f502 	mul.w	r5, r3, r2
 800137a:	fb01 f004 	mul.w	r0, r1, r4
 800137e:	4428      	add	r0, r5
 8001380:	fba1 1203 	umull	r1, r2, r1, r3
 8001384:	1883      	adds	r3, r0, r2
 8001386:	461a      	mov	r2, r3
 8001388:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	f04f 0400 	mov.w	r4, #0
 8001394:	0b6b      	lsrs	r3, r5, #13
 8001396:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800139a:	1374      	asrs	r4, r6, #13
 800139c:	fb03 f502 	mul.w	r5, r3, r2
 80013a0:	fb01 f004 	mul.w	r0, r1, r4
 80013a4:	4428      	add	r0, r5
 80013a6:	fba1 1203 	umull	r1, r2, r1, r3
 80013aa:	1883      	adds	r3, r0, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	f04f 0400 	mov.w	r4, #0
 80013b6:	0e4b      	lsrs	r3, r1, #25
 80013b8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80013bc:	1654      	asrs	r4, r2, #25
 80013be:	e9c7 3408 	strd	r3, r4, [r7, #32]
    v_p2 = (((int64_t) hBMP280->p8) * pressure) >> 19;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	fb04 f102 	mul.w	r1, r4, r2
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	fb03 f202 	mul.w	r2, r3, r2
 80013da:	1888      	adds	r0, r1, r2
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	fba2 1203 	umull	r1, r2, r2, r3
 80013e2:	1883      	adds	r3, r0, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	f04f 0400 	mov.w	r4, #0
 80013ee:	0ccb      	lsrs	r3, r1, #19
 80013f0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80013f4:	14d4      	asrs	r4, r2, #19
 80013f6:	e9c7 3406 	strd	r3, r4, [r7, #24]
    pressure = ((pressure + v_p1 + v_p2) >> 8) + (((int64_t) hBMP280->p7) << 4);
 80013fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80013fe:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001402:	eb11 0803 	adds.w	r8, r1, r3
 8001406:	eb42 0904 	adc.w	r9, r2, r4
 800140a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800140e:	eb13 0508 	adds.w	r5, r3, r8
 8001412:	eb44 0609 	adc.w	r6, r4, r9
 8001416:	f04f 0100 	mov.w	r1, #0
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	0a29      	lsrs	r1, r5, #8
 8001420:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001424:	1232      	asrs	r2, r6, #8
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800142c:	b21d      	sxth	r5, r3
 800142e:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001432:	f04f 0800 	mov.w	r8, #0
 8001436:	f04f 0900 	mov.w	r9, #0
 800143a:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800143e:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001442:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001446:	eb18 0301 	adds.w	r3, r8, r1
 800144a:	eb49 0402 	adc.w	r4, r9, r2
 800144e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    pressure = (pressure / 256);
 8001452:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f174 0200 	sbcs.w	r2, r4, #0
 800145c:	da02      	bge.n	8001464 <BMP280_calc_alt+0x3d4>
 800145e:	33ff      	adds	r3, #255	; 0xff
 8001460:	f144 0400 	adc.w	r4, r4, #0
 8001464:	f04f 0100 	mov.w	r1, #0
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	0a19      	lsrs	r1, r3, #8
 800146e:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001472:	1222      	asrs	r2, r4, #8
 8001474:	e9c7 1204 	strd	r1, r2, [r7, #16]

    hBMP280->Altitude = 44330.0 * (1.0f - pow(pressure / 101325.0, 0.1903));
 8001478:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800147c:	f7ff f85e 	bl	800053c <__aeabi_l2d>
 8001480:	a31e      	add	r3, pc, #120	; (adr r3, 80014fc <BMP280_calc_alt+0x46c>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7ff f9b1 	bl	80007ec <__aeabi_ddiv>
 800148a:	4603      	mov	r3, r0
 800148c:	460c      	mov	r4, r1
 800148e:	ec44 3b17 	vmov	d7, r3, r4
 8001492:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80014e8 <BMP280_calc_alt+0x458>
 8001496:	eeb0 0a47 	vmov.f32	s0, s14
 800149a:	eef0 0a67 	vmov.f32	s1, s15
 800149e:	f005 fcab 	bl	8006df8 <pow>
 80014a2:	ec54 3b10 	vmov	r3, r4, d0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4623      	mov	r3, r4
 80014aa:	f04f 0000 	mov.w	r0, #0
 80014ae:	4912      	ldr	r1, [pc, #72]	; (80014f8 <BMP280_calc_alt+0x468>)
 80014b0:	f7fe feba 	bl	8000228 <__aeabi_dsub>
 80014b4:	4603      	mov	r3, r0
 80014b6:	460c      	mov	r4, r1
 80014b8:	4618      	mov	r0, r3
 80014ba:	4621      	mov	r1, r4
 80014bc:	a30c      	add	r3, pc, #48	; (adr r3, 80014f0 <BMP280_calc_alt+0x460>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f869 	bl	8000598 <__aeabi_dmul>
 80014c6:	4603      	mov	r3, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	4618      	mov	r0, r3
 80014cc:	4621      	mov	r1, r4
 80014ce:	f7ff fb13 	bl	8000af8 <__aeabi_d2f>
 80014d2:	4602      	mov	r2, r0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e000      	b.n	80014dc <BMP280_calc_alt+0x44c>
    if(v_p1 == 0) return;
 80014da:	bf00      	nop
}
 80014dc:	3740      	adds	r7, #64	; 0x40
 80014de:	46bd      	mov	sp, r7
 80014e0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80014e4:	f3af 8000 	nop.w
 80014e8:	1a36e2eb 	.word	0x1a36e2eb
 80014ec:	3fc85bc0 	.word	0x3fc85bc0
 80014f0:	00000000 	.word	0x00000000
 80014f4:	40e5a540 	.word	0x40e5a540
 80014f8:	3ff00000 	.word	0x3ff00000
 80014fc:	00000000 	.word	0x00000000
 8001500:	40f8bcd0 	.word	0x40f8bcd0

08001504 <BMP280_readReg>:

void BMP280_readReg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af04      	add	r7, sp, #16
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	4613      	mov	r3, r2
 8001512:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c1, (0x76)<<1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	b299      	uxth	r1, r3
 8001518:	79bb      	ldrb	r3, [r7, #6]
 800151a:	b29b      	uxth	r3, r3
 800151c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001520:	9202      	str	r2, [sp, #8]
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2301      	movs	r3, #1
 800152a:	460a      	mov	r2, r1
 800152c:	21ec      	movs	r1, #236	; 0xec
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <BMP280_readReg+0x38>)
 8001530:	f000 ffd0 	bl	80024d4 <HAL_I2C_Mem_Read>

}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200019a4 	.word	0x200019a4

08001540 <BMP280_writeReg>:

void BMP280_writeReg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af04      	add	r7, sp, #16
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
 800154c:	4613      	mov	r3, r2
 800154e:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(&hi2c1, (0x76)<<1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	b299      	uxth	r1, r3
 8001554:	79bb      	ldrb	r3, [r7, #6]
 8001556:	b29b      	uxth	r3, r3
 8001558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800155c:	9202      	str	r2, [sp, #8]
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	460a      	mov	r2, r1
 8001568:	21ec      	movs	r1, #236	; 0xec
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <BMP280_writeReg+0x38>)
 800156c:	f000 fe9e 	bl	80022ac <HAL_I2C_Mem_Write>

}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200019a4 	.word	0x200019a4

0800157c <Gorev1>:
 *      Author: Merve
 */
#include "Gorev.h"
#include "math.h"

_Bool Gorev1(sBMP280_handle_t *hBMP280){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	static float prev = 0;
	hBMP280->Vz = (hBMP280->Altitude - prev)*10;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	ed93 7a00 	vldr	s14, [r3]
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <Gorev1+0x54>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001594:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	edc3 7a08 	vstr	s15, [r3, #32]
	prev = hBMP280->Altitude;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <Gorev1+0x54>)
 80015a8:	6013      	str	r3, [r2, #0]
	if(hBMP280->Vz < 5.0) return 1;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80015b0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80015b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015bc:	d501      	bpl.n	80015c2 <Gorev1+0x46>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <Gorev1+0x48>
	else return 0;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	20000094 	.word	0x20000094

080015d4 <Gorev2>:



_Bool Gorev2(sBMP280_handle_t *hBMP280, _Bool Gorev1){
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]

	if(Gorev1){
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00d      	beq.n	8001602 <Gorev2+0x2e>
		if((hBMP280->Altitude) < 650) return 1;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001610 <Gorev2+0x3c>
 80015f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f8:	d501      	bpl.n	80015fe <Gorev2+0x2a>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e002      	b.n	8001604 <Gorev2+0x30>
		else return 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <Gorev2+0x30>
	}
	else return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	44228000 	.word	0x44228000

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001618:	f000 fae5 	bl	8001be6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161c:	f000 f82a 	bl	8001674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001620:	f000 f8cc 	bl	80017bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001624:	f000 f88a 	bl	800173c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
BMP280_init(&hBMP280);
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <main+0x44>)
 800162a:	f7ff fc6d 	bl	8000f08 <BMP280_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800162e:	f002 fe65 	bl	80042fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <main+0x48>)
 8001634:	2100      	movs	r1, #0
 8001636:	480a      	ldr	r0, [pc, #40]	; (8001660 <main+0x4c>)
 8001638:	f002 feca 	bl	80043d0 <osThreadNew>
 800163c:	4602      	mov	r2, r0
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <main+0x50>)
 8001640:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001642:	4a09      	ldr	r2, [pc, #36]	; (8001668 <main+0x54>)
 8001644:	2100      	movs	r1, #0
 8001646:	4809      	ldr	r0, [pc, #36]	; (800166c <main+0x58>)
 8001648:	f002 fec2 	bl	80043d0 <osThreadNew>
 800164c:	4602      	mov	r2, r0
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <main+0x5c>)
 8001650:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001652:	f002 fe87 	bl	8004364 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001656:	e7fe      	b.n	8001656 <main+0x42>
 8001658:	200019f4 	.word	0x200019f4
 800165c:	08007ef0 	.word	0x08007ef0
 8001660:	08001869 	.word	0x08001869
 8001664:	20001a18 	.word	0x20001a18
 8001668:	08007f14 	.word	0x08007f14
 800166c:	08001885 	.word	0x08001885
 8001670:	200019f0 	.word	0x200019f0

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0a4      	sub	sp, #144	; 0x90
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800167e:	2238      	movs	r2, #56	; 0x38
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f005 fbaf 	bl	8006de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001698:	463b      	mov	r3, r7
 800169a:	2244      	movs	r2, #68	; 0x44
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f005 fba1 	bl	8006de6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f001 fae3 	bl	8002c70 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016aa:	2302      	movs	r3, #2
 80016ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b4:	2340      	movs	r3, #64	; 0x40
 80016b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b8:	2302      	movs	r3, #2
 80016ba:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016bc:	2302      	movs	r3, #2
 80016be:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80016c0:	2304      	movs	r3, #4
 80016c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016c4:	2355      	movs	r3, #85	; 0x55
 80016c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016d6:	2302      	movs	r3, #2
 80016d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016e0:	4618      	mov	r0, r3
 80016e2:	f001 fb79 	bl	8002dd8 <HAL_RCC_OscConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80016ec:	f000 f91d 	bl	800192a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f0:	230f      	movs	r3, #15
 80016f2:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f4:	2303      	movs	r3, #3
 80016f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001704:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001708:	2104      	movs	r1, #4
 800170a:	4618      	mov	r0, r3
 800170c:	f001 fe7c 	bl	8003408 <HAL_RCC_ClockConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001716:	f000 f908 	bl	800192a <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800171a:	2340      	movs	r3, #64	; 0x40
 800171c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001722:	463b      	mov	r3, r7
 8001724:	4618      	mov	r0, r3
 8001726:	f002 f8a7 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001730:	f000 f8fb 	bl	800192a <Error_Handler>
  }
}
 8001734:	bf00      	nop
 8001736:	3790      	adds	r7, #144	; 0x90
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <MX_I2C1_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <MX_I2C1_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <MX_I2C1_Init+0x74>)
 8001748:	4a1b      	ldr	r2, [pc, #108]	; (80017b8 <MX_I2C1_Init+0x7c>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_I2C1_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <MX_I2C1_Init+0x74>)
 8001754:	2201      	movs	r2, #1
 8001756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <MX_I2C1_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_I2C1_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_I2C1_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_I2C1_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_I2C1_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001776:	480e      	ldr	r0, [pc, #56]	; (80017b0 <MX_I2C1_Init+0x74>)
 8001778:	f000 fd08 	bl	800218c <HAL_I2C_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001782:	f000 f8d2 	bl	800192a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4809      	ldr	r0, [pc, #36]	; (80017b0 <MX_I2C1_Init+0x74>)
 800178a:	f001 f9d9 	bl	8002b40 <HAL_I2CEx_ConfigAnalogFilter>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001794:	f000 f8c9 	bl	800192a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_I2C1_Init+0x74>)
 800179c:	f001 fa1b 	bl	8002bd6 <HAL_I2CEx_ConfigDigitalFilter>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 f8c0 	bl	800192a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200019a4 	.word	0x200019a4
 80017b4:	40005400 	.word	0x40005400
 80017b8:	30a0a7fb 	.word	0x30a0a7fb

080017bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <MX_GPIO_Init+0xa4>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a22      	ldr	r2, [pc, #136]	; (8001860 <MX_GPIO_Init+0xa4>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <MX_GPIO_Init+0xa4>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MX_GPIO_Init+0xa4>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <MX_GPIO_Init+0xa4>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_GPIO_Init+0xa4>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	2103      	movs	r1, #3
 8001806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180a:	f000 fca7 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001814:	4813      	ldr	r0, [pc, #76]	; (8001864 <MX_GPIO_Init+0xa8>)
 8001816:	f000 fca1 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800181a:	2303      	movs	r3, #3
 800181c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	4619      	mov	r1, r3
 8001830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001834:	f000 fb10 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800183c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4619      	mov	r1, r3
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <MX_GPIO_Init+0xa8>)
 8001852:	f000 fb01 	bl	8001e58 <HAL_GPIO_Init>

}
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	48000400 	.word	0x48000400

08001868 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  BMP280_calc_alt(&hBMP280);
 8001870:	4803      	ldr	r0, [pc, #12]	; (8001880 <StartTask01+0x18>)
 8001872:	f7ff fc0d 	bl	8001090 <BMP280_calc_alt>
	  osDelay(100);
 8001876:	2064      	movs	r0, #100	; 0x64
 8001878:	f002 fe50 	bl	800451c <osDelay>
	  BMP280_calc_alt(&hBMP280);
 800187c:	e7f8      	b.n	8001870 <StartTask01+0x8>
 800187e:	bf00      	nop
 8001880:	200019f4 	.word	0x200019f4

08001884 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(hBMP280.Altitude > 1500){
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <StartTask02+0x78>)
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001900 <StartTask02+0x7c>
 8001896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189e:	dd14      	ble.n	80018ca <StartTask02+0x46>
		if(Gorev1(&hBMP280)){
 80018a0:	4816      	ldr	r0, [pc, #88]	; (80018fc <StartTask02+0x78>)
 80018a2:	f7ff fe6b 	bl	800157c <Gorev1>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00e      	beq.n	80018ca <StartTask02+0x46>
			gorev1_check = 1;
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <StartTask02+0x80>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	2102      	movs	r1, #2
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ba:	f000 fc4f 	bl	800215c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80018be:	2201      	movs	r2, #1
 80018c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c4:	4810      	ldr	r0, [pc, #64]	; (8001908 <StartTask02+0x84>)
 80018c6:	f000 fc49 	bl	800215c <HAL_GPIO_WritePin>
		}
	  }
		if(Gorev2(&hBMP280, gorev1_check)){
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <StartTask02+0x80>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	4619      	mov	r1, r3
 80018d0:	480a      	ldr	r0, [pc, #40]	; (80018fc <StartTask02+0x78>)
 80018d2:	f7ff fe7f 	bl	80015d4 <Gorev2>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00b      	beq.n	80018f4 <StartTask02+0x70>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80018dc:	2201      	movs	r2, #1
 80018de:	2101      	movs	r1, #1
 80018e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e4:	f000 fc3a 	bl	800215c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ee:	4806      	ldr	r0, [pc, #24]	; (8001908 <StartTask02+0x84>)
 80018f0:	f000 fc34 	bl	800215c <HAL_GPIO_WritePin>
		}
		osDelay(100);
 80018f4:	2064      	movs	r0, #100	; 0x64
 80018f6:	f002 fe11 	bl	800451c <osDelay>
	  if(hBMP280.Altitude > 1500){
 80018fa:	e7c7      	b.n	800188c <StartTask02+0x8>
 80018fc:	200019f4 	.word	0x200019f4
 8001900:	44bb8000 	.word	0x44bb8000
 8001904:	20000098 	.word	0x20000098
 8001908:	48000400 	.word	0x48000400

0800190c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191c:	d101      	bne.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800191e:	f000 f97b 	bl	8001c18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_MspInit+0x44>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_MspInit+0x44>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6613      	str	r3, [r2, #96]	; 0x60
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_MspInit+0x44>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_MspInit+0x44>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_MspInit+0x44>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6593      	str	r3, [r2, #88]	; 0x58
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_MspInit+0x44>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800196e:	f001 fa23 	bl	8002db8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <HAL_I2C_MspInit+0xb8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d145      	bne.n	8001a2e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_I2C_MspInit+0xbc>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <HAL_I2C_MspInit+0xbc>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <HAL_I2C_MspInit+0xbc>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_I2C_MspInit+0xbc>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <HAL_I2C_MspInit+0xbc>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <HAL_I2C_MspInit+0xbc>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d8:	2312      	movs	r3, #18
 80019da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019dc:	2301      	movs	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019e4:	2304      	movs	r3, #4
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f2:	f000 fa31 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019fa:	2312      	movs	r3, #18
 80019fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a06:	2304      	movs	r3, #4
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <HAL_I2C_MspInit+0xc0>)
 8001a12:	f000 fa21 	bl	8001e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_I2C_MspInit+0xbc>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_I2C_MspInit+0xbc>)
 8001a1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a20:	6593      	str	r3, [r2, #88]	; 0x58
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_I2C_MspInit+0xbc>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	; 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40005400 	.word	0x40005400
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48000400 	.word	0x48000400

08001a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	; 0x30
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_InitTick+0xcc>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	4a2c      	ldr	r2, [pc, #176]	; (8001b10 <HAL_InitTick+0xcc>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6593      	str	r3, [r2, #88]	; 0x58
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_InitTick+0xcc>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a72:	f107 020c 	add.w	r2, r7, #12
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 fe83 	bl	8003788 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a82:	f001 fe6b 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8001a86:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8a:	4a22      	ldr	r2, [pc, #136]	; (8001b14 <HAL_InitTick+0xd0>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	0c9b      	lsrs	r3, r3, #18
 8001a92:	3b01      	subs	r3, #1
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_InitTick+0xd4>)
 8001a98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <HAL_InitTick+0xd4>)
 8001aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001aa6:	4a1c      	ldr	r2, [pc, #112]	; (8001b18 <HAL_InitTick+0xd4>)
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_InitTick+0xd4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_InitTick+0xd4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  status = HAL_TIM_Base_Init(&htim2);
 8001ab8:	4817      	ldr	r0, [pc, #92]	; (8001b18 <HAL_InitTick+0xd4>)
 8001aba:	f002 f8cd 	bl	8003c58 <HAL_TIM_Base_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d11b      	bne.n	8001b04 <HAL_InitTick+0xc0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001acc:	4812      	ldr	r0, [pc, #72]	; (8001b18 <HAL_InitTick+0xd4>)
 8001ace:	f002 f925 	bl	8003d1c <HAL_TIM_Base_Start_IT>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d111      	bne.n	8001b04 <HAL_InitTick+0xc0>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae0:	201c      	movs	r0, #28
 8001ae2:	f000 f9ab 	bl	8001e3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d808      	bhi.n	8001afe <HAL_InitTick+0xba>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	201c      	movs	r0, #28
 8001af2:	f000 f989 	bl	8001e08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001af6:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <HAL_InitTick+0xd8>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e002      	b.n	8001b04 <HAL_InitTick+0xc0>
      }
      else
      {
        status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8001b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3730      	adds	r7, #48	; 0x30
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	431bde83 	.word	0x431bde83
 8001b18:	20001a1c 	.word	0x20001a1c
 8001b1c:	20000004 	.word	0x20000004

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <TIM2_IRQHandler+0x10>)
 8001b5a:	f002 f949 	bl	8003df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20001a1c 	.word	0x20001a1c

08001b68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <SystemInit+0x28>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <SystemInit+0x28>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SystemInit+0x28>)
 8001b7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b82:	609a      	str	r2, [r3, #8]
#endif
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b94:	480d      	ldr	r0, [pc, #52]	; (8001bcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b9a:	490e      	ldr	r1, [pc, #56]	; (8001bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <LoopForever+0xe>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb0:	4c0b      	ldr	r4, [pc, #44]	; (8001be0 <LoopForever+0x16>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bbe:	f7ff ffd3 	bl	8001b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f005 f8e1 	bl	8006d88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bc6:	f7ff fd25 	bl	8001614 <main>

08001bca <LoopForever>:

LoopForever:
    b LoopForever
 8001bca:	e7fe      	b.n	8001bca <LoopForever>
  ldr   r0, =_estack
 8001bcc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001bd8:	08007fa8 	.word	0x08007fa8
  ldr r2, =_sbss
 8001bdc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001be0:	20001aac 	.word	0x20001aac

08001be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC1_2_IRQHandler>

08001be6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 f8fe 	bl	8001df2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff ff24 	bl	8001a44 <HAL_InitTick>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	71fb      	strb	r3, [r7, #7]
 8001c06:	e001      	b.n	8001c0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c08:	f7ff fe96 	bl	8001938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c0c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_IncTick+0x1c>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_IncTick+0x20>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a03      	ldr	r2, [pc, #12]	; (8001c34 <HAL_IncTick+0x1c>)
 8001c28:	6013      	str	r3, [r2, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	20001a68 	.word	0x20001a68
 8001c38:	20000008 	.word	0x20000008

08001c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_GetTick+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20001a68 	.word	0x20001a68

08001c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff ffee 	bl	8001c3c <HAL_GetTick>
 8001c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6c:	d004      	beq.n	8001c78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_Delay+0x40>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4413      	add	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c78:	bf00      	nop
 8001c7a:	f7ff ffdf 	bl	8001c3c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d8f7      	bhi.n	8001c7a <HAL_Delay+0x26>
  {
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000008 	.word	0x20000008

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4907      	ldr	r1, [pc, #28]	; (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	; (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff4c 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e16:	f7ff ff63 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	6978      	ldr	r0, [r7, #20]
 8001e22:	f7ff ffb3 	bl	8001d8c <NVIC_EncodePriority>
 8001e26:	4602      	mov	r2, r0
 8001e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff82 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff56 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e66:	e15a      	b.n	800211e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	4013      	ands	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 814c 	beq.w	8002118 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d00b      	beq.n	8001ea0 <HAL_GPIO_Init+0x48>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d007      	beq.n	8001ea0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e94:	2b11      	cmp	r3, #17
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b12      	cmp	r3, #18
 8001e9e:	d130      	bne.n	8001f02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	f003 0201 	and.w	r2, r3, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0xea>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b12      	cmp	r3, #18
 8001f40:	d123      	bne.n	8001f8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	08da      	lsrs	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3208      	adds	r2, #8
 8001f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	220f      	movs	r2, #15
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	08da      	lsrs	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3208      	adds	r2, #8
 8001f84:	6939      	ldr	r1, [r7, #16]
 8001f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0203 	and.w	r2, r3, #3
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80a6 	beq.w	8002118 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fcc:	4b5b      	ldr	r3, [pc, #364]	; (800213c <HAL_GPIO_Init+0x2e4>)
 8001fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd0:	4a5a      	ldr	r2, [pc, #360]	; (800213c <HAL_GPIO_Init+0x2e4>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6613      	str	r3, [r2, #96]	; 0x60
 8001fd8:	4b58      	ldr	r3, [pc, #352]	; (800213c <HAL_GPIO_Init+0x2e4>)
 8001fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe4:	4a56      	ldr	r2, [pc, #344]	; (8002140 <HAL_GPIO_Init+0x2e8>)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	3302      	adds	r3, #2
 8001fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	220f      	movs	r2, #15
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800200e:	d01f      	beq.n	8002050 <HAL_GPIO_Init+0x1f8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a4c      	ldr	r2, [pc, #304]	; (8002144 <HAL_GPIO_Init+0x2ec>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d019      	beq.n	800204c <HAL_GPIO_Init+0x1f4>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a4b      	ldr	r2, [pc, #300]	; (8002148 <HAL_GPIO_Init+0x2f0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d013      	beq.n	8002048 <HAL_GPIO_Init+0x1f0>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a4a      	ldr	r2, [pc, #296]	; (800214c <HAL_GPIO_Init+0x2f4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00d      	beq.n	8002044 <HAL_GPIO_Init+0x1ec>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a49      	ldr	r2, [pc, #292]	; (8002150 <HAL_GPIO_Init+0x2f8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <HAL_GPIO_Init+0x1e8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a48      	ldr	r2, [pc, #288]	; (8002154 <HAL_GPIO_Init+0x2fc>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_GPIO_Init+0x1e4>
 8002038:	2305      	movs	r3, #5
 800203a:	e00a      	b.n	8002052 <HAL_GPIO_Init+0x1fa>
 800203c:	2306      	movs	r3, #6
 800203e:	e008      	b.n	8002052 <HAL_GPIO_Init+0x1fa>
 8002040:	2304      	movs	r3, #4
 8002042:	e006      	b.n	8002052 <HAL_GPIO_Init+0x1fa>
 8002044:	2303      	movs	r3, #3
 8002046:	e004      	b.n	8002052 <HAL_GPIO_Init+0x1fa>
 8002048:	2302      	movs	r3, #2
 800204a:	e002      	b.n	8002052 <HAL_GPIO_Init+0x1fa>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <HAL_GPIO_Init+0x1fa>
 8002050:	2300      	movs	r3, #0
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	f002 0203 	and.w	r2, r2, #3
 8002058:	0092      	lsls	r2, r2, #2
 800205a:	4093      	lsls	r3, r2
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002062:	4937      	ldr	r1, [pc, #220]	; (8002140 <HAL_GPIO_Init+0x2e8>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002070:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_GPIO_Init+0x300>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002094:	4a30      	ldr	r2, [pc, #192]	; (8002158 <HAL_GPIO_Init+0x300>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800209a:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <HAL_GPIO_Init+0x300>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020be:	4a26      	ldr	r2, [pc, #152]	; (8002158 <HAL_GPIO_Init+0x300>)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020c4:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_GPIO_Init+0x300>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020e8:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <HAL_GPIO_Init+0x300>)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020ee:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_GPIO_Init+0x300>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002112:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_GPIO_Init+0x300>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	f47f ae9d 	bne.w	8001e68 <HAL_GPIO_Init+0x10>
  }
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	40010000 	.word	0x40010000
 8002144:	48000400 	.word	0x48000400
 8002148:	48000800 	.word	0x48000800
 800214c:	48000c00 	.word	0x48000c00
 8002150:	48001000 	.word	0x48001000
 8002154:	48001400 	.word	0x48001400
 8002158:	40010400 	.word	0x40010400

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002178:	e002      	b.n	8002180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e081      	b.n	80022a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fbe4 	bl	8001980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2224      	movs	r2, #36	; 0x24
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d107      	bne.n	8002206 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	e006      	b.n	8002214 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002212:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d104      	bne.n	8002226 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002224:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002238:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002248:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	ea42 0103 	orr.w	r1, r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	021a      	lsls	r2, r3, #8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69d9      	ldr	r1, [r3, #28]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1a      	ldr	r2, [r3, #32]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	4608      	mov	r0, r1
 80022b6:	4611      	mov	r1, r2
 80022b8:	461a      	mov	r2, r3
 80022ba:	4603      	mov	r3, r0
 80022bc:	817b      	strh	r3, [r7, #10]
 80022be:	460b      	mov	r3, r1
 80022c0:	813b      	strh	r3, [r7, #8]
 80022c2:	4613      	mov	r3, r2
 80022c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	f040 80f9 	bne.w	80024c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_I2C_Mem_Write+0x34>
 80022da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0ed      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_I2C_Mem_Write+0x4e>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e0e6      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002302:	f7ff fc9b 	bl	8001c3c <HAL_GetTick>
 8002306:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2319      	movs	r3, #25
 800230e:	2201      	movs	r2, #1
 8002310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fac3 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0d1      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2221      	movs	r2, #33	; 0x21
 8002328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2240      	movs	r2, #64	; 0x40
 8002330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a3a      	ldr	r2, [r7, #32]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800234c:	88f8      	ldrh	r0, [r7, #6]
 800234e:	893a      	ldrh	r2, [r7, #8]
 8002350:	8979      	ldrh	r1, [r7, #10]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	4603      	mov	r3, r0
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 f9d3 	bl	8002708 <I2C_RequestMemoryWrite>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0a9      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	2bff      	cmp	r3, #255	; 0xff
 800237c:	d90e      	bls.n	800239c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	22ff      	movs	r2, #255	; 0xff
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	b2da      	uxtb	r2, r3
 800238a:	8979      	ldrh	r1, [r7, #10]
 800238c:	2300      	movs	r3, #0
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fba5 	bl	8002ae4 <I2C_TransferConfig>
 800239a:	e00f      	b.n	80023bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	8979      	ldrh	r1, [r7, #10]
 80023ae:	2300      	movs	r3, #0
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fb94 	bl	8002ae4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 faad 	bl	8002920 <I2C_WaitOnTXISFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e07b      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d034      	beq.n	8002474 <HAL_I2C_Mem_Write+0x1c8>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240e:	2b00      	cmp	r3, #0
 8002410:	d130      	bne.n	8002474 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	2200      	movs	r2, #0
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fa3f 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e04d      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	2bff      	cmp	r3, #255	; 0xff
 8002434:	d90e      	bls.n	8002454 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	22ff      	movs	r2, #255	; 0xff
 800243a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	b2da      	uxtb	r2, r3
 8002442:	8979      	ldrh	r1, [r7, #10]
 8002444:	2300      	movs	r3, #0
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fb49 	bl	8002ae4 <I2C_TransferConfig>
 8002452:	e00f      	b.n	8002474 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002462:	b2da      	uxtb	r2, r3
 8002464:	8979      	ldrh	r1, [r7, #10]
 8002466:	2300      	movs	r3, #0
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 fb38 	bl	8002ae4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d19e      	bne.n	80023bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fa8c 	bl	80029a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e01a      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2220      	movs	r2, #32
 8002498:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_I2C_Mem_Write+0x224>)
 80024a6:	400b      	ands	r3, r1
 80024a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024c6:	2302      	movs	r3, #2
  }
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	fe00e800 	.word	0xfe00e800

080024d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	4608      	mov	r0, r1
 80024de:	4611      	mov	r1, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	817b      	strh	r3, [r7, #10]
 80024e6:	460b      	mov	r3, r1
 80024e8:	813b      	strh	r3, [r7, #8]
 80024ea:	4613      	mov	r3, r2
 80024ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	f040 80fd 	bne.w	80026f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_I2C_Mem_Read+0x34>
 8002502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0f1      	b.n	80026f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_I2C_Mem_Read+0x4e>
 800251e:	2302      	movs	r3, #2
 8002520:	e0ea      	b.n	80026f8 <HAL_I2C_Mem_Read+0x224>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800252a:	f7ff fb87 	bl	8001c3c <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2319      	movs	r3, #25
 8002536:	2201      	movs	r2, #1
 8002538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 f9af 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0d5      	b.n	80026f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2222      	movs	r2, #34	; 0x22
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2240      	movs	r2, #64	; 0x40
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a3a      	ldr	r2, [r7, #32]
 8002566:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800256c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002574:	88f8      	ldrh	r0, [r7, #6]
 8002576:	893a      	ldrh	r2, [r7, #8]
 8002578:	8979      	ldrh	r1, [r7, #10]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	4603      	mov	r3, r0
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f913 	bl	80027b0 <I2C_RequestMemoryRead>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0ad      	b.n	80026f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2bff      	cmp	r3, #255	; 0xff
 80025a4:	d90e      	bls.n	80025c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	22ff      	movs	r2, #255	; 0xff
 80025aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	8979      	ldrh	r1, [r7, #10]
 80025b4:	4b52      	ldr	r3, [pc, #328]	; (8002700 <HAL_I2C_Mem_Read+0x22c>)
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fa91 	bl	8002ae4 <I2C_TransferConfig>
 80025c2:	e00f      	b.n	80025e4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	8979      	ldrh	r1, [r7, #10]
 80025d6:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <HAL_I2C_Mem_Read+0x22c>)
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fa80 	bl	8002ae4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	2200      	movs	r2, #0
 80025ec:	2104      	movs	r1, #4
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f956 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e07c      	b.n	80026f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d034      	beq.n	80026a4 <HAL_I2C_Mem_Read+0x1d0>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	2b00      	cmp	r3, #0
 8002640:	d130      	bne.n	80026a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	2200      	movs	r2, #0
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f927 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e04d      	b.n	80026f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	2bff      	cmp	r3, #255	; 0xff
 8002664:	d90e      	bls.n	8002684 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	22ff      	movs	r2, #255	; 0xff
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	b2da      	uxtb	r2, r3
 8002672:	8979      	ldrh	r1, [r7, #10]
 8002674:	2300      	movs	r3, #0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fa31 	bl	8002ae4 <I2C_TransferConfig>
 8002682:	e00f      	b.n	80026a4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	b2da      	uxtb	r2, r3
 8002694:	8979      	ldrh	r1, [r7, #10]
 8002696:	2300      	movs	r3, #0
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fa20 	bl	8002ae4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d19a      	bne.n	80025e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f974 	bl	80029a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e01a      	b.n	80026f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2220      	movs	r2, #32
 80026c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_I2C_Mem_Read+0x230>)
 80026d6:	400b      	ands	r3, r1
 80026d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	80002400 	.word	0x80002400
 8002704:	fe00e800 	.word	0xfe00e800

08002708 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	4608      	mov	r0, r1
 8002712:	4611      	mov	r1, r2
 8002714:	461a      	mov	r2, r3
 8002716:	4603      	mov	r3, r0
 8002718:	817b      	strh	r3, [r7, #10]
 800271a:	460b      	mov	r3, r1
 800271c:	813b      	strh	r3, [r7, #8]
 800271e:	4613      	mov	r3, r2
 8002720:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	b2da      	uxtb	r2, r3
 8002726:	8979      	ldrh	r1, [r7, #10]
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <I2C_RequestMemoryWrite+0xa4>)
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f9d7 	bl	8002ae4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	69b9      	ldr	r1, [r7, #24]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f8f0 	bl	8002920 <I2C_WaitOnTXISFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e02c      	b.n	80027a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d105      	bne.n	800275c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002750:	893b      	ldrh	r3, [r7, #8]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
 800275a:	e015      	b.n	8002788 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800275c:	893b      	ldrh	r3, [r7, #8]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	b29b      	uxth	r3, r3
 8002762:	b2da      	uxtb	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	69b9      	ldr	r1, [r7, #24]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f8d6 	bl	8002920 <I2C_WaitOnTXISFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e012      	b.n	80027a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800277e:	893b      	ldrh	r3, [r7, #8]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2200      	movs	r2, #0
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f884 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	80002000 	.word	0x80002000

080027b0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	4608      	mov	r0, r1
 80027ba:	4611      	mov	r1, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	817b      	strh	r3, [r7, #10]
 80027c2:	460b      	mov	r3, r1
 80027c4:	813b      	strh	r3, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	8979      	ldrh	r1, [r7, #10]
 80027d0:	4b20      	ldr	r3, [pc, #128]	; (8002854 <I2C_RequestMemoryRead+0xa4>)
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2300      	movs	r3, #0
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f984 	bl	8002ae4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	69b9      	ldr	r1, [r7, #24]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f89d 	bl	8002920 <I2C_WaitOnTXISFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e02c      	b.n	800284a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d105      	bne.n	8002802 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027f6:	893b      	ldrh	r3, [r7, #8]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002800:	e015      	b.n	800282e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002802:	893b      	ldrh	r3, [r7, #8]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	b29b      	uxth	r3, r3
 8002808:	b2da      	uxtb	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	69b9      	ldr	r1, [r7, #24]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f883 	bl	8002920 <I2C_WaitOnTXISFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e012      	b.n	800284a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002824:	893b      	ldrh	r3, [r7, #8]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2200      	movs	r2, #0
 8002836:	2140      	movs	r1, #64	; 0x40
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f831 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	80002000 	.word	0x80002000

08002858 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d103      	bne.n	8002876 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d007      	beq.n	8002894 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	619a      	str	r2, [r3, #24]
  }
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	4613      	mov	r3, r2
 80028ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028b0:	e022      	b.n	80028f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d01e      	beq.n	80028f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ba:	f7ff f9bf 	bl	8001c3c <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d113      	bne.n	80028f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e00f      	b.n	8002918 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	429a      	cmp	r2, r3
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	429a      	cmp	r2, r3
 8002914:	d0cd      	beq.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800292c:	e02c      	b.n	8002988 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f870 	bl	8002a18 <I2C_IsAcknowledgeFailed>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e02a      	b.n	8002998 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d01e      	beq.n	8002988 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7ff f977 	bl	8001c3c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d113      	bne.n	8002988 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e007      	b.n	8002998 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b02      	cmp	r3, #2
 8002994:	d1cb      	bne.n	800292e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029ac:	e028      	b.n	8002a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f830 	bl	8002a18 <I2C_IsAcknowledgeFailed>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e026      	b.n	8002a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c2:	f7ff f93b 	bl	8001c3c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d302      	bcc.n	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d113      	bne.n	8002a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e007      	b.n	8002a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d1cf      	bne.n	80029ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d151      	bne.n	8002ad6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a32:	e022      	b.n	8002a7a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	d01e      	beq.n	8002a7a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3c:	f7ff f8fe 	bl	8001c3c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d302      	bcc.n	8002a52 <I2C_IsAcknowledgeFailed+0x3a>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d113      	bne.n	8002a7a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f043 0220 	orr.w	r2, r3, #32
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e02e      	b.n	8002ad8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d1d5      	bne.n	8002a34 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2220      	movs	r2, #32
 8002a96:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff fedd 	bl	8002858 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <I2C_IsAcknowledgeFailed+0xc8>)
 8002aaa:	400b      	ands	r3, r1
 8002aac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f043 0204 	orr.w	r2, r3, #4
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	fe00e800 	.word	0xfe00e800

08002ae4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	817b      	strh	r3, [r7, #10]
 8002af2:	4613      	mov	r3, r2
 8002af4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	0d5b      	lsrs	r3, r3, #21
 8002b00:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b04:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <I2C_TransferConfig+0x58>)
 8002b06:	430b      	orrs	r3, r1
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	ea02 0103 	and.w	r1, r2, r3
 8002b0e:	897b      	ldrh	r3, [r7, #10]
 8002b10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b14:	7a7b      	ldrb	r3, [r7, #9]
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	03ff63ff 	.word	0x03ff63ff

08002b40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d138      	bne.n	8002bc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e032      	b.n	8002bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6819      	ldr	r1, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e000      	b.n	8002bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
  }
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d139      	bne.n	8002c60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e033      	b.n	8002c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2224      	movs	r2, #36	; 0x24
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e000      	b.n	8002c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d141      	bne.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c7e:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8a:	d131      	bne.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c8c:	4b47      	ldr	r3, [pc, #284]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c92:	4a46      	ldr	r2, [pc, #280]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c9c:	4b43      	ldr	r3, [pc, #268]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ca4:	4a41      	ldr	r2, [pc, #260]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002caa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cac:	4b40      	ldr	r3, [pc, #256]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2232      	movs	r2, #50	; 0x32
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	4a3f      	ldr	r2, [pc, #252]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	0c9b      	lsrs	r3, r3, #18
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cc2:	e002      	b.n	8002cca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cca:	4b38      	ldr	r3, [pc, #224]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd6:	d102      	bne.n	8002cde <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f2      	bne.n	8002cc4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cde:	4b33      	ldr	r3, [pc, #204]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cea:	d158      	bne.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e057      	b.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cf0:	4b2e      	ldr	r3, [pc, #184]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf6:	4a2d      	ldr	r2, [pc, #180]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d00:	e04d      	b.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d08:	d141      	bne.n	8002d8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d0a:	4b28      	ldr	r3, [pc, #160]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d16:	d131      	bne.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d18:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d1e:	4a23      	ldr	r2, [pc, #140]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d28:	4b20      	ldr	r3, [pc, #128]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d30:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2232      	movs	r2, #50	; 0x32
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	4a1c      	ldr	r2, [pc, #112]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	0c9b      	lsrs	r3, r3, #18
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d4e:	e002      	b.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d62:	d102      	bne.n	8002d6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f2      	bne.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d76:	d112      	bne.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e011      	b.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d82:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d8c:	e007      	b.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d9c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	40007000 	.word	0x40007000
 8002db0:	20000000 	.word	0x20000000
 8002db4:	431bde83 	.word	0x431bde83

08002db8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc6:	6093      	str	r3, [r2, #8]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40007000 	.word	0x40007000

08002dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e308      	b.n	80033fc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d075      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002df6:	4ba3      	ldr	r3, [pc, #652]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e00:	4ba0      	ldr	r3, [pc, #640]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b0c      	cmp	r3, #12
 8002e0e:	d102      	bne.n	8002e16 <HAL_RCC_OscConfig+0x3e>
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d002      	beq.n	8002e1c <HAL_RCC_OscConfig+0x44>
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d10b      	bne.n	8002e34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1c:	4b99      	ldr	r3, [pc, #612]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d05b      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x108>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d157      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e2e3      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3c:	d106      	bne.n	8002e4c <HAL_RCC_OscConfig+0x74>
 8002e3e:	4b91      	ldr	r3, [pc, #580]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a90      	ldr	r2, [pc, #576]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	e01d      	b.n	8002e88 <HAL_RCC_OscConfig+0xb0>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x98>
 8002e56:	4b8b      	ldr	r3, [pc, #556]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a8a      	ldr	r2, [pc, #552]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	4b88      	ldr	r3, [pc, #544]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a87      	ldr	r2, [pc, #540]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0xb0>
 8002e70:	4b84      	ldr	r3, [pc, #528]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a83      	ldr	r2, [pc, #524]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a80      	ldr	r2, [pc, #512]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d013      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe fed4 	bl	8001c3c <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e98:	f7fe fed0 	bl	8001c3c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	; 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e2a8      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eaa:	4b76      	ldr	r3, [pc, #472]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0xc0>
 8002eb6:	e014      	b.n	8002ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fec0 	bl	8001c3c <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7fe febc 	bl	8001c3c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e294      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ed2:	4b6c      	ldr	r3, [pc, #432]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0xe8>
 8002ede:	e000      	b.n	8002ee2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d075      	beq.n	8002fda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eee:	4b65      	ldr	r3, [pc, #404]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ef8:	4b62      	ldr	r3, [pc, #392]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b0c      	cmp	r3, #12
 8002f06:	d102      	bne.n	8002f0e <HAL_RCC_OscConfig+0x136>
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d002      	beq.n	8002f14 <HAL_RCC_OscConfig+0x13c>
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d11f      	bne.n	8002f54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f14:	4b5b      	ldr	r3, [pc, #364]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_OscConfig+0x154>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e267      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	4b55      	ldr	r3, [pc, #340]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	061b      	lsls	r3, r3, #24
 8002f3a:	4952      	ldr	r1, [pc, #328]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f40:	4b51      	ldr	r3, [pc, #324]	; (8003088 <HAL_RCC_OscConfig+0x2b0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe fd7d 	bl	8001a44 <HAL_InitTick>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d043      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e253      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d023      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f5c:	4b49      	ldr	r3, [pc, #292]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a48      	ldr	r2, [pc, #288]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe fe68 	bl	8001c3c <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f70:	f7fe fe64 	bl	8001c3c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e23c      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f82:	4b40      	ldr	r3, [pc, #256]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	061b      	lsls	r3, r3, #24
 8002f9c:	4939      	ldr	r1, [pc, #228]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
 8002fa2:	e01a      	b.n	8002fda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa4:	4b37      	ldr	r3, [pc, #220]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a36      	ldr	r2, [pc, #216]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002faa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fe44 	bl	8001c3c <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7fe fe40 	bl	8001c3c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e218      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fca:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x1e0>
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d03c      	beq.n	8003060 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d01c      	beq.n	8003028 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fee:	4b25      	ldr	r3, [pc, #148]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff4:	4a23      	ldr	r2, [pc, #140]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fe1d 	bl	8001c3c <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003006:	f7fe fe19 	bl	8001c3c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e1f1      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003018:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ef      	beq.n	8003006 <HAL_RCC_OscConfig+0x22e>
 8003026:	e01b      	b.n	8003060 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003028:	4b16      	ldr	r3, [pc, #88]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302e:	4a15      	ldr	r2, [pc, #84]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003038:	f7fe fe00 	bl	8001c3c <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7fe fdfc 	bl	8001c3c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e1d4      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ef      	bne.n	8003040 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80ab 	beq.w	80031c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_RCC_OscConfig+0x2b4>
 800307e:	2301      	movs	r3, #1
 8003080:	e005      	b.n	800308e <HAL_RCC_OscConfig+0x2b6>
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	20000004 	.word	0x20000004
 800308c:	2300      	movs	r3, #0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	4baf      	ldr	r3, [pc, #700]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	4aae      	ldr	r2, [pc, #696]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309c:	6593      	str	r3, [r2, #88]	; 0x58
 800309e:	4bac      	ldr	r3, [pc, #688]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030aa:	2301      	movs	r3, #1
 80030ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ae:	4ba9      	ldr	r3, [pc, #676]	; (8003354 <HAL_RCC_OscConfig+0x57c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d118      	bne.n	80030ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ba:	4ba6      	ldr	r3, [pc, #664]	; (8003354 <HAL_RCC_OscConfig+0x57c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4aa5      	ldr	r2, [pc, #660]	; (8003354 <HAL_RCC_OscConfig+0x57c>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c6:	f7fe fdb9 	bl	8001c3c <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ce:	f7fe fdb5 	bl	8001c3c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e18d      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e0:	4b9c      	ldr	r3, [pc, #624]	; (8003354 <HAL_RCC_OscConfig+0x57c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d108      	bne.n	8003106 <HAL_RCC_OscConfig+0x32e>
 80030f4:	4b96      	ldr	r3, [pc, #600]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	4a95      	ldr	r2, [pc, #596]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003104:	e024      	b.n	8003150 <HAL_RCC_OscConfig+0x378>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b05      	cmp	r3, #5
 800310c:	d110      	bne.n	8003130 <HAL_RCC_OscConfig+0x358>
 800310e:	4b90      	ldr	r3, [pc, #576]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003114:	4a8e      	ldr	r2, [pc, #568]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800311e:	4b8c      	ldr	r3, [pc, #560]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003124:	4a8a      	ldr	r2, [pc, #552]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800312e:	e00f      	b.n	8003150 <HAL_RCC_OscConfig+0x378>
 8003130:	4b87      	ldr	r3, [pc, #540]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	4a86      	ldr	r2, [pc, #536]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003140:	4b83      	ldr	r3, [pc, #524]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003146:	4a82      	ldr	r2, [pc, #520]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003148:	f023 0304 	bic.w	r3, r3, #4
 800314c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d016      	beq.n	8003186 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe fd70 	bl	8001c3c <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315e:	e00a      	b.n	8003176 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003160:	f7fe fd6c 	bl	8001c3c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	; 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e142      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003176:	4b76      	ldr	r3, [pc, #472]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ed      	beq.n	8003160 <HAL_RCC_OscConfig+0x388>
 8003184:	e015      	b.n	80031b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fe fd59 	bl	8001c3c <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fe fd55 	bl	8001c3c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e12b      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031a4:	4b6a      	ldr	r3, [pc, #424]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1ed      	bne.n	800318e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031b2:	7ffb      	ldrb	r3, [r7, #31]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d105      	bne.n	80031c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b8:	4b65      	ldr	r3, [pc, #404]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	4a64      	ldr	r2, [pc, #400]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 80031be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d03c      	beq.n	800324a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01c      	beq.n	8003212 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031d8:	4b5d      	ldr	r3, [pc, #372]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 80031da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031de:	4a5c      	ldr	r2, [pc, #368]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe fd28 	bl	8001c3c <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031f0:	f7fe fd24 	bl	8001c3c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0fc      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003202:	4b53      	ldr	r3, [pc, #332]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ef      	beq.n	80031f0 <HAL_RCC_OscConfig+0x418>
 8003210:	e01b      	b.n	800324a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003212:	4b4f      	ldr	r3, [pc, #316]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003218:	4a4d      	ldr	r2, [pc, #308]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fe fd0b 	bl	8001c3c <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800322a:	f7fe fd07 	bl	8001c3c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0df      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800323c:	4b44      	ldr	r3, [pc, #272]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 800323e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ef      	bne.n	800322a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80d3 	beq.w	80033fa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003254:	4b3e      	ldr	r3, [pc, #248]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b0c      	cmp	r3, #12
 800325e:	f000 808d 	beq.w	800337c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d15a      	bne.n	8003320 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b39      	ldr	r3, [pc, #228]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a38      	ldr	r2, [pc, #224]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fe fce1 	bl	8001c3c <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327e:	f7fe fcdd 	bl	8001c3c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0b5      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003290:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f0      	bne.n	800327e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800329c:	4b2c      	ldr	r3, [pc, #176]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <HAL_RCC_OscConfig+0x580>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6a11      	ldr	r1, [r2, #32]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ac:	3a01      	subs	r2, #1
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	4311      	orrs	r1, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032b6:	0212      	lsls	r2, r2, #8
 80032b8:	4311      	orrs	r1, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032be:	0852      	lsrs	r2, r2, #1
 80032c0:	3a01      	subs	r2, #1
 80032c2:	0552      	lsls	r2, r2, #21
 80032c4:	4311      	orrs	r1, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032ca:	0852      	lsrs	r2, r2, #1
 80032cc:	3a01      	subs	r2, #1
 80032ce:	0652      	lsls	r2, r2, #25
 80032d0:	4311      	orrs	r1, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032d6:	06d2      	lsls	r2, r2, #27
 80032d8:	430a      	orrs	r2, r1
 80032da:	491d      	ldr	r1, [pc, #116]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1a      	ldr	r2, [pc, #104]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 80032e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4a17      	ldr	r2, [pc, #92]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 80032f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe fca0 	bl	8001c3c <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fe fc9c 	bl	8001c3c <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e074      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003312:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0x528>
 800331e:	e06c      	b.n	80033fa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800332c:	4b08      	ldr	r3, [pc, #32]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a07      	ldr	r2, [pc, #28]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <HAL_RCC_OscConfig+0x578>)
 800333e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003346:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fc78 	bl	8001c3c <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334e:	e00e      	b.n	800336e <HAL_RCC_OscConfig+0x596>
 8003350:	40021000 	.word	0x40021000
 8003354:	40007000 	.word	0x40007000
 8003358:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe fc6e 	bl	8001c3c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e046      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800336e:	4b25      	ldr	r3, [pc, #148]	; (8003404 <HAL_RCC_OscConfig+0x62c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x584>
 800337a:	e03e      	b.n	80033fa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e039      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003388:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_RCC_OscConfig+0x62c>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0203 	and.w	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	429a      	cmp	r2, r3
 800339a:	d12c      	bne.n	80033f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	3b01      	subs	r3, #1
 80033a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d123      	bne.n	80033f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d11b      	bne.n	80033f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d113      	bne.n	80033f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	3b01      	subs	r3, #1
 80033dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d109      	bne.n	80033f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	3b01      	subs	r3, #1
 80033f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3720      	adds	r7, #32
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000

08003408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e11e      	b.n	800365e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003420:	4b91      	ldr	r3, [pc, #580]	; (8003668 <HAL_RCC_ClockConfig+0x260>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d910      	bls.n	8003450 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b8e      	ldr	r3, [pc, #568]	; (8003668 <HAL_RCC_ClockConfig+0x260>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 020f 	bic.w	r2, r3, #15
 8003436:	498c      	ldr	r1, [pc, #560]	; (8003668 <HAL_RCC_ClockConfig+0x260>)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b8a      	ldr	r3, [pc, #552]	; (8003668 <HAL_RCC_ClockConfig+0x260>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e106      	b.n	800365e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d073      	beq.n	8003544 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d129      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003464:	4b81      	ldr	r3, [pc, #516]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0f4      	b.n	800365e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003474:	f000 f9ba 	bl	80037ec <RCC_GetSysClockFreqFromPLLSource>
 8003478:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4a7c      	ldr	r2, [pc, #496]	; (8003670 <HAL_RCC_ClockConfig+0x268>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d93f      	bls.n	8003502 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003482:	4b7a      	ldr	r3, [pc, #488]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003496:	2b00      	cmp	r3, #0
 8003498:	d033      	beq.n	8003502 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d12f      	bne.n	8003502 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034a2:	4b72      	ldr	r3, [pc, #456]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034aa:	4a70      	ldr	r2, [pc, #448]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 80034ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	e024      	b.n	8003502 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034c0:	4b6a      	ldr	r3, [pc, #424]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d109      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0c6      	b.n	800365e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d0:	4b66      	ldr	r3, [pc, #408]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0be      	b.n	800365e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034e0:	f000 f8ce 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4a61      	ldr	r2, [pc, #388]	; (8003670 <HAL_RCC_ClockConfig+0x268>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d909      	bls.n	8003502 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034ee:	4b5f      	ldr	r3, [pc, #380]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034f6:	4a5d      	ldr	r2, [pc, #372]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 80034f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003502:	4b5a      	ldr	r3, [pc, #360]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4957      	ldr	r1, [pc, #348]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003514:	f7fe fb92 	bl	8001c3c <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	e00a      	b.n	8003532 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fe fb8e 	bl	8001c3c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e095      	b.n	800365e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	4b4e      	ldr	r3, [pc, #312]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 020c 	and.w	r2, r3, #12
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	429a      	cmp	r2, r3
 8003542:	d1eb      	bne.n	800351c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d023      	beq.n	8003598 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b43      	ldr	r3, [pc, #268]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a42      	ldr	r2, [pc, #264]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 8003562:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003566:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003574:	4b3d      	ldr	r3, [pc, #244]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800357c:	4a3b      	ldr	r2, [pc, #236]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 800357e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003582:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003584:	4b39      	ldr	r3, [pc, #228]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4936      	ldr	r1, [pc, #216]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
 8003596:	e008      	b.n	80035aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b80      	cmp	r3, #128	; 0x80
 800359c:	d105      	bne.n	80035aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800359e:	4b33      	ldr	r3, [pc, #204]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	4a32      	ldr	r2, [pc, #200]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 80035a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035aa:	4b2f      	ldr	r3, [pc, #188]	; (8003668 <HAL_RCC_ClockConfig+0x260>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d21d      	bcs.n	80035f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b8:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <HAL_RCC_ClockConfig+0x260>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 020f 	bic.w	r2, r3, #15
 80035c0:	4929      	ldr	r1, [pc, #164]	; (8003668 <HAL_RCC_ClockConfig+0x260>)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035c8:	f7fe fb38 	bl	8001c3c <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d0:	f7fe fb34 	bl	8001c3c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e03b      	b.n	800365e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_RCC_ClockConfig+0x260>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d1ed      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003600:	4b1a      	ldr	r3, [pc, #104]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4917      	ldr	r1, [pc, #92]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800361e:	4b13      	ldr	r3, [pc, #76]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	490f      	ldr	r1, [pc, #60]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003632:	f000 f825 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 8003636:	4601      	mov	r1, r0
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <HAL_RCC_ClockConfig+0x264>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <HAL_RCC_ClockConfig+0x26c>)
 8003644:	5cd3      	ldrb	r3, [r2, r3]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	fa21 f303 	lsr.w	r3, r1, r3
 800364e:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <HAL_RCC_ClockConfig+0x270>)
 8003650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_RCC_ClockConfig+0x274>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe f9f4 	bl	8001a44 <HAL_InitTick>
 800365c:	4603      	mov	r3, r0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40022000 	.word	0x40022000
 800366c:	40021000 	.word	0x40021000
 8003670:	04c4b400 	.word	0x04c4b400
 8003674:	08007f38 	.word	0x08007f38
 8003678:	20000000 	.word	0x20000000
 800367c:	20000004 	.word	0x20000004

08003680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003686:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b04      	cmp	r3, #4
 8003690:	d102      	bne.n	8003698 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	e047      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003698:	4b27      	ldr	r3, [pc, #156]	; (8003738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d102      	bne.n	80036aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036a4:	4b26      	ldr	r3, [pc, #152]	; (8003740 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	e03e      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036aa:	4b23      	ldr	r3, [pc, #140]	; (8003738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d136      	bne.n	8003724 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	3301      	adds	r3, #1
 80036cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d10c      	bne.n	80036ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d4:	4a1a      	ldr	r2, [pc, #104]	; (8003740 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	4a16      	ldr	r2, [pc, #88]	; (8003738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036de:	68d2      	ldr	r2, [r2, #12]
 80036e0:	0a12      	lsrs	r2, r2, #8
 80036e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
 80036ea:	617b      	str	r3, [r7, #20]
      break;
 80036ec:	e00c      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036ee:	4a13      	ldr	r2, [pc, #76]	; (800373c <HAL_RCC_GetSysClockFreq+0xbc>)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	4a10      	ldr	r2, [pc, #64]	; (8003738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036f8:	68d2      	ldr	r2, [r2, #12]
 80036fa:	0a12      	lsrs	r2, r2, #8
 80036fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003700:	fb02 f303 	mul.w	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
      break;
 8003706:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	0e5b      	lsrs	r3, r3, #25
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	3301      	adds	r3, #1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	e001      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003728:	693b      	ldr	r3, [r7, #16]
}
 800372a:	4618      	mov	r0, r3
 800372c:	371c      	adds	r7, #28
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
 800373c:	00f42400 	.word	0x00f42400
 8003740:	007a1200 	.word	0x007a1200

08003744 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003748:	4b03      	ldr	r3, [pc, #12]	; (8003758 <HAL_RCC_GetHCLKFreq+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000

0800375c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003760:	f7ff fff0 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003764:	4601      	mov	r1, r0
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4a04      	ldr	r2, [pc, #16]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003772:	5cd3      	ldrb	r3, [r2, r3]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	fa21 f303 	lsr.w	r3, r1, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021000 	.word	0x40021000
 8003784:	08007f48 	.word	0x08007f48

08003788 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	220f      	movs	r2, #15
 8003796:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_RCC_GetClockConfig+0x5c>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0203 	and.w	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80037a4:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <HAL_RCC_GetClockConfig+0x5c>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80037b0:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <HAL_RCC_GetClockConfig+0x5c>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_RCC_GetClockConfig+0x5c>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	08db      	lsrs	r3, r3, #3
 80037c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <HAL_RCC_GetClockConfig+0x60>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 020f 	and.w	r2, r3, #15
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	601a      	str	r2, [r3, #0]
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40022000 	.word	0x40022000

080037ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037f2:	4b1e      	ldr	r3, [pc, #120]	; (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	3301      	adds	r3, #1
 8003808:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d10c      	bne.n	800382a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003810:	4a17      	ldr	r2, [pc, #92]	; (8003870 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	4a14      	ldr	r2, [pc, #80]	; (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800381a:	68d2      	ldr	r2, [r2, #12]
 800381c:	0a12      	lsrs	r2, r2, #8
 800381e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	617b      	str	r3, [r7, #20]
    break;
 8003828:	e00c      	b.n	8003844 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800382a:	4a12      	ldr	r2, [pc, #72]	; (8003874 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	4a0e      	ldr	r2, [pc, #56]	; (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003834:	68d2      	ldr	r2, [r2, #12]
 8003836:	0a12      	lsrs	r2, r2, #8
 8003838:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800383c:	fb02 f303 	mul.w	r3, r2, r3
 8003840:	617b      	str	r3, [r7, #20]
    break;
 8003842:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	0e5b      	lsrs	r3, r3, #25
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	3301      	adds	r3, #1
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800385e:	687b      	ldr	r3, [r7, #4]
}
 8003860:	4618      	mov	r0, r3
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40021000 	.word	0x40021000
 8003870:	007a1200 	.word	0x007a1200
 8003874:	00f42400 	.word	0x00f42400

08003878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003880:	2300      	movs	r3, #0
 8003882:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003884:	2300      	movs	r3, #0
 8003886:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8098 	beq.w	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003896:	2300      	movs	r3, #0
 8003898:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389a:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10d      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	4b40      	ldr	r3, [pc, #256]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038aa:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b0:	6593      	str	r3, [r2, #88]	; 0x58
 80038b2:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038be:	2301      	movs	r3, #1
 80038c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c2:	4b3a      	ldr	r3, [pc, #232]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a39      	ldr	r2, [pc, #228]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ce:	f7fe f9b5 	bl	8001c3c <HAL_GetTick>
 80038d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d4:	e009      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d6:	f7fe f9b1 	bl	8001c3c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d902      	bls.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	74fb      	strb	r3, [r7, #19]
        break;
 80038e8:	e005      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ea:	4b30      	ldr	r3, [pc, #192]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0ef      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d159      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038fc:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01e      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	429a      	cmp	r2, r3
 8003916:	d019      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003922:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003924:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	4a1f      	ldr	r2, [pc, #124]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003934:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800393c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003956:	f7fe f971 	bl	8001c3c <HAL_GetTick>
 800395a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800395c:	e00b      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fe f96d 	bl	8001c3c <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d902      	bls.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	74fb      	strb	r3, [r7, #19]
            break;
 8003974:	e006      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ec      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800398a:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	4903      	ldr	r1, [pc, #12]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039a0:	e008      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	74bb      	strb	r3, [r7, #18]
 80039a6:	e005      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	7cfb      	ldrb	r3, [r7, #19]
 80039b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b4:	7c7b      	ldrb	r3, [r7, #17]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ba:	4ba6      	ldr	r3, [pc, #664]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	4aa5      	ldr	r2, [pc, #660]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d2:	4ba0      	ldr	r3, [pc, #640]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	f023 0203 	bic.w	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	499c      	ldr	r1, [pc, #624]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039f4:	4b97      	ldr	r3, [pc, #604]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f023 020c 	bic.w	r2, r3, #12
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	4994      	ldr	r1, [pc, #592]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a16:	4b8f      	ldr	r3, [pc, #572]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	498b      	ldr	r1, [pc, #556]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a38:	4b86      	ldr	r3, [pc, #536]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	4983      	ldr	r1, [pc, #524]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a5a:	4b7e      	ldr	r3, [pc, #504]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	497a      	ldr	r1, [pc, #488]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a7c:	4b75      	ldr	r3, [pc, #468]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	4972      	ldr	r1, [pc, #456]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a9e:	4b6d      	ldr	r3, [pc, #436]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4969      	ldr	r1, [pc, #420]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ac0:	4b64      	ldr	r3, [pc, #400]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4961      	ldr	r1, [pc, #388]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ae2:	4b5c      	ldr	r3, [pc, #368]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	4958      	ldr	r1, [pc, #352]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d015      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b04:	4b53      	ldr	r3, [pc, #332]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	4950      	ldr	r1, [pc, #320]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b22:	d105      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b24:	4b4b      	ldr	r3, [pc, #300]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4a4a      	ldr	r2, [pc, #296]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d015      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b3c:	4b45      	ldr	r3, [pc, #276]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	4942      	ldr	r1, [pc, #264]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b5c:	4b3d      	ldr	r3, [pc, #244]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4a3c      	ldr	r2, [pc, #240]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b66:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d015      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b74:	4b37      	ldr	r3, [pc, #220]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	4934      	ldr	r1, [pc, #208]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b94:	4b2f      	ldr	r3, [pc, #188]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a2e      	ldr	r2, [pc, #184]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d015      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bac:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	4926      	ldr	r1, [pc, #152]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bcc:	4b21      	ldr	r3, [pc, #132]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d015      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003be4:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	4918      	ldr	r1, [pc, #96]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c02:	d105      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c04:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d015      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	490a      	ldr	r1, [pc, #40]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c48:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000

08003c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e049      	b.n	8003cfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f841 	bl	8003d06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3304      	adds	r3, #4
 8003c94:	4619      	mov	r1, r3
 8003c96:	4610      	mov	r0, r2
 8003c98:	f000 fa52 	bl	8004140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d001      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e04a      	b.n	8003dca <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d018      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x6c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5e:	d013      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x6c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <HAL_TIM_Base_Start_IT+0xc0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00e      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x6c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x6c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1a      	ldr	r2, [pc, #104]	; (8003de4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x6c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a19      	ldr	r2, [pc, #100]	; (8003de8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d115      	bne.n	8003db4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	4b17      	ldr	r3, [pc, #92]	; (8003dec <HAL_TIM_Base_Start_IT+0xd0>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b06      	cmp	r3, #6
 8003d98:	d015      	beq.n	8003dc6 <HAL_TIM_Base_Start_IT+0xaa>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da0:	d011      	beq.n	8003dc6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0201 	orr.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db2:	e008      	b.n	8003dc6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e000      	b.n	8003dc8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800
 8003de4:	40013400 	.word	0x40013400
 8003de8:	40014000 	.word	0x40014000
 8003dec:	00010007 	.word	0x00010007

08003df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d122      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d11b      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0202 	mvn.w	r2, #2
 8003e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f965 	bl	8004102 <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f957 	bl	80040ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f968 	bl	8004116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d122      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d11b      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0204 	mvn.w	r2, #4
 8003e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f93b 	bl	8004102 <HAL_TIM_IC_CaptureCallback>
 8003e8c:	e005      	b.n	8003e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f92d 	bl	80040ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f93e 	bl	8004116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b08      	cmp	r3, #8
 8003eac:	d122      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d11b      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0208 	mvn.w	r2, #8
 8003ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2204      	movs	r2, #4
 8003eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f911 	bl	8004102 <HAL_TIM_IC_CaptureCallback>
 8003ee0:	e005      	b.n	8003eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f903 	bl	80040ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f914 	bl	8004116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b10      	cmp	r3, #16
 8003f00:	d122      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b10      	cmp	r3, #16
 8003f0e:	d11b      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0210 	mvn.w	r2, #16
 8003f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8e7 	bl	8004102 <HAL_TIM_IC_CaptureCallback>
 8003f34:	e005      	b.n	8003f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f8d9 	bl	80040ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f8ea 	bl	8004116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d10e      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d107      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0201 	mvn.w	r2, #1
 8003f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd fccc 	bl	800190c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7e:	2b80      	cmp	r3, #128	; 0x80
 8003f80:	d10e      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8c:	2b80      	cmp	r3, #128	; 0x80
 8003f8e:	d107      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f96a 	bl	8004274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fae:	d10e      	bne.n	8003fce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b80      	cmp	r3, #128	; 0x80
 8003fbc:	d107      	bne.n	8003fce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f95d 	bl	8004288 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d10e      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b40      	cmp	r3, #64	; 0x40
 8003fe8:	d107      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f898 	bl	800412a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b20      	cmp	r3, #32
 8004006:	d10e      	bne.n	8004026 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b20      	cmp	r3, #32
 8004014:	d107      	bne.n	8004026 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f06f 0220 	mvn.w	r2, #32
 800401e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f91d 	bl	8004260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004034:	d10f      	bne.n	8004056 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004044:	d107      	bne.n	8004056 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800404e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f923 	bl	800429c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004064:	d10f      	bne.n	8004086 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004074:	d107      	bne.n	8004086 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800407e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f915 	bl	80042b0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004094:	d10f      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a4:	d107      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80040ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f907 	bl	80042c4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040c4:	d10f      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040d4:	d107      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80040de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f8f9 	bl	80042d8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a3c      	ldr	r2, [pc, #240]	; (8004244 <TIM_Base_SetConfig+0x104>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00f      	beq.n	8004178 <TIM_Base_SetConfig+0x38>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415e:	d00b      	beq.n	8004178 <TIM_Base_SetConfig+0x38>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a39      	ldr	r2, [pc, #228]	; (8004248 <TIM_Base_SetConfig+0x108>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d007      	beq.n	8004178 <TIM_Base_SetConfig+0x38>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a38      	ldr	r2, [pc, #224]	; (800424c <TIM_Base_SetConfig+0x10c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_Base_SetConfig+0x38>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a37      	ldr	r2, [pc, #220]	; (8004250 <TIM_Base_SetConfig+0x110>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d108      	bne.n	800418a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a2d      	ldr	r2, [pc, #180]	; (8004244 <TIM_Base_SetConfig+0x104>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d01b      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004198:	d017      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a2a      	ldr	r2, [pc, #168]	; (8004248 <TIM_Base_SetConfig+0x108>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a29      	ldr	r2, [pc, #164]	; (800424c <TIM_Base_SetConfig+0x10c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00f      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a28      	ldr	r2, [pc, #160]	; (8004250 <TIM_Base_SetConfig+0x110>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00b      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a27      	ldr	r2, [pc, #156]	; (8004254 <TIM_Base_SetConfig+0x114>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d007      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a26      	ldr	r2, [pc, #152]	; (8004258 <TIM_Base_SetConfig+0x118>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d003      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a25      	ldr	r2, [pc, #148]	; (800425c <TIM_Base_SetConfig+0x11c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d108      	bne.n	80041dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a10      	ldr	r2, [pc, #64]	; (8004244 <TIM_Base_SetConfig+0x104>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00f      	beq.n	8004228 <TIM_Base_SetConfig+0xe8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a11      	ldr	r2, [pc, #68]	; (8004250 <TIM_Base_SetConfig+0x110>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00b      	beq.n	8004228 <TIM_Base_SetConfig+0xe8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a10      	ldr	r2, [pc, #64]	; (8004254 <TIM_Base_SetConfig+0x114>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d007      	beq.n	8004228 <TIM_Base_SetConfig+0xe8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a0f      	ldr	r2, [pc, #60]	; (8004258 <TIM_Base_SetConfig+0x118>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_Base_SetConfig+0xe8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a0e      	ldr	r2, [pc, #56]	; (800425c <TIM_Base_SetConfig+0x11c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d103      	bne.n	8004230 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	615a      	str	r2, [r3, #20]
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40013400 	.word	0x40013400
 8004254:	40014000 	.word	0x40014000
 8004258:	40014400 	.word	0x40014400
 800425c:	40014800 	.word	0x40014800

08004260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80042f0:	bf00      	nop
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004302:	f3ef 8305 	mrs	r3, IPSR
 8004306:	60bb      	str	r3, [r7, #8]
  return(result);
 8004308:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10f      	bne.n	800432e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430e:	f3ef 8310 	mrs	r3, PRIMASK
 8004312:	607b      	str	r3, [r7, #4]
  return(result);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d105      	bne.n	8004326 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800431a:	f3ef 8311 	mrs	r3, BASEPRI
 800431e:	603b      	str	r3, [r7, #0]
  return(result);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <osKernelInitialize+0x3a>
 8004326:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <osKernelInitialize+0x64>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d103      	bne.n	8004336 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800432e:	f06f 0305 	mvn.w	r3, #5
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e00c      	b.n	8004350 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <osKernelInitialize+0x64>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d105      	bne.n	800434a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800433e:	4b08      	ldr	r3, [pc, #32]	; (8004360 <osKernelInitialize+0x64>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	e002      	b.n	8004350 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800434a:	f04f 33ff 	mov.w	r3, #4294967295
 800434e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004350:	68fb      	ldr	r3, [r7, #12]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	2000009c 	.word	0x2000009c

08004364 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800436a:	f3ef 8305 	mrs	r3, IPSR
 800436e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004370:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10f      	bne.n	8004396 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004376:	f3ef 8310 	mrs	r3, PRIMASK
 800437a:	607b      	str	r3, [r7, #4]
  return(result);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d105      	bne.n	800438e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004382:	f3ef 8311 	mrs	r3, BASEPRI
 8004386:	603b      	str	r3, [r7, #0]
  return(result);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <osKernelStart+0x3a>
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <osKernelStart+0x68>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d103      	bne.n	800439e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004396:	f06f 0305 	mvn.w	r3, #5
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	e010      	b.n	80043c0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800439e:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <osKernelStart+0x68>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d109      	bne.n	80043ba <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043a6:	f7ff ffa1 	bl	80042ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043aa:	4b08      	ldr	r3, [pc, #32]	; (80043cc <osKernelStart+0x68>)
 80043ac:	2202      	movs	r2, #2
 80043ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043b0:	f001 f870 	bl	8005494 <vTaskStartScheduler>
      stat = osOK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	e002      	b.n	80043c0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295
 80043be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80043c0:	68fb      	ldr	r3, [r7, #12]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	2000009c 	.word	0x2000009c

080043d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b090      	sub	sp, #64	; 0x40
 80043d4:	af04      	add	r7, sp, #16
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043e0:	f3ef 8305 	mrs	r3, IPSR
 80043e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80043e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f040 808f 	bne.w	800450c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ee:	f3ef 8310 	mrs	r3, PRIMASK
 80043f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043fa:	f3ef 8311 	mrs	r3, BASEPRI
 80043fe:	617b      	str	r3, [r7, #20]
  return(result);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <osThreadNew+0x3e>
 8004406:	4b44      	ldr	r3, [pc, #272]	; (8004518 <osThreadNew+0x148>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d07e      	beq.n	800450c <osThreadNew+0x13c>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d07b      	beq.n	800450c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004418:	2318      	movs	r3, #24
 800441a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800441c:	2300      	movs	r3, #0
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004420:	f04f 33ff 	mov.w	r3, #4294967295
 8004424:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d045      	beq.n	80044b8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <osThreadNew+0x6a>
        name = attr->name;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <osThreadNew+0x90>
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	2b38      	cmp	r3, #56	; 0x38
 8004452:	d805      	bhi.n	8004460 <osThreadNew+0x90>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <osThreadNew+0x94>
        return (NULL);
 8004460:	2300      	movs	r3, #0
 8004462:	e054      	b.n	800450e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	089b      	lsrs	r3, r3, #2
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00e      	beq.n	800449a <osThreadNew+0xca>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b5b      	cmp	r3, #91	; 0x5b
 8004482:	d90a      	bls.n	800449a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004488:	2b00      	cmp	r3, #0
 800448a:	d006      	beq.n	800449a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <osThreadNew+0xca>
        mem = 1;
 8004494:	2301      	movs	r3, #1
 8004496:	623b      	str	r3, [r7, #32]
 8004498:	e010      	b.n	80044bc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10c      	bne.n	80044bc <osThreadNew+0xec>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d108      	bne.n	80044bc <osThreadNew+0xec>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d104      	bne.n	80044bc <osThreadNew+0xec>
          mem = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	623b      	str	r3, [r7, #32]
 80044b6:	e001      	b.n	80044bc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d110      	bne.n	80044e4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044ca:	9202      	str	r2, [sp, #8]
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 fe09 	bl	80050f0 <xTaskCreateStatic>
 80044de:	4603      	mov	r3, r0
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	e013      	b.n	800450c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d110      	bne.n	800450c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	f107 0310 	add.w	r3, r7, #16
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fe51 	bl	80051a4 <xTaskCreate>
 8004502:	4603      	mov	r3, r0
 8004504:	2b01      	cmp	r3, #1
 8004506:	d001      	beq.n	800450c <osThreadNew+0x13c>
          hTask = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800450c:	693b      	ldr	r3, [r7, #16]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3730      	adds	r7, #48	; 0x30
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	2000009c 	.word	0x2000009c

0800451c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004524:	f3ef 8305 	mrs	r3, IPSR
 8004528:	613b      	str	r3, [r7, #16]
  return(result);
 800452a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10f      	bne.n	8004550 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004530:	f3ef 8310 	mrs	r3, PRIMASK
 8004534:	60fb      	str	r3, [r7, #12]
  return(result);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800453c:	f3ef 8311 	mrs	r3, BASEPRI
 8004540:	60bb      	str	r3, [r7, #8]
  return(result);
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d007      	beq.n	8004558 <osDelay+0x3c>
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <osDelay+0x58>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b02      	cmp	r3, #2
 800454e:	d103      	bne.n	8004558 <osDelay+0x3c>
    stat = osErrorISR;
 8004550:	f06f 0305 	mvn.w	r3, #5
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e007      	b.n	8004568 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 ff62 	bl	800542c <vTaskDelay>
    }
  }

  return (stat);
 8004568:	697b      	ldr	r3, [r7, #20]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	2000009c 	.word	0x2000009c

08004578 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	4a06      	ldr	r2, [pc, #24]	; (80045a8 <vApplicationGetIdleTaskMemory+0x30>)
 800458e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2280      	movs	r2, #128	; 0x80
 8004594:	601a      	str	r2, [r3, #0]
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	200000a0 	.word	0x200000a0
 80045a8:	200000fc 	.word	0x200000fc

080045ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80045bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4a06      	ldr	r2, [pc, #24]	; (80045dc <vApplicationGetTimerTaskMemory+0x30>)
 80045c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045ca:	601a      	str	r2, [r3, #0]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	200002fc 	.word	0x200002fc
 80045dc:	20000358 	.word	0x20000358

080045e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f103 0208 	add.w	r2, r3, #8
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295
 80045f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f103 0208 	add.w	r2, r3, #8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f103 0208 	add.w	r2, r3, #8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	601a      	str	r2, [r3, #0]
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d103      	bne.n	80046a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e00c      	b.n	80046bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3308      	adds	r3, #8
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e002      	b.n	80046b0 <vListInsert+0x2e>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d2f6      	bcs.n	80046aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	601a      	str	r2, [r3, #0]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6892      	ldr	r2, [r2, #8]
 800470a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6852      	ldr	r2, [r2, #4]
 8004714:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	d103      	bne.n	8004728 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	1e5a      	subs	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	e7fe      	b.n	800476e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004770:	f002 f814 	bl	800679c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477c:	68f9      	ldr	r1, [r7, #12]
 800477e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	441a      	add	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a0:	3b01      	subs	r3, #1
 80047a2:	68f9      	ldr	r1, [r7, #12]
 80047a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	441a      	add	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	22ff      	movs	r2, #255	; 0xff
 80047b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	22ff      	movs	r2, #255	; 0xff
 80047bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d114      	bne.n	80047f0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01a      	beq.n	8004804 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3310      	adds	r3, #16
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 f8de 	bl	8005994 <xTaskRemoveFromEventList>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d012      	beq.n	8004804 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047de:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <xQueueGenericReset+0xcc>)
 80047e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	e009      	b.n	8004804 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3310      	adds	r3, #16
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fef3 	bl	80045e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3324      	adds	r3, #36	; 0x24
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff feee 	bl	80045e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004804:	f001 fff8 	bl	80067f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004808:	2301      	movs	r3, #1
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	e000ed04 	.word	0xe000ed04

08004818 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08e      	sub	sp, #56	; 0x38
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <xQueueGenericCreateStatic+0x28>
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	62bb      	str	r3, [r7, #40]	; 0x28
 800483e:	e7fe      	b.n	800483e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <xQueueGenericCreateStatic+0x42>
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
 8004858:	e7fe      	b.n	8004858 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <xQueueGenericCreateStatic+0x4e>
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <xQueueGenericCreateStatic+0x52>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <xQueueGenericCreateStatic+0x54>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <xQueueGenericCreateStatic+0x6c>
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	623b      	str	r3, [r7, #32]
 8004882:	e7fe      	b.n	8004882 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <xQueueGenericCreateStatic+0x78>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <xQueueGenericCreateStatic+0x7c>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <xQueueGenericCreateStatic+0x7e>
 8004894:	2300      	movs	r3, #0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <xQueueGenericCreateStatic+0x96>
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	e7fe      	b.n	80048ac <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048ae:	2350      	movs	r3, #80	; 0x50
 80048b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b50      	cmp	r3, #80	; 0x50
 80048b6:	d009      	beq.n	80048cc <xQueueGenericCreateStatic+0xb4>
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	e7fe      	b.n	80048ca <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00d      	beq.n	80048f4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048e0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80048e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f805 	bl	80048fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3730      	adds	r7, #48	; 0x30
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d103      	bne.n	800491a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e002      	b.n	8004920 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800492c:	2101      	movs	r1, #1
 800492e:	69b8      	ldr	r0, [r7, #24]
 8004930:	f7ff ff0a 	bl	8004748 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08e      	sub	sp, #56	; 0x38
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004952:	2300      	movs	r3, #0
 8004954:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <xQueueGenericSend+0x30>
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
 8004972:	e7fe      	b.n	8004972 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d103      	bne.n	8004982 <xQueueGenericSend+0x3e>
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <xQueueGenericSend+0x42>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <xQueueGenericSend+0x44>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <xQueueGenericSend+0x5c>
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
 800499e:	e7fe      	b.n	800499e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d103      	bne.n	80049ae <xQueueGenericSend+0x6a>
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <xQueueGenericSend+0x6e>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <xQueueGenericSend+0x70>
 80049b2:	2300      	movs	r3, #0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <xQueueGenericSend+0x88>
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	623b      	str	r3, [r7, #32]
 80049ca:	e7fe      	b.n	80049ca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049cc:	f001 f998 	bl	8005d00 <xTaskGetSchedulerState>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <xQueueGenericSend+0x98>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <xQueueGenericSend+0x9c>
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <xQueueGenericSend+0x9e>
 80049e0:	2300      	movs	r3, #0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <xQueueGenericSend+0xb6>
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	e7fe      	b.n	80049f8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049fa:	f001 fecf 	bl	800679c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d302      	bcc.n	8004a10 <xQueueGenericSend+0xcc>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d129      	bne.n	8004a64 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a16:	f000 f9ff 	bl	8004e18 <prvCopyDataToQueue>
 8004a1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d010      	beq.n	8004a46 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	3324      	adds	r3, #36	; 0x24
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 ffb3 	bl	8005994 <xTaskRemoveFromEventList>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d013      	beq.n	8004a5c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a34:	4b3f      	ldr	r3, [pc, #252]	; (8004b34 <xQueueGenericSend+0x1f0>)
 8004a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	e00a      	b.n	8004a5c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a4c:	4b39      	ldr	r3, [pc, #228]	; (8004b34 <xQueueGenericSend+0x1f0>)
 8004a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a5c:	f001 fecc 	bl	80067f8 <vPortExitCritical>
				return pdPASS;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e063      	b.n	8004b2c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d103      	bne.n	8004a72 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a6a:	f001 fec5 	bl	80067f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e05c      	b.n	8004b2c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a78:	f107 0314 	add.w	r3, r7, #20
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 ffeb 	bl	8005a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a82:	2301      	movs	r3, #1
 8004a84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a86:	f001 feb7 	bl	80067f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a8a:	f000 fd67 	bl	800555c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a8e:	f001 fe85 	bl	800679c <vPortEnterCritical>
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a98:	b25b      	sxtb	r3, r3
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9e:	d103      	bne.n	8004aa8 <xQueueGenericSend+0x164>
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aae:	b25b      	sxtb	r3, r3
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d103      	bne.n	8004abe <xQueueGenericSend+0x17a>
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004abe:	f001 fe9b 	bl	80067f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ac2:	1d3a      	adds	r2, r7, #4
 8004ac4:	f107 0314 	add.w	r3, r7, #20
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 ffda 	bl	8005a84 <xTaskCheckForTimeOut>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d124      	bne.n	8004b20 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ad8:	f000 fa96 	bl	8005008 <prvIsQueueFull>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d018      	beq.n	8004b14 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	3310      	adds	r3, #16
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4611      	mov	r1, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 ff04 	bl	80058f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004af2:	f000 fa21 	bl	8004f38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004af6:	f000 fd3f 	bl	8005578 <xTaskResumeAll>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f47f af7c 	bne.w	80049fa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <xQueueGenericSend+0x1f0>)
 8004b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	e772      	b.n	80049fa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b16:	f000 fa0f 	bl	8004f38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b1a:	f000 fd2d 	bl	8005578 <xTaskResumeAll>
 8004b1e:	e76c      	b.n	80049fa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b22:	f000 fa09 	bl	8004f38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b26:	f000 fd27 	bl	8005578 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3738      	adds	r7, #56	; 0x38
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08e      	sub	sp, #56	; 0x38
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <xQueueGenericSendFromISR+0x2c>
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
 8004b62:	e7fe      	b.n	8004b62 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d103      	bne.n	8004b72 <xQueueGenericSendFromISR+0x3a>
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <xQueueGenericSendFromISR+0x3e>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <xQueueGenericSendFromISR+0x40>
 8004b76:	2300      	movs	r3, #0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <xQueueGenericSendFromISR+0x58>
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	623b      	str	r3, [r7, #32]
 8004b8e:	e7fe      	b.n	8004b8e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d103      	bne.n	8004b9e <xQueueGenericSendFromISR+0x66>
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <xQueueGenericSendFromISR+0x6a>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <xQueueGenericSendFromISR+0x6c>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <xQueueGenericSendFromISR+0x84>
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	e7fe      	b.n	8004bba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bbc:	f001 feca 	bl	8006954 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bc0:	f3ef 8211 	mrs	r2, BASEPRI
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	61ba      	str	r2, [r7, #24]
 8004bd6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d302      	bcc.n	8004bee <xQueueGenericSendFromISR+0xb6>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d12c      	bne.n	8004c48 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bfe:	f000 f90b 	bl	8004e18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c02:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d112      	bne.n	8004c32 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d016      	beq.n	8004c42 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	3324      	adds	r3, #36	; 0x24
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 febb 	bl	8005994 <xTaskRemoveFromEventList>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00e      	beq.n	8004c42 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00b      	beq.n	8004c42 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e007      	b.n	8004c42 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c36:	3301      	adds	r3, #1
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	b25a      	sxtb	r2, r3
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c42:	2301      	movs	r3, #1
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004c46:	e001      	b.n	8004c4c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3738      	adds	r7, #56	; 0x38
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08c      	sub	sp, #48	; 0x30
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <xQueueReceive+0x2e>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	623b      	str	r3, [r7, #32]
 8004c8c:	e7fe      	b.n	8004c8c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <xQueueReceive+0x3c>
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <xQueueReceive+0x40>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <xQueueReceive+0x42>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d109      	bne.n	8004cba <xQueueReceive+0x5a>
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	e7fe      	b.n	8004cb8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cba:	f001 f821 	bl	8005d00 <xTaskGetSchedulerState>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d102      	bne.n	8004cca <xQueueReceive+0x6a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <xQueueReceive+0x6e>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <xQueueReceive+0x70>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d109      	bne.n	8004ce8 <xQueueReceive+0x88>
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	e7fe      	b.n	8004ce6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ce8:	f001 fd58 	bl	800679c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01f      	beq.n	8004d38 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfc:	f000 f8f6 	bl	8004eec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	1e5a      	subs	r2, r3, #1
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00f      	beq.n	8004d30 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	3310      	adds	r3, #16
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fe3d 	bl	8005994 <xTaskRemoveFromEventList>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d20:	4b3c      	ldr	r3, [pc, #240]	; (8004e14 <xQueueReceive+0x1b4>)
 8004d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d30:	f001 fd62 	bl	80067f8 <vPortExitCritical>
				return pdPASS;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e069      	b.n	8004e0c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d103      	bne.n	8004d46 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d3e:	f001 fd5b 	bl	80067f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e062      	b.n	8004e0c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d4c:	f107 0310 	add.w	r3, r7, #16
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fe81 	bl	8005a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d56:	2301      	movs	r3, #1
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d5a:	f001 fd4d 	bl	80067f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d5e:	f000 fbfd 	bl	800555c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d62:	f001 fd1b 	bl	800679c <vPortEnterCritical>
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d103      	bne.n	8004d7c <xQueueReceive+0x11c>
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d82:	b25b      	sxtb	r3, r3
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d103      	bne.n	8004d92 <xQueueReceive+0x132>
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d92:	f001 fd31 	bl	80067f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d96:	1d3a      	adds	r2, r7, #4
 8004d98:	f107 0310 	add.w	r3, r7, #16
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fe70 	bl	8005a84 <xTaskCheckForTimeOut>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d123      	bne.n	8004df2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dac:	f000 f916 	bl	8004fdc <prvIsQueueEmpty>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d017      	beq.n	8004de6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	3324      	adds	r3, #36	; 0x24
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fd9a 	bl	80058f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc6:	f000 f8b7 	bl	8004f38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dca:	f000 fbd5 	bl	8005578 <xTaskResumeAll>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d189      	bne.n	8004ce8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <xQueueReceive+0x1b4>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	e780      	b.n	8004ce8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de8:	f000 f8a6 	bl	8004f38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dec:	f000 fbc4 	bl	8005578 <xTaskResumeAll>
 8004df0:	e77a      	b.n	8004ce8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004df4:	f000 f8a0 	bl	8004f38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004df8:	f000 fbbe 	bl	8005578 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dfe:	f000 f8ed 	bl	8004fdc <prvIsQueueEmpty>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f43f af6f 	beq.w	8004ce8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3730      	adds	r7, #48	; 0x30
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	e000ed04 	.word	0xe000ed04

08004e18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10d      	bne.n	8004e52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d14d      	bne.n	8004eda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 ff7a 	bl	8005d3c <xTaskPriorityDisinherit>
 8004e48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	609a      	str	r2, [r3, #8]
 8004e50:	e043      	b.n	8004eda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d119      	bne.n	8004e8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6858      	ldr	r0, [r3, #4]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	461a      	mov	r2, r3
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	f001 ffb4 	bl	8006dd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	441a      	add	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d32b      	bcc.n	8004eda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	e026      	b.n	8004eda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	68d8      	ldr	r0, [r3, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	461a      	mov	r2, r3
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	f001 ff9a 	bl	8006dd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	425b      	negs	r3, r3
 8004ea6:	441a      	add	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d207      	bcs.n	8004ec8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	425b      	negs	r3, r3
 8004ec2:	441a      	add	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d105      	bne.n	8004eda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ee2:	697b      	ldr	r3, [r7, #20]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d018      	beq.n	8004f30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	441a      	add	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d303      	bcc.n	8004f20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68d9      	ldr	r1, [r3, #12]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6838      	ldr	r0, [r7, #0]
 8004f2c:	f001 ff50 	bl	8006dd0 <memcpy>
	}
}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f40:	f001 fc2c 	bl	800679c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f4c:	e011      	b.n	8004f72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d012      	beq.n	8004f7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3324      	adds	r3, #36	; 0x24
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fd1a 	bl	8005994 <xTaskRemoveFromEventList>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f66:	f000 fded 	bl	8005b44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	dce9      	bgt.n	8004f4e <prvUnlockQueue+0x16>
 8004f7a:	e000      	b.n	8004f7e <prvUnlockQueue+0x46>
					break;
 8004f7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	22ff      	movs	r2, #255	; 0xff
 8004f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f86:	f001 fc37 	bl	80067f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f8a:	f001 fc07 	bl	800679c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f96:	e011      	b.n	8004fbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d012      	beq.n	8004fc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3310      	adds	r3, #16
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fcf5 	bl	8005994 <xTaskRemoveFromEventList>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fb0:	f000 fdc8 	bl	8005b44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fb4:	7bbb      	ldrb	r3, [r7, #14]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	dce9      	bgt.n	8004f98 <prvUnlockQueue+0x60>
 8004fc4:	e000      	b.n	8004fc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	22ff      	movs	r2, #255	; 0xff
 8004fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004fd0:	f001 fc12 	bl	80067f8 <vPortExitCritical>
}
 8004fd4:	bf00      	nop
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fe4:	f001 fbda 	bl	800679c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e001      	b.n	8004ffa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ffa:	f001 fbfd 	bl	80067f8 <vPortExitCritical>

	return xReturn;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005010:	f001 fbc4 	bl	800679c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	429a      	cmp	r2, r3
 800501e:	d102      	bne.n	8005026 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005020:	2301      	movs	r3, #1
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	e001      	b.n	800502a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800502a:	f001 fbe5 	bl	80067f8 <vPortExitCritical>

	return xReturn;
 800502e:	68fb      	ldr	r3, [r7, #12]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e014      	b.n	8005072 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005048:	4a0e      	ldr	r2, [pc, #56]	; (8005084 <vQueueAddToRegistry+0x4c>)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10b      	bne.n	800506c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005054:	490b      	ldr	r1, [pc, #44]	; (8005084 <vQueueAddToRegistry+0x4c>)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800505e:	4a09      	ldr	r2, [pc, #36]	; (8005084 <vQueueAddToRegistry+0x4c>)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4413      	add	r3, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800506a:	e005      	b.n	8005078 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3301      	adds	r3, #1
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b07      	cmp	r3, #7
 8005076:	d9e7      	bls.n	8005048 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	20001a6c 	.word	0x20001a6c

08005088 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005098:	f001 fb80 	bl	800679c <vPortEnterCritical>
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050a2:	b25b      	sxtb	r3, r3
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a8:	d103      	bne.n	80050b2 <vQueueWaitForMessageRestricted+0x2a>
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b8:	b25b      	sxtb	r3, r3
 80050ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050be:	d103      	bne.n	80050c8 <vQueueWaitForMessageRestricted+0x40>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c8:	f001 fb96 	bl	80067f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d106      	bne.n	80050e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	3324      	adds	r3, #36	; 0x24
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	68b9      	ldr	r1, [r7, #8]
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fc2f 	bl	8005940 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050e2:	6978      	ldr	r0, [r7, #20]
 80050e4:	f7ff ff28 	bl	8004f38 <prvUnlockQueue>
	}
 80050e8:	bf00      	nop
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08e      	sub	sp, #56	; 0x38
 80050f4:	af04      	add	r7, sp, #16
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <xTaskCreateStatic+0x28>
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	623b      	str	r3, [r7, #32]
 8005116:	e7fe      	b.n	8005116 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	2b00      	cmp	r3, #0
 800511c:	d109      	bne.n	8005132 <xTaskCreateStatic+0x42>
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	e7fe      	b.n	8005130 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005132:	235c      	movs	r3, #92	; 0x5c
 8005134:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b5c      	cmp	r3, #92	; 0x5c
 800513a:	d009      	beq.n	8005150 <xTaskCreateStatic+0x60>
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	e7fe      	b.n	800514e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005150:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01e      	beq.n	8005196 <xTaskCreateStatic+0xa6>
 8005158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01b      	beq.n	8005196 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005166:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	2202      	movs	r2, #2
 800516c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005170:	2300      	movs	r3, #0
 8005172:	9303      	str	r3, [sp, #12]
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	9302      	str	r3, [sp, #8]
 8005178:	f107 0314 	add.w	r3, r7, #20
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f850 	bl	800522e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800518e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005190:	f000 f8dc 	bl	800534c <prvAddNewTaskToReadyList>
 8005194:	e001      	b.n	800519a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800519a:	697b      	ldr	r3, [r7, #20]
	}
 800519c:	4618      	mov	r0, r3
 800519e:	3728      	adds	r7, #40	; 0x28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08c      	sub	sp, #48	; 0x30
 80051a8:	af04      	add	r7, sp, #16
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051b4:	88fb      	ldrh	r3, [r7, #6]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f001 fc09 	bl	80069d0 <pvPortMalloc>
 80051be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00e      	beq.n	80051e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051c6:	205c      	movs	r0, #92	; 0x5c
 80051c8:	f001 fc02 	bl	80069d0 <pvPortMalloc>
 80051cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
 80051da:	e005      	b.n	80051e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051dc:	6978      	ldr	r0, [r7, #20]
 80051de:	f001 fcb9 	bl	8006b54 <vPortFree>
 80051e2:	e001      	b.n	80051e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d017      	beq.n	800521e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051f6:	88fa      	ldrh	r2, [r7, #6]
 80051f8:	2300      	movs	r3, #0
 80051fa:	9303      	str	r3, [sp, #12]
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	9302      	str	r3, [sp, #8]
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	9301      	str	r3, [sp, #4]
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f80e 	bl	800522e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005212:	69f8      	ldr	r0, [r7, #28]
 8005214:	f000 f89a 	bl	800534c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005218:	2301      	movs	r3, #1
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	e002      	b.n	8005224 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800521e:	f04f 33ff 	mov.w	r3, #4294967295
 8005222:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005224:	69bb      	ldr	r3, [r7, #24]
	}
 8005226:	4618      	mov	r0, r3
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b088      	sub	sp, #32
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	461a      	mov	r2, r3
 8005246:	21a5      	movs	r1, #165	; 0xa5
 8005248:	f001 fdcd 	bl	8006de6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005256:	3b01      	subs	r3, #1
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f023 0307 	bic.w	r3, r3, #7
 8005264:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	2b00      	cmp	r3, #0
 800526e:	d009      	beq.n	8005284 <prvInitialiseNewTask+0x56>
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e7fe      	b.n	8005282 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d01f      	beq.n	80052ca <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	e012      	b.n	80052b6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	7819      	ldrb	r1, [r3, #0]
 8005298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	4413      	add	r3, r2
 800529e:	3334      	adds	r3, #52	; 0x34
 80052a0:	460a      	mov	r2, r1
 80052a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d006      	beq.n	80052be <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	3301      	adds	r3, #1
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2b0f      	cmp	r3, #15
 80052ba:	d9e9      	bls.n	8005290 <prvInitialiseNewTask+0x62>
 80052bc:	e000      	b.n	80052c0 <prvInitialiseNewTask+0x92>
			{
				break;
 80052be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052c8:	e003      	b.n	80052d2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	2b37      	cmp	r3, #55	; 0x37
 80052d6:	d901      	bls.n	80052dc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052d8:	2337      	movs	r3, #55	; 0x37
 80052da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	2200      	movs	r2, #0
 80052ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	3304      	adds	r3, #4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff f994 	bl	8004620 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	3318      	adds	r3, #24
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff f98f 	bl	8004620 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005306:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005316:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	2200      	movs	r2, #0
 800531c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	68f9      	ldr	r1, [r7, #12]
 800532a:	69b8      	ldr	r0, [r7, #24]
 800532c:	f001 f90c 	bl	8006548 <pxPortInitialiseStack>
 8005330:	4602      	mov	r2, r0
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005342:	bf00      	nop
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005354:	f001 fa22 	bl	800679c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005358:	4b2d      	ldr	r3, [pc, #180]	; (8005410 <prvAddNewTaskToReadyList+0xc4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3301      	adds	r3, #1
 800535e:	4a2c      	ldr	r2, [pc, #176]	; (8005410 <prvAddNewTaskToReadyList+0xc4>)
 8005360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005362:	4b2c      	ldr	r3, [pc, #176]	; (8005414 <prvAddNewTaskToReadyList+0xc8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d109      	bne.n	800537e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800536a:	4a2a      	ldr	r2, [pc, #168]	; (8005414 <prvAddNewTaskToReadyList+0xc8>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005370:	4b27      	ldr	r3, [pc, #156]	; (8005410 <prvAddNewTaskToReadyList+0xc4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d110      	bne.n	800539a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005378:	f000 fc08 	bl	8005b8c <prvInitialiseTaskLists>
 800537c:	e00d      	b.n	800539a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800537e:	4b26      	ldr	r3, [pc, #152]	; (8005418 <prvAddNewTaskToReadyList+0xcc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005386:	4b23      	ldr	r3, [pc, #140]	; (8005414 <prvAddNewTaskToReadyList+0xc8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	429a      	cmp	r2, r3
 8005392:	d802      	bhi.n	800539a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005394:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <prvAddNewTaskToReadyList+0xc8>)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800539a:	4b20      	ldr	r3, [pc, #128]	; (800541c <prvAddNewTaskToReadyList+0xd0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3301      	adds	r3, #1
 80053a0:	4a1e      	ldr	r2, [pc, #120]	; (800541c <prvAddNewTaskToReadyList+0xd0>)
 80053a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053a4:	4b1d      	ldr	r3, [pc, #116]	; (800541c <prvAddNewTaskToReadyList+0xd0>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b0:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <prvAddNewTaskToReadyList+0xd4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d903      	bls.n	80053c0 <prvAddNewTaskToReadyList+0x74>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	4a18      	ldr	r2, [pc, #96]	; (8005420 <prvAddNewTaskToReadyList+0xd4>)
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <prvAddNewTaskToReadyList+0xd8>)
 80053ce:	441a      	add	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f7ff f92f 	bl	800463a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053dc:	f001 fa0c 	bl	80067f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053e0:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <prvAddNewTaskToReadyList+0xcc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00e      	beq.n	8005406 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <prvAddNewTaskToReadyList+0xc8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d207      	bcs.n	8005406 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <prvAddNewTaskToReadyList+0xdc>)
 80053f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000c2c 	.word	0x20000c2c
 8005414:	20000758 	.word	0x20000758
 8005418:	20000c38 	.word	0x20000c38
 800541c:	20000c48 	.word	0x20000c48
 8005420:	20000c34 	.word	0x20000c34
 8005424:	2000075c 	.word	0x2000075c
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d016      	beq.n	800546c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <vTaskDelay+0x60>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <vTaskDelay+0x2e>
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	e7fe      	b.n	8005458 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800545a:	f000 f87f 	bl	800555c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800545e:	2100      	movs	r1, #0
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fcd7 	bl	8005e14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005466:	f000 f887 	bl	8005578 <xTaskResumeAll>
 800546a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d107      	bne.n	8005482 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005472:	4b07      	ldr	r3, [pc, #28]	; (8005490 <vTaskDelay+0x64>)
 8005474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000c54 	.word	0x20000c54
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08a      	sub	sp, #40	; 0x28
 8005498:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800549a:	2300      	movs	r3, #0
 800549c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054a2:	463a      	mov	r2, r7
 80054a4:	1d39      	adds	r1, r7, #4
 80054a6:	f107 0308 	add.w	r3, r7, #8
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff f864 	bl	8004578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	9202      	str	r2, [sp, #8]
 80054b8:	9301      	str	r3, [sp, #4]
 80054ba:	2300      	movs	r3, #0
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	2300      	movs	r3, #0
 80054c0:	460a      	mov	r2, r1
 80054c2:	4920      	ldr	r1, [pc, #128]	; (8005544 <vTaskStartScheduler+0xb0>)
 80054c4:	4820      	ldr	r0, [pc, #128]	; (8005548 <vTaskStartScheduler+0xb4>)
 80054c6:	f7ff fe13 	bl	80050f0 <xTaskCreateStatic>
 80054ca:	4602      	mov	r2, r0
 80054cc:	4b1f      	ldr	r3, [pc, #124]	; (800554c <vTaskStartScheduler+0xb8>)
 80054ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054d0:	4b1e      	ldr	r3, [pc, #120]	; (800554c <vTaskStartScheduler+0xb8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054d8:	2301      	movs	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e001      	b.n	80054e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d102      	bne.n	80054ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054e8:	f000 fce8 	bl	8005ebc <xTimerCreateTimerTask>
 80054ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d115      	bne.n	8005520 <vTaskStartScheduler+0x8c>
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005506:	4b12      	ldr	r3, [pc, #72]	; (8005550 <vTaskStartScheduler+0xbc>)
 8005508:	f04f 32ff 	mov.w	r2, #4294967295
 800550c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800550e:	4b11      	ldr	r3, [pc, #68]	; (8005554 <vTaskStartScheduler+0xc0>)
 8005510:	2201      	movs	r2, #1
 8005512:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005514:	4b10      	ldr	r3, [pc, #64]	; (8005558 <vTaskStartScheduler+0xc4>)
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800551a:	f001 f8a1 	bl	8006660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800551e:	e00d      	b.n	800553c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005526:	d109      	bne.n	800553c <vTaskStartScheduler+0xa8>
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	e7fe      	b.n	800553a <vTaskStartScheduler+0xa6>
}
 800553c:	bf00      	nop
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	08007ed8 	.word	0x08007ed8
 8005548:	08005b5d 	.word	0x08005b5d
 800554c:	20000c50 	.word	0x20000c50
 8005550:	20000c4c 	.word	0x20000c4c
 8005554:	20000c38 	.word	0x20000c38
 8005558:	20000c30 	.word	0x20000c30

0800555c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005560:	4b04      	ldr	r3, [pc, #16]	; (8005574 <vTaskSuspendAll+0x18>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3301      	adds	r3, #1
 8005566:	4a03      	ldr	r2, [pc, #12]	; (8005574 <vTaskSuspendAll+0x18>)
 8005568:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800556a:	bf00      	nop
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	20000c54 	.word	0x20000c54

08005578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005582:	2300      	movs	r3, #0
 8005584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005586:	4b41      	ldr	r3, [pc, #260]	; (800568c <xTaskResumeAll+0x114>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <xTaskResumeAll+0x2a>
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	e7fe      	b.n	80055a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055a2:	f001 f8fb 	bl	800679c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055a6:	4b39      	ldr	r3, [pc, #228]	; (800568c <xTaskResumeAll+0x114>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	4a37      	ldr	r2, [pc, #220]	; (800568c <xTaskResumeAll+0x114>)
 80055ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055b0:	4b36      	ldr	r3, [pc, #216]	; (800568c <xTaskResumeAll+0x114>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d162      	bne.n	800567e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055b8:	4b35      	ldr	r3, [pc, #212]	; (8005690 <xTaskResumeAll+0x118>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d05e      	beq.n	800567e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055c0:	e02f      	b.n	8005622 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c2:	4b34      	ldr	r3, [pc, #208]	; (8005694 <xTaskResumeAll+0x11c>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3318      	adds	r3, #24
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff f890 	bl	80046f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff f88b 	bl	80046f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e2:	4b2d      	ldr	r3, [pc, #180]	; (8005698 <xTaskResumeAll+0x120>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d903      	bls.n	80055f2 <xTaskResumeAll+0x7a>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	4a2a      	ldr	r2, [pc, #168]	; (8005698 <xTaskResumeAll+0x120>)
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4a27      	ldr	r2, [pc, #156]	; (800569c <xTaskResumeAll+0x124>)
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3304      	adds	r3, #4
 8005606:	4619      	mov	r1, r3
 8005608:	4610      	mov	r0, r2
 800560a:	f7ff f816 	bl	800463a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005612:	4b23      	ldr	r3, [pc, #140]	; (80056a0 <xTaskResumeAll+0x128>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	429a      	cmp	r2, r3
 800561a:	d302      	bcc.n	8005622 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800561c:	4b21      	ldr	r3, [pc, #132]	; (80056a4 <xTaskResumeAll+0x12c>)
 800561e:	2201      	movs	r2, #1
 8005620:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005622:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <xTaskResumeAll+0x11c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1cb      	bne.n	80055c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005630:	f000 fb46 	bl	8005cc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005634:	4b1c      	ldr	r3, [pc, #112]	; (80056a8 <xTaskResumeAll+0x130>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d010      	beq.n	8005662 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005640:	f000 f846 	bl	80056d0 <xTaskIncrementTick>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800564a:	4b16      	ldr	r3, [pc, #88]	; (80056a4 <xTaskResumeAll+0x12c>)
 800564c:	2201      	movs	r2, #1
 800564e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3b01      	subs	r3, #1
 8005654:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f1      	bne.n	8005640 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800565c:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <xTaskResumeAll+0x130>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005662:	4b10      	ldr	r3, [pc, #64]	; (80056a4 <xTaskResumeAll+0x12c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800566a:	2301      	movs	r3, #1
 800566c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800566e:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <xTaskResumeAll+0x134>)
 8005670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800567e:	f001 f8bb 	bl	80067f8 <vPortExitCritical>

	return xAlreadyYielded;
 8005682:	68bb      	ldr	r3, [r7, #8]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000c54 	.word	0x20000c54
 8005690:	20000c2c 	.word	0x20000c2c
 8005694:	20000bec 	.word	0x20000bec
 8005698:	20000c34 	.word	0x20000c34
 800569c:	2000075c 	.word	0x2000075c
 80056a0:	20000758 	.word	0x20000758
 80056a4:	20000c40 	.word	0x20000c40
 80056a8:	20000c3c 	.word	0x20000c3c
 80056ac:	e000ed04 	.word	0xe000ed04

080056b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <xTaskGetTickCount+0x1c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056bc:	687b      	ldr	r3, [r7, #4]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	20000c30 	.word	0x20000c30

080056d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056da:	4b4e      	ldr	r3, [pc, #312]	; (8005814 <xTaskIncrementTick+0x144>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f040 8088 	bne.w	80057f4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056e4:	4b4c      	ldr	r3, [pc, #304]	; (8005818 <xTaskIncrementTick+0x148>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3301      	adds	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056ec:	4a4a      	ldr	r2, [pc, #296]	; (8005818 <xTaskIncrementTick+0x148>)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d11f      	bne.n	8005738 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80056f8:	4b48      	ldr	r3, [pc, #288]	; (800581c <xTaskIncrementTick+0x14c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <xTaskIncrementTick+0x46>
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	e7fe      	b.n	8005714 <xTaskIncrementTick+0x44>
 8005716:	4b41      	ldr	r3, [pc, #260]	; (800581c <xTaskIncrementTick+0x14c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	4b40      	ldr	r3, [pc, #256]	; (8005820 <xTaskIncrementTick+0x150>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a3e      	ldr	r2, [pc, #248]	; (800581c <xTaskIncrementTick+0x14c>)
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	4a3e      	ldr	r2, [pc, #248]	; (8005820 <xTaskIncrementTick+0x150>)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	4b3e      	ldr	r3, [pc, #248]	; (8005824 <xTaskIncrementTick+0x154>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3301      	adds	r3, #1
 8005730:	4a3c      	ldr	r2, [pc, #240]	; (8005824 <xTaskIncrementTick+0x154>)
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	f000 fac4 	bl	8005cc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005738:	4b3b      	ldr	r3, [pc, #236]	; (8005828 <xTaskIncrementTick+0x158>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	429a      	cmp	r2, r3
 8005740:	d349      	bcc.n	80057d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005742:	4b36      	ldr	r3, [pc, #216]	; (800581c <xTaskIncrementTick+0x14c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800574c:	4b36      	ldr	r3, [pc, #216]	; (8005828 <xTaskIncrementTick+0x158>)
 800574e:	f04f 32ff 	mov.w	r2, #4294967295
 8005752:	601a      	str	r2, [r3, #0]
					break;
 8005754:	e03f      	b.n	80057d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005756:	4b31      	ldr	r3, [pc, #196]	; (800581c <xTaskIncrementTick+0x14c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	429a      	cmp	r2, r3
 800576c:	d203      	bcs.n	8005776 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800576e:	4a2e      	ldr	r2, [pc, #184]	; (8005828 <xTaskIncrementTick+0x158>)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005774:	e02f      	b.n	80057d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	3304      	adds	r3, #4
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe ffba 	bl	80046f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005784:	2b00      	cmp	r3, #0
 8005786:	d004      	beq.n	8005792 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	3318      	adds	r3, #24
 800578c:	4618      	mov	r0, r3
 800578e:	f7fe ffb1 	bl	80046f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005796:	4b25      	ldr	r3, [pc, #148]	; (800582c <xTaskIncrementTick+0x15c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d903      	bls.n	80057a6 <xTaskIncrementTick+0xd6>
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	4a22      	ldr	r2, [pc, #136]	; (800582c <xTaskIncrementTick+0x15c>)
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4a1f      	ldr	r2, [pc, #124]	; (8005830 <xTaskIncrementTick+0x160>)
 80057b4:	441a      	add	r2, r3
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	3304      	adds	r3, #4
 80057ba:	4619      	mov	r1, r3
 80057bc:	4610      	mov	r0, r2
 80057be:	f7fe ff3c 	bl	800463a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <xTaskIncrementTick+0x164>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d3b8      	bcc.n	8005742 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80057d0:	2301      	movs	r3, #1
 80057d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057d4:	e7b5      	b.n	8005742 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057d6:	4b17      	ldr	r3, [pc, #92]	; (8005834 <xTaskIncrementTick+0x164>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057dc:	4914      	ldr	r1, [pc, #80]	; (8005830 <xTaskIncrementTick+0x160>)
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d907      	bls.n	80057fe <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80057ee:	2301      	movs	r3, #1
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	e004      	b.n	80057fe <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057f4:	4b10      	ldr	r3, [pc, #64]	; (8005838 <xTaskIncrementTick+0x168>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3301      	adds	r3, #1
 80057fa:	4a0f      	ldr	r2, [pc, #60]	; (8005838 <xTaskIncrementTick+0x168>)
 80057fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057fe:	4b0f      	ldr	r3, [pc, #60]	; (800583c <xTaskIncrementTick+0x16c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005806:	2301      	movs	r3, #1
 8005808:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800580a:	697b      	ldr	r3, [r7, #20]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20000c54 	.word	0x20000c54
 8005818:	20000c30 	.word	0x20000c30
 800581c:	20000be4 	.word	0x20000be4
 8005820:	20000be8 	.word	0x20000be8
 8005824:	20000c44 	.word	0x20000c44
 8005828:	20000c4c 	.word	0x20000c4c
 800582c:	20000c34 	.word	0x20000c34
 8005830:	2000075c 	.word	0x2000075c
 8005834:	20000758 	.word	0x20000758
 8005838:	20000c3c 	.word	0x20000c3c
 800583c:	20000c40 	.word	0x20000c40

08005840 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005846:	4b27      	ldr	r3, [pc, #156]	; (80058e4 <vTaskSwitchContext+0xa4>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800584e:	4b26      	ldr	r3, [pc, #152]	; (80058e8 <vTaskSwitchContext+0xa8>)
 8005850:	2201      	movs	r2, #1
 8005852:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005854:	e040      	b.n	80058d8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005856:	4b24      	ldr	r3, [pc, #144]	; (80058e8 <vTaskSwitchContext+0xa8>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800585c:	4b23      	ldr	r3, [pc, #140]	; (80058ec <vTaskSwitchContext+0xac>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	e00f      	b.n	8005884 <vTaskSwitchContext+0x44>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d109      	bne.n	800587e <vTaskSwitchContext+0x3e>
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	607b      	str	r3, [r7, #4]
 800587c:	e7fe      	b.n	800587c <vTaskSwitchContext+0x3c>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3b01      	subs	r3, #1
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	491a      	ldr	r1, [pc, #104]	; (80058f0 <vTaskSwitchContext+0xb0>)
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0e5      	beq.n	8005864 <vTaskSwitchContext+0x24>
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <vTaskSwitchContext+0xb0>)
 80058a4:	4413      	add	r3, r2
 80058a6:	60bb      	str	r3, [r7, #8]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	605a      	str	r2, [r3, #4]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	3308      	adds	r3, #8
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d104      	bne.n	80058c8 <vTaskSwitchContext+0x88>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	605a      	str	r2, [r3, #4]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	4a09      	ldr	r2, [pc, #36]	; (80058f4 <vTaskSwitchContext+0xb4>)
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	4a06      	ldr	r2, [pc, #24]	; (80058ec <vTaskSwitchContext+0xac>)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6013      	str	r3, [r2, #0]
}
 80058d8:	bf00      	nop
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	20000c54 	.word	0x20000c54
 80058e8:	20000c40 	.word	0x20000c40
 80058ec:	20000c34 	.word	0x20000c34
 80058f0:	2000075c 	.word	0x2000075c
 80058f4:	20000758 	.word	0x20000758

080058f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <vTaskPlaceOnEventList+0x24>
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	e7fe      	b.n	800591a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800591c:	4b07      	ldr	r3, [pc, #28]	; (800593c <vTaskPlaceOnEventList+0x44>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3318      	adds	r3, #24
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fe feac 	bl	8004682 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800592a:	2101      	movs	r1, #1
 800592c:	6838      	ldr	r0, [r7, #0]
 800592e:	f000 fa71 	bl	8005e14 <prvAddCurrentTaskToDelayedList>
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000758 	.word	0x20000758

08005940 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d109      	bne.n	8005966 <vTaskPlaceOnEventListRestricted+0x26>
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	e7fe      	b.n	8005964 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005966:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <vTaskPlaceOnEventListRestricted+0x50>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3318      	adds	r3, #24
 800596c:	4619      	mov	r1, r3
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f7fe fe63 	bl	800463a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800597a:	f04f 33ff 	mov.w	r3, #4294967295
 800597e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	68b8      	ldr	r0, [r7, #8]
 8005984:	f000 fa46 	bl	8005e14 <prvAddCurrentTaskToDelayedList>
	}
 8005988:	bf00      	nop
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000758 	.word	0x20000758

08005994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d109      	bne.n	80059be <xTaskRemoveFromEventList+0x2a>
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	e7fe      	b.n	80059bc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	3318      	adds	r3, #24
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fe fe96 	bl	80046f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c8:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <xTaskRemoveFromEventList+0xac>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d11d      	bne.n	8005a0c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe fe8d 	bl	80046f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059de:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <xTaskRemoveFromEventList+0xb0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d903      	bls.n	80059ee <xTaskRemoveFromEventList+0x5a>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	4a16      	ldr	r2, [pc, #88]	; (8005a44 <xTaskRemoveFromEventList+0xb0>)
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <xTaskRemoveFromEventList+0xb4>)
 80059fc:	441a      	add	r2, r3
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3304      	adds	r3, #4
 8005a02:	4619      	mov	r1, r3
 8005a04:	4610      	mov	r0, r2
 8005a06:	f7fe fe18 	bl	800463a <vListInsertEnd>
 8005a0a:	e005      	b.n	8005a18 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	3318      	adds	r3, #24
 8005a10:	4619      	mov	r1, r3
 8005a12:	480e      	ldr	r0, [pc, #56]	; (8005a4c <xTaskRemoveFromEventList+0xb8>)
 8005a14:	f7fe fe11 	bl	800463a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <xTaskRemoveFromEventList+0xbc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d905      	bls.n	8005a32 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a2a:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <xTaskRemoveFromEventList+0xc0>)
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e001      	b.n	8005a36 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a36:	697b      	ldr	r3, [r7, #20]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	20000c54 	.word	0x20000c54
 8005a44:	20000c34 	.word	0x20000c34
 8005a48:	2000075c 	.word	0x2000075c
 8005a4c:	20000bec 	.word	0x20000bec
 8005a50:	20000758 	.word	0x20000758
 8005a54:	20000c40 	.word	0x20000c40

08005a58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a60:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <vTaskInternalSetTimeOutState+0x24>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <vTaskInternalSetTimeOutState+0x28>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	605a      	str	r2, [r3, #4]
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	20000c44 	.word	0x20000c44
 8005a80:	20000c30 	.word	0x20000c30

08005a84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <xTaskCheckForTimeOut+0x24>
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	e7fe      	b.n	8005aa6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <xTaskCheckForTimeOut+0x3e>
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	e7fe      	b.n	8005ac0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005ac2:	f000 fe6b 	bl	800679c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ac6:	4b1d      	ldr	r3, [pc, #116]	; (8005b3c <xTaskCheckForTimeOut+0xb8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ade:	d102      	bne.n	8005ae6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	e023      	b.n	8005b2e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <xTaskCheckForTimeOut+0xbc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d007      	beq.n	8005b02 <xTaskCheckForTimeOut+0x7e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d302      	bcc.n	8005b02 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005afc:	2301      	movs	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	e015      	b.n	8005b2e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d20b      	bcs.n	8005b24 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	1ad2      	subs	r2, r2, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff ff9d 	bl	8005a58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	e004      	b.n	8005b2e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b2e:	f000 fe63 	bl	80067f8 <vPortExitCritical>

	return xReturn;
 8005b32:	69fb      	ldr	r3, [r7, #28]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3720      	adds	r7, #32
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20000c30 	.word	0x20000c30
 8005b40:	20000c44 	.word	0x20000c44

08005b44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b48:	4b03      	ldr	r3, [pc, #12]	; (8005b58 <vTaskMissedYield+0x14>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
}
 8005b4e:	bf00      	nop
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	20000c40 	.word	0x20000c40

08005b5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b64:	f000 f852 	bl	8005c0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <prvIdleTask+0x28>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d9f9      	bls.n	8005b64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <prvIdleTask+0x2c>)
 8005b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b80:	e7f0      	b.n	8005b64 <prvIdleTask+0x8>
 8005b82:	bf00      	nop
 8005b84:	2000075c 	.word	0x2000075c
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b92:	2300      	movs	r3, #0
 8005b94:	607b      	str	r3, [r7, #4]
 8005b96:	e00c      	b.n	8005bb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4a12      	ldr	r2, [pc, #72]	; (8005bec <prvInitialiseTaskLists+0x60>)
 8005ba4:	4413      	add	r3, r2
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe fd1a 	bl	80045e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b37      	cmp	r3, #55	; 0x37
 8005bb6:	d9ef      	bls.n	8005b98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bb8:	480d      	ldr	r0, [pc, #52]	; (8005bf0 <prvInitialiseTaskLists+0x64>)
 8005bba:	f7fe fd11 	bl	80045e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bbe:	480d      	ldr	r0, [pc, #52]	; (8005bf4 <prvInitialiseTaskLists+0x68>)
 8005bc0:	f7fe fd0e 	bl	80045e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bc4:	480c      	ldr	r0, [pc, #48]	; (8005bf8 <prvInitialiseTaskLists+0x6c>)
 8005bc6:	f7fe fd0b 	bl	80045e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bca:	480c      	ldr	r0, [pc, #48]	; (8005bfc <prvInitialiseTaskLists+0x70>)
 8005bcc:	f7fe fd08 	bl	80045e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bd0:	480b      	ldr	r0, [pc, #44]	; (8005c00 <prvInitialiseTaskLists+0x74>)
 8005bd2:	f7fe fd05 	bl	80045e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <prvInitialiseTaskLists+0x78>)
 8005bd8:	4a05      	ldr	r2, [pc, #20]	; (8005bf0 <prvInitialiseTaskLists+0x64>)
 8005bda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <prvInitialiseTaskLists+0x7c>)
 8005bde:	4a05      	ldr	r2, [pc, #20]	; (8005bf4 <prvInitialiseTaskLists+0x68>)
 8005be0:	601a      	str	r2, [r3, #0]
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	2000075c 	.word	0x2000075c
 8005bf0:	20000bbc 	.word	0x20000bbc
 8005bf4:	20000bd0 	.word	0x20000bd0
 8005bf8:	20000bec 	.word	0x20000bec
 8005bfc:	20000c00 	.word	0x20000c00
 8005c00:	20000c18 	.word	0x20000c18
 8005c04:	20000be4 	.word	0x20000be4
 8005c08:	20000be8 	.word	0x20000be8

08005c0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c12:	e019      	b.n	8005c48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c14:	f000 fdc2 	bl	800679c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c18:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <prvCheckTasksWaitingTermination+0x4c>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe fd65 	bl	80046f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <prvCheckTasksWaitingTermination+0x50>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	4a0a      	ldr	r2, [pc, #40]	; (8005c5c <prvCheckTasksWaitingTermination+0x50>)
 8005c32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c34:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <prvCheckTasksWaitingTermination+0x54>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <prvCheckTasksWaitingTermination+0x54>)
 8005c3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c3e:	f000 fddb 	bl	80067f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f80e 	bl	8005c64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c48:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <prvCheckTasksWaitingTermination+0x54>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e1      	bne.n	8005c14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000c00 	.word	0x20000c00
 8005c5c:	20000c2c 	.word	0x20000c2c
 8005c60:	20000c14 	.word	0x20000c14

08005c64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d108      	bne.n	8005c88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 ff6a 	bl	8006b54 <vPortFree>
				vPortFree( pxTCB );
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 ff67 	bl	8006b54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c86:	e017      	b.n	8005cb8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d103      	bne.n	8005c9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 ff5e 	bl	8006b54 <vPortFree>
	}
 8005c98:	e00e      	b.n	8005cb8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d009      	beq.n	8005cb8 <prvDeleteTCB+0x54>
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	e7fe      	b.n	8005cb6 <prvDeleteTCB+0x52>
	}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cc6:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <prvResetNextTaskUnblockTime+0x38>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <prvResetNextTaskUnblockTime+0x3c>)
 8005cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cd8:	e008      	b.n	8005cec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cda:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <prvResetNextTaskUnblockTime+0x38>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	4a04      	ldr	r2, [pc, #16]	; (8005cfc <prvResetNextTaskUnblockTime+0x3c>)
 8005cea:	6013      	str	r3, [r2, #0]
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	20000be4 	.word	0x20000be4
 8005cfc:	20000c4c 	.word	0x20000c4c

08005d00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d06:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <xTaskGetSchedulerState+0x34>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d102      	bne.n	8005d14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	607b      	str	r3, [r7, #4]
 8005d12:	e008      	b.n	8005d26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d14:	4b08      	ldr	r3, [pc, #32]	; (8005d38 <xTaskGetSchedulerState+0x38>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	607b      	str	r3, [r7, #4]
 8005d20:	e001      	b.n	8005d26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d22:	2300      	movs	r3, #0
 8005d24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d26:	687b      	ldr	r3, [r7, #4]
	}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	20000c38 	.word	0x20000c38
 8005d38:	20000c54 	.word	0x20000c54

08005d3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d054      	beq.n	8005dfc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d52:	4b2d      	ldr	r3, [pc, #180]	; (8005e08 <xTaskPriorityDisinherit+0xcc>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d009      	beq.n	8005d70 <xTaskPriorityDisinherit+0x34>
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e7fe      	b.n	8005d6e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d109      	bne.n	8005d8c <xTaskPriorityDisinherit+0x50>
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	e7fe      	b.n	8005d8a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d90:	1e5a      	subs	r2, r3, #1
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d02c      	beq.n	8005dfc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d128      	bne.n	8005dfc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe fca0 	bl	80046f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <xTaskPriorityDisinherit+0xd0>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d903      	bls.n	8005ddc <xTaskPriorityDisinherit+0xa0>
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	4a0c      	ldr	r2, [pc, #48]	; (8005e0c <xTaskPriorityDisinherit+0xd0>)
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <xTaskPriorityDisinherit+0xd4>)
 8005dea:	441a      	add	r2, r3
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f7fe fc21 	bl	800463a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005dfc:	697b      	ldr	r3, [r7, #20]
	}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000758 	.word	0x20000758
 8005e0c:	20000c34 	.word	0x20000c34
 8005e10:	2000075c 	.word	0x2000075c

08005e14 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e1e:	4b21      	ldr	r3, [pc, #132]	; (8005ea4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e24:	4b20      	ldr	r3, [pc, #128]	; (8005ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3304      	adds	r3, #4
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe fc62 	bl	80046f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d10a      	bne.n	8005e4e <prvAddCurrentTaskToDelayedList+0x3a>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4619      	mov	r1, r3
 8005e46:	4819      	ldr	r0, [pc, #100]	; (8005eac <prvAddCurrentTaskToDelayedList+0x98>)
 8005e48:	f7fe fbf7 	bl	800463a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e4c:	e026      	b.n	8005e9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4413      	add	r3, r2
 8005e54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e56:	4b14      	ldr	r3, [pc, #80]	; (8005ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d209      	bcs.n	8005e7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e66:	4b12      	ldr	r3, [pc, #72]	; (8005eb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4619      	mov	r1, r3
 8005e72:	4610      	mov	r0, r2
 8005e74:	f7fe fc05 	bl	8004682 <vListInsert>
}
 8005e78:	e010      	b.n	8005e9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4619      	mov	r1, r3
 8005e86:	4610      	mov	r0, r2
 8005e88:	f7fe fbfb 	bl	8004682 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d202      	bcs.n	8005e9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e96:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	6013      	str	r3, [r2, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20000c30 	.word	0x20000c30
 8005ea8:	20000758 	.word	0x20000758
 8005eac:	20000c18 	.word	0x20000c18
 8005eb0:	20000be8 	.word	0x20000be8
 8005eb4:	20000be4 	.word	0x20000be4
 8005eb8:	20000c4c 	.word	0x20000c4c

08005ebc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08a      	sub	sp, #40	; 0x28
 8005ec0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ec6:	f000 faff 	bl	80064c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005eca:	4b1c      	ldr	r3, [pc, #112]	; (8005f3c <xTimerCreateTimerTask+0x80>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d021      	beq.n	8005f16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005eda:	1d3a      	adds	r2, r7, #4
 8005edc:	f107 0108 	add.w	r1, r7, #8
 8005ee0:	f107 030c 	add.w	r3, r7, #12
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe fb61 	bl	80045ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	9202      	str	r2, [sp, #8]
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	460a      	mov	r2, r1
 8005efc:	4910      	ldr	r1, [pc, #64]	; (8005f40 <xTimerCreateTimerTask+0x84>)
 8005efe:	4811      	ldr	r0, [pc, #68]	; (8005f44 <xTimerCreateTimerTask+0x88>)
 8005f00:	f7ff f8f6 	bl	80050f0 <xTaskCreateStatic>
 8005f04:	4602      	mov	r2, r0
 8005f06:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <xTimerCreateTimerTask+0x8c>)
 8005f08:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <xTimerCreateTimerTask+0x8c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f12:	2301      	movs	r3, #1
 8005f14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d109      	bne.n	8005f30 <xTimerCreateTimerTask+0x74>
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	e7fe      	b.n	8005f2e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005f30:	697b      	ldr	r3, [r7, #20]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000c88 	.word	0x20000c88
 8005f40:	08007ee0 	.word	0x08007ee0
 8005f44:	0800607d 	.word	0x0800607d
 8005f48:	20000c8c 	.word	0x20000c8c

08005f4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	; 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d109      	bne.n	8005f78 <xTimerGenericCommand+0x2c>
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	623b      	str	r3, [r7, #32]
 8005f76:	e7fe      	b.n	8005f76 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f78:	4b19      	ldr	r3, [pc, #100]	; (8005fe0 <xTimerGenericCommand+0x94>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d02a      	beq.n	8005fd6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b05      	cmp	r3, #5
 8005f90:	dc18      	bgt.n	8005fc4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f92:	f7ff feb5 	bl	8005d00 <xTaskGetSchedulerState>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d109      	bne.n	8005fb0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f9c:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <xTimerGenericCommand+0x94>)
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	f107 0110 	add.w	r1, r7, #16
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa8:	f7fe fccc 	bl	8004944 <xQueueGenericSend>
 8005fac:	6278      	str	r0, [r7, #36]	; 0x24
 8005fae:	e012      	b.n	8005fd6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <xTimerGenericCommand+0x94>)
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	f107 0110 	add.w	r1, r7, #16
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f7fe fcc2 	bl	8004944 <xQueueGenericSend>
 8005fc0:	6278      	str	r0, [r7, #36]	; 0x24
 8005fc2:	e008      	b.n	8005fd6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <xTimerGenericCommand+0x94>)
 8005fc6:	6818      	ldr	r0, [r3, #0]
 8005fc8:	f107 0110 	add.w	r1, r7, #16
 8005fcc:	2300      	movs	r3, #0
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	f7fe fdb2 	bl	8004b38 <xQueueGenericSendFromISR>
 8005fd4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3728      	adds	r7, #40	; 0x28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20000c88 	.word	0x20000c88

08005fe4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af02      	add	r7, sp, #8
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fee:	4b22      	ldr	r3, [pc, #136]	; (8006078 <prvProcessExpiredTimer+0x94>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fe fb79 	bl	80046f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d021      	beq.n	8006054 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	699a      	ldr	r2, [r3, #24]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	18d1      	adds	r1, r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	6978      	ldr	r0, [r7, #20]
 800601e:	f000 f8d1 	bl	80061c4 <prvInsertTimerInActiveList>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01e      	beq.n	8006066 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006028:	2300      	movs	r3, #0
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	2300      	movs	r3, #0
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	2100      	movs	r1, #0
 8006032:	6978      	ldr	r0, [r7, #20]
 8006034:	f7ff ff8a 	bl	8005f4c <xTimerGenericCommand>
 8006038:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d112      	bne.n	8006066 <prvProcessExpiredTimer+0x82>
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	e7fe      	b.n	8006052 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800605a:	f023 0301 	bic.w	r3, r3, #1
 800605e:	b2da      	uxtb	r2, r3
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	6978      	ldr	r0, [r7, #20]
 800606c:	4798      	blx	r3
}
 800606e:	bf00      	nop
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000c80 	.word	0x20000c80

0800607c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006084:	f107 0308 	add.w	r3, r7, #8
 8006088:	4618      	mov	r0, r3
 800608a:	f000 f857 	bl	800613c <prvGetNextExpireTime>
 800608e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4619      	mov	r1, r3
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 f803 	bl	80060a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800609a:	f000 f8d5 	bl	8006248 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800609e:	e7f1      	b.n	8006084 <prvTimerTask+0x8>

080060a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060aa:	f7ff fa57 	bl	800555c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060ae:	f107 0308 	add.w	r3, r7, #8
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 f866 	bl	8006184 <prvSampleTimeNow>
 80060b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d130      	bne.n	8006122 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <prvProcessTimerOrBlockTask+0x3c>
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d806      	bhi.n	80060dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80060ce:	f7ff fa53 	bl	8005578 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060d2:	68f9      	ldr	r1, [r7, #12]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff ff85 	bl	8005fe4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060da:	e024      	b.n	8006126 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060e2:	4b13      	ldr	r3, [pc, #76]	; (8006130 <prvProcessTimerOrBlockTask+0x90>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <prvProcessTimerOrBlockTask+0x50>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <prvProcessTimerOrBlockTask+0x52>
 80060f0:	2300      	movs	r3, #0
 80060f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <prvProcessTimerOrBlockTask+0x94>)
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	4619      	mov	r1, r3
 8006102:	f7fe ffc1 	bl	8005088 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006106:	f7ff fa37 	bl	8005578 <xTaskResumeAll>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006110:	4b09      	ldr	r3, [pc, #36]	; (8006138 <prvProcessTimerOrBlockTask+0x98>)
 8006112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	f3bf 8f6f 	isb	sy
}
 8006120:	e001      	b.n	8006126 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006122:	f7ff fa29 	bl	8005578 <xTaskResumeAll>
}
 8006126:	bf00      	nop
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000c84 	.word	0x20000c84
 8006134:	20000c88 	.word	0x20000c88
 8006138:	e000ed04 	.word	0xe000ed04

0800613c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006144:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <prvGetNextExpireTime+0x44>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <prvGetNextExpireTime+0x16>
 800614e:	2201      	movs	r2, #1
 8006150:	e000      	b.n	8006154 <prvGetNextExpireTime+0x18>
 8006152:	2200      	movs	r2, #0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d105      	bne.n	800616c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006160:	4b07      	ldr	r3, [pc, #28]	; (8006180 <prvGetNextExpireTime+0x44>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	e001      	b.n	8006170 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006170:	68fb      	ldr	r3, [r7, #12]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	20000c80 	.word	0x20000c80

08006184 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800618c:	f7ff fa90 	bl	80056b0 <xTaskGetTickCount>
 8006190:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006192:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <prvSampleTimeNow+0x3c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	429a      	cmp	r2, r3
 800619a:	d205      	bcs.n	80061a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800619c:	f000 f930 	bl	8006400 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e002      	b.n	80061ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061ae:	4a04      	ldr	r2, [pc, #16]	; (80061c0 <prvSampleTimeNow+0x3c>)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061b4:	68fb      	ldr	r3, [r7, #12]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000c90 	.word	0x20000c90

080061c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d812      	bhi.n	8006210 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	1ad2      	subs	r2, r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d302      	bcc.n	80061fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061f8:	2301      	movs	r3, #1
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	e01b      	b.n	8006236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061fe:	4b10      	ldr	r3, [pc, #64]	; (8006240 <prvInsertTimerInActiveList+0x7c>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3304      	adds	r3, #4
 8006206:	4619      	mov	r1, r3
 8006208:	4610      	mov	r0, r2
 800620a:	f7fe fa3a 	bl	8004682 <vListInsert>
 800620e:	e012      	b.n	8006236 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d206      	bcs.n	8006226 <prvInsertTimerInActiveList+0x62>
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d302      	bcc.n	8006226 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006220:	2301      	movs	r3, #1
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	e007      	b.n	8006236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006226:	4b07      	ldr	r3, [pc, #28]	; (8006244 <prvInsertTimerInActiveList+0x80>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3304      	adds	r3, #4
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f7fe fa26 	bl	8004682 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006236:	697b      	ldr	r3, [r7, #20]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20000c84 	.word	0x20000c84
 8006244:	20000c80 	.word	0x20000c80

08006248 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08e      	sub	sp, #56	; 0x38
 800624c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800624e:	e0c6      	b.n	80063de <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	da17      	bge.n	8006286 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006256:	1d3b      	adds	r3, r7, #4
 8006258:	3304      	adds	r3, #4
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d109      	bne.n	8006276 <prvProcessReceivedCommands+0x2e>
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	e7fe      	b.n	8006274 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800627c:	6850      	ldr	r0, [r2, #4]
 800627e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006280:	6892      	ldr	r2, [r2, #8]
 8006282:	4611      	mov	r1, r2
 8006284:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f2c0 80a7 	blt.w	80063dc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d004      	beq.n	80062a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	3304      	adds	r3, #4
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fe fa28 	bl	80046f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062a4:	463b      	mov	r3, r7
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff ff6c 	bl	8006184 <prvSampleTimeNow>
 80062ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b09      	cmp	r3, #9
 80062b2:	f200 8094 	bhi.w	80063de <prvProcessReceivedCommands+0x196>
 80062b6:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <prvProcessReceivedCommands+0x74>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	080062e5 	.word	0x080062e5
 80062c0:	080062e5 	.word	0x080062e5
 80062c4:	080062e5 	.word	0x080062e5
 80062c8:	08006357 	.word	0x08006357
 80062cc:	0800636b 	.word	0x0800636b
 80062d0:	080063b3 	.word	0x080063b3
 80062d4:	080062e5 	.word	0x080062e5
 80062d8:	080062e5 	.word	0x080062e5
 80062dc:	08006357 	.word	0x08006357
 80062e0:	0800636b 	.word	0x0800636b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	18d1      	adds	r1, r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006304:	f7ff ff5e 	bl	80061c4 <prvInsertTimerInActiveList>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d067      	beq.n	80063de <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006314:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d05c      	beq.n	80063de <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	441a      	add	r2, r3
 800632c:	2300      	movs	r3, #0
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	2300      	movs	r3, #0
 8006332:	2100      	movs	r1, #0
 8006334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006336:	f7ff fe09 	bl	8005f4c <xTimerGenericCommand>
 800633a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d14d      	bne.n	80063de <prvProcessReceivedCommands+0x196>
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	61bb      	str	r3, [r7, #24]
 8006354:	e7fe      	b.n	8006354 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800635c:	f023 0301 	bic.w	r3, r3, #1
 8006360:	b2da      	uxtb	r2, r3
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006368:	e039      	b.n	80063de <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	b2da      	uxtb	r2, r3
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <prvProcessReceivedCommands+0x156>
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	e7fe      	b.n	800639c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	18d1      	adds	r1, r2, r3
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ac:	f7ff ff0a 	bl	80061c4 <prvInsertTimerInActiveList>
					break;
 80063b0:	e015      	b.n	80063de <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d103      	bne.n	80063c8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80063c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063c2:	f000 fbc7 	bl	8006b54 <vPortFree>
 80063c6:	e00a      	b.n	80063de <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063da:	e000      	b.n	80063de <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80063dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063de:	4b07      	ldr	r3, [pc, #28]	; (80063fc <prvProcessReceivedCommands+0x1b4>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	1d39      	adds	r1, r7, #4
 80063e4:	2200      	movs	r2, #0
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe fc3a 	bl	8004c60 <xQueueReceive>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f47f af2e 	bne.w	8006250 <prvProcessReceivedCommands+0x8>
	}
}
 80063f4:	bf00      	nop
 80063f6:	3730      	adds	r7, #48	; 0x30
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000c88 	.word	0x20000c88

08006400 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006406:	e047      	b.n	8006498 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006408:	4b2d      	ldr	r3, [pc, #180]	; (80064c0 <prvSwitchTimerLists+0xc0>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006412:	4b2b      	ldr	r3, [pc, #172]	; (80064c0 <prvSwitchTimerLists+0xc0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3304      	adds	r3, #4
 8006420:	4618      	mov	r0, r3
 8006422:	f7fe f967 	bl	80046f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b00      	cmp	r3, #0
 800643a:	d02d      	beq.n	8006498 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4413      	add	r3, r2
 8006444:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	429a      	cmp	r2, r3
 800644c:	d90e      	bls.n	800646c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800645a:	4b19      	ldr	r3, [pc, #100]	; (80064c0 <prvSwitchTimerLists+0xc0>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3304      	adds	r3, #4
 8006462:	4619      	mov	r1, r3
 8006464:	4610      	mov	r0, r2
 8006466:	f7fe f90c 	bl	8004682 <vListInsert>
 800646a:	e015      	b.n	8006498 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800646c:	2300      	movs	r3, #0
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	2300      	movs	r3, #0
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	2100      	movs	r1, #0
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f7ff fd68 	bl	8005f4c <xTimerGenericCommand>
 800647c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d109      	bne.n	8006498 <prvSwitchTimerLists+0x98>
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	603b      	str	r3, [r7, #0]
 8006496:	e7fe      	b.n	8006496 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006498:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <prvSwitchTimerLists+0xc0>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1b2      	bne.n	8006408 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064a2:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <prvSwitchTimerLists+0xc0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064a8:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <prvSwitchTimerLists+0xc4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a04      	ldr	r2, [pc, #16]	; (80064c0 <prvSwitchTimerLists+0xc0>)
 80064ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064b0:	4a04      	ldr	r2, [pc, #16]	; (80064c4 <prvSwitchTimerLists+0xc4>)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	6013      	str	r3, [r2, #0]
}
 80064b6:	bf00      	nop
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000c80 	.word	0x20000c80
 80064c4:	20000c84 	.word	0x20000c84

080064c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064ce:	f000 f965 	bl	800679c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064d2:	4b15      	ldr	r3, [pc, #84]	; (8006528 <prvCheckForValidListAndQueue+0x60>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d120      	bne.n	800651c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064da:	4814      	ldr	r0, [pc, #80]	; (800652c <prvCheckForValidListAndQueue+0x64>)
 80064dc:	f7fe f880 	bl	80045e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064e0:	4813      	ldr	r0, [pc, #76]	; (8006530 <prvCheckForValidListAndQueue+0x68>)
 80064e2:	f7fe f87d 	bl	80045e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064e6:	4b13      	ldr	r3, [pc, #76]	; (8006534 <prvCheckForValidListAndQueue+0x6c>)
 80064e8:	4a10      	ldr	r2, [pc, #64]	; (800652c <prvCheckForValidListAndQueue+0x64>)
 80064ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064ec:	4b12      	ldr	r3, [pc, #72]	; (8006538 <prvCheckForValidListAndQueue+0x70>)
 80064ee:	4a10      	ldr	r2, [pc, #64]	; (8006530 <prvCheckForValidListAndQueue+0x68>)
 80064f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064f2:	2300      	movs	r3, #0
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	4b11      	ldr	r3, [pc, #68]	; (800653c <prvCheckForValidListAndQueue+0x74>)
 80064f8:	4a11      	ldr	r2, [pc, #68]	; (8006540 <prvCheckForValidListAndQueue+0x78>)
 80064fa:	2110      	movs	r1, #16
 80064fc:	200a      	movs	r0, #10
 80064fe:	f7fe f98b 	bl	8004818 <xQueueGenericCreateStatic>
 8006502:	4602      	mov	r2, r0
 8006504:	4b08      	ldr	r3, [pc, #32]	; (8006528 <prvCheckForValidListAndQueue+0x60>)
 8006506:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006508:	4b07      	ldr	r3, [pc, #28]	; (8006528 <prvCheckForValidListAndQueue+0x60>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <prvCheckForValidListAndQueue+0x60>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	490b      	ldr	r1, [pc, #44]	; (8006544 <prvCheckForValidListAndQueue+0x7c>)
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fd8e 	bl	8005038 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800651c:	f000 f96c 	bl	80067f8 <vPortExitCritical>
}
 8006520:	bf00      	nop
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20000c88 	.word	0x20000c88
 800652c:	20000c58 	.word	0x20000c58
 8006530:	20000c6c 	.word	0x20000c6c
 8006534:	20000c80 	.word	0x20000c80
 8006538:	20000c84 	.word	0x20000c84
 800653c:	20000d34 	.word	0x20000d34
 8006540:	20000c94 	.word	0x20000c94
 8006544:	08007ee8 	.word	0x08007ee8

08006548 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3b04      	subs	r3, #4
 8006558:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3b04      	subs	r3, #4
 8006566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f023 0201 	bic.w	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3b04      	subs	r3, #4
 8006576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006578:	4a0c      	ldr	r2, [pc, #48]	; (80065ac <pxPortInitialiseStack+0x64>)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3b14      	subs	r3, #20
 8006582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3b04      	subs	r3, #4
 800658e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f06f 0202 	mvn.w	r2, #2
 8006596:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3b20      	subs	r3, #32
 800659c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800659e:	68fb      	ldr	r3, [r7, #12]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	080065b1 	.word	0x080065b1

080065b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065ba:	4b11      	ldr	r3, [pc, #68]	; (8006600 <prvTaskExitError+0x50>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c2:	d009      	beq.n	80065d8 <prvTaskExitError+0x28>
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e7fe      	b.n	80065d6 <prvTaskExitError+0x26>
 80065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065ea:	bf00      	nop
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0fc      	beq.n	80065ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065f2:	bf00      	nop
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	2000000c 	.word	0x2000000c
	...

08006610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <pxCurrentTCBConst2>)
 8006612:	6819      	ldr	r1, [r3, #0]
 8006614:	6808      	ldr	r0, [r1, #0]
 8006616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661a:	f380 8809 	msr	PSP, r0
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f04f 0000 	mov.w	r0, #0
 8006626:	f380 8811 	msr	BASEPRI, r0
 800662a:	4770      	bx	lr
 800662c:	f3af 8000 	nop.w

08006630 <pxCurrentTCBConst2>:
 8006630:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop

08006638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006638:	4808      	ldr	r0, [pc, #32]	; (800665c <prvPortStartFirstTask+0x24>)
 800663a:	6800      	ldr	r0, [r0, #0]
 800663c:	6800      	ldr	r0, [r0, #0]
 800663e:	f380 8808 	msr	MSP, r0
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	f380 8814 	msr	CONTROL, r0
 800664a:	b662      	cpsie	i
 800664c:	b661      	cpsie	f
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	df00      	svc	0
 8006658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800665a:	bf00      	nop
 800665c:	e000ed08 	.word	0xe000ed08

08006660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006666:	4b44      	ldr	r3, [pc, #272]	; (8006778 <xPortStartScheduler+0x118>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a44      	ldr	r2, [pc, #272]	; (800677c <xPortStartScheduler+0x11c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d109      	bne.n	8006684 <xPortStartScheduler+0x24>
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	e7fe      	b.n	8006682 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006684:	4b3c      	ldr	r3, [pc, #240]	; (8006778 <xPortStartScheduler+0x118>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a3d      	ldr	r2, [pc, #244]	; (8006780 <xPortStartScheduler+0x120>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d109      	bne.n	80066a2 <xPortStartScheduler+0x42>
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	e7fe      	b.n	80066a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066a2:	4b38      	ldr	r3, [pc, #224]	; (8006784 <xPortStartScheduler+0x124>)
 80066a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	22ff      	movs	r2, #255	; 0xff
 80066b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	4b30      	ldr	r3, [pc, #192]	; (8006788 <xPortStartScheduler+0x128>)
 80066c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066ca:	4b30      	ldr	r3, [pc, #192]	; (800678c <xPortStartScheduler+0x12c>)
 80066cc:	2207      	movs	r2, #7
 80066ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066d0:	e009      	b.n	80066e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80066d2:	4b2e      	ldr	r3, [pc, #184]	; (800678c <xPortStartScheduler+0x12c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	4a2c      	ldr	r2, [pc, #176]	; (800678c <xPortStartScheduler+0x12c>)
 80066da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ee:	2b80      	cmp	r3, #128	; 0x80
 80066f0:	d0ef      	beq.n	80066d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066f2:	4b26      	ldr	r3, [pc, #152]	; (800678c <xPortStartScheduler+0x12c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f1c3 0307 	rsb	r3, r3, #7
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d009      	beq.n	8006712 <xPortStartScheduler+0xb2>
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	60bb      	str	r3, [r7, #8]
 8006710:	e7fe      	b.n	8006710 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006712:	4b1e      	ldr	r3, [pc, #120]	; (800678c <xPortStartScheduler+0x12c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	4a1c      	ldr	r2, [pc, #112]	; (800678c <xPortStartScheduler+0x12c>)
 800671a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800671c:	4b1b      	ldr	r3, [pc, #108]	; (800678c <xPortStartScheduler+0x12c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006724:	4a19      	ldr	r2, [pc, #100]	; (800678c <xPortStartScheduler+0x12c>)
 8006726:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	b2da      	uxtb	r2, r3
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006730:	4b17      	ldr	r3, [pc, #92]	; (8006790 <xPortStartScheduler+0x130>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a16      	ldr	r2, [pc, #88]	; (8006790 <xPortStartScheduler+0x130>)
 8006736:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800673a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800673c:	4b14      	ldr	r3, [pc, #80]	; (8006790 <xPortStartScheduler+0x130>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a13      	ldr	r2, [pc, #76]	; (8006790 <xPortStartScheduler+0x130>)
 8006742:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006746:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006748:	f000 f8d6 	bl	80068f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800674c:	4b11      	ldr	r3, [pc, #68]	; (8006794 <xPortStartScheduler+0x134>)
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006752:	f000 f8f5 	bl	8006940 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006756:	4b10      	ldr	r3, [pc, #64]	; (8006798 <xPortStartScheduler+0x138>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a0f      	ldr	r2, [pc, #60]	; (8006798 <xPortStartScheduler+0x138>)
 800675c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006760:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006762:	f7ff ff69 	bl	8006638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006766:	f7ff f86b 	bl	8005840 <vTaskSwitchContext>
	prvTaskExitError();
 800676a:	f7ff ff21 	bl	80065b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	e000ed00 	.word	0xe000ed00
 800677c:	410fc271 	.word	0x410fc271
 8006780:	410fc270 	.word	0x410fc270
 8006784:	e000e400 	.word	0xe000e400
 8006788:	20000d84 	.word	0x20000d84
 800678c:	20000d88 	.word	0x20000d88
 8006790:	e000ed20 	.word	0xe000ed20
 8006794:	2000000c 	.word	0x2000000c
 8006798:	e000ef34 	.word	0xe000ef34

0800679c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067b4:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <vPortEnterCritical+0x54>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3301      	adds	r3, #1
 80067ba:	4a0d      	ldr	r2, [pc, #52]	; (80067f0 <vPortEnterCritical+0x54>)
 80067bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067be:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <vPortEnterCritical+0x54>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d10e      	bne.n	80067e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067c6:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <vPortEnterCritical+0x58>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d009      	beq.n	80067e4 <vPortEnterCritical+0x48>
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	e7fe      	b.n	80067e2 <vPortEnterCritical+0x46>
	}
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	2000000c 	.word	0x2000000c
 80067f4:	e000ed04 	.word	0xe000ed04

080067f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067fe:	4b11      	ldr	r3, [pc, #68]	; (8006844 <vPortExitCritical+0x4c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d109      	bne.n	800681a <vPortExitCritical+0x22>
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	607b      	str	r3, [r7, #4]
 8006818:	e7fe      	b.n	8006818 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800681a:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <vPortExitCritical+0x4c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3b01      	subs	r3, #1
 8006820:	4a08      	ldr	r2, [pc, #32]	; (8006844 <vPortExitCritical+0x4c>)
 8006822:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006824:	4b07      	ldr	r3, [pc, #28]	; (8006844 <vPortExitCritical+0x4c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <vPortExitCritical+0x3e>
 800682c:	2300      	movs	r3, #0
 800682e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	2000000c 	.word	0x2000000c
	...

08006850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006850:	f3ef 8009 	mrs	r0, PSP
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <pxCurrentTCBConst>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	f01e 0f10 	tst.w	lr, #16
 8006860:	bf08      	it	eq
 8006862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686a:	6010      	str	r0, [r2, #0]
 800686c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006874:	f380 8811 	msr	BASEPRI, r0
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f7fe ffde 	bl	8005840 <vTaskSwitchContext>
 8006884:	f04f 0000 	mov.w	r0, #0
 8006888:	f380 8811 	msr	BASEPRI, r0
 800688c:	bc09      	pop	{r0, r3}
 800688e:	6819      	ldr	r1, [r3, #0]
 8006890:	6808      	ldr	r0, [r1, #0]
 8006892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006896:	f01e 0f10 	tst.w	lr, #16
 800689a:	bf08      	it	eq
 800689c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068a0:	f380 8809 	msr	PSP, r0
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	f3af 8000 	nop.w

080068b0 <pxCurrentTCBConst>:
 80068b0:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop

080068b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068d0:	f7fe fefe 	bl	80056d0 <xTaskIncrementTick>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068da:	4b06      	ldr	r3, [pc, #24]	; (80068f4 <SysTick_Handler+0x3c>)
 80068dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	2300      	movs	r3, #0
 80068e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <vPortSetupTimerInterrupt+0x34>)
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006902:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <vPortSetupTimerInterrupt+0x38>)
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006908:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <vPortSetupTimerInterrupt+0x3c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a0a      	ldr	r2, [pc, #40]	; (8006938 <vPortSetupTimerInterrupt+0x40>)
 800690e:	fba2 2303 	umull	r2, r3, r2, r3
 8006912:	099b      	lsrs	r3, r3, #6
 8006914:	4a09      	ldr	r2, [pc, #36]	; (800693c <vPortSetupTimerInterrupt+0x44>)
 8006916:	3b01      	subs	r3, #1
 8006918:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800691a:	4b04      	ldr	r3, [pc, #16]	; (800692c <vPortSetupTimerInterrupt+0x34>)
 800691c:	2207      	movs	r2, #7
 800691e:	601a      	str	r2, [r3, #0]
}
 8006920:	bf00      	nop
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	e000e010 	.word	0xe000e010
 8006930:	e000e018 	.word	0xe000e018
 8006934:	20000000 	.word	0x20000000
 8006938:	10624dd3 	.word	0x10624dd3
 800693c:	e000e014 	.word	0xe000e014

08006940 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006940:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006950 <vPortEnableVFP+0x10>
 8006944:	6801      	ldr	r1, [r0, #0]
 8006946:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800694a:	6001      	str	r1, [r0, #0]
 800694c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800694e:	bf00      	nop
 8006950:	e000ed88 	.word	0xe000ed88

08006954 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800695a:	f3ef 8305 	mrs	r3, IPSR
 800695e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b0f      	cmp	r3, #15
 8006964:	d913      	bls.n	800698e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006966:	4a16      	ldr	r2, [pc, #88]	; (80069c0 <vPortValidateInterruptPriority+0x6c>)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4413      	add	r3, r2
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006970:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <vPortValidateInterruptPriority+0x70>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	7afa      	ldrb	r2, [r7, #11]
 8006976:	429a      	cmp	r2, r3
 8006978:	d209      	bcs.n	800698e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	607b      	str	r3, [r7, #4]
 800698c:	e7fe      	b.n	800698c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800698e:	4b0e      	ldr	r3, [pc, #56]	; (80069c8 <vPortValidateInterruptPriority+0x74>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006996:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <vPortValidateInterruptPriority+0x78>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d909      	bls.n	80069b2 <vPortValidateInterruptPriority+0x5e>
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	603b      	str	r3, [r7, #0]
 80069b0:	e7fe      	b.n	80069b0 <vPortValidateInterruptPriority+0x5c>
	}
 80069b2:	bf00      	nop
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	e000e3f0 	.word	0xe000e3f0
 80069c4:	20000d84 	.word	0x20000d84
 80069c8:	e000ed0c 	.word	0xe000ed0c
 80069cc:	20000d88 	.word	0x20000d88

080069d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	; 0x28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069d8:	2300      	movs	r3, #0
 80069da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069dc:	f7fe fdbe 	bl	800555c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069e0:	4b57      	ldr	r3, [pc, #348]	; (8006b40 <pvPortMalloc+0x170>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069e8:	f000 f90c 	bl	8006c04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069ec:	4b55      	ldr	r3, [pc, #340]	; (8006b44 <pvPortMalloc+0x174>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f040 808c 	bne.w	8006b12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01c      	beq.n	8006a3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006a00:	2208      	movs	r2, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4413      	add	r3, r2
 8006a06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d013      	beq.n	8006a3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f023 0307 	bic.w	r3, r3, #7
 8006a18:	3308      	adds	r3, #8
 8006a1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <pvPortMalloc+0x6a>
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	e7fe      	b.n	8006a38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d068      	beq.n	8006b12 <pvPortMalloc+0x142>
 8006a40:	4b41      	ldr	r3, [pc, #260]	; (8006b48 <pvPortMalloc+0x178>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d863      	bhi.n	8006b12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a4a:	4b40      	ldr	r3, [pc, #256]	; (8006b4c <pvPortMalloc+0x17c>)
 8006a4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a4e:	4b3f      	ldr	r3, [pc, #252]	; (8006b4c <pvPortMalloc+0x17c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a54:	e004      	b.n	8006a60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d903      	bls.n	8006a72 <pvPortMalloc+0xa2>
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f1      	bne.n	8006a56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a72:	4b33      	ldr	r3, [pc, #204]	; (8006b40 <pvPortMalloc+0x170>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d04a      	beq.n	8006b12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2208      	movs	r2, #8
 8006a82:	4413      	add	r3, r2
 8006a84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	1ad2      	subs	r2, r2, r3
 8006a96:	2308      	movs	r3, #8
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d91e      	bls.n	8006adc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d009      	beq.n	8006ac4 <pvPortMalloc+0xf4>
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	e7fe      	b.n	8006ac2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	1ad2      	subs	r2, r2, r3
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ad6:	69b8      	ldr	r0, [r7, #24]
 8006ad8:	f000 f8f6 	bl	8006cc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006adc:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <pvPortMalloc+0x178>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	4a18      	ldr	r2, [pc, #96]	; (8006b48 <pvPortMalloc+0x178>)
 8006ae8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aea:	4b17      	ldr	r3, [pc, #92]	; (8006b48 <pvPortMalloc+0x178>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4b18      	ldr	r3, [pc, #96]	; (8006b50 <pvPortMalloc+0x180>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d203      	bcs.n	8006afe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <pvPortMalloc+0x178>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a15      	ldr	r2, [pc, #84]	; (8006b50 <pvPortMalloc+0x180>)
 8006afc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	4b10      	ldr	r3, [pc, #64]	; (8006b44 <pvPortMalloc+0x174>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b12:	f7fe fd31 	bl	8005578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d009      	beq.n	8006b34 <pvPortMalloc+0x164>
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	e7fe      	b.n	8006b32 <pvPortMalloc+0x162>
	return pvReturn;
 8006b34:	69fb      	ldr	r3, [r7, #28]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3728      	adds	r7, #40	; 0x28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20001994 	.word	0x20001994
 8006b44:	200019a0 	.word	0x200019a0
 8006b48:	20001998 	.word	0x20001998
 8006b4c:	2000198c 	.word	0x2000198c
 8006b50:	2000199c 	.word	0x2000199c

08006b54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d046      	beq.n	8006bf4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b66:	2308      	movs	r3, #8
 8006b68:	425b      	negs	r3, r3
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	4b20      	ldr	r3, [pc, #128]	; (8006bfc <vPortFree+0xa8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d109      	bne.n	8006b96 <vPortFree+0x42>
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	e7fe      	b.n	8006b94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d009      	beq.n	8006bb2 <vPortFree+0x5e>
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	60bb      	str	r3, [r7, #8]
 8006bb0:	e7fe      	b.n	8006bb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	4b11      	ldr	r3, [pc, #68]	; (8006bfc <vPortFree+0xa8>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d019      	beq.n	8006bf4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d115      	bne.n	8006bf4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <vPortFree+0xa8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	401a      	ands	r2, r3
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bd8:	f7fe fcc0 	bl	800555c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <vPortFree+0xac>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4413      	add	r3, r2
 8006be6:	4a06      	ldr	r2, [pc, #24]	; (8006c00 <vPortFree+0xac>)
 8006be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bea:	6938      	ldr	r0, [r7, #16]
 8006bec:	f000 f86c 	bl	8006cc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006bf0:	f7fe fcc2 	bl	8005578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bf4:	bf00      	nop
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	200019a0 	.word	0x200019a0
 8006c00:	20001998 	.word	0x20001998

08006c04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c10:	4b27      	ldr	r3, [pc, #156]	; (8006cb0 <prvHeapInit+0xac>)
 8006c12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00c      	beq.n	8006c38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3307      	adds	r3, #7
 8006c22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0307 	bic.w	r3, r3, #7
 8006c2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	4a1f      	ldr	r2, [pc, #124]	; (8006cb0 <prvHeapInit+0xac>)
 8006c34:	4413      	add	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c3c:	4a1d      	ldr	r2, [pc, #116]	; (8006cb4 <prvHeapInit+0xb0>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c42:	4b1c      	ldr	r3, [pc, #112]	; (8006cb4 <prvHeapInit+0xb0>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c50:	2208      	movs	r2, #8
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0307 	bic.w	r3, r3, #7
 8006c5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4a15      	ldr	r2, [pc, #84]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c66:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c6e:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	1ad2      	subs	r2, r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c84:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <prvHeapInit+0xb8>)
 8006c92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4a09      	ldr	r2, [pc, #36]	; (8006cc0 <prvHeapInit+0xbc>)
 8006c9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c9c:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <prvHeapInit+0xc0>)
 8006c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	20000d8c 	.word	0x20000d8c
 8006cb4:	2000198c 	.word	0x2000198c
 8006cb8:	20001994 	.word	0x20001994
 8006cbc:	2000199c 	.word	0x2000199c
 8006cc0:	20001998 	.word	0x20001998
 8006cc4:	200019a0 	.word	0x200019a0

08006cc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cd0:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <prvInsertBlockIntoFreeList+0xac>)
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	e002      	b.n	8006cdc <prvInsertBlockIntoFreeList+0x14>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d8f7      	bhi.n	8006cd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d108      	bne.n	8006d0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	441a      	add	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	441a      	add	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d118      	bne.n	8006d50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <prvInsertBlockIntoFreeList+0xb0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d00d      	beq.n	8006d46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	441a      	add	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e008      	b.n	8006d58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d46:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <prvInsertBlockIntoFreeList+0xb0>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e003      	b.n	8006d58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d002      	beq.n	8006d66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	2000198c 	.word	0x2000198c
 8006d78:	20001994 	.word	0x20001994

08006d7c <__errno>:
 8006d7c:	4b01      	ldr	r3, [pc, #4]	; (8006d84 <__errno+0x8>)
 8006d7e:	6818      	ldr	r0, [r3, #0]
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20000010 	.word	0x20000010

08006d88 <__libc_init_array>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	4e0d      	ldr	r6, [pc, #52]	; (8006dc0 <__libc_init_array+0x38>)
 8006d8c:	4c0d      	ldr	r4, [pc, #52]	; (8006dc4 <__libc_init_array+0x3c>)
 8006d8e:	1ba4      	subs	r4, r4, r6
 8006d90:	10a4      	asrs	r4, r4, #2
 8006d92:	2500      	movs	r5, #0
 8006d94:	42a5      	cmp	r5, r4
 8006d96:	d109      	bne.n	8006dac <__libc_init_array+0x24>
 8006d98:	4e0b      	ldr	r6, [pc, #44]	; (8006dc8 <__libc_init_array+0x40>)
 8006d9a:	4c0c      	ldr	r4, [pc, #48]	; (8006dcc <__libc_init_array+0x44>)
 8006d9c:	f001 f882 	bl	8007ea4 <_init>
 8006da0:	1ba4      	subs	r4, r4, r6
 8006da2:	10a4      	asrs	r4, r4, #2
 8006da4:	2500      	movs	r5, #0
 8006da6:	42a5      	cmp	r5, r4
 8006da8:	d105      	bne.n	8006db6 <__libc_init_array+0x2e>
 8006daa:	bd70      	pop	{r4, r5, r6, pc}
 8006dac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006db0:	4798      	blx	r3
 8006db2:	3501      	adds	r5, #1
 8006db4:	e7ee      	b.n	8006d94 <__libc_init_array+0xc>
 8006db6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dba:	4798      	blx	r3
 8006dbc:	3501      	adds	r5, #1
 8006dbe:	e7f2      	b.n	8006da6 <__libc_init_array+0x1e>
 8006dc0:	08007fa0 	.word	0x08007fa0
 8006dc4:	08007fa0 	.word	0x08007fa0
 8006dc8:	08007fa0 	.word	0x08007fa0
 8006dcc:	08007fa4 	.word	0x08007fa4

08006dd0 <memcpy>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	1e43      	subs	r3, r0, #1
 8006dd4:	440a      	add	r2, r1
 8006dd6:	4291      	cmp	r1, r2
 8006dd8:	d100      	bne.n	8006ddc <memcpy+0xc>
 8006dda:	bd10      	pop	{r4, pc}
 8006ddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006de0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006de4:	e7f7      	b.n	8006dd6 <memcpy+0x6>

08006de6 <memset>:
 8006de6:	4402      	add	r2, r0
 8006de8:	4603      	mov	r3, r0
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d100      	bne.n	8006df0 <memset+0xa>
 8006dee:	4770      	bx	lr
 8006df0:	f803 1b01 	strb.w	r1, [r3], #1
 8006df4:	e7f9      	b.n	8006dea <memset+0x4>
	...

08006df8 <pow>:
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	ed2d 8b04 	vpush	{d8-d9}
 8006e00:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80070d4 <pow+0x2dc>
 8006e04:	b08d      	sub	sp, #52	; 0x34
 8006e06:	ec57 6b10 	vmov	r6, r7, d0
 8006e0a:	ec55 4b11 	vmov	r4, r5, d1
 8006e0e:	f000 f963 	bl	80070d8 <__ieee754_pow>
 8006e12:	f999 3000 	ldrsb.w	r3, [r9]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	eeb0 8a40 	vmov.f32	s16, s0
 8006e1e:	eef0 8a60 	vmov.f32	s17, s1
 8006e22:	46c8      	mov	r8, r9
 8006e24:	d05f      	beq.n	8006ee6 <pow+0xee>
 8006e26:	4622      	mov	r2, r4
 8006e28:	462b      	mov	r3, r5
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f7f9 fe4d 	bl	8000acc <__aeabi_dcmpun>
 8006e32:	4683      	mov	fp, r0
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d156      	bne.n	8006ee6 <pow+0xee>
 8006e38:	4632      	mov	r2, r6
 8006e3a:	463b      	mov	r3, r7
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	4639      	mov	r1, r7
 8006e40:	f7f9 fe44 	bl	8000acc <__aeabi_dcmpun>
 8006e44:	9001      	str	r0, [sp, #4]
 8006e46:	b1e8      	cbz	r0, 8006e84 <pow+0x8c>
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	4629      	mov	r1, r5
 8006e50:	f7f9 fe0a 	bl	8000a68 <__aeabi_dcmpeq>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d046      	beq.n	8006ee6 <pow+0xee>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	9302      	str	r3, [sp, #8]
 8006e5c:	4b96      	ldr	r3, [pc, #600]	; (80070b8 <pow+0x2c0>)
 8006e5e:	9303      	str	r3, [sp, #12]
 8006e60:	4b96      	ldr	r3, [pc, #600]	; (80070bc <pow+0x2c4>)
 8006e62:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006e66:	2200      	movs	r2, #0
 8006e68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e6c:	9b00      	ldr	r3, [sp, #0]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006e74:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006e78:	d033      	beq.n	8006ee2 <pow+0xea>
 8006e7a:	a802      	add	r0, sp, #8
 8006e7c:	f000 fefb 	bl	8007c76 <matherr>
 8006e80:	bb48      	cbnz	r0, 8006ed6 <pow+0xde>
 8006e82:	e05d      	b.n	8006f40 <pow+0x148>
 8006e84:	f04f 0a00 	mov.w	sl, #0
 8006e88:	f04f 0b00 	mov.w	fp, #0
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	465b      	mov	r3, fp
 8006e90:	4630      	mov	r0, r6
 8006e92:	4639      	mov	r1, r7
 8006e94:	f7f9 fde8 	bl	8000a68 <__aeabi_dcmpeq>
 8006e98:	ec4b ab19 	vmov	d9, sl, fp
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d054      	beq.n	8006f4a <pow+0x152>
 8006ea0:	4652      	mov	r2, sl
 8006ea2:	465b      	mov	r3, fp
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7f9 fdde 	bl	8000a68 <__aeabi_dcmpeq>
 8006eac:	4680      	mov	r8, r0
 8006eae:	b318      	cbz	r0, 8006ef8 <pow+0x100>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	9302      	str	r3, [sp, #8]
 8006eb4:	4b80      	ldr	r3, [pc, #512]	; (80070b8 <pow+0x2c0>)
 8006eb6:	9303      	str	r3, [sp, #12]
 8006eb8:	9b01      	ldr	r3, [sp, #4]
 8006eba:	930a      	str	r3, [sp, #40]	; 0x28
 8006ebc:	9b00      	ldr	r3, [sp, #0]
 8006ebe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006ec2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006ec6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0d5      	beq.n	8006e7a <pow+0x82>
 8006ece:	4b7b      	ldr	r3, [pc, #492]	; (80070bc <pow+0x2c4>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed8:	b11b      	cbz	r3, 8006ee2 <pow+0xea>
 8006eda:	f7ff ff4f 	bl	8006d7c <__errno>
 8006ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee0:	6003      	str	r3, [r0, #0]
 8006ee2:	ed9d 8b08 	vldr	d8, [sp, #32]
 8006ee6:	eeb0 0a48 	vmov.f32	s0, s16
 8006eea:	eef0 0a68 	vmov.f32	s1, s17
 8006eee:	b00d      	add	sp, #52	; 0x34
 8006ef0:	ecbd 8b04 	vpop	{d8-d9}
 8006ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef8:	ec45 4b10 	vmov	d0, r4, r5
 8006efc:	f000 feb3 	bl	8007c66 <finite>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d0f0      	beq.n	8006ee6 <pow+0xee>
 8006f04:	4652      	mov	r2, sl
 8006f06:	465b      	mov	r3, fp
 8006f08:	4620      	mov	r0, r4
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	f7f9 fdb6 	bl	8000a7c <__aeabi_dcmplt>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d0e8      	beq.n	8006ee6 <pow+0xee>
 8006f14:	2301      	movs	r3, #1
 8006f16:	9302      	str	r3, [sp, #8]
 8006f18:	4b67      	ldr	r3, [pc, #412]	; (80070b8 <pow+0x2c0>)
 8006f1a:	9303      	str	r3, [sp, #12]
 8006f1c:	f999 3000 	ldrsb.w	r3, [r9]
 8006f20:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006f24:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006f28:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006f2c:	b913      	cbnz	r3, 8006f34 <pow+0x13c>
 8006f2e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006f32:	e7a2      	b.n	8006e7a <pow+0x82>
 8006f34:	4962      	ldr	r1, [pc, #392]	; (80070c0 <pow+0x2c8>)
 8006f36:	2000      	movs	r0, #0
 8006f38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d19c      	bne.n	8006e7a <pow+0x82>
 8006f40:	f7ff ff1c 	bl	8006d7c <__errno>
 8006f44:	2321      	movs	r3, #33	; 0x21
 8006f46:	6003      	str	r3, [r0, #0]
 8006f48:	e7c5      	b.n	8006ed6 <pow+0xde>
 8006f4a:	eeb0 0a48 	vmov.f32	s0, s16
 8006f4e:	eef0 0a68 	vmov.f32	s1, s17
 8006f52:	f000 fe88 	bl	8007c66 <finite>
 8006f56:	9000      	str	r0, [sp, #0]
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	f040 8081 	bne.w	8007060 <pow+0x268>
 8006f5e:	ec47 6b10 	vmov	d0, r6, r7
 8006f62:	f000 fe80 	bl	8007c66 <finite>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d07a      	beq.n	8007060 <pow+0x268>
 8006f6a:	ec45 4b10 	vmov	d0, r4, r5
 8006f6e:	f000 fe7a 	bl	8007c66 <finite>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d074      	beq.n	8007060 <pow+0x268>
 8006f76:	ec53 2b18 	vmov	r2, r3, d8
 8006f7a:	ee18 0a10 	vmov	r0, s16
 8006f7e:	4619      	mov	r1, r3
 8006f80:	f7f9 fda4 	bl	8000acc <__aeabi_dcmpun>
 8006f84:	f999 9000 	ldrsb.w	r9, [r9]
 8006f88:	4b4b      	ldr	r3, [pc, #300]	; (80070b8 <pow+0x2c0>)
 8006f8a:	b1b0      	cbz	r0, 8006fba <pow+0x1c2>
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f92:	9b00      	ldr	r3, [sp, #0]
 8006f94:	930a      	str	r3, [sp, #40]	; 0x28
 8006f96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006f9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006f9e:	f1b9 0f00 	cmp.w	r9, #0
 8006fa2:	d0c4      	beq.n	8006f2e <pow+0x136>
 8006fa4:	4652      	mov	r2, sl
 8006fa6:	465b      	mov	r3, fp
 8006fa8:	4650      	mov	r0, sl
 8006faa:	4659      	mov	r1, fp
 8006fac:	f7f9 fc1e 	bl	80007ec <__aeabi_ddiv>
 8006fb0:	f1b9 0f02 	cmp.w	r9, #2
 8006fb4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006fb8:	e7c1      	b.n	8006f3e <pow+0x146>
 8006fba:	2203      	movs	r2, #3
 8006fbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fc0:	900a      	str	r0, [sp, #40]	; 0x28
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	4b3e      	ldr	r3, [pc, #248]	; (80070c4 <pow+0x2cc>)
 8006fca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006fce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006fd2:	f7f9 fae1 	bl	8000598 <__aeabi_dmul>
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	460d      	mov	r5, r1
 8006fda:	f1b9 0f00 	cmp.w	r9, #0
 8006fde:	d124      	bne.n	800702a <pow+0x232>
 8006fe0:	4b39      	ldr	r3, [pc, #228]	; (80070c8 <pow+0x2d0>)
 8006fe2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006fe6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fea:	4630      	mov	r0, r6
 8006fec:	4652      	mov	r2, sl
 8006fee:	465b      	mov	r3, fp
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	f7f9 fd43 	bl	8000a7c <__aeabi_dcmplt>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d056      	beq.n	80070a8 <pow+0x2b0>
 8006ffa:	ec45 4b10 	vmov	d0, r4, r5
 8006ffe:	f000 fe47 	bl	8007c90 <rint>
 8007002:	4622      	mov	r2, r4
 8007004:	462b      	mov	r3, r5
 8007006:	ec51 0b10 	vmov	r0, r1, d0
 800700a:	f7f9 fd2d 	bl	8000a68 <__aeabi_dcmpeq>
 800700e:	b920      	cbnz	r0, 800701a <pow+0x222>
 8007010:	4b2e      	ldr	r3, [pc, #184]	; (80070cc <pow+0x2d4>)
 8007012:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007016:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800701a:	f998 3000 	ldrsb.w	r3, [r8]
 800701e:	2b02      	cmp	r3, #2
 8007020:	d142      	bne.n	80070a8 <pow+0x2b0>
 8007022:	f7ff feab 	bl	8006d7c <__errno>
 8007026:	2322      	movs	r3, #34	; 0x22
 8007028:	e78d      	b.n	8006f46 <pow+0x14e>
 800702a:	4b29      	ldr	r3, [pc, #164]	; (80070d0 <pow+0x2d8>)
 800702c:	2200      	movs	r2, #0
 800702e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007032:	4630      	mov	r0, r6
 8007034:	4652      	mov	r2, sl
 8007036:	465b      	mov	r3, fp
 8007038:	4639      	mov	r1, r7
 800703a:	f7f9 fd1f 	bl	8000a7c <__aeabi_dcmplt>
 800703e:	2800      	cmp	r0, #0
 8007040:	d0eb      	beq.n	800701a <pow+0x222>
 8007042:	ec45 4b10 	vmov	d0, r4, r5
 8007046:	f000 fe23 	bl	8007c90 <rint>
 800704a:	4622      	mov	r2, r4
 800704c:	462b      	mov	r3, r5
 800704e:	ec51 0b10 	vmov	r0, r1, d0
 8007052:	f7f9 fd09 	bl	8000a68 <__aeabi_dcmpeq>
 8007056:	2800      	cmp	r0, #0
 8007058:	d1df      	bne.n	800701a <pow+0x222>
 800705a:	2200      	movs	r2, #0
 800705c:	4b18      	ldr	r3, [pc, #96]	; (80070c0 <pow+0x2c8>)
 800705e:	e7da      	b.n	8007016 <pow+0x21e>
 8007060:	2200      	movs	r2, #0
 8007062:	2300      	movs	r3, #0
 8007064:	ec51 0b18 	vmov	r0, r1, d8
 8007068:	f7f9 fcfe 	bl	8000a68 <__aeabi_dcmpeq>
 800706c:	2800      	cmp	r0, #0
 800706e:	f43f af3a 	beq.w	8006ee6 <pow+0xee>
 8007072:	ec47 6b10 	vmov	d0, r6, r7
 8007076:	f000 fdf6 	bl	8007c66 <finite>
 800707a:	2800      	cmp	r0, #0
 800707c:	f43f af33 	beq.w	8006ee6 <pow+0xee>
 8007080:	ec45 4b10 	vmov	d0, r4, r5
 8007084:	f000 fdef 	bl	8007c66 <finite>
 8007088:	2800      	cmp	r0, #0
 800708a:	f43f af2c 	beq.w	8006ee6 <pow+0xee>
 800708e:	2304      	movs	r3, #4
 8007090:	9302      	str	r3, [sp, #8]
 8007092:	4b09      	ldr	r3, [pc, #36]	; (80070b8 <pow+0x2c0>)
 8007094:	9303      	str	r3, [sp, #12]
 8007096:	2300      	movs	r3, #0
 8007098:	930a      	str	r3, [sp, #40]	; 0x28
 800709a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800709e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80070a2:	ed8d 9b08 	vstr	d9, [sp, #32]
 80070a6:	e7b8      	b.n	800701a <pow+0x222>
 80070a8:	a802      	add	r0, sp, #8
 80070aa:	f000 fde4 	bl	8007c76 <matherr>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	f47f af11 	bne.w	8006ed6 <pow+0xde>
 80070b4:	e7b5      	b.n	8007022 <pow+0x22a>
 80070b6:	bf00      	nop
 80070b8:	08007f50 	.word	0x08007f50
 80070bc:	3ff00000 	.word	0x3ff00000
 80070c0:	fff00000 	.word	0xfff00000
 80070c4:	3fe00000 	.word	0x3fe00000
 80070c8:	47efffff 	.word	0x47efffff
 80070cc:	c7efffff 	.word	0xc7efffff
 80070d0:	7ff00000 	.word	0x7ff00000
 80070d4:	20000074 	.word	0x20000074

080070d8 <__ieee754_pow>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	b091      	sub	sp, #68	; 0x44
 80070de:	ed8d 1b00 	vstr	d1, [sp]
 80070e2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80070e6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80070ea:	ea58 0302 	orrs.w	r3, r8, r2
 80070ee:	ec57 6b10 	vmov	r6, r7, d0
 80070f2:	f000 84be 	beq.w	8007a72 <__ieee754_pow+0x99a>
 80070f6:	4b7a      	ldr	r3, [pc, #488]	; (80072e0 <__ieee754_pow+0x208>)
 80070f8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80070fc:	429c      	cmp	r4, r3
 80070fe:	463d      	mov	r5, r7
 8007100:	ee10 aa10 	vmov	sl, s0
 8007104:	dc09      	bgt.n	800711a <__ieee754_pow+0x42>
 8007106:	d103      	bne.n	8007110 <__ieee754_pow+0x38>
 8007108:	b93e      	cbnz	r6, 800711a <__ieee754_pow+0x42>
 800710a:	45a0      	cmp	r8, r4
 800710c:	dc0d      	bgt.n	800712a <__ieee754_pow+0x52>
 800710e:	e001      	b.n	8007114 <__ieee754_pow+0x3c>
 8007110:	4598      	cmp	r8, r3
 8007112:	dc02      	bgt.n	800711a <__ieee754_pow+0x42>
 8007114:	4598      	cmp	r8, r3
 8007116:	d10e      	bne.n	8007136 <__ieee754_pow+0x5e>
 8007118:	b16a      	cbz	r2, 8007136 <__ieee754_pow+0x5e>
 800711a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800711e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007122:	ea54 030a 	orrs.w	r3, r4, sl
 8007126:	f000 84a4 	beq.w	8007a72 <__ieee754_pow+0x99a>
 800712a:	486e      	ldr	r0, [pc, #440]	; (80072e4 <__ieee754_pow+0x20c>)
 800712c:	b011      	add	sp, #68	; 0x44
 800712e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007132:	f000 bda5 	b.w	8007c80 <nan>
 8007136:	2d00      	cmp	r5, #0
 8007138:	da53      	bge.n	80071e2 <__ieee754_pow+0x10a>
 800713a:	4b6b      	ldr	r3, [pc, #428]	; (80072e8 <__ieee754_pow+0x210>)
 800713c:	4598      	cmp	r8, r3
 800713e:	dc4d      	bgt.n	80071dc <__ieee754_pow+0x104>
 8007140:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007144:	4598      	cmp	r8, r3
 8007146:	dd4c      	ble.n	80071e2 <__ieee754_pow+0x10a>
 8007148:	ea4f 5328 	mov.w	r3, r8, asr #20
 800714c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007150:	2b14      	cmp	r3, #20
 8007152:	dd26      	ble.n	80071a2 <__ieee754_pow+0xca>
 8007154:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007158:	fa22 f103 	lsr.w	r1, r2, r3
 800715c:	fa01 f303 	lsl.w	r3, r1, r3
 8007160:	4293      	cmp	r3, r2
 8007162:	d13e      	bne.n	80071e2 <__ieee754_pow+0x10a>
 8007164:	f001 0101 	and.w	r1, r1, #1
 8007168:	f1c1 0b02 	rsb	fp, r1, #2
 800716c:	2a00      	cmp	r2, #0
 800716e:	d15b      	bne.n	8007228 <__ieee754_pow+0x150>
 8007170:	4b5b      	ldr	r3, [pc, #364]	; (80072e0 <__ieee754_pow+0x208>)
 8007172:	4598      	cmp	r8, r3
 8007174:	d124      	bne.n	80071c0 <__ieee754_pow+0xe8>
 8007176:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800717a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800717e:	ea53 030a 	orrs.w	r3, r3, sl
 8007182:	f000 8476 	beq.w	8007a72 <__ieee754_pow+0x99a>
 8007186:	4b59      	ldr	r3, [pc, #356]	; (80072ec <__ieee754_pow+0x214>)
 8007188:	429c      	cmp	r4, r3
 800718a:	dd2d      	ble.n	80071e8 <__ieee754_pow+0x110>
 800718c:	f1b9 0f00 	cmp.w	r9, #0
 8007190:	f280 8473 	bge.w	8007a7a <__ieee754_pow+0x9a2>
 8007194:	2000      	movs	r0, #0
 8007196:	2100      	movs	r1, #0
 8007198:	ec41 0b10 	vmov	d0, r0, r1
 800719c:	b011      	add	sp, #68	; 0x44
 800719e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a2:	2a00      	cmp	r2, #0
 80071a4:	d13e      	bne.n	8007224 <__ieee754_pow+0x14c>
 80071a6:	f1c3 0314 	rsb	r3, r3, #20
 80071aa:	fa48 f103 	asr.w	r1, r8, r3
 80071ae:	fa01 f303 	lsl.w	r3, r1, r3
 80071b2:	4543      	cmp	r3, r8
 80071b4:	f040 8469 	bne.w	8007a8a <__ieee754_pow+0x9b2>
 80071b8:	f001 0101 	and.w	r1, r1, #1
 80071bc:	f1c1 0b02 	rsb	fp, r1, #2
 80071c0:	4b4b      	ldr	r3, [pc, #300]	; (80072f0 <__ieee754_pow+0x218>)
 80071c2:	4598      	cmp	r8, r3
 80071c4:	d118      	bne.n	80071f8 <__ieee754_pow+0x120>
 80071c6:	f1b9 0f00 	cmp.w	r9, #0
 80071ca:	f280 845a 	bge.w	8007a82 <__ieee754_pow+0x9aa>
 80071ce:	4948      	ldr	r1, [pc, #288]	; (80072f0 <__ieee754_pow+0x218>)
 80071d0:	4632      	mov	r2, r6
 80071d2:	463b      	mov	r3, r7
 80071d4:	2000      	movs	r0, #0
 80071d6:	f7f9 fb09 	bl	80007ec <__aeabi_ddiv>
 80071da:	e7dd      	b.n	8007198 <__ieee754_pow+0xc0>
 80071dc:	f04f 0b02 	mov.w	fp, #2
 80071e0:	e7c4      	b.n	800716c <__ieee754_pow+0x94>
 80071e2:	f04f 0b00 	mov.w	fp, #0
 80071e6:	e7c1      	b.n	800716c <__ieee754_pow+0x94>
 80071e8:	f1b9 0f00 	cmp.w	r9, #0
 80071ec:	dad2      	bge.n	8007194 <__ieee754_pow+0xbc>
 80071ee:	e9dd 0300 	ldrd	r0, r3, [sp]
 80071f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80071f6:	e7cf      	b.n	8007198 <__ieee754_pow+0xc0>
 80071f8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80071fc:	d106      	bne.n	800720c <__ieee754_pow+0x134>
 80071fe:	4632      	mov	r2, r6
 8007200:	463b      	mov	r3, r7
 8007202:	4610      	mov	r0, r2
 8007204:	4619      	mov	r1, r3
 8007206:	f7f9 f9c7 	bl	8000598 <__aeabi_dmul>
 800720a:	e7c5      	b.n	8007198 <__ieee754_pow+0xc0>
 800720c:	4b39      	ldr	r3, [pc, #228]	; (80072f4 <__ieee754_pow+0x21c>)
 800720e:	4599      	cmp	r9, r3
 8007210:	d10a      	bne.n	8007228 <__ieee754_pow+0x150>
 8007212:	2d00      	cmp	r5, #0
 8007214:	db08      	blt.n	8007228 <__ieee754_pow+0x150>
 8007216:	ec47 6b10 	vmov	d0, r6, r7
 800721a:	b011      	add	sp, #68	; 0x44
 800721c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	f000 bc68 	b.w	8007af4 <__ieee754_sqrt>
 8007224:	f04f 0b00 	mov.w	fp, #0
 8007228:	ec47 6b10 	vmov	d0, r6, r7
 800722c:	f000 fd12 	bl	8007c54 <fabs>
 8007230:	ec51 0b10 	vmov	r0, r1, d0
 8007234:	f1ba 0f00 	cmp.w	sl, #0
 8007238:	d127      	bne.n	800728a <__ieee754_pow+0x1b2>
 800723a:	b124      	cbz	r4, 8007246 <__ieee754_pow+0x16e>
 800723c:	4b2c      	ldr	r3, [pc, #176]	; (80072f0 <__ieee754_pow+0x218>)
 800723e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007242:	429a      	cmp	r2, r3
 8007244:	d121      	bne.n	800728a <__ieee754_pow+0x1b2>
 8007246:	f1b9 0f00 	cmp.w	r9, #0
 800724a:	da05      	bge.n	8007258 <__ieee754_pow+0x180>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	2000      	movs	r0, #0
 8007252:	4927      	ldr	r1, [pc, #156]	; (80072f0 <__ieee754_pow+0x218>)
 8007254:	f7f9 faca 	bl	80007ec <__aeabi_ddiv>
 8007258:	2d00      	cmp	r5, #0
 800725a:	da9d      	bge.n	8007198 <__ieee754_pow+0xc0>
 800725c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007260:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007264:	ea54 030b 	orrs.w	r3, r4, fp
 8007268:	d108      	bne.n	800727c <__ieee754_pow+0x1a4>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4610      	mov	r0, r2
 8007270:	4619      	mov	r1, r3
 8007272:	f7f8 ffd9 	bl	8000228 <__aeabi_dsub>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	e7ac      	b.n	80071d6 <__ieee754_pow+0xfe>
 800727c:	f1bb 0f01 	cmp.w	fp, #1
 8007280:	d18a      	bne.n	8007198 <__ieee754_pow+0xc0>
 8007282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007286:	4619      	mov	r1, r3
 8007288:	e786      	b.n	8007198 <__ieee754_pow+0xc0>
 800728a:	0fed      	lsrs	r5, r5, #31
 800728c:	1e6b      	subs	r3, r5, #1
 800728e:	930d      	str	r3, [sp, #52]	; 0x34
 8007290:	ea5b 0303 	orrs.w	r3, fp, r3
 8007294:	d102      	bne.n	800729c <__ieee754_pow+0x1c4>
 8007296:	4632      	mov	r2, r6
 8007298:	463b      	mov	r3, r7
 800729a:	e7e8      	b.n	800726e <__ieee754_pow+0x196>
 800729c:	4b16      	ldr	r3, [pc, #88]	; (80072f8 <__ieee754_pow+0x220>)
 800729e:	4598      	cmp	r8, r3
 80072a0:	f340 80fe 	ble.w	80074a0 <__ieee754_pow+0x3c8>
 80072a4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80072a8:	4598      	cmp	r8, r3
 80072aa:	dd0a      	ble.n	80072c2 <__ieee754_pow+0x1ea>
 80072ac:	4b0f      	ldr	r3, [pc, #60]	; (80072ec <__ieee754_pow+0x214>)
 80072ae:	429c      	cmp	r4, r3
 80072b0:	dc0d      	bgt.n	80072ce <__ieee754_pow+0x1f6>
 80072b2:	f1b9 0f00 	cmp.w	r9, #0
 80072b6:	f6bf af6d 	bge.w	8007194 <__ieee754_pow+0xbc>
 80072ba:	a307      	add	r3, pc, #28	; (adr r3, 80072d8 <__ieee754_pow+0x200>)
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	e79f      	b.n	8007202 <__ieee754_pow+0x12a>
 80072c2:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <__ieee754_pow+0x224>)
 80072c4:	429c      	cmp	r4, r3
 80072c6:	ddf4      	ble.n	80072b2 <__ieee754_pow+0x1da>
 80072c8:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <__ieee754_pow+0x218>)
 80072ca:	429c      	cmp	r4, r3
 80072cc:	dd18      	ble.n	8007300 <__ieee754_pow+0x228>
 80072ce:	f1b9 0f00 	cmp.w	r9, #0
 80072d2:	dcf2      	bgt.n	80072ba <__ieee754_pow+0x1e2>
 80072d4:	e75e      	b.n	8007194 <__ieee754_pow+0xbc>
 80072d6:	bf00      	nop
 80072d8:	8800759c 	.word	0x8800759c
 80072dc:	7e37e43c 	.word	0x7e37e43c
 80072e0:	7ff00000 	.word	0x7ff00000
 80072e4:	08007f53 	.word	0x08007f53
 80072e8:	433fffff 	.word	0x433fffff
 80072ec:	3fefffff 	.word	0x3fefffff
 80072f0:	3ff00000 	.word	0x3ff00000
 80072f4:	3fe00000 	.word	0x3fe00000
 80072f8:	41e00000 	.word	0x41e00000
 80072fc:	3feffffe 	.word	0x3feffffe
 8007300:	2200      	movs	r2, #0
 8007302:	4b63      	ldr	r3, [pc, #396]	; (8007490 <__ieee754_pow+0x3b8>)
 8007304:	f7f8 ff90 	bl	8000228 <__aeabi_dsub>
 8007308:	a355      	add	r3, pc, #340	; (adr r3, 8007460 <__ieee754_pow+0x388>)
 800730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730e:	4604      	mov	r4, r0
 8007310:	460d      	mov	r5, r1
 8007312:	f7f9 f941 	bl	8000598 <__aeabi_dmul>
 8007316:	a354      	add	r3, pc, #336	; (adr r3, 8007468 <__ieee754_pow+0x390>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	4606      	mov	r6, r0
 800731e:	460f      	mov	r7, r1
 8007320:	4620      	mov	r0, r4
 8007322:	4629      	mov	r1, r5
 8007324:	f7f9 f938 	bl	8000598 <__aeabi_dmul>
 8007328:	2200      	movs	r2, #0
 800732a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800732e:	4b59      	ldr	r3, [pc, #356]	; (8007494 <__ieee754_pow+0x3bc>)
 8007330:	4620      	mov	r0, r4
 8007332:	4629      	mov	r1, r5
 8007334:	f7f9 f930 	bl	8000598 <__aeabi_dmul>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	a14c      	add	r1, pc, #304	; (adr r1, 8007470 <__ieee754_pow+0x398>)
 800733e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007342:	f7f8 ff71 	bl	8000228 <__aeabi_dsub>
 8007346:	4622      	mov	r2, r4
 8007348:	462b      	mov	r3, r5
 800734a:	f7f9 f925 	bl	8000598 <__aeabi_dmul>
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	2000      	movs	r0, #0
 8007354:	4950      	ldr	r1, [pc, #320]	; (8007498 <__ieee754_pow+0x3c0>)
 8007356:	f7f8 ff67 	bl	8000228 <__aeabi_dsub>
 800735a:	4622      	mov	r2, r4
 800735c:	462b      	mov	r3, r5
 800735e:	4680      	mov	r8, r0
 8007360:	4689      	mov	r9, r1
 8007362:	4620      	mov	r0, r4
 8007364:	4629      	mov	r1, r5
 8007366:	f7f9 f917 	bl	8000598 <__aeabi_dmul>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4640      	mov	r0, r8
 8007370:	4649      	mov	r1, r9
 8007372:	f7f9 f911 	bl	8000598 <__aeabi_dmul>
 8007376:	a340      	add	r3, pc, #256	; (adr r3, 8007478 <__ieee754_pow+0x3a0>)
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f7f9 f90c 	bl	8000598 <__aeabi_dmul>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007388:	f7f8 ff4e 	bl	8000228 <__aeabi_dsub>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4604      	mov	r4, r0
 8007392:	460d      	mov	r5, r1
 8007394:	4630      	mov	r0, r6
 8007396:	4639      	mov	r1, r7
 8007398:	f7f8 ff48 	bl	800022c <__adddf3>
 800739c:	2000      	movs	r0, #0
 800739e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073a2:	4632      	mov	r2, r6
 80073a4:	463b      	mov	r3, r7
 80073a6:	f7f8 ff3f 	bl	8000228 <__aeabi_dsub>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4620      	mov	r0, r4
 80073b0:	4629      	mov	r1, r5
 80073b2:	f7f8 ff39 	bl	8000228 <__aeabi_dsub>
 80073b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073b8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80073bc:	4313      	orrs	r3, r2
 80073be:	4606      	mov	r6, r0
 80073c0:	460f      	mov	r7, r1
 80073c2:	f040 81eb 	bne.w	800779c <__ieee754_pow+0x6c4>
 80073c6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007480 <__ieee754_pow+0x3a8>
 80073ca:	e9dd 4500 	ldrd	r4, r5, [sp]
 80073ce:	2400      	movs	r4, #0
 80073d0:	4622      	mov	r2, r4
 80073d2:	462b      	mov	r3, r5
 80073d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073dc:	f7f8 ff24 	bl	8000228 <__aeabi_dsub>
 80073e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073e4:	f7f9 f8d8 	bl	8000598 <__aeabi_dmul>
 80073e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073ec:	4680      	mov	r8, r0
 80073ee:	4689      	mov	r9, r1
 80073f0:	4630      	mov	r0, r6
 80073f2:	4639      	mov	r1, r7
 80073f4:	f7f9 f8d0 	bl	8000598 <__aeabi_dmul>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4640      	mov	r0, r8
 80073fe:	4649      	mov	r1, r9
 8007400:	f7f8 ff14 	bl	800022c <__adddf3>
 8007404:	4622      	mov	r2, r4
 8007406:	462b      	mov	r3, r5
 8007408:	4680      	mov	r8, r0
 800740a:	4689      	mov	r9, r1
 800740c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007410:	f7f9 f8c2 	bl	8000598 <__aeabi_dmul>
 8007414:	460b      	mov	r3, r1
 8007416:	4604      	mov	r4, r0
 8007418:	460d      	mov	r5, r1
 800741a:	4602      	mov	r2, r0
 800741c:	4649      	mov	r1, r9
 800741e:	4640      	mov	r0, r8
 8007420:	e9cd 4500 	strd	r4, r5, [sp]
 8007424:	f7f8 ff02 	bl	800022c <__adddf3>
 8007428:	4b1c      	ldr	r3, [pc, #112]	; (800749c <__ieee754_pow+0x3c4>)
 800742a:	4299      	cmp	r1, r3
 800742c:	4606      	mov	r6, r0
 800742e:	460f      	mov	r7, r1
 8007430:	468b      	mov	fp, r1
 8007432:	f340 82f7 	ble.w	8007a24 <__ieee754_pow+0x94c>
 8007436:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800743a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800743e:	4303      	orrs	r3, r0
 8007440:	f000 81ea 	beq.w	8007818 <__ieee754_pow+0x740>
 8007444:	a310      	add	r3, pc, #64	; (adr r3, 8007488 <__ieee754_pow+0x3b0>)
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800744e:	f7f9 f8a3 	bl	8000598 <__aeabi_dmul>
 8007452:	a30d      	add	r3, pc, #52	; (adr r3, 8007488 <__ieee754_pow+0x3b0>)
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	e6d5      	b.n	8007206 <__ieee754_pow+0x12e>
 800745a:	bf00      	nop
 800745c:	f3af 8000 	nop.w
 8007460:	60000000 	.word	0x60000000
 8007464:	3ff71547 	.word	0x3ff71547
 8007468:	f85ddf44 	.word	0xf85ddf44
 800746c:	3e54ae0b 	.word	0x3e54ae0b
 8007470:	55555555 	.word	0x55555555
 8007474:	3fd55555 	.word	0x3fd55555
 8007478:	652b82fe 	.word	0x652b82fe
 800747c:	3ff71547 	.word	0x3ff71547
 8007480:	00000000 	.word	0x00000000
 8007484:	bff00000 	.word	0xbff00000
 8007488:	8800759c 	.word	0x8800759c
 800748c:	7e37e43c 	.word	0x7e37e43c
 8007490:	3ff00000 	.word	0x3ff00000
 8007494:	3fd00000 	.word	0x3fd00000
 8007498:	3fe00000 	.word	0x3fe00000
 800749c:	408fffff 	.word	0x408fffff
 80074a0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	da05      	bge.n	80074b6 <__ieee754_pow+0x3de>
 80074aa:	4bd3      	ldr	r3, [pc, #844]	; (80077f8 <__ieee754_pow+0x720>)
 80074ac:	f7f9 f874 	bl	8000598 <__aeabi_dmul>
 80074b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80074b4:	460c      	mov	r4, r1
 80074b6:	1523      	asrs	r3, r4, #20
 80074b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80074bc:	4413      	add	r3, r2
 80074be:	9309      	str	r3, [sp, #36]	; 0x24
 80074c0:	4bce      	ldr	r3, [pc, #824]	; (80077fc <__ieee754_pow+0x724>)
 80074c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80074c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80074ca:	429c      	cmp	r4, r3
 80074cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80074d0:	dd08      	ble.n	80074e4 <__ieee754_pow+0x40c>
 80074d2:	4bcb      	ldr	r3, [pc, #812]	; (8007800 <__ieee754_pow+0x728>)
 80074d4:	429c      	cmp	r4, r3
 80074d6:	f340 815e 	ble.w	8007796 <__ieee754_pow+0x6be>
 80074da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074dc:	3301      	adds	r3, #1
 80074de:	9309      	str	r3, [sp, #36]	; 0x24
 80074e0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80074e4:	f04f 0a00 	mov.w	sl, #0
 80074e8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80074ec:	930c      	str	r3, [sp, #48]	; 0x30
 80074ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074f0:	4bc4      	ldr	r3, [pc, #784]	; (8007804 <__ieee754_pow+0x72c>)
 80074f2:	4413      	add	r3, r2
 80074f4:	ed93 7b00 	vldr	d7, [r3]
 80074f8:	4629      	mov	r1, r5
 80074fa:	ec53 2b17 	vmov	r2, r3, d7
 80074fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007502:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007506:	f7f8 fe8f 	bl	8000228 <__aeabi_dsub>
 800750a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800750e:	4606      	mov	r6, r0
 8007510:	460f      	mov	r7, r1
 8007512:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007516:	f7f8 fe89 	bl	800022c <__adddf3>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	2000      	movs	r0, #0
 8007520:	49b9      	ldr	r1, [pc, #740]	; (8007808 <__ieee754_pow+0x730>)
 8007522:	f7f9 f963 	bl	80007ec <__aeabi_ddiv>
 8007526:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4630      	mov	r0, r6
 8007530:	4639      	mov	r1, r7
 8007532:	f7f9 f831 	bl	8000598 <__aeabi_dmul>
 8007536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800753a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800753e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007542:	2300      	movs	r3, #0
 8007544:	9302      	str	r3, [sp, #8]
 8007546:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800754a:	106d      	asrs	r5, r5, #1
 800754c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007550:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007554:	2200      	movs	r2, #0
 8007556:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800755a:	4640      	mov	r0, r8
 800755c:	4649      	mov	r1, r9
 800755e:	4614      	mov	r4, r2
 8007560:	461d      	mov	r5, r3
 8007562:	f7f9 f819 	bl	8000598 <__aeabi_dmul>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4630      	mov	r0, r6
 800756c:	4639      	mov	r1, r7
 800756e:	f7f8 fe5b 	bl	8000228 <__aeabi_dsub>
 8007572:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007576:	4606      	mov	r6, r0
 8007578:	460f      	mov	r7, r1
 800757a:	4620      	mov	r0, r4
 800757c:	4629      	mov	r1, r5
 800757e:	f7f8 fe53 	bl	8000228 <__aeabi_dsub>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800758a:	f7f8 fe4d 	bl	8000228 <__aeabi_dsub>
 800758e:	4642      	mov	r2, r8
 8007590:	464b      	mov	r3, r9
 8007592:	f7f9 f801 	bl	8000598 <__aeabi_dmul>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4630      	mov	r0, r6
 800759c:	4639      	mov	r1, r7
 800759e:	f7f8 fe43 	bl	8000228 <__aeabi_dsub>
 80075a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80075a6:	f7f8 fff7 	bl	8000598 <__aeabi_dmul>
 80075aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075b2:	4610      	mov	r0, r2
 80075b4:	4619      	mov	r1, r3
 80075b6:	f7f8 ffef 	bl	8000598 <__aeabi_dmul>
 80075ba:	a37b      	add	r3, pc, #492	; (adr r3, 80077a8 <__ieee754_pow+0x6d0>)
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	4604      	mov	r4, r0
 80075c2:	460d      	mov	r5, r1
 80075c4:	f7f8 ffe8 	bl	8000598 <__aeabi_dmul>
 80075c8:	a379      	add	r3, pc, #484	; (adr r3, 80077b0 <__ieee754_pow+0x6d8>)
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	f7f8 fe2d 	bl	800022c <__adddf3>
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	f7f8 ffdf 	bl	8000598 <__aeabi_dmul>
 80075da:	a377      	add	r3, pc, #476	; (adr r3, 80077b8 <__ieee754_pow+0x6e0>)
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f7f8 fe24 	bl	800022c <__adddf3>
 80075e4:	4622      	mov	r2, r4
 80075e6:	462b      	mov	r3, r5
 80075e8:	f7f8 ffd6 	bl	8000598 <__aeabi_dmul>
 80075ec:	a374      	add	r3, pc, #464	; (adr r3, 80077c0 <__ieee754_pow+0x6e8>)
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f7f8 fe1b 	bl	800022c <__adddf3>
 80075f6:	4622      	mov	r2, r4
 80075f8:	462b      	mov	r3, r5
 80075fa:	f7f8 ffcd 	bl	8000598 <__aeabi_dmul>
 80075fe:	a372      	add	r3, pc, #456	; (adr r3, 80077c8 <__ieee754_pow+0x6f0>)
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	f7f8 fe12 	bl	800022c <__adddf3>
 8007608:	4622      	mov	r2, r4
 800760a:	462b      	mov	r3, r5
 800760c:	f7f8 ffc4 	bl	8000598 <__aeabi_dmul>
 8007610:	a36f      	add	r3, pc, #444	; (adr r3, 80077d0 <__ieee754_pow+0x6f8>)
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f7f8 fe09 	bl	800022c <__adddf3>
 800761a:	4622      	mov	r2, r4
 800761c:	4606      	mov	r6, r0
 800761e:	460f      	mov	r7, r1
 8007620:	462b      	mov	r3, r5
 8007622:	4620      	mov	r0, r4
 8007624:	4629      	mov	r1, r5
 8007626:	f7f8 ffb7 	bl	8000598 <__aeabi_dmul>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4630      	mov	r0, r6
 8007630:	4639      	mov	r1, r7
 8007632:	f7f8 ffb1 	bl	8000598 <__aeabi_dmul>
 8007636:	4642      	mov	r2, r8
 8007638:	4604      	mov	r4, r0
 800763a:	460d      	mov	r5, r1
 800763c:	464b      	mov	r3, r9
 800763e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007642:	f7f8 fdf3 	bl	800022c <__adddf3>
 8007646:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800764a:	f7f8 ffa5 	bl	8000598 <__aeabi_dmul>
 800764e:	4622      	mov	r2, r4
 8007650:	462b      	mov	r3, r5
 8007652:	f7f8 fdeb 	bl	800022c <__adddf3>
 8007656:	4642      	mov	r2, r8
 8007658:	4606      	mov	r6, r0
 800765a:	460f      	mov	r7, r1
 800765c:	464b      	mov	r3, r9
 800765e:	4640      	mov	r0, r8
 8007660:	4649      	mov	r1, r9
 8007662:	f7f8 ff99 	bl	8000598 <__aeabi_dmul>
 8007666:	2200      	movs	r2, #0
 8007668:	4b68      	ldr	r3, [pc, #416]	; (800780c <__ieee754_pow+0x734>)
 800766a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800766e:	f7f8 fddd 	bl	800022c <__adddf3>
 8007672:	4632      	mov	r2, r6
 8007674:	463b      	mov	r3, r7
 8007676:	f7f8 fdd9 	bl	800022c <__adddf3>
 800767a:	9802      	ldr	r0, [sp, #8]
 800767c:	460d      	mov	r5, r1
 800767e:	4604      	mov	r4, r0
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4640      	mov	r0, r8
 8007686:	4649      	mov	r1, r9
 8007688:	f7f8 ff86 	bl	8000598 <__aeabi_dmul>
 800768c:	2200      	movs	r2, #0
 800768e:	4680      	mov	r8, r0
 8007690:	4689      	mov	r9, r1
 8007692:	4b5e      	ldr	r3, [pc, #376]	; (800780c <__ieee754_pow+0x734>)
 8007694:	4620      	mov	r0, r4
 8007696:	4629      	mov	r1, r5
 8007698:	f7f8 fdc6 	bl	8000228 <__aeabi_dsub>
 800769c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80076a0:	f7f8 fdc2 	bl	8000228 <__aeabi_dsub>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4630      	mov	r0, r6
 80076aa:	4639      	mov	r1, r7
 80076ac:	f7f8 fdbc 	bl	8000228 <__aeabi_dsub>
 80076b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076b4:	f7f8 ff70 	bl	8000598 <__aeabi_dmul>
 80076b8:	4622      	mov	r2, r4
 80076ba:	4606      	mov	r6, r0
 80076bc:	460f      	mov	r7, r1
 80076be:	462b      	mov	r3, r5
 80076c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076c4:	f7f8 ff68 	bl	8000598 <__aeabi_dmul>
 80076c8:	4602      	mov	r2, r0
 80076ca:	460b      	mov	r3, r1
 80076cc:	4630      	mov	r0, r6
 80076ce:	4639      	mov	r1, r7
 80076d0:	f7f8 fdac 	bl	800022c <__adddf3>
 80076d4:	4606      	mov	r6, r0
 80076d6:	460f      	mov	r7, r1
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4640      	mov	r0, r8
 80076de:	4649      	mov	r1, r9
 80076e0:	f7f8 fda4 	bl	800022c <__adddf3>
 80076e4:	9802      	ldr	r0, [sp, #8]
 80076e6:	a33c      	add	r3, pc, #240	; (adr r3, 80077d8 <__ieee754_pow+0x700>)
 80076e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ec:	4604      	mov	r4, r0
 80076ee:	460d      	mov	r5, r1
 80076f0:	f7f8 ff52 	bl	8000598 <__aeabi_dmul>
 80076f4:	4642      	mov	r2, r8
 80076f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80076fa:	464b      	mov	r3, r9
 80076fc:	4620      	mov	r0, r4
 80076fe:	4629      	mov	r1, r5
 8007700:	f7f8 fd92 	bl	8000228 <__aeabi_dsub>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4630      	mov	r0, r6
 800770a:	4639      	mov	r1, r7
 800770c:	f7f8 fd8c 	bl	8000228 <__aeabi_dsub>
 8007710:	a333      	add	r3, pc, #204	; (adr r3, 80077e0 <__ieee754_pow+0x708>)
 8007712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007716:	f7f8 ff3f 	bl	8000598 <__aeabi_dmul>
 800771a:	a333      	add	r3, pc, #204	; (adr r3, 80077e8 <__ieee754_pow+0x710>)
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	4606      	mov	r6, r0
 8007722:	460f      	mov	r7, r1
 8007724:	4620      	mov	r0, r4
 8007726:	4629      	mov	r1, r5
 8007728:	f7f8 ff36 	bl	8000598 <__aeabi_dmul>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4630      	mov	r0, r6
 8007732:	4639      	mov	r1, r7
 8007734:	f7f8 fd7a 	bl	800022c <__adddf3>
 8007738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800773a:	4b35      	ldr	r3, [pc, #212]	; (8007810 <__ieee754_pow+0x738>)
 800773c:	4413      	add	r3, r2
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	f7f8 fd73 	bl	800022c <__adddf3>
 8007746:	4604      	mov	r4, r0
 8007748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800774a:	460d      	mov	r5, r1
 800774c:	f7f8 feba 	bl	80004c4 <__aeabi_i2d>
 8007750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007752:	4b30      	ldr	r3, [pc, #192]	; (8007814 <__ieee754_pow+0x73c>)
 8007754:	4413      	add	r3, r2
 8007756:	e9d3 8900 	ldrd	r8, r9, [r3]
 800775a:	4606      	mov	r6, r0
 800775c:	460f      	mov	r7, r1
 800775e:	4622      	mov	r2, r4
 8007760:	462b      	mov	r3, r5
 8007762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007766:	f7f8 fd61 	bl	800022c <__adddf3>
 800776a:	4642      	mov	r2, r8
 800776c:	464b      	mov	r3, r9
 800776e:	f7f8 fd5d 	bl	800022c <__adddf3>
 8007772:	4632      	mov	r2, r6
 8007774:	463b      	mov	r3, r7
 8007776:	f7f8 fd59 	bl	800022c <__adddf3>
 800777a:	9802      	ldr	r0, [sp, #8]
 800777c:	4632      	mov	r2, r6
 800777e:	463b      	mov	r3, r7
 8007780:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007784:	f7f8 fd50 	bl	8000228 <__aeabi_dsub>
 8007788:	4642      	mov	r2, r8
 800778a:	464b      	mov	r3, r9
 800778c:	f7f8 fd4c 	bl	8000228 <__aeabi_dsub>
 8007790:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007794:	e607      	b.n	80073a6 <__ieee754_pow+0x2ce>
 8007796:	f04f 0a01 	mov.w	sl, #1
 800779a:	e6a5      	b.n	80074e8 <__ieee754_pow+0x410>
 800779c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80077f0 <__ieee754_pow+0x718>
 80077a0:	e613      	b.n	80073ca <__ieee754_pow+0x2f2>
 80077a2:	bf00      	nop
 80077a4:	f3af 8000 	nop.w
 80077a8:	4a454eef 	.word	0x4a454eef
 80077ac:	3fca7e28 	.word	0x3fca7e28
 80077b0:	93c9db65 	.word	0x93c9db65
 80077b4:	3fcd864a 	.word	0x3fcd864a
 80077b8:	a91d4101 	.word	0xa91d4101
 80077bc:	3fd17460 	.word	0x3fd17460
 80077c0:	518f264d 	.word	0x518f264d
 80077c4:	3fd55555 	.word	0x3fd55555
 80077c8:	db6fabff 	.word	0xdb6fabff
 80077cc:	3fdb6db6 	.word	0x3fdb6db6
 80077d0:	33333303 	.word	0x33333303
 80077d4:	3fe33333 	.word	0x3fe33333
 80077d8:	e0000000 	.word	0xe0000000
 80077dc:	3feec709 	.word	0x3feec709
 80077e0:	dc3a03fd 	.word	0xdc3a03fd
 80077e4:	3feec709 	.word	0x3feec709
 80077e8:	145b01f5 	.word	0x145b01f5
 80077ec:	be3e2fe0 	.word	0xbe3e2fe0
 80077f0:	00000000 	.word	0x00000000
 80077f4:	3ff00000 	.word	0x3ff00000
 80077f8:	43400000 	.word	0x43400000
 80077fc:	0003988e 	.word	0x0003988e
 8007800:	000bb679 	.word	0x000bb679
 8007804:	08007f58 	.word	0x08007f58
 8007808:	3ff00000 	.word	0x3ff00000
 800780c:	40080000 	.word	0x40080000
 8007810:	08007f78 	.word	0x08007f78
 8007814:	08007f68 	.word	0x08007f68
 8007818:	a3b4      	add	r3, pc, #720	; (adr r3, 8007aec <__ieee754_pow+0xa14>)
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	4640      	mov	r0, r8
 8007820:	4649      	mov	r1, r9
 8007822:	f7f8 fd03 	bl	800022c <__adddf3>
 8007826:	4622      	mov	r2, r4
 8007828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800782c:	462b      	mov	r3, r5
 800782e:	4630      	mov	r0, r6
 8007830:	4639      	mov	r1, r7
 8007832:	f7f8 fcf9 	bl	8000228 <__aeabi_dsub>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800783e:	f7f9 f93b 	bl	8000ab8 <__aeabi_dcmpgt>
 8007842:	2800      	cmp	r0, #0
 8007844:	f47f adfe 	bne.w	8007444 <__ieee754_pow+0x36c>
 8007848:	4aa3      	ldr	r2, [pc, #652]	; (8007ad8 <__ieee754_pow+0xa00>)
 800784a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800784e:	4293      	cmp	r3, r2
 8007850:	f340 810a 	ble.w	8007a68 <__ieee754_pow+0x990>
 8007854:	151b      	asrs	r3, r3, #20
 8007856:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800785a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800785e:	fa4a f303 	asr.w	r3, sl, r3
 8007862:	445b      	add	r3, fp
 8007864:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007868:	4e9c      	ldr	r6, [pc, #624]	; (8007adc <__ieee754_pow+0xa04>)
 800786a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800786e:	4116      	asrs	r6, r2
 8007870:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007874:	2000      	movs	r0, #0
 8007876:	ea23 0106 	bic.w	r1, r3, r6
 800787a:	f1c2 0214 	rsb	r2, r2, #20
 800787e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007882:	fa4a fa02 	asr.w	sl, sl, r2
 8007886:	f1bb 0f00 	cmp.w	fp, #0
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4620      	mov	r0, r4
 8007890:	4629      	mov	r1, r5
 8007892:	bfb8      	it	lt
 8007894:	f1ca 0a00 	rsblt	sl, sl, #0
 8007898:	f7f8 fcc6 	bl	8000228 <__aeabi_dsub>
 800789c:	e9cd 0100 	strd	r0, r1, [sp]
 80078a0:	4642      	mov	r2, r8
 80078a2:	464b      	mov	r3, r9
 80078a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078a8:	f7f8 fcc0 	bl	800022c <__adddf3>
 80078ac:	2000      	movs	r0, #0
 80078ae:	a378      	add	r3, pc, #480	; (adr r3, 8007a90 <__ieee754_pow+0x9b8>)
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	4604      	mov	r4, r0
 80078b6:	460d      	mov	r5, r1
 80078b8:	f7f8 fe6e 	bl	8000598 <__aeabi_dmul>
 80078bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078c0:	4606      	mov	r6, r0
 80078c2:	460f      	mov	r7, r1
 80078c4:	4620      	mov	r0, r4
 80078c6:	4629      	mov	r1, r5
 80078c8:	f7f8 fcae 	bl	8000228 <__aeabi_dsub>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4640      	mov	r0, r8
 80078d2:	4649      	mov	r1, r9
 80078d4:	f7f8 fca8 	bl	8000228 <__aeabi_dsub>
 80078d8:	a36f      	add	r3, pc, #444	; (adr r3, 8007a98 <__ieee754_pow+0x9c0>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f7f8 fe5b 	bl	8000598 <__aeabi_dmul>
 80078e2:	a36f      	add	r3, pc, #444	; (adr r3, 8007aa0 <__ieee754_pow+0x9c8>)
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	4680      	mov	r8, r0
 80078ea:	4689      	mov	r9, r1
 80078ec:	4620      	mov	r0, r4
 80078ee:	4629      	mov	r1, r5
 80078f0:	f7f8 fe52 	bl	8000598 <__aeabi_dmul>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	4640      	mov	r0, r8
 80078fa:	4649      	mov	r1, r9
 80078fc:	f7f8 fc96 	bl	800022c <__adddf3>
 8007900:	4604      	mov	r4, r0
 8007902:	460d      	mov	r5, r1
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4630      	mov	r0, r6
 800790a:	4639      	mov	r1, r7
 800790c:	f7f8 fc8e 	bl	800022c <__adddf3>
 8007910:	4632      	mov	r2, r6
 8007912:	463b      	mov	r3, r7
 8007914:	4680      	mov	r8, r0
 8007916:	4689      	mov	r9, r1
 8007918:	f7f8 fc86 	bl	8000228 <__aeabi_dsub>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4620      	mov	r0, r4
 8007922:	4629      	mov	r1, r5
 8007924:	f7f8 fc80 	bl	8000228 <__aeabi_dsub>
 8007928:	4642      	mov	r2, r8
 800792a:	4606      	mov	r6, r0
 800792c:	460f      	mov	r7, r1
 800792e:	464b      	mov	r3, r9
 8007930:	4640      	mov	r0, r8
 8007932:	4649      	mov	r1, r9
 8007934:	f7f8 fe30 	bl	8000598 <__aeabi_dmul>
 8007938:	a35b      	add	r3, pc, #364	; (adr r3, 8007aa8 <__ieee754_pow+0x9d0>)
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	4604      	mov	r4, r0
 8007940:	460d      	mov	r5, r1
 8007942:	f7f8 fe29 	bl	8000598 <__aeabi_dmul>
 8007946:	a35a      	add	r3, pc, #360	; (adr r3, 8007ab0 <__ieee754_pow+0x9d8>)
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f7f8 fc6c 	bl	8000228 <__aeabi_dsub>
 8007950:	4622      	mov	r2, r4
 8007952:	462b      	mov	r3, r5
 8007954:	f7f8 fe20 	bl	8000598 <__aeabi_dmul>
 8007958:	a357      	add	r3, pc, #348	; (adr r3, 8007ab8 <__ieee754_pow+0x9e0>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f7f8 fc65 	bl	800022c <__adddf3>
 8007962:	4622      	mov	r2, r4
 8007964:	462b      	mov	r3, r5
 8007966:	f7f8 fe17 	bl	8000598 <__aeabi_dmul>
 800796a:	a355      	add	r3, pc, #340	; (adr r3, 8007ac0 <__ieee754_pow+0x9e8>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f7f8 fc5a 	bl	8000228 <__aeabi_dsub>
 8007974:	4622      	mov	r2, r4
 8007976:	462b      	mov	r3, r5
 8007978:	f7f8 fe0e 	bl	8000598 <__aeabi_dmul>
 800797c:	a352      	add	r3, pc, #328	; (adr r3, 8007ac8 <__ieee754_pow+0x9f0>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	f7f8 fc53 	bl	800022c <__adddf3>
 8007986:	4622      	mov	r2, r4
 8007988:	462b      	mov	r3, r5
 800798a:	f7f8 fe05 	bl	8000598 <__aeabi_dmul>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4640      	mov	r0, r8
 8007994:	4649      	mov	r1, r9
 8007996:	f7f8 fc47 	bl	8000228 <__aeabi_dsub>
 800799a:	4604      	mov	r4, r0
 800799c:	460d      	mov	r5, r1
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4640      	mov	r0, r8
 80079a4:	4649      	mov	r1, r9
 80079a6:	f7f8 fdf7 	bl	8000598 <__aeabi_dmul>
 80079aa:	2200      	movs	r2, #0
 80079ac:	e9cd 0100 	strd	r0, r1, [sp]
 80079b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079b4:	4620      	mov	r0, r4
 80079b6:	4629      	mov	r1, r5
 80079b8:	f7f8 fc36 	bl	8000228 <__aeabi_dsub>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079c4:	f7f8 ff12 	bl	80007ec <__aeabi_ddiv>
 80079c8:	4632      	mov	r2, r6
 80079ca:	4604      	mov	r4, r0
 80079cc:	460d      	mov	r5, r1
 80079ce:	463b      	mov	r3, r7
 80079d0:	4640      	mov	r0, r8
 80079d2:	4649      	mov	r1, r9
 80079d4:	f7f8 fde0 	bl	8000598 <__aeabi_dmul>
 80079d8:	4632      	mov	r2, r6
 80079da:	463b      	mov	r3, r7
 80079dc:	f7f8 fc26 	bl	800022c <__adddf3>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4620      	mov	r0, r4
 80079e6:	4629      	mov	r1, r5
 80079e8:	f7f8 fc1e 	bl	8000228 <__aeabi_dsub>
 80079ec:	4642      	mov	r2, r8
 80079ee:	464b      	mov	r3, r9
 80079f0:	f7f8 fc1a 	bl	8000228 <__aeabi_dsub>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	2000      	movs	r0, #0
 80079fa:	4939      	ldr	r1, [pc, #228]	; (8007ae0 <__ieee754_pow+0xa08>)
 80079fc:	f7f8 fc14 	bl	8000228 <__aeabi_dsub>
 8007a00:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007a04:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	da2f      	bge.n	8007a6e <__ieee754_pow+0x996>
 8007a0e:	4650      	mov	r0, sl
 8007a10:	ec43 2b10 	vmov	d0, r2, r3
 8007a14:	f000 f9c0 	bl	8007d98 <scalbn>
 8007a18:	ec51 0b10 	vmov	r0, r1, d0
 8007a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a20:	f7ff bbf1 	b.w	8007206 <__ieee754_pow+0x12e>
 8007a24:	4b2f      	ldr	r3, [pc, #188]	; (8007ae4 <__ieee754_pow+0xa0c>)
 8007a26:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007a2a:	429e      	cmp	r6, r3
 8007a2c:	f77f af0c 	ble.w	8007848 <__ieee754_pow+0x770>
 8007a30:	4b2d      	ldr	r3, [pc, #180]	; (8007ae8 <__ieee754_pow+0xa10>)
 8007a32:	440b      	add	r3, r1
 8007a34:	4303      	orrs	r3, r0
 8007a36:	d00b      	beq.n	8007a50 <__ieee754_pow+0x978>
 8007a38:	a325      	add	r3, pc, #148	; (adr r3, 8007ad0 <__ieee754_pow+0x9f8>)
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a42:	f7f8 fda9 	bl	8000598 <__aeabi_dmul>
 8007a46:	a322      	add	r3, pc, #136	; (adr r3, 8007ad0 <__ieee754_pow+0x9f8>)
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f7ff bbdb 	b.w	8007206 <__ieee754_pow+0x12e>
 8007a50:	4622      	mov	r2, r4
 8007a52:	462b      	mov	r3, r5
 8007a54:	f7f8 fbe8 	bl	8000228 <__aeabi_dsub>
 8007a58:	4642      	mov	r2, r8
 8007a5a:	464b      	mov	r3, r9
 8007a5c:	f7f9 f822 	bl	8000aa4 <__aeabi_dcmpge>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	f43f aef1 	beq.w	8007848 <__ieee754_pow+0x770>
 8007a66:	e7e7      	b.n	8007a38 <__ieee754_pow+0x960>
 8007a68:	f04f 0a00 	mov.w	sl, #0
 8007a6c:	e718      	b.n	80078a0 <__ieee754_pow+0x7c8>
 8007a6e:	4621      	mov	r1, r4
 8007a70:	e7d4      	b.n	8007a1c <__ieee754_pow+0x944>
 8007a72:	2000      	movs	r0, #0
 8007a74:	491a      	ldr	r1, [pc, #104]	; (8007ae0 <__ieee754_pow+0xa08>)
 8007a76:	f7ff bb8f 	b.w	8007198 <__ieee754_pow+0xc0>
 8007a7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a7e:	f7ff bb8b 	b.w	8007198 <__ieee754_pow+0xc0>
 8007a82:	4630      	mov	r0, r6
 8007a84:	4639      	mov	r1, r7
 8007a86:	f7ff bb87 	b.w	8007198 <__ieee754_pow+0xc0>
 8007a8a:	4693      	mov	fp, r2
 8007a8c:	f7ff bb98 	b.w	80071c0 <__ieee754_pow+0xe8>
 8007a90:	00000000 	.word	0x00000000
 8007a94:	3fe62e43 	.word	0x3fe62e43
 8007a98:	fefa39ef 	.word	0xfefa39ef
 8007a9c:	3fe62e42 	.word	0x3fe62e42
 8007aa0:	0ca86c39 	.word	0x0ca86c39
 8007aa4:	be205c61 	.word	0xbe205c61
 8007aa8:	72bea4d0 	.word	0x72bea4d0
 8007aac:	3e663769 	.word	0x3e663769
 8007ab0:	c5d26bf1 	.word	0xc5d26bf1
 8007ab4:	3ebbbd41 	.word	0x3ebbbd41
 8007ab8:	af25de2c 	.word	0xaf25de2c
 8007abc:	3f11566a 	.word	0x3f11566a
 8007ac0:	16bebd93 	.word	0x16bebd93
 8007ac4:	3f66c16c 	.word	0x3f66c16c
 8007ac8:	5555553e 	.word	0x5555553e
 8007acc:	3fc55555 	.word	0x3fc55555
 8007ad0:	c2f8f359 	.word	0xc2f8f359
 8007ad4:	01a56e1f 	.word	0x01a56e1f
 8007ad8:	3fe00000 	.word	0x3fe00000
 8007adc:	000fffff 	.word	0x000fffff
 8007ae0:	3ff00000 	.word	0x3ff00000
 8007ae4:	4090cbff 	.word	0x4090cbff
 8007ae8:	3f6f3400 	.word	0x3f6f3400
 8007aec:	652b82fe 	.word	0x652b82fe
 8007af0:	3c971547 	.word	0x3c971547

08007af4 <__ieee754_sqrt>:
 8007af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af8:	4955      	ldr	r1, [pc, #340]	; (8007c50 <__ieee754_sqrt+0x15c>)
 8007afa:	ec55 4b10 	vmov	r4, r5, d0
 8007afe:	43a9      	bics	r1, r5
 8007b00:	462b      	mov	r3, r5
 8007b02:	462a      	mov	r2, r5
 8007b04:	d112      	bne.n	8007b2c <__ieee754_sqrt+0x38>
 8007b06:	ee10 2a10 	vmov	r2, s0
 8007b0a:	ee10 0a10 	vmov	r0, s0
 8007b0e:	4629      	mov	r1, r5
 8007b10:	f7f8 fd42 	bl	8000598 <__aeabi_dmul>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4620      	mov	r0, r4
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	f7f8 fb86 	bl	800022c <__adddf3>
 8007b20:	4604      	mov	r4, r0
 8007b22:	460d      	mov	r5, r1
 8007b24:	ec45 4b10 	vmov	d0, r4, r5
 8007b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b2c:	2d00      	cmp	r5, #0
 8007b2e:	ee10 0a10 	vmov	r0, s0
 8007b32:	4621      	mov	r1, r4
 8007b34:	dc0f      	bgt.n	8007b56 <__ieee754_sqrt+0x62>
 8007b36:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007b3a:	4330      	orrs	r0, r6
 8007b3c:	d0f2      	beq.n	8007b24 <__ieee754_sqrt+0x30>
 8007b3e:	b155      	cbz	r5, 8007b56 <__ieee754_sqrt+0x62>
 8007b40:	ee10 2a10 	vmov	r2, s0
 8007b44:	4620      	mov	r0, r4
 8007b46:	4629      	mov	r1, r5
 8007b48:	f7f8 fb6e 	bl	8000228 <__aeabi_dsub>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	f7f8 fe4c 	bl	80007ec <__aeabi_ddiv>
 8007b54:	e7e4      	b.n	8007b20 <__ieee754_sqrt+0x2c>
 8007b56:	151b      	asrs	r3, r3, #20
 8007b58:	d073      	beq.n	8007c42 <__ieee754_sqrt+0x14e>
 8007b5a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007b5e:	07dd      	lsls	r5, r3, #31
 8007b60:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007b64:	bf48      	it	mi
 8007b66:	0fc8      	lsrmi	r0, r1, #31
 8007b68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007b6c:	bf44      	itt	mi
 8007b6e:	0049      	lslmi	r1, r1, #1
 8007b70:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007b74:	2500      	movs	r5, #0
 8007b76:	1058      	asrs	r0, r3, #1
 8007b78:	0fcb      	lsrs	r3, r1, #31
 8007b7a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007b7e:	0049      	lsls	r1, r1, #1
 8007b80:	2316      	movs	r3, #22
 8007b82:	462c      	mov	r4, r5
 8007b84:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007b88:	19a7      	adds	r7, r4, r6
 8007b8a:	4297      	cmp	r7, r2
 8007b8c:	bfde      	ittt	le
 8007b8e:	19bc      	addle	r4, r7, r6
 8007b90:	1bd2      	suble	r2, r2, r7
 8007b92:	19ad      	addle	r5, r5, r6
 8007b94:	0fcf      	lsrs	r7, r1, #31
 8007b96:	3b01      	subs	r3, #1
 8007b98:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007b9c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007ba0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007ba4:	d1f0      	bne.n	8007b88 <__ieee754_sqrt+0x94>
 8007ba6:	f04f 0c20 	mov.w	ip, #32
 8007baa:	469e      	mov	lr, r3
 8007bac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007bb0:	42a2      	cmp	r2, r4
 8007bb2:	eb06 070e 	add.w	r7, r6, lr
 8007bb6:	dc02      	bgt.n	8007bbe <__ieee754_sqrt+0xca>
 8007bb8:	d112      	bne.n	8007be0 <__ieee754_sqrt+0xec>
 8007bba:	428f      	cmp	r7, r1
 8007bbc:	d810      	bhi.n	8007be0 <__ieee754_sqrt+0xec>
 8007bbe:	2f00      	cmp	r7, #0
 8007bc0:	eb07 0e06 	add.w	lr, r7, r6
 8007bc4:	da42      	bge.n	8007c4c <__ieee754_sqrt+0x158>
 8007bc6:	f1be 0f00 	cmp.w	lr, #0
 8007bca:	db3f      	blt.n	8007c4c <__ieee754_sqrt+0x158>
 8007bcc:	f104 0801 	add.w	r8, r4, #1
 8007bd0:	1b12      	subs	r2, r2, r4
 8007bd2:	428f      	cmp	r7, r1
 8007bd4:	bf88      	it	hi
 8007bd6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007bda:	1bc9      	subs	r1, r1, r7
 8007bdc:	4433      	add	r3, r6
 8007bde:	4644      	mov	r4, r8
 8007be0:	0052      	lsls	r2, r2, #1
 8007be2:	f1bc 0c01 	subs.w	ip, ip, #1
 8007be6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007bea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007bee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007bf2:	d1dd      	bne.n	8007bb0 <__ieee754_sqrt+0xbc>
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	d006      	beq.n	8007c06 <__ieee754_sqrt+0x112>
 8007bf8:	1c5c      	adds	r4, r3, #1
 8007bfa:	bf13      	iteet	ne
 8007bfc:	3301      	addne	r3, #1
 8007bfe:	3501      	addeq	r5, #1
 8007c00:	4663      	moveq	r3, ip
 8007c02:	f023 0301 	bicne.w	r3, r3, #1
 8007c06:	106a      	asrs	r2, r5, #1
 8007c08:	085b      	lsrs	r3, r3, #1
 8007c0a:	07e9      	lsls	r1, r5, #31
 8007c0c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007c10:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007c14:	bf48      	it	mi
 8007c16:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007c1a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007c1e:	461c      	mov	r4, r3
 8007c20:	e780      	b.n	8007b24 <__ieee754_sqrt+0x30>
 8007c22:	0aca      	lsrs	r2, r1, #11
 8007c24:	3815      	subs	r0, #21
 8007c26:	0549      	lsls	r1, r1, #21
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	d0fa      	beq.n	8007c22 <__ieee754_sqrt+0x12e>
 8007c2c:	02d6      	lsls	r6, r2, #11
 8007c2e:	d50a      	bpl.n	8007c46 <__ieee754_sqrt+0x152>
 8007c30:	f1c3 0420 	rsb	r4, r3, #32
 8007c34:	fa21 f404 	lsr.w	r4, r1, r4
 8007c38:	1e5d      	subs	r5, r3, #1
 8007c3a:	4099      	lsls	r1, r3
 8007c3c:	4322      	orrs	r2, r4
 8007c3e:	1b43      	subs	r3, r0, r5
 8007c40:	e78b      	b.n	8007b5a <__ieee754_sqrt+0x66>
 8007c42:	4618      	mov	r0, r3
 8007c44:	e7f0      	b.n	8007c28 <__ieee754_sqrt+0x134>
 8007c46:	0052      	lsls	r2, r2, #1
 8007c48:	3301      	adds	r3, #1
 8007c4a:	e7ef      	b.n	8007c2c <__ieee754_sqrt+0x138>
 8007c4c:	46a0      	mov	r8, r4
 8007c4e:	e7bf      	b.n	8007bd0 <__ieee754_sqrt+0xdc>
 8007c50:	7ff00000 	.word	0x7ff00000

08007c54 <fabs>:
 8007c54:	ec51 0b10 	vmov	r0, r1, d0
 8007c58:	ee10 2a10 	vmov	r2, s0
 8007c5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c60:	ec43 2b10 	vmov	d0, r2, r3
 8007c64:	4770      	bx	lr

08007c66 <finite>:
 8007c66:	ee10 3a90 	vmov	r3, s1
 8007c6a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8007c6e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007c72:	0fc0      	lsrs	r0, r0, #31
 8007c74:	4770      	bx	lr

08007c76 <matherr>:
 8007c76:	2000      	movs	r0, #0
 8007c78:	4770      	bx	lr
 8007c7a:	0000      	movs	r0, r0
 8007c7c:	0000      	movs	r0, r0
	...

08007c80 <nan>:
 8007c80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007c88 <nan+0x8>
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	00000000 	.word	0x00000000
 8007c8c:	7ff80000 	.word	0x7ff80000

08007c90 <rint>:
 8007c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c92:	ec51 0b10 	vmov	r0, r1, d0
 8007c96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c9a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007c9e:	2e13      	cmp	r6, #19
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	ee10 4a10 	vmov	r4, s0
 8007ca6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007caa:	dc56      	bgt.n	8007d5a <rint+0xca>
 8007cac:	2e00      	cmp	r6, #0
 8007cae:	da2b      	bge.n	8007d08 <rint+0x78>
 8007cb0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007cb4:	4302      	orrs	r2, r0
 8007cb6:	d023      	beq.n	8007d00 <rint+0x70>
 8007cb8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007cbc:	4302      	orrs	r2, r0
 8007cbe:	4254      	negs	r4, r2
 8007cc0:	4314      	orrs	r4, r2
 8007cc2:	0c4b      	lsrs	r3, r1, #17
 8007cc4:	0b24      	lsrs	r4, r4, #12
 8007cc6:	045b      	lsls	r3, r3, #17
 8007cc8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007ccc:	ea44 0103 	orr.w	r1, r4, r3
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	492f      	ldr	r1, [pc, #188]	; (8007d90 <rint+0x100>)
 8007cd4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8007cd8:	e9d1 6700 	ldrd	r6, r7, [r1]
 8007cdc:	4602      	mov	r2, r0
 8007cde:	4639      	mov	r1, r7
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f7f8 faa3 	bl	800022c <__adddf3>
 8007ce6:	e9cd 0100 	strd	r0, r1, [sp]
 8007cea:	463b      	mov	r3, r7
 8007cec:	4632      	mov	r2, r6
 8007cee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cf2:	f7f8 fa99 	bl	8000228 <__aeabi_dsub>
 8007cf6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007cfa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007cfe:	4639      	mov	r1, r7
 8007d00:	ec41 0b10 	vmov	d0, r0, r1
 8007d04:	b003      	add	sp, #12
 8007d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d08:	4a22      	ldr	r2, [pc, #136]	; (8007d94 <rint+0x104>)
 8007d0a:	4132      	asrs	r2, r6
 8007d0c:	ea01 0702 	and.w	r7, r1, r2
 8007d10:	4307      	orrs	r7, r0
 8007d12:	d0f5      	beq.n	8007d00 <rint+0x70>
 8007d14:	0852      	lsrs	r2, r2, #1
 8007d16:	4011      	ands	r1, r2
 8007d18:	430c      	orrs	r4, r1
 8007d1a:	d00b      	beq.n	8007d34 <rint+0xa4>
 8007d1c:	ea23 0202 	bic.w	r2, r3, r2
 8007d20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d24:	2e13      	cmp	r6, #19
 8007d26:	fa43 f306 	asr.w	r3, r3, r6
 8007d2a:	bf0c      	ite	eq
 8007d2c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007d30:	2400      	movne	r4, #0
 8007d32:	4313      	orrs	r3, r2
 8007d34:	4916      	ldr	r1, [pc, #88]	; (8007d90 <rint+0x100>)
 8007d36:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007d40:	4620      	mov	r0, r4
 8007d42:	4629      	mov	r1, r5
 8007d44:	f7f8 fa72 	bl	800022c <__adddf3>
 8007d48:	e9cd 0100 	strd	r0, r1, [sp]
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	462b      	mov	r3, r5
 8007d50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d54:	f7f8 fa68 	bl	8000228 <__aeabi_dsub>
 8007d58:	e7d2      	b.n	8007d00 <rint+0x70>
 8007d5a:	2e33      	cmp	r6, #51	; 0x33
 8007d5c:	dd07      	ble.n	8007d6e <rint+0xde>
 8007d5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007d62:	d1cd      	bne.n	8007d00 <rint+0x70>
 8007d64:	ee10 2a10 	vmov	r2, s0
 8007d68:	f7f8 fa60 	bl	800022c <__adddf3>
 8007d6c:	e7c8      	b.n	8007d00 <rint+0x70>
 8007d6e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8007d72:	f04f 32ff 	mov.w	r2, #4294967295
 8007d76:	40f2      	lsrs	r2, r6
 8007d78:	4210      	tst	r0, r2
 8007d7a:	d0c1      	beq.n	8007d00 <rint+0x70>
 8007d7c:	0852      	lsrs	r2, r2, #1
 8007d7e:	4210      	tst	r0, r2
 8007d80:	bf1f      	itttt	ne
 8007d82:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007d86:	ea20 0202 	bicne.w	r2, r0, r2
 8007d8a:	4134      	asrne	r4, r6
 8007d8c:	4314      	orrne	r4, r2
 8007d8e:	e7d1      	b.n	8007d34 <rint+0xa4>
 8007d90:	08007f88 	.word	0x08007f88
 8007d94:	000fffff 	.word	0x000fffff

08007d98 <scalbn>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	ec55 4b10 	vmov	r4, r5, d0
 8007d9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007da2:	4606      	mov	r6, r0
 8007da4:	462b      	mov	r3, r5
 8007da6:	b9aa      	cbnz	r2, 8007dd4 <scalbn+0x3c>
 8007da8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007dac:	4323      	orrs	r3, r4
 8007dae:	d03b      	beq.n	8007e28 <scalbn+0x90>
 8007db0:	4b31      	ldr	r3, [pc, #196]	; (8007e78 <scalbn+0xe0>)
 8007db2:	4629      	mov	r1, r5
 8007db4:	2200      	movs	r2, #0
 8007db6:	ee10 0a10 	vmov	r0, s0
 8007dba:	f7f8 fbed 	bl	8000598 <__aeabi_dmul>
 8007dbe:	4b2f      	ldr	r3, [pc, #188]	; (8007e7c <scalbn+0xe4>)
 8007dc0:	429e      	cmp	r6, r3
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	460d      	mov	r5, r1
 8007dc6:	da12      	bge.n	8007dee <scalbn+0x56>
 8007dc8:	a327      	add	r3, pc, #156	; (adr r3, 8007e68 <scalbn+0xd0>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fbe3 	bl	8000598 <__aeabi_dmul>
 8007dd2:	e009      	b.n	8007de8 <scalbn+0x50>
 8007dd4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007dd8:	428a      	cmp	r2, r1
 8007dda:	d10c      	bne.n	8007df6 <scalbn+0x5e>
 8007ddc:	ee10 2a10 	vmov	r2, s0
 8007de0:	4620      	mov	r0, r4
 8007de2:	4629      	mov	r1, r5
 8007de4:	f7f8 fa22 	bl	800022c <__adddf3>
 8007de8:	4604      	mov	r4, r0
 8007dea:	460d      	mov	r5, r1
 8007dec:	e01c      	b.n	8007e28 <scalbn+0x90>
 8007dee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007df2:	460b      	mov	r3, r1
 8007df4:	3a36      	subs	r2, #54	; 0x36
 8007df6:	4432      	add	r2, r6
 8007df8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007dfc:	428a      	cmp	r2, r1
 8007dfe:	dd0b      	ble.n	8007e18 <scalbn+0x80>
 8007e00:	ec45 4b11 	vmov	d1, r4, r5
 8007e04:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007e70 <scalbn+0xd8>
 8007e08:	f000 f83c 	bl	8007e84 <copysign>
 8007e0c:	a318      	add	r3, pc, #96	; (adr r3, 8007e70 <scalbn+0xd8>)
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	ec51 0b10 	vmov	r0, r1, d0
 8007e16:	e7da      	b.n	8007dce <scalbn+0x36>
 8007e18:	2a00      	cmp	r2, #0
 8007e1a:	dd08      	ble.n	8007e2e <scalbn+0x96>
 8007e1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e28:	ec45 4b10 	vmov	d0, r4, r5
 8007e2c:	bd70      	pop	{r4, r5, r6, pc}
 8007e2e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007e32:	da0d      	bge.n	8007e50 <scalbn+0xb8>
 8007e34:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007e38:	429e      	cmp	r6, r3
 8007e3a:	ec45 4b11 	vmov	d1, r4, r5
 8007e3e:	dce1      	bgt.n	8007e04 <scalbn+0x6c>
 8007e40:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007e68 <scalbn+0xd0>
 8007e44:	f000 f81e 	bl	8007e84 <copysign>
 8007e48:	a307      	add	r3, pc, #28	; (adr r3, 8007e68 <scalbn+0xd0>)
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	e7e0      	b.n	8007e12 <scalbn+0x7a>
 8007e50:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e54:	3236      	adds	r2, #54	; 0x36
 8007e56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e5e:	4620      	mov	r0, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	2200      	movs	r2, #0
 8007e64:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <scalbn+0xe8>)
 8007e66:	e7b2      	b.n	8007dce <scalbn+0x36>
 8007e68:	c2f8f359 	.word	0xc2f8f359
 8007e6c:	01a56e1f 	.word	0x01a56e1f
 8007e70:	8800759c 	.word	0x8800759c
 8007e74:	7e37e43c 	.word	0x7e37e43c
 8007e78:	43500000 	.word	0x43500000
 8007e7c:	ffff3cb0 	.word	0xffff3cb0
 8007e80:	3c900000 	.word	0x3c900000

08007e84 <copysign>:
 8007e84:	ec51 0b10 	vmov	r0, r1, d0
 8007e88:	ee11 0a90 	vmov	r0, s3
 8007e8c:	ee10 2a10 	vmov	r2, s0
 8007e90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007e98:	ea41 0300 	orr.w	r3, r1, r0
 8007e9c:	ec43 2b10 	vmov	d0, r2, r3
 8007ea0:	4770      	bx	lr
	...

08007ea4 <_init>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	bf00      	nop
 8007ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eaa:	bc08      	pop	{r3}
 8007eac:	469e      	mov	lr, r3
 8007eae:	4770      	bx	lr

08007eb0 <_fini>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	bf00      	nop
 8007eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb6:	bc08      	pop	{r3}
 8007eb8:	469e      	mov	lr, r3
 8007eba:	4770      	bx	lr


aviyonik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800c3c8  0800c3c8  0001c3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c798  0800c798  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c798  0800c798  0001c798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7a0  0800c7a0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7a0  0800c7a0  0001c7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7a4  0800c7a4  0001c7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c7a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d98  200001e4  0800c98c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f7c  0800c98c  00021f7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027b15  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004561  00000000  00000000  00047d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bd8  00000000  00000000  0004c290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019d0  00000000  00000000  0004de68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002170a  00000000  00000000  0004f838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018bbd  00000000  00000000  00070f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d37ec  00000000  00000000  00089aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d2eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081f8  00000000  00000000  0015d368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c3ac 	.word	0x0800c3ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800c3ac 	.word	0x0800c3ac

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_drsub>:
 8000244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000248:	e002      	b.n	8000250 <__adddf3>
 800024a:	bf00      	nop

0800024c <__aeabi_dsub>:
 800024c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000250 <__adddf3>:
 8000250:	b530      	push	{r4, r5, lr}
 8000252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025a:	ea94 0f05 	teq	r4, r5
 800025e:	bf08      	it	eq
 8000260:	ea90 0f02 	teqeq	r0, r2
 8000264:	bf1f      	itttt	ne
 8000266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000276:	f000 80e2 	beq.w	800043e <__adddf3+0x1ee>
 800027a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000282:	bfb8      	it	lt
 8000284:	426d      	neglt	r5, r5
 8000286:	dd0c      	ble.n	80002a2 <__adddf3+0x52>
 8000288:	442c      	add	r4, r5
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	ea82 0000 	eor.w	r0, r2, r0
 8000296:	ea83 0101 	eor.w	r1, r3, r1
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	2d36      	cmp	r5, #54	; 0x36
 80002a4:	bf88      	it	hi
 80002a6:	bd30      	pophi	{r4, r5, pc}
 80002a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x70>
 80002ba:	4240      	negs	r0, r0
 80002bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x84>
 80002ce:	4252      	negs	r2, r2
 80002d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d4:	ea94 0f05 	teq	r4, r5
 80002d8:	f000 80a7 	beq.w	800042a <__adddf3+0x1da>
 80002dc:	f1a4 0401 	sub.w	r4, r4, #1
 80002e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e4:	db0d      	blt.n	8000302 <__adddf3+0xb2>
 80002e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ea:	fa22 f205 	lsr.w	r2, r2, r5
 80002ee:	1880      	adds	r0, r0, r2
 80002f0:	f141 0100 	adc.w	r1, r1, #0
 80002f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f8:	1880      	adds	r0, r0, r2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	4159      	adcs	r1, r3
 8000300:	e00e      	b.n	8000320 <__adddf3+0xd0>
 8000302:	f1a5 0520 	sub.w	r5, r5, #32
 8000306:	f10e 0e20 	add.w	lr, lr, #32
 800030a:	2a01      	cmp	r2, #1
 800030c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000310:	bf28      	it	cs
 8000312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	18c0      	adds	r0, r0, r3
 800031c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000324:	d507      	bpl.n	8000336 <__adddf3+0xe6>
 8000326:	f04f 0e00 	mov.w	lr, #0
 800032a:	f1dc 0c00 	rsbs	ip, ip, #0
 800032e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000332:	eb6e 0101 	sbc.w	r1, lr, r1
 8000336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033a:	d31b      	bcc.n	8000374 <__adddf3+0x124>
 800033c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000340:	d30c      	bcc.n	800035c <__adddf3+0x10c>
 8000342:	0849      	lsrs	r1, r1, #1
 8000344:	ea5f 0030 	movs.w	r0, r0, rrx
 8000348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800034c:	f104 0401 	add.w	r4, r4, #1
 8000350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000358:	f080 809a 	bcs.w	8000490 <__adddf3+0x240>
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	bf08      	it	eq
 8000362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000366:	f150 0000 	adcs.w	r0, r0, #0
 800036a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036e:	ea41 0105 	orr.w	r1, r1, r5
 8000372:	bd30      	pop	{r4, r5, pc}
 8000374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000378:	4140      	adcs	r0, r0
 800037a:	eb41 0101 	adc.w	r1, r1, r1
 800037e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000382:	f1a4 0401 	sub.w	r4, r4, #1
 8000386:	d1e9      	bne.n	800035c <__adddf3+0x10c>
 8000388:	f091 0f00 	teq	r1, #0
 800038c:	bf04      	itt	eq
 800038e:	4601      	moveq	r1, r0
 8000390:	2000      	moveq	r0, #0
 8000392:	fab1 f381 	clz	r3, r1
 8000396:	bf08      	it	eq
 8000398:	3320      	addeq	r3, #32
 800039a:	f1a3 030b 	sub.w	r3, r3, #11
 800039e:	f1b3 0220 	subs.w	r2, r3, #32
 80003a2:	da0c      	bge.n	80003be <__adddf3+0x16e>
 80003a4:	320c      	adds	r2, #12
 80003a6:	dd08      	ble.n	80003ba <__adddf3+0x16a>
 80003a8:	f102 0c14 	add.w	ip, r2, #20
 80003ac:	f1c2 020c 	rsb	r2, r2, #12
 80003b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b4:	fa21 f102 	lsr.w	r1, r1, r2
 80003b8:	e00c      	b.n	80003d4 <__adddf3+0x184>
 80003ba:	f102 0214 	add.w	r2, r2, #20
 80003be:	bfd8      	it	le
 80003c0:	f1c2 0c20 	rsble	ip, r2, #32
 80003c4:	fa01 f102 	lsl.w	r1, r1, r2
 80003c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003cc:	bfdc      	itt	le
 80003ce:	ea41 010c 	orrle.w	r1, r1, ip
 80003d2:	4090      	lslle	r0, r2
 80003d4:	1ae4      	subs	r4, r4, r3
 80003d6:	bfa2      	ittt	ge
 80003d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003dc:	4329      	orrge	r1, r5
 80003de:	bd30      	popge	{r4, r5, pc}
 80003e0:	ea6f 0404 	mvn.w	r4, r4
 80003e4:	3c1f      	subs	r4, #31
 80003e6:	da1c      	bge.n	8000422 <__adddf3+0x1d2>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc0e      	bgt.n	800040a <__adddf3+0x1ba>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0220 	rsb	r2, r4, #32
 80003f4:	fa20 f004 	lsr.w	r0, r0, r4
 80003f8:	fa01 f302 	lsl.w	r3, r1, r2
 80003fc:	ea40 0003 	orr.w	r0, r0, r3
 8000400:	fa21 f304 	lsr.w	r3, r1, r4
 8000404:	ea45 0103 	orr.w	r1, r5, r3
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f1c4 040c 	rsb	r4, r4, #12
 800040e:	f1c4 0220 	rsb	r2, r4, #32
 8000412:	fa20 f002 	lsr.w	r0, r0, r2
 8000416:	fa01 f304 	lsl.w	r3, r1, r4
 800041a:	ea40 0003 	orr.w	r0, r0, r3
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	fa21 f004 	lsr.w	r0, r1, r4
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f094 0f00 	teq	r4, #0
 800042e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000432:	bf06      	itte	eq
 8000434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000438:	3401      	addeq	r4, #1
 800043a:	3d01      	subne	r5, #1
 800043c:	e74e      	b.n	80002dc <__adddf3+0x8c>
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf18      	it	ne
 8000444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000448:	d029      	beq.n	800049e <__adddf3+0x24e>
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	d005      	beq.n	8000462 <__adddf3+0x212>
 8000456:	ea54 0c00 	orrs.w	ip, r4, r0
 800045a:	bf04      	itt	eq
 800045c:	4619      	moveq	r1, r3
 800045e:	4610      	moveq	r0, r2
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea91 0f03 	teq	r1, r3
 8000466:	bf1e      	ittt	ne
 8000468:	2100      	movne	r1, #0
 800046a:	2000      	movne	r0, #0
 800046c:	bd30      	popne	{r4, r5, pc}
 800046e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000472:	d105      	bne.n	8000480 <__adddf3+0x230>
 8000474:	0040      	lsls	r0, r0, #1
 8000476:	4149      	adcs	r1, r1
 8000478:	bf28      	it	cs
 800047a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000484:	bf3c      	itt	cc
 8000486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048a:	bd30      	popcc	{r4, r5, pc}
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf1a      	itte	ne
 80004a4:	4619      	movne	r1, r3
 80004a6:	4610      	movne	r0, r2
 80004a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004ac:	bf1c      	itt	ne
 80004ae:	460b      	movne	r3, r1
 80004b0:	4602      	movne	r2, r0
 80004b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b6:	bf06      	itte	eq
 80004b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004bc:	ea91 0f03 	teqeq	r1, r3
 80004c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	bf00      	nop

080004c8 <__aeabi_ui2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f04f 0500 	mov.w	r5, #0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e750      	b.n	8000388 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_i2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000500:	bf48      	it	mi
 8000502:	4240      	negmi	r0, r0
 8000504:	f04f 0100 	mov.w	r1, #0
 8000508:	e73e      	b.n	8000388 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_f2d>:
 800050c:	0042      	lsls	r2, r0, #1
 800050e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000512:	ea4f 0131 	mov.w	r1, r1, rrx
 8000516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051a:	bf1f      	itttt	ne
 800051c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000528:	4770      	bxne	lr
 800052a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052e:	bf08      	it	eq
 8000530:	4770      	bxeq	lr
 8000532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000536:	bf04      	itt	eq
 8000538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800054c:	e71c      	b.n	8000388 <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_ul2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f04f 0500 	mov.w	r5, #0
 800055e:	e00a      	b.n	8000576 <__aeabi_l2d+0x16>

08000560 <__aeabi_l2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056e:	d502      	bpl.n	8000576 <__aeabi_l2d+0x16>
 8000570:	4240      	negs	r0, r0
 8000572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000582:	f43f aed8 	beq.w	8000336 <__adddf3+0xe6>
 8000586:	f04f 0203 	mov.w	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059e:	f1c2 0320 	rsb	r3, r2, #32
 80005a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ae:	ea40 000e 	orr.w	r0, r0, lr
 80005b2:	fa21 f102 	lsr.w	r1, r1, r2
 80005b6:	4414      	add	r4, r2
 80005b8:	e6bd      	b.n	8000336 <__adddf3+0xe6>
 80005ba:	bf00      	nop

080005bc <__aeabi_dmul>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ca:	bf1d      	ittte	ne
 80005cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d0:	ea94 0f0c 	teqne	r4, ip
 80005d4:	ea95 0f0c 	teqne	r5, ip
 80005d8:	f000 f8de 	bleq	8000798 <__aeabi_dmul+0x1dc>
 80005dc:	442c      	add	r4, r5
 80005de:	ea81 0603 	eor.w	r6, r1, r3
 80005e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ee:	bf18      	it	ne
 80005f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005fc:	d038      	beq.n	8000670 <__aeabi_dmul+0xb4>
 80005fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000602:	f04f 0500 	mov.w	r5, #0
 8000606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000612:	f04f 0600 	mov.w	r6, #0
 8000616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061a:	f09c 0f00 	teq	ip, #0
 800061e:	bf18      	it	ne
 8000620:	f04e 0e01 	orrne.w	lr, lr, #1
 8000624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800062c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000630:	d204      	bcs.n	800063c <__aeabi_dmul+0x80>
 8000632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000636:	416d      	adcs	r5, r5
 8000638:	eb46 0606 	adc.w	r6, r6, r6
 800063c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800064c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000654:	bf88      	it	hi
 8000656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065a:	d81e      	bhi.n	800069a <__aeabi_dmul+0xde>
 800065c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000674:	ea46 0101 	orr.w	r1, r6, r1
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	ea81 0103 	eor.w	r1, r1, r3
 8000680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000684:	bfc2      	ittt	gt
 8000686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068e:	bd70      	popgt	{r4, r5, r6, pc}
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f04f 0e00 	mov.w	lr, #0
 8000698:	3c01      	subs	r4, #1
 800069a:	f300 80ab 	bgt.w	80007f4 <__aeabi_dmul+0x238>
 800069e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a2:	bfde      	ittt	le
 80006a4:	2000      	movle	r0, #0
 80006a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006aa:	bd70      	pople	{r4, r5, r6, pc}
 80006ac:	f1c4 0400 	rsb	r4, r4, #0
 80006b0:	3c20      	subs	r4, #32
 80006b2:	da35      	bge.n	8000720 <__aeabi_dmul+0x164>
 80006b4:	340c      	adds	r4, #12
 80006b6:	dc1b      	bgt.n	80006f0 <__aeabi_dmul+0x134>
 80006b8:	f104 0414 	add.w	r4, r4, #20
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f305 	lsl.w	r3, r0, r5
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	fa21 f604 	lsr.w	r6, r1, r4
 80006e0:	eb42 0106 	adc.w	r1, r2, r6
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 040c 	rsb	r4, r4, #12
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f304 	lsl.w	r3, r0, r4
 80006fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000700:	fa01 f204 	lsl.w	r2, r1, r4
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	f141 0100 	adc.w	r1, r1, #0
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f205 	lsl.w	r2, r0, r5
 8000728:	ea4e 0e02 	orr.w	lr, lr, r2
 800072c:	fa20 f304 	lsr.w	r3, r0, r4
 8000730:	fa01 f205 	lsl.w	r2, r1, r5
 8000734:	ea43 0302 	orr.w	r3, r3, r2
 8000738:	fa21 f004 	lsr.w	r0, r1, r4
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	fa21 f204 	lsr.w	r2, r1, r4
 8000744:	ea20 0002 	bic.w	r0, r0, r2
 8000748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800074c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000750:	bf08      	it	eq
 8000752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f094 0f00 	teq	r4, #0
 800075c:	d10f      	bne.n	800077e <__aeabi_dmul+0x1c2>
 800075e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000762:	0040      	lsls	r0, r0, #1
 8000764:	eb41 0101 	adc.w	r1, r1, r1
 8000768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3c01      	subeq	r4, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1a6>
 8000772:	ea41 0106 	orr.w	r1, r1, r6
 8000776:	f095 0f00 	teq	r5, #0
 800077a:	bf18      	it	ne
 800077c:	4770      	bxne	lr
 800077e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	eb43 0303 	adc.w	r3, r3, r3
 8000788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3d01      	subeq	r5, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1c6>
 8000792:	ea43 0306 	orr.w	r3, r3, r6
 8000796:	4770      	bx	lr
 8000798:	ea94 0f0c 	teq	r4, ip
 800079c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a0:	bf18      	it	ne
 80007a2:	ea95 0f0c 	teqne	r5, ip
 80007a6:	d00c      	beq.n	80007c2 <__aeabi_dmul+0x206>
 80007a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ac:	bf18      	it	ne
 80007ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b2:	d1d1      	bne.n	8000758 <__aeabi_dmul+0x19c>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c6:	bf06      	itte	eq
 80007c8:	4610      	moveq	r0, r2
 80007ca:	4619      	moveq	r1, r3
 80007cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d0:	d019      	beq.n	8000806 <__aeabi_dmul+0x24a>
 80007d2:	ea94 0f0c 	teq	r4, ip
 80007d6:	d102      	bne.n	80007de <__aeabi_dmul+0x222>
 80007d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007dc:	d113      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007de:	ea95 0f0c 	teq	r5, ip
 80007e2:	d105      	bne.n	80007f0 <__aeabi_dmul+0x234>
 80007e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e8:	bf1c      	itt	ne
 80007ea:	4610      	movne	r0, r2
 80007ec:	4619      	movne	r1, r3
 80007ee:	d10a      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <__aeabi_ddiv>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081e:	bf1d      	ittte	ne
 8000820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000824:	ea94 0f0c 	teqne	r4, ip
 8000828:	ea95 0f0c 	teqne	r5, ip
 800082c:	f000 f8a7 	bleq	800097e <__aeabi_ddiv+0x16e>
 8000830:	eba4 0405 	sub.w	r4, r4, r5
 8000834:	ea81 0e03 	eor.w	lr, r1, r3
 8000838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800083c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000840:	f000 8088 	beq.w	8000954 <__aeabi_ddiv+0x144>
 8000844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800084c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800085c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000868:	429d      	cmp	r5, r3
 800086a:	bf08      	it	eq
 800086c:	4296      	cmpeq	r6, r2
 800086e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000876:	d202      	bcs.n	800087e <__aeabi_ddiv+0x6e>
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	1ab6      	subs	r6, r6, r2
 8000880:	eb65 0503 	sbc.w	r5, r5, r3
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f0:	d018      	beq.n	8000924 <__aeabi_ddiv+0x114>
 80008f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090e:	d1c0      	bne.n	8000892 <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	d10b      	bne.n	800092e <__aeabi_ddiv+0x11e>
 8000916:	ea41 0100 	orr.w	r1, r1, r0
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000922:	e7b6      	b.n	8000892 <__aeabi_ddiv+0x82>
 8000924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000928:	bf04      	itt	eq
 800092a:	4301      	orreq	r1, r0
 800092c:	2000      	moveq	r0, #0
 800092e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000932:	bf88      	it	hi
 8000934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000938:	f63f aeaf 	bhi.w	800069a <__aeabi_dmul+0xde>
 800093c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000940:	bf04      	itt	eq
 8000942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094a:	f150 0000 	adcs.w	r0, r0, #0
 800094e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800095c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000960:	bfc2      	ittt	gt
 8000962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096a:	bd70      	popgt	{r4, r5, r6, pc}
 800096c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000970:	f04f 0e00 	mov.w	lr, #0
 8000974:	3c01      	subs	r4, #1
 8000976:	e690      	b.n	800069a <__aeabi_dmul+0xde>
 8000978:	ea45 0e06 	orr.w	lr, r5, r6
 800097c:	e68d      	b.n	800069a <__aeabi_dmul+0xde>
 800097e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000982:	ea94 0f0c 	teq	r4, ip
 8000986:	bf08      	it	eq
 8000988:	ea95 0f0c 	teqeq	r5, ip
 800098c:	f43f af3b 	beq.w	8000806 <__aeabi_dmul+0x24a>
 8000990:	ea94 0f0c 	teq	r4, ip
 8000994:	d10a      	bne.n	80009ac <__aeabi_ddiv+0x19c>
 8000996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099a:	f47f af34 	bne.w	8000806 <__aeabi_dmul+0x24a>
 800099e:	ea95 0f0c 	teq	r5, ip
 80009a2:	f47f af25 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e72c      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009ac:	ea95 0f0c 	teq	r5, ip
 80009b0:	d106      	bne.n	80009c0 <__aeabi_ddiv+0x1b0>
 80009b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b6:	f43f aefd 	beq.w	80007b4 <__aeabi_dmul+0x1f8>
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	e722      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ca:	f47f aec5 	bne.w	8000758 <__aeabi_dmul+0x19c>
 80009ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d2:	f47f af0d 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009da:	f47f aeeb 	bne.w	80007b4 <__aeabi_dmul+0x1f8>
 80009de:	e712      	b.n	8000806 <__aeabi_dmul+0x24a>

080009e0 <__gedf2>:
 80009e0:	f04f 3cff 	mov.w	ip, #4294967295
 80009e4:	e006      	b.n	80009f4 <__cmpdf2+0x4>
 80009e6:	bf00      	nop

080009e8 <__ledf2>:
 80009e8:	f04f 0c01 	mov.w	ip, #1
 80009ec:	e002      	b.n	80009f4 <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__cmpdf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	bf18      	it	ne
 8000a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0a:	d01b      	beq.n	8000a44 <__cmpdf2+0x54>
 8000a0c:	b001      	add	sp, #4
 8000a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a12:	bf0c      	ite	eq
 8000a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a18:	ea91 0f03 	teqne	r1, r3
 8000a1c:	bf02      	ittt	eq
 8000a1e:	ea90 0f02 	teqeq	r0, r2
 8000a22:	2000      	moveq	r0, #0
 8000a24:	4770      	bxeq	lr
 8000a26:	f110 0f00 	cmn.w	r0, #0
 8000a2a:	ea91 0f03 	teq	r1, r3
 8000a2e:	bf58      	it	pl
 8000a30:	4299      	cmppl	r1, r3
 8000a32:	bf08      	it	eq
 8000a34:	4290      	cmpeq	r0, r2
 8000a36:	bf2c      	ite	cs
 8000a38:	17d8      	asrcs	r0, r3, #31
 8000a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3e:	f040 0001 	orr.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__cmpdf2+0x64>
 8000a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a52:	d107      	bne.n	8000a64 <__cmpdf2+0x74>
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d1d6      	bne.n	8000a0c <__cmpdf2+0x1c>
 8000a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a62:	d0d3      	beq.n	8000a0c <__cmpdf2+0x1c>
 8000a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdrcmple>:
 8000a6c:	4684      	mov	ip, r0
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4662      	mov	r2, ip
 8000a72:	468c      	mov	ip, r1
 8000a74:	4619      	mov	r1, r3
 8000a76:	4663      	mov	r3, ip
 8000a78:	e000      	b.n	8000a7c <__aeabi_cdcmpeq>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdcmpeq>:
 8000a7c:	b501      	push	{r0, lr}
 8000a7e:	f7ff ffb7 	bl	80009f0 <__cmpdf2>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	bf48      	it	mi
 8000a86:	f110 0f00 	cmnmi.w	r0, #0
 8000a8a:	bd01      	pop	{r0, pc}

08000a8c <__aeabi_dcmpeq>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff fff4 	bl	8000a7c <__aeabi_cdcmpeq>
 8000a94:	bf0c      	ite	eq
 8000a96:	2001      	moveq	r0, #1
 8000a98:	2000      	movne	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmplt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffea 	bl	8000a7c <__aeabi_cdcmpeq>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmple>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffe0 	bl	8000a7c <__aeabi_cdcmpeq>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpge>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffce 	bl	8000a6c <__aeabi_cdrcmple>
 8000ad0:	bf94      	ite	ls
 8000ad2:	2001      	movls	r0, #1
 8000ad4:	2000      	movhi	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpgt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffc4 	bl	8000a6c <__aeabi_cdrcmple>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmpun>:
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x10>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d10a      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x20>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0001 	mov.w	r0, #1
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_ldivmod>:
 8000c4c:	b97b      	cbnz	r3, 8000c6e <__aeabi_ldivmod+0x22>
 8000c4e:	b972      	cbnz	r2, 8000c6e <__aeabi_ldivmod+0x22>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bfbe      	ittt	lt
 8000c54:	2000      	movlt	r0, #0
 8000c56:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c5a:	e006      	blt.n	8000c6a <__aeabi_ldivmod+0x1e>
 8000c5c:	bf08      	it	eq
 8000c5e:	2800      	cmpeq	r0, #0
 8000c60:	bf1c      	itt	ne
 8000c62:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c66:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6a:	f000 b9bd 	b.w	8000fe8 <__aeabi_idiv0>
 8000c6e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c72:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c76:	2900      	cmp	r1, #0
 8000c78:	db09      	blt.n	8000c8e <__aeabi_ldivmod+0x42>
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db1a      	blt.n	8000cb4 <__aeabi_ldivmod+0x68>
 8000c7e:	f000 f84d 	bl	8000d1c <__udivmoddi4>
 8000c82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8a:	b004      	add	sp, #16
 8000c8c:	4770      	bx	lr
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db1b      	blt.n	8000cd0 <__aeabi_ldivmod+0x84>
 8000c98:	f000 f840 	bl	8000d1c <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	4252      	negs	r2, r2
 8000cae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb2:	4770      	bx	lr
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	f000 f82f 	bl	8000d1c <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4240      	negs	r0, r0
 8000cca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f821 	bl	8000d1c <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cea:	4770      	bx	lr

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000d00:	f000 b972 	b.w	8000fe8 <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f806 	bl	8000d1c <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d20:	9e08      	ldr	r6, [sp, #32]
 8000d22:	4604      	mov	r4, r0
 8000d24:	4688      	mov	r8, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d14b      	bne.n	8000dc2 <__udivmoddi4+0xa6>
 8000d2a:	428a      	cmp	r2, r1
 8000d2c:	4615      	mov	r5, r2
 8000d2e:	d967      	bls.n	8000e00 <__udivmoddi4+0xe4>
 8000d30:	fab2 f282 	clz	r2, r2
 8000d34:	b14a      	cbz	r2, 8000d4a <__udivmoddi4+0x2e>
 8000d36:	f1c2 0720 	rsb	r7, r2, #32
 8000d3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000d42:	4095      	lsls	r5, r2
 8000d44:	ea47 0803 	orr.w	r8, r7, r3
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d4e:	0c23      	lsrs	r3, r4, #16
 8000d50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d54:	fa1f fc85 	uxth.w	ip, r5
 8000d58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d60:	fb07 f10c 	mul.w	r1, r7, ip
 8000d64:	4299      	cmp	r1, r3
 8000d66:	d909      	bls.n	8000d7c <__udivmoddi4+0x60>
 8000d68:	18eb      	adds	r3, r5, r3
 8000d6a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d6e:	f080 811b 	bcs.w	8000fa8 <__udivmoddi4+0x28c>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 8118 	bls.w	8000fa8 <__udivmoddi4+0x28c>
 8000d78:	3f02      	subs	r7, #2
 8000d7a:	442b      	add	r3, r5
 8000d7c:	1a5b      	subs	r3, r3, r1
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x8c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	f080 8107 	bcs.w	8000fac <__udivmoddi4+0x290>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	f240 8104 	bls.w	8000fac <__udivmoddi4+0x290>
 8000da4:	3802      	subs	r0, #2
 8000da6:	442c      	add	r4, r5
 8000da8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000dac:	eba4 040c 	sub.w	r4, r4, ip
 8000db0:	2700      	movs	r7, #0
 8000db2:	b11e      	cbz	r6, 8000dbc <__udivmoddi4+0xa0>
 8000db4:	40d4      	lsrs	r4, r2
 8000db6:	2300      	movs	r3, #0
 8000db8:	e9c6 4300 	strd	r4, r3, [r6]
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d909      	bls.n	8000dda <__udivmoddi4+0xbe>
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	f000 80eb 	beq.w	8000fa2 <__udivmoddi4+0x286>
 8000dcc:	2700      	movs	r7, #0
 8000dce:	e9c6 0100 	strd	r0, r1, [r6]
 8000dd2:	4638      	mov	r0, r7
 8000dd4:	4639      	mov	r1, r7
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	fab3 f783 	clz	r7, r3
 8000dde:	2f00      	cmp	r7, #0
 8000de0:	d147      	bne.n	8000e72 <__udivmoddi4+0x156>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xd0>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 80fa 	bhi.w	8000fe0 <__udivmoddi4+0x2c4>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb61 0303 	sbc.w	r3, r1, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4698      	mov	r8, r3
 8000df6:	2e00      	cmp	r6, #0
 8000df8:	d0e0      	beq.n	8000dbc <__udivmoddi4+0xa0>
 8000dfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000dfe:	e7dd      	b.n	8000dbc <__udivmoddi4+0xa0>
 8000e00:	b902      	cbnz	r2, 8000e04 <__udivmoddi4+0xe8>
 8000e02:	deff      	udf	#255	; 0xff
 8000e04:	fab2 f282 	clz	r2, r2
 8000e08:	2a00      	cmp	r2, #0
 8000e0a:	f040 808f 	bne.w	8000f2c <__udivmoddi4+0x210>
 8000e0e:	1b49      	subs	r1, r1, r5
 8000e10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e14:	fa1f f885 	uxth.w	r8, r5
 8000e18:	2701      	movs	r7, #1
 8000e1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e1e:	0c23      	lsrs	r3, r4, #16
 8000e20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e28:	fb08 f10c 	mul.w	r1, r8, ip
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x124>
 8000e30:	18eb      	adds	r3, r5, r3
 8000e32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x122>
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2bc>
 8000e3e:	4684      	mov	ip, r0
 8000e40:	1a59      	subs	r1, r3, r1
 8000e42:	b2a3      	uxth	r3, r4
 8000e44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e50:	fb08 f800 	mul.w	r8, r8, r0
 8000e54:	45a0      	cmp	r8, r4
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x14c>
 8000e58:	192c      	adds	r4, r5, r4
 8000e5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x14a>
 8000e60:	45a0      	cmp	r8, r4
 8000e62:	f200 80b6 	bhi.w	8000fd2 <__udivmoddi4+0x2b6>
 8000e66:	4618      	mov	r0, r3
 8000e68:	eba4 0408 	sub.w	r4, r4, r8
 8000e6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e70:	e79f      	b.n	8000db2 <__udivmoddi4+0x96>
 8000e72:	f1c7 0c20 	rsb	ip, r7, #32
 8000e76:	40bb      	lsls	r3, r7
 8000e78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e80:	fa01 f407 	lsl.w	r4, r1, r7
 8000e84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e90:	4325      	orrs	r5, r4
 8000e92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e96:	0c2c      	lsrs	r4, r5, #16
 8000e98:	fb08 3319 	mls	r3, r8, r9, r3
 8000e9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ea0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ea4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ea8:	429c      	cmp	r4, r3
 8000eaa:	fa02 f207 	lsl.w	r2, r2, r7
 8000eae:	fa00 f107 	lsl.w	r1, r0, r7
 8000eb2:	d90b      	bls.n	8000ecc <__udivmoddi4+0x1b0>
 8000eb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	f080 8087 	bcs.w	8000fce <__udivmoddi4+0x2b2>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f240 8084 	bls.w	8000fce <__udivmoddi4+0x2b2>
 8000ec6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eca:	4473      	add	r3, lr
 8000ecc:	1b1b      	subs	r3, r3, r4
 8000ece:	b2ad      	uxth	r5, r5
 8000ed0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ed8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000edc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ee0:	45a2      	cmp	sl, r4
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1da>
 8000ee4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eec:	d26b      	bcs.n	8000fc6 <__udivmoddi4+0x2aa>
 8000eee:	45a2      	cmp	sl, r4
 8000ef0:	d969      	bls.n	8000fc6 <__udivmoddi4+0x2aa>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4474      	add	r4, lr
 8000ef6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	eba4 040a 	sub.w	r4, r4, sl
 8000f02:	454c      	cmp	r4, r9
 8000f04:	46c2      	mov	sl, r8
 8000f06:	464b      	mov	r3, r9
 8000f08:	d354      	bcc.n	8000fb4 <__udivmoddi4+0x298>
 8000f0a:	d051      	beq.n	8000fb0 <__udivmoddi4+0x294>
 8000f0c:	2e00      	cmp	r6, #0
 8000f0e:	d069      	beq.n	8000fe4 <__udivmoddi4+0x2c8>
 8000f10:	ebb1 050a 	subs.w	r5, r1, sl
 8000f14:	eb64 0403 	sbc.w	r4, r4, r3
 8000f18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f1c:	40fd      	lsrs	r5, r7
 8000f1e:	40fc      	lsrs	r4, r7
 8000f20:	ea4c 0505 	orr.w	r5, ip, r5
 8000f24:	e9c6 5400 	strd	r5, r4, [r6]
 8000f28:	2700      	movs	r7, #0
 8000f2a:	e747      	b.n	8000dbc <__udivmoddi4+0xa0>
 8000f2c:	f1c2 0320 	rsb	r3, r2, #32
 8000f30:	fa20 f703 	lsr.w	r7, r0, r3
 8000f34:	4095      	lsls	r5, r2
 8000f36:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f42:	4338      	orrs	r0, r7
 8000f44:	0c01      	lsrs	r1, r0, #16
 8000f46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f4a:	fa1f f885 	uxth.w	r8, r5
 8000f4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f56:	fb07 f308 	mul.w	r3, r7, r8
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f60:	d907      	bls.n	8000f72 <__udivmoddi4+0x256>
 8000f62:	1869      	adds	r1, r5, r1
 8000f64:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f68:	d22f      	bcs.n	8000fca <__udivmoddi4+0x2ae>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d92d      	bls.n	8000fca <__udivmoddi4+0x2ae>
 8000f6e:	3f02      	subs	r7, #2
 8000f70:	4429      	add	r1, r5
 8000f72:	1acb      	subs	r3, r1, r3
 8000f74:	b281      	uxth	r1, r0
 8000f76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f82:	fb00 f308 	mul.w	r3, r0, r8
 8000f86:	428b      	cmp	r3, r1
 8000f88:	d907      	bls.n	8000f9a <__udivmoddi4+0x27e>
 8000f8a:	1869      	adds	r1, r5, r1
 8000f8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f90:	d217      	bcs.n	8000fc2 <__udivmoddi4+0x2a6>
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d915      	bls.n	8000fc2 <__udivmoddi4+0x2a6>
 8000f96:	3802      	subs	r0, #2
 8000f98:	4429      	add	r1, r5
 8000f9a:	1ac9      	subs	r1, r1, r3
 8000f9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fa0:	e73b      	b.n	8000e1a <__udivmoddi4+0xfe>
 8000fa2:	4637      	mov	r7, r6
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	e709      	b.n	8000dbc <__udivmoddi4+0xa0>
 8000fa8:	4607      	mov	r7, r0
 8000faa:	e6e7      	b.n	8000d7c <__udivmoddi4+0x60>
 8000fac:	4618      	mov	r0, r3
 8000fae:	e6fb      	b.n	8000da8 <__udivmoddi4+0x8c>
 8000fb0:	4541      	cmp	r1, r8
 8000fb2:	d2ab      	bcs.n	8000f0c <__udivmoddi4+0x1f0>
 8000fb4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fb8:	eb69 020e 	sbc.w	r2, r9, lr
 8000fbc:	3801      	subs	r0, #1
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	e7a4      	b.n	8000f0c <__udivmoddi4+0x1f0>
 8000fc2:	4660      	mov	r0, ip
 8000fc4:	e7e9      	b.n	8000f9a <__udivmoddi4+0x27e>
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	e795      	b.n	8000ef6 <__udivmoddi4+0x1da>
 8000fca:	4667      	mov	r7, ip
 8000fcc:	e7d1      	b.n	8000f72 <__udivmoddi4+0x256>
 8000fce:	4681      	mov	r9, r0
 8000fd0:	e77c      	b.n	8000ecc <__udivmoddi4+0x1b0>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	442c      	add	r4, r5
 8000fd6:	e747      	b.n	8000e68 <__udivmoddi4+0x14c>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	442b      	add	r3, r5
 8000fde:	e72f      	b.n	8000e40 <__udivmoddi4+0x124>
 8000fe0:	4638      	mov	r0, r7
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xda>
 8000fe4:	4637      	mov	r7, r6
 8000fe6:	e6e9      	b.n	8000dbc <__udivmoddi4+0xa0>

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <BMP280_init>:
#include "BMP280.h"
#include "math.h"

extern I2C_HandleTypeDef hi2c1;

void BMP280_init(sBMP280_handle_t *hBMP280){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	uint8_t chip_id, reset = 0xB6;
 8000ff4:	23b6      	movs	r3, #182	; 0xb6
 8000ff6:	73bb      	strb	r3, [r7, #14]
	BMP280_writeReg(0xE0, &reset, 1);
 8000ff8:	f107 030e 	add.w	r3, r7, #14
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4619      	mov	r1, r3
 8001000:	20e0      	movs	r0, #224	; 0xe0
 8001002:	f000 fb11 	bl	8001628 <BMP280_writeReg>
	BMP280_readReg(0xD0, &chip_id, 1);
 8001006:	f107 030f 	add.w	r3, r7, #15
 800100a:	2201      	movs	r2, #1
 800100c:	4619      	mov	r1, r3
 800100e:	20d0      	movs	r0, #208	; 0xd0
 8001010:	f000 faec 	bl	80015ec <BMP280_readReg>

	HAL_Delay(500);
 8001014:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001018:	f001 fd48 	bl	8002aac <HAL_Delay>
	uint8_t data[2];
	data[0] = 0b10110111;
 800101c:	23b7      	movs	r3, #183	; 0xb7
 800101e:	733b      	strb	r3, [r7, #12]
	data[1] = 0b01010100;
 8001020:	2354      	movs	r3, #84	; 0x54
 8001022:	737b      	strb	r3, [r7, #13]
	BMP280_writeReg(0xF4, data, 2);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2202      	movs	r2, #2
 800102a:	4619      	mov	r1, r3
 800102c:	20f4      	movs	r0, #244	; 0xf4
 800102e:	f000 fafb 	bl	8001628 <BMP280_writeReg>
	HAL_Delay(500);
 8001032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001036:	f001 fd39 	bl	8002aac <HAL_Delay>

	BMP280_get_calibrate(hBMP280);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f808 	bl	8001050 <BMP280_get_calibrate>

	HAL_Delay(500);
 8001040:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001044:	f001 fd32 	bl	8002aac <HAL_Delay>
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <BMP280_get_calibrate>:


void BMP280_get_calibrate(sBMP280_handle_t *hBMP280){
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]


	uint8_t rx_buff[24];
	BMP280_readReg(0x88, rx_buff, 24);
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2218      	movs	r2, #24
 800105e:	4619      	mov	r1, r3
 8001060:	2088      	movs	r0, #136	; 0x88
 8001062:	f000 fac3 	bl	80015ec <BMP280_readReg>

	hBMP280->t1 =(rx_buff[0])+(rx_buff[1]<<8);
 8001066:	7a3b      	ldrb	r3, [r7, #8]
 8001068:	b29a      	uxth	r2, r3
 800106a:	7a7b      	ldrb	r3, [r7, #9]
 800106c:	b29b      	uxth	r3, r3
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b29b      	uxth	r3, r3
 8001072:	4413      	add	r3, r2
 8001074:	b29a      	uxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	809a      	strh	r2, [r3, #4]
	hBMP280->t2 =(rx_buff[2])+(rx_buff[3]<<8);
 800107a:	7abb      	ldrb	r3, [r7, #10]
 800107c:	b29a      	uxth	r2, r3
 800107e:	7afb      	ldrb	r3, [r7, #11]
 8001080:	b29b      	uxth	r3, r3
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b29b      	uxth	r3, r3
 8001086:	4413      	add	r3, r2
 8001088:	b29b      	uxth	r3, r3
 800108a:	b21a      	sxth	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	80da      	strh	r2, [r3, #6]
	hBMP280->t3 =(rx_buff[4])+(rx_buff[5]<<8);
 8001090:	7b3b      	ldrb	r3, [r7, #12]
 8001092:	b29a      	uxth	r2, r3
 8001094:	7b7b      	ldrb	r3, [r7, #13]
 8001096:	b29b      	uxth	r3, r3
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b29b      	uxth	r3, r3
 800109c:	4413      	add	r3, r2
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	811a      	strh	r2, [r3, #8]
	hBMP280->p1 =(rx_buff[6])+(rx_buff[7]<<8);
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4413      	add	r3, r2
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	815a      	strh	r2, [r3, #10]
	hBMP280->p2 =(rx_buff[8])+(rx_buff[9]<<8);
 80010ba:	7c3b      	ldrb	r3, [r7, #16]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	7c7b      	ldrb	r3, [r7, #17]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4413      	add	r3, r2
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	819a      	strh	r2, [r3, #12]
	hBMP280->p3 =(rx_buff[10])+(rx_buff[11]<<8);
 80010d0:	7cbb      	ldrb	r3, [r7, #18]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	7cfb      	ldrb	r3, [r7, #19]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4413      	add	r3, r2
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	81da      	strh	r2, [r3, #14]
	hBMP280->p4 =(rx_buff[12])+(rx_buff[13]<<8);
 80010e6:	7d3b      	ldrb	r3, [r7, #20]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	7d7b      	ldrb	r3, [r7, #21]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	4413      	add	r3, r2
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	821a      	strh	r2, [r3, #16]
	hBMP280->p5 =(rx_buff[14])+(rx_buff[15]<<8);
 80010fc:	7dbb      	ldrb	r3, [r7, #22]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	b29b      	uxth	r3, r3
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b29b      	uxth	r3, r3
 8001108:	4413      	add	r3, r2
 800110a:	b29b      	uxth	r3, r3
 800110c:	b21a      	sxth	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	825a      	strh	r2, [r3, #18]
	hBMP280->p6 =(rx_buff[16])+(rx_buff[17]<<8);
 8001112:	7e3b      	ldrb	r3, [r7, #24]
 8001114:	b29a      	uxth	r2, r3
 8001116:	7e7b      	ldrb	r3, [r7, #25]
 8001118:	b29b      	uxth	r3, r3
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b29b      	uxth	r3, r3
 800111e:	4413      	add	r3, r2
 8001120:	b29b      	uxth	r3, r3
 8001122:	b21a      	sxth	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	829a      	strh	r2, [r3, #20]
	hBMP280->p7 =(rx_buff[18])+(rx_buff[19]<<8);
 8001128:	7ebb      	ldrb	r3, [r7, #26]
 800112a:	b29a      	uxth	r2, r3
 800112c:	7efb      	ldrb	r3, [r7, #27]
 800112e:	b29b      	uxth	r3, r3
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b29b      	uxth	r3, r3
 8001134:	4413      	add	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	b21a      	sxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	82da      	strh	r2, [r3, #22]
	hBMP280->p8 =(rx_buff[20])+(rx_buff[21]<<8);
 800113e:	7f3b      	ldrb	r3, [r7, #28]
 8001140:	b29a      	uxth	r2, r3
 8001142:	7f7b      	ldrb	r3, [r7, #29]
 8001144:	b29b      	uxth	r3, r3
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b29b      	uxth	r3, r3
 800114a:	4413      	add	r3, r2
 800114c:	b29b      	uxth	r3, r3
 800114e:	b21a      	sxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	831a      	strh	r2, [r3, #24]
	hBMP280->p9 =(rx_buff[22])+(rx_buff[23]<<8);
 8001154:	7fbb      	ldrb	r3, [r7, #30]
 8001156:	b29a      	uxth	r2, r3
 8001158:	7ffb      	ldrb	r3, [r7, #31]
 800115a:	b29b      	uxth	r3, r3
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b29b      	uxth	r3, r3
 8001160:	4413      	add	r3, r2
 8001162:	b29b      	uxth	r3, r3
 8001164:	b21a      	sxth	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	835a      	strh	r2, [r3, #26]
}
 800116a:	bf00      	nop
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	0000      	movs	r0, r0
 8001174:	0000      	movs	r0, r0
	...

08001178 <BMP280_calc_alt>:

void BMP280_calc_alt(sBMP280_handle_t *hBMP280){
 8001178:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800117c:	b090      	sub	sp, #64	; 0x40
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]

	uint8_t data[6];

	BMP280_readReg(0xf7, data, 6);
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	2206      	movs	r2, #6
 8001188:	4619      	mov	r1, r3
 800118a:	20f7      	movs	r0, #247	; 0xf7
 800118c:	f000 fa2e 	bl	80015ec <BMP280_readReg>
	int32_t press_raw =(int32_t)((data[0] << 12) | (data[1] << 4) | (data[2] >> 4));
 8001190:	7a3b      	ldrb	r3, [r7, #8]
 8001192:	031a      	lsls	r2, r3, #12
 8001194:	7a7b      	ldrb	r3, [r7, #9]
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	4313      	orrs	r3, r2
 800119a:	7aba      	ldrb	r2, [r7, #10]
 800119c:	0912      	lsrs	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	4313      	orrs	r3, r2
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t	temp_raw = (int32_t)((data[3] << 12) | (data[4] << 4) | (data[5] >> 4));
 80011a4:	7afb      	ldrb	r3, [r7, #11]
 80011a6:	031a      	lsls	r2, r3, #12
 80011a8:	7b3b      	ldrb	r3, [r7, #12]
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	4313      	orrs	r3, r2
 80011ae:	7b7a      	ldrb	r2, [r7, #13]
 80011b0:	0912      	lsrs	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	4313      	orrs	r3, r2
 80011b6:	63bb      	str	r3, [r7, #56]	; 0x38

	int32_t   v_t1, v_t2;
	int64_t   v_p1, v_p2, pressure;
	int32_t   t_fine;

	v_t1 = ((((temp_raw >> 3) - ((int32_t) hBMP280->t1 << 1))) * ((int32_t) hBMP280->t2)) >> 11;
 80011b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ba:	10da      	asrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	889b      	ldrh	r3, [r3, #4]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	12db      	asrs	r3, r3, #11
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
	v_t2 = (((((temp_raw >> 4) - ((int32_t) hBMP280->t1)) * ((temp_raw >> 4) - ((int32_t) hBMP280->t1))) >> 12) * ((int32_t) hBMP280->t3)) >> 14;
 80011d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d4:	111b      	asrs	r3, r3, #4
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	8892      	ldrh	r2, [r2, #4]
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011de:	1112      	asrs	r2, r2, #4
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	8889      	ldrh	r1, [r1, #4]
 80011e4:	1a52      	subs	r2, r2, r1
 80011e6:	fb02 f303 	mul.w	r3, r2, r3
 80011ea:	131b      	asrs	r3, r3, #12
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80011f2:	fb02 f303 	mul.w	r3, r2, r3
 80011f6:	139b      	asrs	r3, r3, #14
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
	t_fine = v_t1 + v_t2;
 80011fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fe:	4413      	add	r3, r2
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c

	v_p1 = ((int64_t) t_fine) - 128000;
 8001202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001204:	4619      	mov	r1, r3
 8001206:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800120a:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800120e:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001212:	e9c7 3408 	strd	r3, r4, [r7, #32]
	v_p2 = v_p1 * v_p1 * (int64_t) hBMP280->p6;
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	6a3a      	ldr	r2, [r7, #32]
 800121a:	fb02 f203 	mul.w	r2, r2, r3
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	6a39      	ldr	r1, [r7, #32]
 8001222:	fb01 f303 	mul.w	r3, r1, r3
 8001226:	441a      	add	r2, r3
 8001228:	6a39      	ldr	r1, [r7, #32]
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	fba1 3403 	umull	r3, r4, r1, r3
 8001230:	4422      	add	r2, r4
 8001232:	4614      	mov	r4, r2
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800123a:	b211      	sxth	r1, r2
 800123c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001240:	fb01 f504 	mul.w	r5, r1, r4
 8001244:	fb03 f002 	mul.w	r0, r3, r2
 8001248:	4428      	add	r0, r5
 800124a:	fba3 3401 	umull	r3, r4, r3, r1
 800124e:	1902      	adds	r2, r0, r4
 8001250:	4614      	mov	r4, r2
 8001252:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001256:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_p2 = v_p2 + ((v_p1 * (int64_t) hBMP280->p5) << 17);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001260:	b21b      	sxth	r3, r3
 8001262:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001266:	6a3a      	ldr	r2, [r7, #32]
 8001268:	fb04 f102 	mul.w	r1, r4, r2
 800126c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126e:	fb03 f202 	mul.w	r2, r3, r2
 8001272:	1888      	adds	r0, r1, r2
 8001274:	6a3a      	ldr	r2, [r7, #32]
 8001276:	fba2 1203 	umull	r1, r2, r2, r3
 800127a:	1883      	adds	r3, r0, r2
 800127c:	461a      	mov	r2, r3
 800127e:	f04f 0500 	mov.w	r5, #0
 8001282:	f04f 0600 	mov.w	r6, #0
 8001286:	0456      	lsls	r6, r2, #17
 8001288:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 800128c:	044d      	lsls	r5, r1, #17
 800128e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001292:	186b      	adds	r3, r5, r1
 8001294:	eb46 0402 	adc.w	r4, r6, r2
 8001298:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_p2 = v_p2 + (((int64_t) hBMP280->p4) << 35);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80012a2:	b219      	sxth	r1, r3
 80012a4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80012a8:	f04f 0500 	mov.w	r5, #0
 80012ac:	f04f 0600 	mov.w	r6, #0
 80012b0:	00ce      	lsls	r6, r1, #3
 80012b2:	2500      	movs	r5, #0
 80012b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80012b8:	186b      	adds	r3, r5, r1
 80012ba:	eb46 0402 	adc.w	r4, r6, r2
 80012be:	e9c7 3406 	strd	r3, r4, [r7, #24]
    v_p1 = ((v_p1 * v_p1 * (int64_t) hBMP280->p3) >> 8) + ((v_p1 * (int64_t) hBMP280->p2) << 12);
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	6a3a      	ldr	r2, [r7, #32]
 80012c6:	fb02 f203 	mul.w	r2, r2, r3
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	6a39      	ldr	r1, [r7, #32]
 80012ce:	fb01 f303 	mul.w	r3, r1, r3
 80012d2:	441a      	add	r2, r3
 80012d4:	6a39      	ldr	r1, [r7, #32]
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	fba1 3403 	umull	r3, r4, r1, r3
 80012dc:	4422      	add	r2, r4
 80012de:	4614      	mov	r4, r2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80012e6:	b211      	sxth	r1, r2
 80012e8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80012ec:	fb01 f504 	mul.w	r5, r1, r4
 80012f0:	fb03 f002 	mul.w	r0, r3, r2
 80012f4:	4428      	add	r0, r5
 80012f6:	fba3 3401 	umull	r3, r4, r3, r1
 80012fa:	1902      	adds	r2, r0, r4
 80012fc:	4614      	mov	r4, r2
 80012fe:	f04f 0100 	mov.w	r1, #0
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	0a19      	lsrs	r1, r3, #8
 8001308:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800130c:	1222      	asrs	r2, r4, #8
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001314:	b21b      	sxth	r3, r3
 8001316:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800131a:	6a38      	ldr	r0, [r7, #32]
 800131c:	fb04 f500 	mul.w	r5, r4, r0
 8001320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001322:	fb03 f000 	mul.w	r0, r3, r0
 8001326:	4428      	add	r0, r5
 8001328:	6a3d      	ldr	r5, [r7, #32]
 800132a:	fba5 5603 	umull	r5, r6, r5, r3
 800132e:	1983      	adds	r3, r0, r6
 8001330:	461e      	mov	r6, r3
 8001332:	f04f 0b00 	mov.w	fp, #0
 8001336:	f04f 0c00 	mov.w	ip, #0
 800133a:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800133e:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001342:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 8001346:	eb1b 0301 	adds.w	r3, fp, r1
 800134a:	eb4c 0402 	adc.w	r4, ip, r2
 800134e:	e9c7 3408 	strd	r3, r4, [r7, #32]
    v_p1 = (((((int64_t) 1) << 47) + v_p1)) * ((int64_t) hBMP280->p1) >> 33;
 8001352:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001356:	1c19      	adds	r1, r3, #0
 8001358:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	895b      	ldrh	r3, [r3, #10]
 8001360:	b29b      	uxth	r3, r3
 8001362:	f04f 0400 	mov.w	r4, #0
 8001366:	fb03 f502 	mul.w	r5, r3, r2
 800136a:	fb01 f004 	mul.w	r0, r1, r4
 800136e:	4428      	add	r0, r5
 8001370:	fba1 3403 	umull	r3, r4, r1, r3
 8001374:	1902      	adds	r2, r0, r4
 8001376:	4614      	mov	r4, r2
 8001378:	f04f 0100 	mov.w	r1, #0
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	1061      	asrs	r1, r4, #1
 8001382:	17e2      	asrs	r2, r4, #31
 8001384:	e9c7 1208 	strd	r1, r2, [r7, #32]

    if(v_p1 == 0) return;
 8001388:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800138c:	4323      	orrs	r3, r4
 800138e:	f000 8118 	beq.w	80015c2 <BMP280_calc_alt+0x44a>

    pressure = 1048576 - press_raw;
 8001392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001394:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001398:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800139c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    pressure = (((pressure << 31) - v_p2) * 3125) / v_p1;
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	ea4f 0963 	mov.w	r9, r3, asr #1
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80013ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80013b0:	4645      	mov	r5, r8
 80013b2:	464e      	mov	r6, r9
 80013b4:	1aed      	subs	r5, r5, r3
 80013b6:	eb66 0604 	sbc.w	r6, r6, r4
 80013ba:	46a8      	mov	r8, r5
 80013bc:	46b1      	mov	r9, r6
 80013be:	eb18 0308 	adds.w	r3, r8, r8
 80013c2:	eb49 0409 	adc.w	r4, r9, r9
 80013c6:	4698      	mov	r8, r3
 80013c8:	46a1      	mov	r9, r4
 80013ca:	eb18 0805 	adds.w	r8, r8, r5
 80013ce:	eb49 0906 	adc.w	r9, r9, r6
 80013d2:	f04f 0100 	mov.w	r1, #0
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80013de:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80013e2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80013e6:	eb18 0801 	adds.w	r8, r8, r1
 80013ea:	eb49 0902 	adc.w	r9, r9, r2
 80013ee:	f04f 0100 	mov.w	r1, #0
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80013fa:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80013fe:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001402:	4688      	mov	r8, r1
 8001404:	4691      	mov	r9, r2
 8001406:	eb18 0805 	adds.w	r8, r8, r5
 800140a:	eb49 0906 	adc.w	r9, r9, r6
 800140e:	f04f 0100 	mov.w	r1, #0
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800141a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800141e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001422:	4688      	mov	r8, r1
 8001424:	4691      	mov	r9, r2
 8001426:	eb18 0005 	adds.w	r0, r8, r5
 800142a:	eb49 0106 	adc.w	r1, r9, r6
 800142e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001432:	f7ff fc0b 	bl	8000c4c <__aeabi_ldivmod>
 8001436:	4603      	mov	r3, r0
 8001438:	460c      	mov	r4, r1
 800143a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    v_p1 = (((int64_t) hBMP280->p9) * (pressure >> 13) * (pressure >> 13)) >> 25;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001444:	b219      	sxth	r1, r3
 8001446:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800144a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	f04f 0400 	mov.w	r4, #0
 8001456:	0b6b      	lsrs	r3, r5, #13
 8001458:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800145c:	1374      	asrs	r4, r6, #13
 800145e:	fb03 f502 	mul.w	r5, r3, r2
 8001462:	fb01 f004 	mul.w	r0, r1, r4
 8001466:	4428      	add	r0, r5
 8001468:	fba1 1203 	umull	r1, r2, r1, r3
 800146c:	1883      	adds	r3, r0, r2
 800146e:	461a      	mov	r2, r3
 8001470:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	f04f 0400 	mov.w	r4, #0
 800147c:	0b6b      	lsrs	r3, r5, #13
 800147e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001482:	1374      	asrs	r4, r6, #13
 8001484:	fb03 f502 	mul.w	r5, r3, r2
 8001488:	fb01 f004 	mul.w	r0, r1, r4
 800148c:	4428      	add	r0, r5
 800148e:	fba1 1203 	umull	r1, r2, r1, r3
 8001492:	1883      	adds	r3, r0, r2
 8001494:	461a      	mov	r2, r3
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	f04f 0400 	mov.w	r4, #0
 800149e:	0e4b      	lsrs	r3, r1, #25
 80014a0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80014a4:	1654      	asrs	r4, r2, #25
 80014a6:	e9c7 3408 	strd	r3, r4, [r7, #32]
    v_p2 = (((int64_t) hBMP280->p8) * pressure) >> 19;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	fb04 f102 	mul.w	r1, r4, r2
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	fb03 f202 	mul.w	r2, r3, r2
 80014c2:	1888      	adds	r0, r1, r2
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	fba2 1203 	umull	r1, r2, r2, r3
 80014ca:	1883      	adds	r3, r0, r2
 80014cc:	461a      	mov	r2, r3
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	f04f 0400 	mov.w	r4, #0
 80014d6:	0ccb      	lsrs	r3, r1, #19
 80014d8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80014dc:	14d4      	asrs	r4, r2, #19
 80014de:	e9c7 3406 	strd	r3, r4, [r7, #24]
    pressure = ((pressure + v_p1 + v_p2) >> 8) + (((int64_t) hBMP280->p7) << 4);
 80014e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80014e6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80014ea:	eb11 0803 	adds.w	r8, r1, r3
 80014ee:	eb42 0904 	adc.w	r9, r2, r4
 80014f2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014f6:	eb13 0508 	adds.w	r5, r3, r8
 80014fa:	eb44 0609 	adc.w	r6, r4, r9
 80014fe:	f04f 0100 	mov.w	r1, #0
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	0a29      	lsrs	r1, r5, #8
 8001508:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800150c:	1232      	asrs	r2, r6, #8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001514:	b21d      	sxth	r5, r3
 8001516:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800151a:	f04f 0800 	mov.w	r8, #0
 800151e:	f04f 0900 	mov.w	r9, #0
 8001522:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001526:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 800152a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800152e:	eb18 0301 	adds.w	r3, r8, r1
 8001532:	eb49 0402 	adc.w	r4, r9, r2
 8001536:	e9c7 3404 	strd	r3, r4, [r7, #16]
    pressure = (pressure / 256);
 800153a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f174 0200 	sbcs.w	r2, r4, #0
 8001544:	da02      	bge.n	800154c <BMP280_calc_alt+0x3d4>
 8001546:	33ff      	adds	r3, #255	; 0xff
 8001548:	f144 0400 	adc.w	r4, r4, #0
 800154c:	f04f 0100 	mov.w	r1, #0
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	0a19      	lsrs	r1, r3, #8
 8001556:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800155a:	1222      	asrs	r2, r4, #8
 800155c:	e9c7 1204 	strd	r1, r2, [r7, #16]

    hBMP280->Altitude = 44330.0 * (1.0f - pow(pressure / 101325.0, 0.1903));
 8001560:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001564:	f7fe fffc 	bl	8000560 <__aeabi_l2d>
 8001568:	a31e      	add	r3, pc, #120	; (adr r3, 80015e4 <BMP280_calc_alt+0x46c>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7ff f94f 	bl	8000810 <__aeabi_ddiv>
 8001572:	4603      	mov	r3, r0
 8001574:	460c      	mov	r4, r1
 8001576:	ec44 3b17 	vmov	d7, r3, r4
 800157a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80015d0 <BMP280_calc_alt+0x458>
 800157e:	eeb0 0a47 	vmov.f32	s0, s14
 8001582:	eef0 0a67 	vmov.f32	s1, s15
 8001586:	f009 fe5f 	bl	800b248 <pow>
 800158a:	ec54 3b10 	vmov	r3, r4, d0
 800158e:	461a      	mov	r2, r3
 8001590:	4623      	mov	r3, r4
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	4912      	ldr	r1, [pc, #72]	; (80015e0 <BMP280_calc_alt+0x468>)
 8001598:	f7fe fe58 	bl	800024c <__aeabi_dsub>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	a30c      	add	r3, pc, #48	; (adr r3, 80015d8 <BMP280_calc_alt+0x460>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff f807 	bl	80005bc <__aeabi_dmul>
 80015ae:	4603      	mov	r3, r0
 80015b0:	460c      	mov	r4, r1
 80015b2:	4618      	mov	r0, r3
 80015b4:	4621      	mov	r1, r4
 80015b6:	f7ff faf9 	bl	8000bac <__aeabi_d2f>
 80015ba:	4602      	mov	r2, r0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e000      	b.n	80015c4 <BMP280_calc_alt+0x44c>
    if(v_p1 == 0) return;
 80015c2:	bf00      	nop
}
 80015c4:	3740      	adds	r7, #64	; 0x40
 80015c6:	46bd      	mov	sp, r7
 80015c8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80015cc:	f3af 8000 	nop.w
 80015d0:	1a36e2eb 	.word	0x1a36e2eb
 80015d4:	3fc85bc0 	.word	0x3fc85bc0
 80015d8:	00000000 	.word	0x00000000
 80015dc:	40e5a540 	.word	0x40e5a540
 80015e0:	3ff00000 	.word	0x3ff00000
 80015e4:	00000000 	.word	0x00000000
 80015e8:	40f8bcd0 	.word	0x40f8bcd0

080015ec <BMP280_readReg>:

void BMP280_readReg(uint8_t reg, uint8_t *data, uint8_t len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af04      	add	r7, sp, #16
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	4613      	mov	r3, r2
 80015fa:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c1, (0x76)<<1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	b299      	uxth	r1, r3
 8001600:	79bb      	ldrb	r3, [r7, #6]
 8001602:	b29b      	uxth	r3, r3
 8001604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001608:	9202      	str	r2, [sp, #8]
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	460a      	mov	r2, r1
 8001614:	21ec      	movs	r1, #236	; 0xec
 8001616:	4803      	ldr	r0, [pc, #12]	; (8001624 <BMP280_readReg+0x38>)
 8001618:	f002 f962 	bl	80038e0 <HAL_I2C_Mem_Read>

}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20001c28 	.word	0x20001c28

08001628 <BMP280_writeReg>:

void BMP280_writeReg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af04      	add	r7, sp, #16
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	4613      	mov	r3, r2
 8001636:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(&hi2c1, (0x76)<<1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	b299      	uxth	r1, r3
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	b29b      	uxth	r3, r3
 8001640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001644:	9202      	str	r2, [sp, #8]
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2301      	movs	r3, #1
 800164e:	460a      	mov	r2, r1
 8001650:	21ec      	movs	r1, #236	; 0xec
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <BMP280_writeReg+0x38>)
 8001654:	f002 f830 	bl	80036b8 <HAL_I2C_Mem_Write>

}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20001c28 	.word	0x20001c28

08001664 <BNO055_init>:

#include "BNO055.h"

extern I2C_HandleTypeDef hi2c1;

void BNO055_init(){
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
	uint8_t data = 0b00001100;
 800166a:	230c      	movs	r3, #12
 800166c:	71fb      	strb	r3, [r7, #7]
	BNO055_write_reg(0x3D, &data, 1);
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	2201      	movs	r2, #1
 8001672:	4619      	mov	r1, r3
 8001674:	203d      	movs	r0, #61	; 0x3d
 8001676:	f000 f871 	bl	800175c <BNO055_write_reg>
	HAL_Delay(200);
 800167a:	20c8      	movs	r0, #200	; 0xc8
 800167c:	f001 fa16 	bl	8002aac <HAL_Delay>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <BNO055_get_euler>:

void BNO055_get_euler(sBNO055_handle_t *hBNO055){
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	int16_t head_raw, roll_raw, pitch_raw;
	uint8_t data[6];

	BNO055_read_reg(0x1A, data, 6);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2206      	movs	r2, #6
 8001696:	4619      	mov	r1, r3
 8001698:	201a      	movs	r0, #26
 800169a:	f000 f841 	bl	8001720 <BNO055_read_reg>

    head_raw = (int16_t)((data[1] << 8) | data[0]);
 800169e:	7b7b      	ldrb	r3, [r7, #13]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	7b3b      	ldrb	r3, [r7, #12]
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	82fb      	strh	r3, [r7, #22]
    roll_raw = (int16_t)((data[3] << 8) | data[2]);
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	82bb      	strh	r3, [r7, #20]
    pitch_raw = (int16_t)((data[5] << 8) | data[4]);
 80016ba:	7c7b      	ldrb	r3, [r7, #17]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21a      	sxth	r2, r3
 80016c0:	7c3b      	ldrb	r3, [r7, #16]
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	827b      	strh	r3, [r7, #18]

	hBNO055->head = head_raw / 16.0f;
 80016c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80016d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	edc3 7a00 	vstr	s15, [r3]
	hBNO055->roll = roll_raw / 16.0f;
 80016e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ee:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80016f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	edc3 7a01 	vstr	s15, [r3, #4]
	hBNO055->pitch = pitch_raw / 16.0f;
 80016fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001708:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800170c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <BNO055_read_reg>:


void BNO055_read_reg(uint8_t reg, uint8_t *data, uint8_t len){
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af04      	add	r7, sp, #16
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
 800172c:	4613      	mov	r3, r2
 800172e:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c1, (0x28)<<1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	b299      	uxth	r1, r3
 8001734:	79bb      	ldrb	r3, [r7, #6]
 8001736:	b29b      	uxth	r3, r3
 8001738:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800173c:	9202      	str	r2, [sp, #8]
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2301      	movs	r3, #1
 8001746:	460a      	mov	r2, r1
 8001748:	2150      	movs	r1, #80	; 0x50
 800174a:	4803      	ldr	r0, [pc, #12]	; (8001758 <BNO055_read_reg+0x38>)
 800174c:	f002 f8c8 	bl	80038e0 <HAL_I2C_Mem_Read>

}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20001c28 	.word	0x20001c28

0800175c <BNO055_write_reg>:
void BNO055_write_reg(uint8_t reg, uint8_t *data, uint8_t len){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af04      	add	r7, sp, #16
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	4613      	mov	r3, r2
 800176a:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(&hi2c1, (0x28)<<1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	b299      	uxth	r1, r3
 8001770:	79bb      	ldrb	r3, [r7, #6]
 8001772:	b29b      	uxth	r3, r3
 8001774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001778:	9202      	str	r2, [sp, #8]
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2301      	movs	r3, #1
 8001782:	460a      	mov	r2, r1
 8001784:	2150      	movs	r1, #80	; 0x50
 8001786:	4803      	ldr	r0, [pc, #12]	; (8001794 <BNO055_write_reg+0x38>)
 8001788:	f001 ff96 	bl	80036b8 <HAL_I2C_Mem_Write>

}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20001c28 	.word	0x20001c28

08001798 <isEmpty>:

extern UART_HandleTypeDef huart3;



int isEmpty(char *pStart) {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	     if (',' != *pStart && '*' != *pStart && pStart != NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b2c      	cmp	r3, #44	; 0x2c
 80017a6:	d008      	beq.n	80017ba <isEmpty+0x22>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b2a      	cmp	r3, #42	; 0x2a
 80017ae:	d004      	beq.n	80017ba <isEmpty+0x22>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <isEmpty+0x22>
	       return 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <isEmpty+0x24>
	     else
	       return 1;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <parseCoord>:



int parseCoord(sGPS_handle_t *hGPS, char *pStart, float *angleDegrees, float *angle, int32_t *angle_fixed, char *dir){
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b093      	sub	sp, #76	; 0x4c
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]
 char *p = pStart;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 if (!isEmpty(p)) {
 80017da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80017dc:	f7ff ffdc 	bl	8001798 <isEmpty>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 80f8 	bne.w	80019d8 <parseCoord+0x210>
   // get the number in DDDMM.mmmm format and break into components
   char degreebuff[10] = {0}; // Ensure string is terminated after strncpy
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	811a      	strh	r2, [r3, #8]
   char *e = strchr(p, '.');
 80017f4:	212e      	movs	r1, #46	; 0x2e
 80017f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80017f8:	f007 fe6d 	bl	80094d6 <strchr>
 80017fc:	63b8      	str	r0, [r7, #56]	; 0x38
   if (e == NULL || e - p > 6)
 80017fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <parseCoord+0x46>
 8001804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b06      	cmp	r3, #6
 800180c:	dd01      	ble.n	8001812 <parseCoord+0x4a>
     return 0;                // no decimal point in range
 800180e:	2300      	movs	r3, #0
 8001810:	e0e5      	b.n	80019de <parseCoord+0x216>
   strncpy(degreebuff, p, e - p); // get DDDMM
 8001812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	461a      	mov	r2, r3
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001820:	4618      	mov	r0, r3
 8001822:	f007 fe65 	bl	80094f0 <strncpy>
   long dddmm = atol(degreebuff);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4618      	mov	r0, r3
 800182c:	f007 fe11 	bl	8009452 <atol>
 8001830:	6378      	str	r0, [r7, #52]	; 0x34
   long degrees = (dddmm / 100);         // truncate the minutes
 8001832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001834:	4a6c      	ldr	r2, [pc, #432]	; (80019e8 <parseCoord+0x220>)
 8001836:	fb82 1203 	smull	r1, r2, r2, r3
 800183a:	1152      	asrs	r2, r2, #5
 800183c:	17db      	asrs	r3, r3, #31
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
   long minutes = dddmm - degrees * 100; // remove the degrees
 8001842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001844:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800184e:	4413      	add	r3, r2
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
   p = e;                                // start from the decimal point
 8001852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001854:	63fb      	str	r3, [r7, #60]	; 0x3c
   float decminutes = atof(e); // the fraction after the decimal point
 8001856:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001858:	f007 fdf8 	bl	800944c <atof>
 800185c:	ec54 3b10 	vmov	r3, r4, d0
 8001860:	4618      	mov	r0, r3
 8001862:	4621      	mov	r1, r4
 8001864:	f7ff f9a2 	bl	8000bac <__aeabi_d2f>
 8001868:	4603      	mov	r3, r0
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
   p = strchr(p, ',') + 1;            // go to the next field
 800186c:	212c      	movs	r1, #44	; 0x2c
 800186e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001870:	f007 fe31 	bl	80094d6 <strchr>
 8001874:	4603      	mov	r3, r0
 8001876:	3301      	adds	r3, #1
 8001878:	63fb      	str	r3, [r7, #60]	; 0x3c

   // get the NSEW direction as a character
   char nsew = 'X';
 800187a:	2358      	movs	r3, #88	; 0x58
 800187c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   if (!isEmpty(p))
 8001880:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001882:	f7ff ff89 	bl	8001798 <isEmpty>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d148      	bne.n	800191e <parseCoord+0x156>
     nsew = *p; // field is not empty
 800188c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   else
     return 0; // no direction provided

   // set the various numerical formats to their values
   long fixed = degrees * 10000000 + (minutes * 10000000) / 60 +
 8001894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001896:	4a55      	ldr	r2, [pc, #340]	; (80019ec <parseCoord+0x224>)
 8001898:	fb02 f203 	mul.w	r2, r2, r3
 800189c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189e:	4953      	ldr	r1, [pc, #332]	; (80019ec <parseCoord+0x224>)
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4952      	ldr	r1, [pc, #328]	; (80019f0 <parseCoord+0x228>)
 80018a6:	fb81 0103 	smull	r0, r1, r1, r3
 80018aa:	4419      	add	r1, r3
 80018ac:	1149      	asrs	r1, r1, #5
 80018ae:	17db      	asrs	r3, r3, #31
 80018b0:	1acb      	subs	r3, r1, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                (decminutes * 10000000) / 60;
 80018bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018c0:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80019f4 <parseCoord+0x22c>
 80018c4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80018c8:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 80019f8 <parseCoord+0x230>
 80018cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
   long fixed = degrees * 10000000 + (minutes * 10000000) / 60 +
 80018d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d8:	ee17 3a90 	vmov	r3, s15
 80018dc:	647b      	str	r3, [r7, #68]	; 0x44
   float ang = degrees * 100 + minutes + decminutes;
 80018de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e0:	2264      	movs	r2, #100	; 0x64
 80018e2:	fb02 f203 	mul.w	r2, r2, r3
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	4413      	add	r3, r2
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80018f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fa:	edc7 7a08 	vstr	s15, [r7, #32]
   float deg = fixed / (float)10000000.;
 80018fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001908:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80019f4 <parseCoord+0x22c>
 800190c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001910:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
   if (nsew == 'S' ||
 8001914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001918:	2b53      	cmp	r3, #83	; 0x53
 800191a:	d006      	beq.n	800192a <parseCoord+0x162>
 800191c:	e001      	b.n	8001922 <parseCoord+0x15a>
     return 0; // no direction provided
 800191e:	2300      	movs	r3, #0
 8001920:	e05d      	b.n	80019de <parseCoord+0x216>
   if (nsew == 'S' ||
 8001922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001926:	2b57      	cmp	r3, #87	; 0x57
 8001928:	d108      	bne.n	800193c <parseCoord+0x174>
       nsew == 'W') { // fixed and deg are signed, but DDDMM.mmmm is not
     fixed = -fixed;
 800192a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800192c:	425b      	negs	r3, r3
 800192e:	647b      	str	r3, [r7, #68]	; 0x44
     deg = -deg;
 8001930:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001934:	eef1 7a67 	vneg.f32	s15, s15
 8001938:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
   }

   // reject directions that are not NSEW
   if (nsew != 'N' && nsew != 'S' && nsew != 'E' && nsew != 'W')
 800193c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001940:	2b4e      	cmp	r3, #78	; 0x4e
 8001942:	d00d      	beq.n	8001960 <parseCoord+0x198>
 8001944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001948:	2b53      	cmp	r3, #83	; 0x53
 800194a:	d009      	beq.n	8001960 <parseCoord+0x198>
 800194c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001950:	2b45      	cmp	r3, #69	; 0x45
 8001952:	d005      	beq.n	8001960 <parseCoord+0x198>
 8001954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001958:	2b57      	cmp	r3, #87	; 0x57
 800195a:	d001      	beq.n	8001960 <parseCoord+0x198>
     return 0;
 800195c:	2300      	movs	r3, #0
 800195e:	e03e      	b.n	80019de <parseCoord+0x216>

   // reject angles that are out of range
   if (nsew == 'N' || nsew == 'S')
 8001960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001964:	2b4e      	cmp	r3, #78	; 0x4e
 8001966:	d003      	beq.n	8001970 <parseCoord+0x1a8>
 8001968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800196c:	2b53      	cmp	r3, #83	; 0x53
 800196e:	d10c      	bne.n	800198a <parseCoord+0x1c2>
     if (abs(deg) > 90)
 8001970:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001978:	ee17 3a90 	vmov	r3, s15
 800197c:	2b00      	cmp	r3, #0
 800197e:	bfb8      	it	lt
 8001980:	425b      	neglt	r3, r3
 8001982:	2b5a      	cmp	r3, #90	; 0x5a
 8001984:	dd01      	ble.n	800198a <parseCoord+0x1c2>
       return 0;
 8001986:	2300      	movs	r3, #0
 8001988:	e029      	b.n	80019de <parseCoord+0x216>
   if (abs(deg) > 180)
 800198a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800198e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001992:	ee17 3a90 	vmov	r3, s15
 8001996:	2b00      	cmp	r3, #0
 8001998:	bfb8      	it	lt
 800199a:	425b      	neglt	r3, r3
 800199c:	2bb4      	cmp	r3, #180	; 0xb4
 800199e:	dd01      	ble.n	80019a4 <parseCoord+0x1dc>
     return 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e01c      	b.n	80019de <parseCoord+0x216>

   // store in locations passed as args
   if (angle != NULL)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <parseCoord+0x1e8>
     *angle = ang;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6a3a      	ldr	r2, [r7, #32]
 80019ae:	601a      	str	r2, [r3, #0]
   if (angle_fixed != NULL)
 80019b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <parseCoord+0x1f4>
     *angle_fixed = fixed;
 80019b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019ba:	601a      	str	r2, [r3, #0]
   if (angleDegrees != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <parseCoord+0x200>
     *angleDegrees = deg;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019c6:	601a      	str	r2, [r3, #0]
   if (dir != NULL)
 80019c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d006      	beq.n	80019dc <parseCoord+0x214>
     *dir = nsew;
 80019ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	e001      	b.n	80019dc <parseCoord+0x214>
 } else
   return 0; // no number
 80019d8:	2300      	movs	r3, #0
 80019da:	e000      	b.n	80019de <parseCoord+0x216>
 return 1;
 80019dc:	2301      	movs	r3, #1
}
 80019de:	4618      	mov	r0, r3
 80019e0:	374c      	adds	r7, #76	; 0x4c
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd90      	pop	{r4, r7, pc}
 80019e6:	bf00      	nop
 80019e8:	51eb851f 	.word	0x51eb851f
 80019ec:	00989680 	.word	0x00989680
 80019f0:	88888889 	.word	0x88888889
 80019f4:	4b189680 	.word	0x4b189680
 80019f8:	42700000 	.word	0x42700000

080019fc <parseGPS>:

int parseGPS(sGPS_handle_t *hGPS){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	6078      	str	r0, [r7, #4]

	  char *p = hGPS->gpsBuffer; // Pointer to move through the sentence -- good parsers are
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3303      	adds	r3, #3
 8001a08:	60fb      	str	r3, [r7, #12]
	                  // non-destructive
	  p+=3;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3303      	adds	r3, #3
 8001a0e:	60fb      	str	r3, [r7, #12]

	  strncpy(hGPS->thisSentence, p, 3);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3367      	adds	r3, #103	; 0x67
 8001a14:	2203      	movs	r2, #3
 8001a16:	68f9      	ldr	r1, [r7, #12]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f007 fd69 	bl	80094f0 <strncpy>
	  p = strchr(p, ',') + 1; // Skip to char after the next comma, then check.
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f007 fd58 	bl	80094d6 <strchr>
 8001a26:	4603      	mov	r3, r0
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]

	  // This may look inefficient, but an M0 will get down the list in about 1 us /
	  // strcmp()! Put the GPS sentences from Adafruit_GPS at the top to make
	  // pruning excess code easier. Otherwise, keep them alphabetical for ease of
	  // reading.
	  if (!strcmp(hGPS->thisSentence, "GGA")) { //************************************GGA
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3367      	adds	r3, #103	; 0x67
 8001a30:	4923      	ldr	r1, [pc, #140]	; (8001ac0 <parseGPS+0xc4>)
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fbf4 	bl	8000220 <strcmp>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d13a      	bne.n	8001ab4 <parseGPS+0xb8>
	    // Adafruit from Actisense NGW-1 from SH CP150C

	    p = strchr(p, ',') + 1; // parse time with specialized function
 8001a3e:	212c      	movs	r1, #44	; 0x2c
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f007 fd48 	bl	80094d6 <strchr>
 8001a46:	4603      	mov	r3, r0
 8001a48:	3301      	adds	r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
	    // parse out both latitude and direction, then go to next field, or fail
	    parseCoord(hGPS, p, &hGPS->latitudeDegrees, &hGPS->latitude, &hGPS->latitude_fixed, &hGPS->lat);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3374      	adds	r3, #116	; 0x74
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	32a4      	adds	r2, #164	; 0xa4
 8001a60:	9201      	str	r2, [sp, #4]
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	4603      	mov	r3, r0
 8001a66:	460a      	mov	r2, r1
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff feac 	bl	80017c8 <parseCoord>

	    p = strchr(p, ',') + 1;
 8001a70:	212c      	movs	r1, #44	; 0x2c
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f007 fd2f 	bl	80094d6 <strchr>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
	    p = strchr(p, ',') + 1;
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f007 fd28 	bl	80094d6 <strchr>
 8001a86:	4603      	mov	r3, r0
 8001a88:	3301      	adds	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
	    // parse out both longitude and direction, then go to next field, or fail
	    parseCoord(hGPS, p, &hGPS->longitudeDegrees, &hGPS->longitude, &hGPS->longitude_fixed, &hGPS->lon);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3378      	adds	r3, #120	; 0x78
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	32a5      	adds	r2, #165	; 0xa5
 8001aa0:	9201      	str	r2, [sp, #4]
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	460a      	mov	r2, r1
 8001aa8:	68f9      	ldr	r1, [r7, #12]
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fe8c 	bl	80017c8 <parseCoord>

	    else {
	      return 0; // didn't find the required sentence definition
	    }

	    return 1;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <parseGPS+0xba>
	      return 0; // didn't find the required sentence definition
 8001ab4:	2300      	movs	r3, #0

}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	0800c3c8 	.word	0x0800c3c8
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <Gorev1_0x1>:
 */

#include "Gorev.h"
#include "math.h"

_Bool Gorev1_0x1(sSensor_Data_t *Sensor_Data){
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
		float angle;

		angle = sqrt(pow(Sensor_Data->roll, 2) + pow(Sensor_Data->pitch, 2));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd19 	bl	800050c <__aeabi_f2d>
 8001ada:	4603      	mov	r3, r0
 8001adc:	460c      	mov	r4, r1
 8001ade:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001b58 <Gorev1_0x1+0x90>
 8001ae2:	ec44 3b10 	vmov	d0, r3, r4
 8001ae6:	f009 fbaf 	bl	800b248 <pow>
 8001aea:	ec55 4b10 	vmov	r4, r5, d0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd0a 	bl	800050c <__aeabi_f2d>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001b58 <Gorev1_0x1+0x90>
 8001b00:	ec43 2b10 	vmov	d0, r2, r3
 8001b04:	f009 fba0 	bl	800b248 <pow>
 8001b08:	ec53 2b10 	vmov	r2, r3, d0
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	4629      	mov	r1, r5
 8001b10:	f7fe fb9e 	bl	8000250 <__adddf3>
 8001b14:	4603      	mov	r3, r0
 8001b16:	460c      	mov	r4, r1
 8001b18:	ec44 3b17 	vmov	d7, r3, r4
 8001b1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b20:	eef0 0a67 	vmov.f32	s1, s15
 8001b24:	f009 fd00 	bl	800b528 <sqrt>
 8001b28:	ec54 3b10 	vmov	r3, r4, d0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	4621      	mov	r1, r4
 8001b30:	f7ff f83c 	bl	8000bac <__aeabi_d2f>
 8001b34:	4603      	mov	r3, r0
 8001b36:	60fb      	str	r3, [r7, #12]
		if(angle > 30) return 1;
 8001b38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b3c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	dd01      	ble.n	8001b4e <Gorev1_0x1+0x86>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <Gorev1_0x1+0x88>
		else return 0;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	40000000 	.word	0x40000000

08001b60 <Gorev1_0x2>:

_Bool Gorev1_0x2(sSensor_Data_t *Sensor_Data){
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	if(Sensor_Data->Vz < 5.0) return 1;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b6e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	d501      	bpl.n	8001b80 <Gorev1_0x2+0x20>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <Gorev1_0x2+0x22>
	else return 0;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <Gorev2>:

_Bool Gorev2(sSensor_Data_t *Sensor_Data, _Bool Gorev1){
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	70fb      	strb	r3, [r7, #3]

	if(Gorev1){
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00d      	beq.n	8001bbe <Gorev2+0x2e>
		if((Sensor_Data->Alt) < 650) return 1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ba8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001bcc <Gorev2+0x3c>
 8001bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	d501      	bpl.n	8001bba <Gorev2+0x2a>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e002      	b.n	8001bc0 <Gorev2+0x30>
		else return 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e000      	b.n	8001bc0 <Gorev2+0x30>
	}
	else return 0;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	44228000 	.word	0x44228000

08001bd0 <Sensor_location>:
#include "Sensor.h"
#include "math.h"
#include "stdlib.h"


void Sensor_location(sSensor_Data_t *Sensor_Data, sSensor_Data_raw_t *Raw_Data, sGPS_handle_t hGPS, sBMP280_handle_t hBMP280){
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
 8001bdc:	f107 0110 	add.w	r1, r7, #16
 8001be0:	e881 000c 	stmia.w	r1, {r2, r3}
	Sensor_Data->Lat = hGPS.latitude;
 8001be4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	605a      	str	r2, [r3, #4]
	Sensor_Data->Lon = hGPS.longitude; //??????????????????????????????????????
 8001bea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	601a      	str	r2, [r3, #0]

	Sensor_Data->Alt = Sensor_filter(Raw_Data->Altitude, hBMP280.Altitude);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 f84d 	bl	8001c9c <Sensor_filter>
 8001c02:	eef0 7a40 	vmov.f32	s15, s0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c16:	b002      	add	sp, #8
 8001c18:	4770      	bx	lr

08001c1a <Sensor_euler>:

void Sensor_euler(sSensor_Data_t *Sensor_Data, sBNO055_handle_t hBNO055){
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	f107 0014 	add.w	r0, r7, #20
 8001c28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Sensor_Data->head = hBNO055.head;
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60da      	str	r2, [r3, #12]
	Sensor_Data->roll = hBNO055.roll;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	611a      	str	r2, [r3, #16]
	Sensor_Data->pitch = hBNO055.pitch;
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	615a      	str	r2, [r3, #20]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	b004      	add	sp, #16
 8001c4a:	4770      	bx	lr

08001c4c <Sensor_velocity>:

void Sensor_velocity(sSensor_Data_t *Sensor_Data, sBMP280_handle_t hBMP280){
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	f107 0014 	add.w	r0, r7, #20
 8001c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	static float temp = 0.0;
	Sensor_Data->Vz = (Sensor_Data->Alt - temp)/ 0.1f;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <Sensor_velocity+0x48>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c6e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001c98 <Sensor_velocity+0x4c>
 8001c72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	edc3 7a06 	vstr	s15, [r3, #24]
	temp = Sensor_Data->Alt;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <Sensor_velocity+0x48>)
 8001c82:	6013      	str	r3, [r2, #0]

}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	b004      	add	sp, #16
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000200 	.word	0x20000200
 8001c98:	3dcccccd 	.word	0x3dcccccd

08001c9c <Sensor_filter>:

float Sensor_filter(float *array1, float newdata){
 8001c9c:	b480      	push	{r7}
 8001c9e:	b0a5      	sub	sp, #148	; 0x94
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	ed87 0a00 	vstr	s0, [r7]
	float array2[15], array3[15];

		int i = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		while(i < 15){
 8001cae:	e013      	b.n	8001cd8 <Sensor_filter+0x3c>
			array2[i] = array1[i+1];
 8001cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001cc8:	440b      	add	r3, r1
 8001cca:	3b4c      	subs	r3, #76	; 0x4c
 8001ccc:	601a      	str	r2, [r3, #0]
			i++;
 8001cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		while(i < 15){
 8001cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cdc:	2b0e      	cmp	r3, #14
 8001cde:	dde7      	ble.n	8001cb0 <Sensor_filter+0x14>
		}
		array2[14] = newdata;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	67fb      	str	r3, [r7, #124]	; 0x7c

		i = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		while(i < 15){
 8001cea:	e022      	b.n	8001d32 <Sensor_filter+0x96>
			array1[i] = array2[i];
 8001cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001d00:	440a      	add	r2, r1
 8001d02:	3a4c      	subs	r2, #76	; 0x4c
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	601a      	str	r2, [r3, #0]
			array3[i] = array2[i];
 8001d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001d12:	4413      	add	r3, r2
 8001d14:	3b4c      	subs	r3, #76	; 0x4c
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001d22:	440b      	add	r3, r1
 8001d24:	3b88      	subs	r3, #136	; 0x88
 8001d26:	601a      	str	r2, [r3, #0]
			i++;
 8001d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		while(i < 15){
 8001d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d36:	2b0e      	cmp	r3, #14
 8001d38:	ddd8      	ble.n	8001cec <Sensor_filter+0x50>
		}

		int j, min_idx;

				for (i = 0; i < 14; i++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001d40:	e056      	b.n	8001df0 <Sensor_filter+0x154>
	    			min_idx = i;
 8001d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		        	for (j = i + 1; j < 15; j++)
 8001d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d54:	e01f      	b.n	8001d96 <Sensor_filter+0xfa>
		            	if (array3[j] < array3[min_idx]){
 8001d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001d60:	4413      	add	r3, r2
 8001d62:	3b88      	subs	r3, #136	; 0x88
 8001d64:	ed93 7a00 	vldr	s14, [r3]
 8001d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001d72:	4413      	add	r3, r2
 8001d74:	3b88      	subs	r3, #136	; 0x88
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	d503      	bpl.n	8001d8c <Sensor_filter+0xf0>
		            		min_idx = j;
 8001d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		        	for (j = i + 1; j < 15; j++)
 8001d8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d90:	3301      	adds	r3, #1
 8001d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d9a:	2b0e      	cmp	r3, #14
 8001d9c:	dddb      	ble.n	8001d56 <Sensor_filter+0xba>
						}
		   				float temp = array3[min_idx];
 8001d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001da8:	4413      	add	r3, r2
 8001daa:	3b88      	subs	r3, #136	; 0x88
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		   				array3[min_idx] = array3[i];
 8001db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b88      	subs	r3, #136	; 0x88
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001dcc:	440b      	add	r3, r1
 8001dce:	3b88      	subs	r3, #136	; 0x88
 8001dd0:	601a      	str	r2, [r3, #0]
		    			array3[i] = temp;
 8001dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b88      	subs	r3, #136	; 0x88
 8001de0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001de4:	601a      	str	r2, [r3, #0]
				for (i = 0; i < 14; i++) {
 8001de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dea:	3301      	adds	r3, #1
 8001dec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001df4:	2b0d      	cmp	r3, #13
 8001df6:	dda4      	ble.n	8001d42 <Sensor_filter+0xa6>
					}

				return (float)array3[7];
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	ee07 3a90 	vmov	s15, r3


}
 8001dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001e02:	3794      	adds	r7, #148	; 0x94
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <Telemetry_send_data>:
#include "stdio.h"


extern UART_HandleTypeDef huart1;

void Telemetry_send_data(sSensor_Data_t *Sensor_Data){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b090      	sub	sp, #64	; 0x40
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	uint8_t data_byte[28];
	float data_float[6];
	data_float[0] = Sensor_Data->Lon;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60bb      	str	r3, [r7, #8]
	data_float[1] = Sensor_Data->Lat;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	60fb      	str	r3, [r7, #12]
	data_float[2] = Sensor_Data->Alt;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	613b      	str	r3, [r7, #16]
	data_float[3] = Sensor_Data->head;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	617b      	str	r3, [r7, #20]
	data_float[4] = Sensor_Data->roll;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	61bb      	str	r3, [r7, #24]
	data_float[5] = Sensor_Data->pitch;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	61fb      	str	r3, [r7, #28]

	int i = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(i<6){
 8001e3c:	e015      	b.n	8001e6a <Telemetry_send_data+0x5e>
		float_to_uint8(data_float[i], &data_byte[(i*4)+2]);
 8001e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e46:	4413      	add	r3, r2
 8001e48:	3b38      	subs	r3, #56	; 0x38
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	f107 0220 	add.w	r2, r7, #32
 8001e58:	4413      	add	r3, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e60:	f000 f820 	bl	8001ea4 <float_to_uint8>
		i++;
 8001e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e66:	3301      	adds	r3, #1
 8001e68:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(i<6){
 8001e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	dde6      	ble.n	8001e3e <Telemetry_send_data+0x32>
	}

	data_byte[0] = 36;
 8001e70:	2324      	movs	r3, #36	; 0x24
 8001e72:	f887 3020 	strb.w	r3, [r7, #32]
	data_byte[1] = 36;
 8001e76:	2324      	movs	r3, #36	; 0x24
 8001e78:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	data_byte[26] = 10;
 8001e7c:	230a      	movs	r3, #10
 8001e7e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	data_byte[27] = 10;
 8001e82:	230a      	movs	r3, #10
 8001e84:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	HAL_UART_Transmit(&huart1, data_byte, 28, 1000);
 8001e88:	f107 0120 	add.w	r1, r7, #32
 8001e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e90:	221c      	movs	r2, #28
 8001e92:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <Telemetry_send_data+0x94>)
 8001e94:	f003 fc96 	bl	80057c4 <HAL_UART_Transmit>

}
 8001e98:	bf00      	nop
 8001e9a:	3740      	adds	r7, #64	; 0x40
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20001e14 	.word	0x20001e14

08001ea4 <float_to_uint8>:


void float_to_uint8(float dataIn, uint8_t *adress){
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	ed87 0a01 	vstr	s0, [r7, #4]
 8001eae:	6038      	str	r0, [r7, #0]
			unsigned int sign : 1;
		} raw;
		float f;
	}number;

	number.f = dataIn;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	60fb      	str	r3, [r7, #12]
	*(adress+3) = (number.raw.mantissa) | 0x00;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	3303      	adds	r3, #3
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
	*(adress+2) = (number.raw.mantissa >> 8) | 0x00;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001ec8:	121a      	asrs	r2, r3, #8
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	3302      	adds	r3, #2
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]
	*(adress+1) = (number.raw.mantissa >> 16) | (number.raw.exponent << 7);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001ed8:	141b      	asrs	r3, r3, #16
 8001eda:	b25a      	sxtb	r2, r3
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	01db      	lsls	r3, r3, #7
 8001ee6:	b25b      	sxtb	r3, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	b25a      	sxtb	r2, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
	*(adress+0) = (number.raw.exponent >> 1) | (number.raw.sign << 7);
 8001ef4:	89fb      	ldrh	r3, [r7, #14]
 8001ef6:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	085b      	lsrs	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	b25a      	sxtb	r2, r3
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	01db      	lsls	r3, r3, #7
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b25b      	sxtb	r3, r3
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	701a      	strb	r2, [r3, #0]
};
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int data_index = 0;
uint8_t package_find = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	  if(huart->Instance == USART3){
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <HAL_UART_RxCpltCallback+0x80>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d132      	bne.n	8001f9c <HAL_UART_RxCpltCallback+0x78>
			if(hGPS.checkBuffer == 36){
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <HAL_UART_RxCpltCallback+0x84>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b24      	cmp	r3, #36	; 0x24
 8001f3c:	d102      	bne.n	8001f44 <HAL_UART_RxCpltCallback+0x20>
				package_find = 1;
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_UART_RxCpltCallback+0x88>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
			}

		 if(hGPS.checkBuffer != 10 && package_find == 1){
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_UART_RxCpltCallback+0x84>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b0a      	cmp	r3, #10
 8001f4a:	d011      	beq.n	8001f70 <HAL_UART_RxCpltCallback+0x4c>
 8001f4c:	4b17      	ldr	r3, [pc, #92]	; (8001fac <HAL_UART_RxCpltCallback+0x88>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d10d      	bne.n	8001f70 <HAL_UART_RxCpltCallback+0x4c>
			 hGPS.gpsBuffer[data_index] = hGPS.checkBuffer;
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_UART_RxCpltCallback+0x8c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a13      	ldr	r2, [pc, #76]	; (8001fa8 <HAL_UART_RxCpltCallback+0x84>)
 8001f5a:	7811      	ldrb	r1, [r2, #0]
 8001f5c:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <HAL_UART_RxCpltCallback+0x84>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	460a      	mov	r2, r1
 8001f62:	70da      	strb	r2, [r3, #3]
			 data_index++;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_UART_RxCpltCallback+0x8c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <HAL_UART_RxCpltCallback+0x8c>)
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e010      	b.n	8001f92 <HAL_UART_RxCpltCallback+0x6e>
		 }else{
			 hGPS.gpsBuffer[data_index] = hGPS.checkBuffer;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_UART_RxCpltCallback+0x8c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0c      	ldr	r2, [pc, #48]	; (8001fa8 <HAL_UART_RxCpltCallback+0x84>)
 8001f76:	7811      	ldrb	r1, [r2, #0]
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <HAL_UART_RxCpltCallback+0x84>)
 8001f7a:	4413      	add	r3, r2
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	70da      	strb	r2, [r3, #3]
			parseGPS(&hGPS);
 8001f80:	4809      	ldr	r0, [pc, #36]	; (8001fa8 <HAL_UART_RxCpltCallback+0x84>)
 8001f82:	f7ff fd3b 	bl	80019fc <parseGPS>
			data_index = 0;
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_UART_RxCpltCallback+0x8c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
			package_find = 0;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <HAL_UART_RxCpltCallback+0x88>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
		 }

		 HAL_UART_Receive_DMA(&huart3,&hGPS.checkBuffer,1);
 8001f92:	2201      	movs	r2, #1
 8001f94:	4904      	ldr	r1, [pc, #16]	; (8001fa8 <HAL_UART_RxCpltCallback+0x84>)
 8001f96:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <HAL_UART_RxCpltCallback+0x90>)
 8001f98:	f003 fcaa 	bl	80058f0 <HAL_UART_Receive_DMA>
		}

}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40004800 	.word	0x40004800
 8001fa8:	20001d68 	.word	0x20001d68
 8001fac:	20000208 	.word	0x20000208
 8001fb0:	20000204 	.word	0x20000204
 8001fb4:	20001b98 	.word	0x20001b98

08001fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fbc:	f000 fd3f 	bl	8002a3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc0:	f000 f858 	bl	8002074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fc4:	f000 f9c0 	bl	8002348 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fc8:	f000 f994 	bl	80022f4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001fcc:	f000 f8ba 	bl	8002144 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001fd0:	f000 f8f8 	bl	80021c4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001fd4:	f000 f942 	bl	800225c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	 HAL_UART_Receive_DMA(&huart3,&hGPS.checkBuffer,1);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4917      	ldr	r1, [pc, #92]	; (8002038 <main+0x80>)
 8001fdc:	4817      	ldr	r0, [pc, #92]	; (800203c <main+0x84>)
 8001fde:	f003 fc87 	bl	80058f0 <HAL_UART_Receive_DMA>

	  BMP280_init(&hBMP280);
 8001fe2:	4817      	ldr	r0, [pc, #92]	; (8002040 <main+0x88>)
 8001fe4:	f7ff f802 	bl	8000fec <BMP280_init>
	  BNO055_init();
 8001fe8:	f7ff fb3c 	bl	8001664 <BNO055_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001fec:	f004 fcf0 	bl	80069d0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 8001ff0:	4a14      	ldr	r2, [pc, #80]	; (8002044 <main+0x8c>)
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4814      	ldr	r0, [pc, #80]	; (8002048 <main+0x90>)
 8001ff6:	f004 fd55 	bl	8006aa4 <osThreadNew>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <main+0x94>)
 8001ffe:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002000:	4a13      	ldr	r2, [pc, #76]	; (8002050 <main+0x98>)
 8002002:	2100      	movs	r1, #0
 8002004:	4813      	ldr	r0, [pc, #76]	; (8002054 <main+0x9c>)
 8002006:	f004 fd4d 	bl	8006aa4 <osThreadNew>
 800200a:	4602      	mov	r2, r0
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <main+0xa0>)
 800200e:	601a      	str	r2, [r3, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8002010:	4a12      	ldr	r2, [pc, #72]	; (800205c <main+0xa4>)
 8002012:	2100      	movs	r1, #0
 8002014:	4812      	ldr	r0, [pc, #72]	; (8002060 <main+0xa8>)
 8002016:	f004 fd45 	bl	8006aa4 <osThreadNew>
 800201a:	4602      	mov	r2, r0
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <main+0xac>)
 800201e:	601a      	str	r2, [r3, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8002020:	4a11      	ldr	r2, [pc, #68]	; (8002068 <main+0xb0>)
 8002022:	2100      	movs	r1, #0
 8002024:	4811      	ldr	r0, [pc, #68]	; (800206c <main+0xb4>)
 8002026:	f004 fd3d 	bl	8006aa4 <osThreadNew>
 800202a:	4602      	mov	r2, r0
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <main+0xb8>)
 800202e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002030:	f004 fd02 	bl	8006a38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002034:	e7fe      	b.n	8002034 <main+0x7c>
 8002036:	bf00      	nop
 8002038:	20001d68 	.word	0x20001d68
 800203c:	20001b98 	.word	0x20001b98
 8002040:	20001ec4 	.word	0x20001ec4
 8002044:	0800c424 	.word	0x0800c424
 8002048:	0800241d 	.word	0x0800241d
 800204c:	20001ee4 	.word	0x20001ee4
 8002050:	0800c448 	.word	0x0800c448
 8002054:	08002441 	.word	0x08002441
 8002058:	20001ea0 	.word	0x20001ea0
 800205c:	0800c46c 	.word	0x0800c46c
 8002060:	080024c5 	.word	0x080024c5
 8002064:	20001ea4 	.word	0x20001ea4
 8002068:	0800c490 	.word	0x0800c490
 800206c:	0800255d 	.word	0x0800255d
 8002070:	20001d64 	.word	0x20001d64

08002074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b0a4      	sub	sp, #144	; 0x90
 8002078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800207a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800207e:	2238      	movs	r2, #56	; 0x38
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f007 fa1f 	bl	80094c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002088:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002098:	463b      	mov	r3, r7
 800209a:	2244      	movs	r2, #68	; 0x44
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f007 fa11 	bl	80094c6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f001 ffe9 	bl	800407c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020aa:	2302      	movs	r3, #2
 80020ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020b4:	2340      	movs	r3, #64	; 0x40
 80020b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020b8:	2302      	movs	r3, #2
 80020ba:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020bc:	2302      	movs	r3, #2
 80020be:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80020c0:	2304      	movs	r3, #4
 80020c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80020c4:	2355      	movs	r3, #85	; 0x55
 80020c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020ca:	2302      	movs	r3, #2
 80020cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020d0:	2302      	movs	r3, #2
 80020d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020d6:	2302      	movs	r3, #2
 80020d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 f87f 	bl	80041e4 <HAL_RCC_OscConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80020ec:	f000 fa53 	bl	8002596 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020f0:	230f      	movs	r3, #15
 80020f2:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020f4:	2303      	movs	r3, #3
 80020f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002100:	2300      	movs	r3, #0
 8002102:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002104:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002108:	2104      	movs	r1, #4
 800210a:	4618      	mov	r0, r3
 800210c:	f002 fb82 	bl	8004814 <HAL_RCC_ClockConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002116:	f000 fa3e 	bl	8002596 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800211a:	2345      	movs	r3, #69	; 0x45
 800211c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800212a:	463b      	mov	r3, r7
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fdbf 	bl	8004cb0 <HAL_RCCEx_PeriphCLKConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002138:	f000 fa2d 	bl	8002596 <Error_Handler>
  }
}
 800213c:	bf00      	nop
 800213e:	3790      	adds	r7, #144	; 0x90
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <MX_I2C1_Init+0x74>)
 800214a:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <MX_I2C1_Init+0x78>)
 800214c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800214e:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <MX_I2C1_Init+0x74>)
 8002150:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <MX_I2C1_Init+0x7c>)
 8002152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002154:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <MX_I2C1_Init+0x74>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <MX_I2C1_Init+0x74>)
 800215c:	2201      	movs	r2, #1
 800215e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <MX_I2C1_Init+0x74>)
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002166:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <MX_I2C1_Init+0x74>)
 8002168:	2200      	movs	r2, #0
 800216a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <MX_I2C1_Init+0x74>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <MX_I2C1_Init+0x74>)
 8002174:	2200      	movs	r2, #0
 8002176:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <MX_I2C1_Init+0x74>)
 800217a:	2200      	movs	r2, #0
 800217c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800217e:	480e      	ldr	r0, [pc, #56]	; (80021b8 <MX_I2C1_Init+0x74>)
 8002180:	f001 fa0a 	bl	8003598 <HAL_I2C_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800218a:	f000 fa04 	bl	8002596 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800218e:	2100      	movs	r1, #0
 8002190:	4809      	ldr	r0, [pc, #36]	; (80021b8 <MX_I2C1_Init+0x74>)
 8002192:	f001 fedb 	bl	8003f4c <HAL_I2CEx_ConfigAnalogFilter>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800219c:	f000 f9fb 	bl	8002596 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021a0:	2100      	movs	r1, #0
 80021a2:	4805      	ldr	r0, [pc, #20]	; (80021b8 <MX_I2C1_Init+0x74>)
 80021a4:	f001 ff1d 	bl	8003fe2 <HAL_I2CEx_ConfigDigitalFilter>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021ae:	f000 f9f2 	bl	8002596 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20001c28 	.word	0x20001c28
 80021bc:	40005400 	.word	0x40005400
 80021c0:	30a0a7fb 	.word	0x30a0a7fb

080021c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021c8:	4b22      	ldr	r3, [pc, #136]	; (8002254 <MX_USART1_UART_Init+0x90>)
 80021ca:	4a23      	ldr	r2, [pc, #140]	; (8002258 <MX_USART1_UART_Init+0x94>)
 80021cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021ce:	4b21      	ldr	r3, [pc, #132]	; (8002254 <MX_USART1_UART_Init+0x90>)
 80021d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021d6:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <MX_USART1_UART_Init+0x90>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <MX_USART1_UART_Init+0x90>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <MX_USART1_UART_Init+0x90>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <MX_USART1_UART_Init+0x90>)
 80021ea:	220c      	movs	r2, #12
 80021ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <MX_USART1_UART_Init+0x90>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <MX_USART1_UART_Init+0x90>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <MX_USART1_UART_Init+0x90>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <MX_USART1_UART_Init+0x90>)
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <MX_USART1_UART_Init+0x90>)
 8002208:	2200      	movs	r2, #0
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800220c:	4811      	ldr	r0, [pc, #68]	; (8002254 <MX_USART1_UART_Init+0x90>)
 800220e:	f003 fa89 	bl	8005724 <HAL_UART_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002218:	f000 f9bd 	bl	8002596 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800221c:	2100      	movs	r1, #0
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <MX_USART1_UART_Init+0x90>)
 8002220:	f004 fae9 	bl	80067f6 <HAL_UARTEx_SetTxFifoThreshold>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800222a:	f000 f9b4 	bl	8002596 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800222e:	2100      	movs	r1, #0
 8002230:	4808      	ldr	r0, [pc, #32]	; (8002254 <MX_USART1_UART_Init+0x90>)
 8002232:	f004 fb1e 	bl	8006872 <HAL_UARTEx_SetRxFifoThreshold>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800223c:	f000 f9ab 	bl	8002596 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002240:	4804      	ldr	r0, [pc, #16]	; (8002254 <MX_USART1_UART_Init+0x90>)
 8002242:	f004 fa9f 	bl	8006784 <HAL_UARTEx_DisableFifoMode>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800224c:	f000 f9a3 	bl	8002596 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20001e14 	.word	0x20001e14
 8002258:	40013800 	.word	0x40013800

0800225c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002260:	4b22      	ldr	r3, [pc, #136]	; (80022ec <MX_USART3_UART_Init+0x90>)
 8002262:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <MX_USART3_UART_Init+0x94>)
 8002264:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <MX_USART3_UART_Init+0x90>)
 8002268:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800226c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <MX_USART3_UART_Init+0x90>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <MX_USART3_UART_Init+0x90>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800227a:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <MX_USART3_UART_Init+0x90>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002280:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <MX_USART3_UART_Init+0x90>)
 8002282:	220c      	movs	r2, #12
 8002284:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <MX_USART3_UART_Init+0x90>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800228c:	4b17      	ldr	r3, [pc, #92]	; (80022ec <MX_USART3_UART_Init+0x90>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <MX_USART3_UART_Init+0x90>)
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <MX_USART3_UART_Init+0x90>)
 800229a:	2200      	movs	r2, #0
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <MX_USART3_UART_Init+0x90>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022a4:	4811      	ldr	r0, [pc, #68]	; (80022ec <MX_USART3_UART_Init+0x90>)
 80022a6:	f003 fa3d 	bl	8005724 <HAL_UART_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80022b0:	f000 f971 	bl	8002596 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022b4:	2100      	movs	r1, #0
 80022b6:	480d      	ldr	r0, [pc, #52]	; (80022ec <MX_USART3_UART_Init+0x90>)
 80022b8:	f004 fa9d 	bl	80067f6 <HAL_UARTEx_SetTxFifoThreshold>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80022c2:	f000 f968 	bl	8002596 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022c6:	2100      	movs	r1, #0
 80022c8:	4808      	ldr	r0, [pc, #32]	; (80022ec <MX_USART3_UART_Init+0x90>)
 80022ca:	f004 fad2 	bl	8006872 <HAL_UARTEx_SetRxFifoThreshold>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80022d4:	f000 f95f 	bl	8002596 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80022d8:	4804      	ldr	r0, [pc, #16]	; (80022ec <MX_USART3_UART_Init+0x90>)
 80022da:	f004 fa53 	bl	8006784 <HAL_UARTEx_DisableFifoMode>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80022e4:	f000 f957 	bl	8002596 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20001b98 	.word	0x20001b98
 80022f0:	40004800 	.word	0x40004800

080022f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_DMA_Init+0x50>)
 80022fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fe:	4a11      	ldr	r2, [pc, #68]	; (8002344 <MX_DMA_Init+0x50>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6493      	str	r3, [r2, #72]	; 0x48
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_DMA_Init+0x50>)
 8002308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_DMA_Init+0x50>)
 8002314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <MX_DMA_Init+0x50>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6493      	str	r3, [r2, #72]	; 0x48
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_DMA_Init+0x50>)
 8002320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	200b      	movs	r0, #11
 8002330:	f000 fc96 	bl	8002c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002334:	200b      	movs	r0, #11
 8002336:	f000 fcad 	bl	8002c94 <HAL_NVIC_EnableIRQ>

}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000

08002348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
 800235c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800235e:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <MX_GPIO_Init+0xc8>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	4a2b      	ldr	r2, [pc, #172]	; (8002410 <MX_GPIO_Init+0xc8>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <MX_GPIO_Init+0xc8>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <MX_GPIO_Init+0xc8>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	4a25      	ldr	r2, [pc, #148]	; (8002410 <MX_GPIO_Init+0xc8>)
 800237c:	f043 0320 	orr.w	r3, r3, #32
 8002380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002382:	4b23      	ldr	r3, [pc, #140]	; (8002410 <MX_GPIO_Init+0xc8>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <MX_GPIO_Init+0xc8>)
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002392:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <MX_GPIO_Init+0xc8>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <MX_GPIO_Init+0xc8>)
 800239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <MX_GPIO_Init+0xc8>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	4a19      	ldr	r2, [pc, #100]	; (8002410 <MX_GPIO_Init+0xc8>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <MX_GPIO_Init+0xc8>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80023be:	2200      	movs	r2, #0
 80023c0:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80023c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c8:	f001 f8ce 	bl	8003568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <MX_GPIO_Init+0xcc>)
 80023d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <MX_GPIO_Init+0xd0>)
 80023e2:	f000 ff3f 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10|GPIO_PIN_11;
 80023e6:	f44f 6342 	mov.w	r3, #3104	; 0xc20
 80023ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ec:	2301      	movs	r3, #1
 80023ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	4619      	mov	r1, r3
 80023fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002402:	f000 ff2f 	bl	8003264 <HAL_GPIO_Init>

}
 8002406:	bf00      	nop
 8002408:	3728      	adds	r7, #40	; 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	10110000 	.word	0x10110000
 8002418:	48000800 	.word	0x48000800

0800241c <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  BMP280_calc_alt(&hBMP280);
 8002424:	4804      	ldr	r0, [pc, #16]	; (8002438 <StartTask01+0x1c>)
 8002426:	f7fe fea7 	bl	8001178 <BMP280_calc_alt>
	  BNO055_get_euler(&hBNO055);
 800242a:	4804      	ldr	r0, [pc, #16]	; (800243c <StartTask01+0x20>)
 800242c:	f7ff f92c 	bl	8001688 <BNO055_get_euler>
	  osDelay(100);
 8002430:	2064      	movs	r0, #100	; 0x64
 8002432:	f004 fbdd 	bl	8006bf0 <osDelay>
	  BMP280_calc_alt(&hBMP280);
 8002436:	e7f5      	b.n	8002424 <StartTask01+0x8>
 8002438:	20001ec4 	.word	0x20001ec4
 800243c:	20001b20 	.word	0x20001b20

08002440 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002442:	b0b5      	sub	sp, #212	; 0xd4
 8002444:	af32      	add	r7, sp, #200	; 0xc8
 8002446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
		Sensor_location(&Sensor_Data, &Raw_Data, hGPS, hBMP280);
 8002448:	4e19      	ldr	r6, [pc, #100]	; (80024b0 <StartTask02+0x70>)
 800244a:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <StartTask02+0x74>)
 800244c:	ac29      	add	r4, sp, #164	; 0xa4
 800244e:	461d      	mov	r5, r3
 8002450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002454:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002458:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800245c:	4668      	mov	r0, sp
 800245e:	f106 0308 	add.w	r3, r6, #8
 8002462:	22a4      	movs	r2, #164	; 0xa4
 8002464:	4619      	mov	r1, r3
 8002466:	f007 f823 	bl	80094b0 <memcpy>
 800246a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800246e:	4912      	ldr	r1, [pc, #72]	; (80024b8 <StartTask02+0x78>)
 8002470:	4812      	ldr	r0, [pc, #72]	; (80024bc <StartTask02+0x7c>)
 8002472:	f7ff fbad 	bl	8001bd0 <Sensor_location>
		Sensor_euler(&Sensor_Data, hBNO055);
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <StartTask02+0x80>)
 8002478:	466c      	mov	r4, sp
 800247a:	f103 020c 	add.w	r2, r3, #12
 800247e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002480:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002484:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002486:	480d      	ldr	r0, [pc, #52]	; (80024bc <StartTask02+0x7c>)
 8002488:	f7ff fbc7 	bl	8001c1a <Sensor_euler>
		Sensor_velocity(&Sensor_Data, hBMP280);
 800248c:	4e09      	ldr	r6, [pc, #36]	; (80024b4 <StartTask02+0x74>)
 800248e:	466d      	mov	r5, sp
 8002490:	f106 040c 	add.w	r4, r6, #12
 8002494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	602b      	str	r3, [r5, #0]
 800249c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80024a0:	4806      	ldr	r0, [pc, #24]	; (80024bc <StartTask02+0x7c>)
 80024a2:	f7ff fbd3 	bl	8001c4c <Sensor_velocity>
	    osDelay(100);
 80024a6:	2064      	movs	r0, #100	; 0x64
 80024a8:	f004 fba2 	bl	8006bf0 <osDelay>
		Sensor_location(&Sensor_Data, &Raw_Data, hGPS, hBMP280);
 80024ac:	e7cc      	b.n	8002448 <StartTask02+0x8>
 80024ae:	bf00      	nop
 80024b0:	20001d68 	.word	0x20001d68
 80024b4:	20001ec4 	.word	0x20001ec4
 80024b8:	20001c74 	.word	0x20001c74
 80024bc:	20001ea8 	.word	0x20001ea8
 80024c0:	20001b20 	.word	0x20001b20

080024c4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if(Sensor_Data.Alt > 1500){
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <StartTask03+0x8c>)
 80024ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80024d2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002554 <StartTask03+0x90>
 80024d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024de:	dd1c      	ble.n	800251a <StartTask03+0x56>
		if(Gorev1_0x1(&Sensor_Data) | Gorev1_0x2(&Sensor_Data)){
 80024e0:	481b      	ldr	r0, [pc, #108]	; (8002550 <StartTask03+0x8c>)
 80024e2:	f7ff faf1 	bl	8001ac8 <Gorev1_0x1>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461c      	mov	r4, r3
 80024ea:	4819      	ldr	r0, [pc, #100]	; (8002550 <StartTask03+0x8c>)
 80024ec:	f7ff fb38 	bl	8001b60 <Gorev1_0x2>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4323      	orrs	r3, r4
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00f      	beq.n	800251a <StartTask03+0x56>
			Gorev1 = 1;
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <StartTask03+0x94>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8002500:	2201      	movs	r2, #1
 8002502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800250a:	f001 f82d 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800250e:	2201      	movs	r2, #1
 8002510:	2120      	movs	r1, #32
 8002512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002516:	f001 f827 	bl	8003568 <HAL_GPIO_WritePin>
		}
	  }
		if(Gorev2(&Sensor_Data, Gorev1)){
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <StartTask03+0x94>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4619      	mov	r1, r3
 8002520:	480b      	ldr	r0, [pc, #44]	; (8002550 <StartTask03+0x8c>)
 8002522:	f7ff fb35 	bl	8001b90 <Gorev2>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00c      	beq.n	8002546 <StartTask03+0x82>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800252c:	2201      	movs	r2, #1
 800252e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002536:	f001 f817 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800253a:	2201      	movs	r2, #1
 800253c:	2120      	movs	r1, #32
 800253e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002542:	f001 f811 	bl	8003568 <HAL_GPIO_WritePin>
		}
		osDelay(100);
 8002546:	2064      	movs	r0, #100	; 0x64
 8002548:	f004 fb52 	bl	8006bf0 <osDelay>
	  if(Sensor_Data.Alt > 1500){
 800254c:	e7be      	b.n	80024cc <StartTask03+0x8>
 800254e:	bf00      	nop
 8002550:	20001ea8 	.word	0x20001ea8
 8002554:	44bb8000 	.word	0x44bb8000
 8002558:	20001c24 	.word	0x20001c24

0800255c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  Telemetry_send_data(&Sensor_Data);
 8002564:	4803      	ldr	r0, [pc, #12]	; (8002574 <StartTask04+0x18>)
 8002566:	f7ff fc51 	bl	8001e0c <Telemetry_send_data>

	  osDelay(3000);
 800256a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800256e:	f004 fb3f 	bl	8006bf0 <osDelay>
	  Telemetry_send_data(&Sensor_Data);
 8002572:	e7f7      	b.n	8002564 <StartTask04+0x8>
 8002574:	20001ea8 	.word	0x20001ea8

08002578 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002588:	d101      	bne.n	800258e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800258a:	f000 fa71 	bl	8002a70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_MspInit+0x44>)
 80025ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ae:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <HAL_MspInit+0x44>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6613      	str	r3, [r2, #96]	; 0x60
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_MspInit+0x44>)
 80025b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_MspInit+0x44>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <HAL_MspInit+0x44>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6593      	str	r3, [r2, #88]	; 0x58
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_MspInit+0x44>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80025da:	f001 fdf3 	bl	80041c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000

080025ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a26      	ldr	r2, [pc, #152]	; (80026a4 <HAL_I2C_MspInit+0xb8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d145      	bne.n	800269a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <HAL_I2C_MspInit+0xbc>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002612:	4a25      	ldr	r2, [pc, #148]	; (80026a8 <HAL_I2C_MspInit+0xbc>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800261a:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <HAL_I2C_MspInit+0xbc>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_I2C_MspInit+0xbc>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <HAL_I2C_MspInit+0xbc>)
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002632:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_I2C_MspInit+0xbc>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800263e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002644:	2312      	movs	r3, #18
 8002646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002648:	2301      	movs	r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002650:	2304      	movs	r3, #4
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	4619      	mov	r1, r3
 800265a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800265e:	f000 fe01 	bl	8003264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002666:	2312      	movs	r3, #18
 8002668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800266a:	2301      	movs	r3, #1
 800266c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002672:	2304      	movs	r3, #4
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4619      	mov	r1, r3
 800267c:	480b      	ldr	r0, [pc, #44]	; (80026ac <HAL_I2C_MspInit+0xc0>)
 800267e:	f000 fdf1 	bl	8003264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_I2C_MspInit+0xbc>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <HAL_I2C_MspInit+0xbc>)
 8002688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800268c:	6593      	str	r3, [r2, #88]	; 0x58
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_I2C_MspInit+0xbc>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800269a:	bf00      	nop
 800269c:	3728      	adds	r7, #40	; 0x28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40005400 	.word	0x40005400
 80026a8:	40021000 	.word	0x40021000
 80026ac:	48000400 	.word	0x48000400

080026b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08c      	sub	sp, #48	; 0x30
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a47      	ldr	r2, [pc, #284]	; (80027ec <HAL_UART_MspInit+0x13c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d128      	bne.n	8002724 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_UART_MspInit+0x140>)
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	4a46      	ldr	r2, [pc, #280]	; (80027f0 <HAL_UART_MspInit+0x140>)
 80026d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026dc:	6613      	str	r3, [r2, #96]	; 0x60
 80026de:	4b44      	ldr	r3, [pc, #272]	; (80027f0 <HAL_UART_MspInit+0x140>)
 80026e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_UART_MspInit+0x140>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	4a40      	ldr	r2, [pc, #256]	; (80027f0 <HAL_UART_MspInit+0x140>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f6:	4b3e      	ldr	r3, [pc, #248]	; (80027f0 <HAL_UART_MspInit+0x140>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002702:	2330      	movs	r3, #48	; 0x30
 8002704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002712:	2307      	movs	r3, #7
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002716:	f107 031c 	add.w	r3, r7, #28
 800271a:	4619      	mov	r1, r3
 800271c:	4835      	ldr	r0, [pc, #212]	; (80027f4 <HAL_UART_MspInit+0x144>)
 800271e:	f000 fda1 	bl	8003264 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002722:	e05e      	b.n	80027e2 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART3)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <HAL_UART_MspInit+0x148>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d159      	bne.n	80027e2 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART3_CLK_ENABLE();
 800272e:	4b30      	ldr	r3, [pc, #192]	; (80027f0 <HAL_UART_MspInit+0x140>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	4a2f      	ldr	r2, [pc, #188]	; (80027f0 <HAL_UART_MspInit+0x140>)
 8002734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002738:	6593      	str	r3, [r2, #88]	; 0x58
 800273a:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <HAL_UART_MspInit+0x140>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_UART_MspInit+0x140>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <HAL_UART_MspInit+0x140>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002752:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <HAL_UART_MspInit+0x140>)
 8002754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800275e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002770:	2307      	movs	r3, #7
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	4619      	mov	r1, r3
 800277a:	4820      	ldr	r0, [pc, #128]	; (80027fc <HAL_UART_MspInit+0x14c>)
 800277c:	f000 fd72 	bl	8003264 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8002780:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <HAL_UART_MspInit+0x150>)
 8002782:	4a20      	ldr	r2, [pc, #128]	; (8002804 <HAL_UART_MspInit+0x154>)
 8002784:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <HAL_UART_MspInit+0x150>)
 8002788:	221c      	movs	r2, #28
 800278a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800278c:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_UART_MspInit+0x150>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_UART_MspInit+0x150>)
 8002794:	2200      	movs	r2, #0
 8002796:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_UART_MspInit+0x150>)
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <HAL_UART_MspInit+0x150>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027a4:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_UART_MspInit+0x150>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_UART_MspInit+0x150>)
 80027ac:	2220      	movs	r2, #32
 80027ae:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_UART_MspInit+0x150>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80027b6:	4812      	ldr	r0, [pc, #72]	; (8002800 <HAL_UART_MspInit+0x150>)
 80027b8:	f000 fa7a 	bl	8002cb0 <HAL_DMA_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_UART_MspInit+0x116>
      Error_Handler();
 80027c2:	f7ff fee8 	bl	8002596 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <HAL_UART_MspInit+0x150>)
 80027ca:	679a      	str	r2, [r3, #120]	; 0x78
 80027cc:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <HAL_UART_MspInit+0x150>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	2027      	movs	r0, #39	; 0x27
 80027d8:	f000 fa42 	bl	8002c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027dc:	2027      	movs	r0, #39	; 0x27
 80027de:	f000 fa59 	bl	8002c94 <HAL_NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3730      	adds	r7, #48	; 0x30
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40021000 	.word	0x40021000
 80027f4:	48000800 	.word	0x48000800
 80027f8:	40004800 	.word	0x40004800
 80027fc:	48000400 	.word	0x48000400
 8002800:	20001b38 	.word	0x20001b38
 8002804:	40020008 	.word	0x40020008

08002808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800281e:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_InitTick+0xcc>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	4a2c      	ldr	r2, [pc, #176]	; (80028d4 <HAL_InitTick+0xcc>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6593      	str	r3, [r2, #88]	; 0x58
 800282a:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_InitTick+0xcc>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002836:	f107 020c 	add.w	r2, r7, #12
 800283a:	f107 0310 	add.w	r3, r7, #16
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f002 f9bd 	bl	8004bc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002846:	f002 f98f 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 800284a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_InitTick+0xd0>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	0c9b      	lsrs	r3, r3, #18
 8002856:	3b01      	subs	r3, #1
 8002858:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <HAL_InitTick+0xd4>)
 800285c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002860:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8002862:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <HAL_InitTick+0xd4>)
 8002864:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002868:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800286a:	4a1c      	ldr	r2, [pc, #112]	; (80028dc <HAL_InitTick+0xd4>)
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <HAL_InitTick+0xd4>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_InitTick+0xd4>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  status = HAL_TIM_Base_Init(&htim2);
 800287c:	4817      	ldr	r0, [pc, #92]	; (80028dc <HAL_InitTick+0xd4>)
 800287e:	f002 fc07 	bl	8005090 <HAL_TIM_Base_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800288c:	2b00      	cmp	r3, #0
 800288e:	d11b      	bne.n	80028c8 <HAL_InitTick+0xc0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002890:	4812      	ldr	r0, [pc, #72]	; (80028dc <HAL_InitTick+0xd4>)
 8002892:	f002 fc5f 	bl	8005154 <HAL_TIM_Base_Start_IT>
 8002896:	4603      	mov	r3, r0
 8002898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800289c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d111      	bne.n	80028c8 <HAL_InitTick+0xc0>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028a4:	201c      	movs	r0, #28
 80028a6:	f000 f9f5 	bl	8002c94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b0f      	cmp	r3, #15
 80028ae:	d808      	bhi.n	80028c2 <HAL_InitTick+0xba>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80028b0:	2200      	movs	r2, #0
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	201c      	movs	r0, #28
 80028b6:	f000 f9d3 	bl	8002c60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_InitTick+0xd8>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	e002      	b.n	80028c8 <HAL_InitTick+0xc0>
      }
      else
      {
        status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 80028c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3730      	adds	r7, #48	; 0x30
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	431bde83 	.word	0x431bde83
 80028dc:	20001ee8 	.word	0x20001ee8
 80028e0:	20000004 	.word	0x20000004

080028e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f6:	e7fe      	b.n	80028f6 <HardFault_Handler+0x4>

080028f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028fc:	e7fe      	b.n	80028fc <MemManage_Handler+0x4>

080028fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002902:	e7fe      	b.n	8002902 <BusFault_Handler+0x4>

08002904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002908:	e7fe      	b.n	8002908 <UsageFault_Handler+0x4>

0800290a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <DMA1_Channel1_IRQHandler+0x10>)
 800291e:	f000 fb51 	bl	8002fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20001b38 	.word	0x20001b38

0800292c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <TIM2_IRQHandler+0x10>)
 8002932:	f002 fc79 	bl	8005228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20001ee8 	.word	0x20001ee8

08002940 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <USART3_IRQHandler+0x10>)
 8002946:	f003 f85b 	bl	8005a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20001b98 	.word	0x20001b98

08002954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800295c:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <_sbrk+0x5c>)
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <_sbrk+0x60>)
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <_sbrk+0x64>)
 8002972:	4a12      	ldr	r2, [pc, #72]	; (80029bc <_sbrk+0x68>)
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <_sbrk+0x64>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	429a      	cmp	r2, r3
 8002982:	d207      	bcs.n	8002994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002984:	f006 fd6a 	bl	800945c <__errno>
 8002988:	4602      	mov	r2, r0
 800298a:	230c      	movs	r3, #12
 800298c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800298e:	f04f 33ff 	mov.w	r3, #4294967295
 8002992:	e009      	b.n	80029a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <_sbrk+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <_sbrk+0x64>)
 80029a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a6:	68fb      	ldr	r3, [r7, #12]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20008000 	.word	0x20008000
 80029b4:	00000400 	.word	0x00000400
 80029b8:	2000020c 	.word	0x2000020c
 80029bc:	20001f80 	.word	0x20001f80

080029c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <SystemInit+0x28>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <SystemInit+0x28>)
 80029cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SystemInit+0x28>)
 80029d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029da:	609a      	str	r2, [r3, #8]
#endif
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029ec:	480d      	ldr	r0, [pc, #52]	; (8002a24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029f0:	480d      	ldr	r0, [pc, #52]	; (8002a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80029f2:	490e      	ldr	r1, [pc, #56]	; (8002a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80029f4:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <LoopForever+0xe>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029f8:	e002      	b.n	8002a00 <LoopCopyDataInit>

080029fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029fe:	3304      	adds	r3, #4

08002a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a04:	d3f9      	bcc.n	80029fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a08:	4c0b      	ldr	r4, [pc, #44]	; (8002a38 <LoopForever+0x16>)
  movs r3, #0
 8002a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a0c:	e001      	b.n	8002a12 <LoopFillZerobss>

08002a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a10:	3204      	adds	r2, #4

08002a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a14:	d3fb      	bcc.n	8002a0e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a16:	f7ff ffd3 	bl	80029c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a1a:	f006 fd25 	bl	8009468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a1e:	f7ff facb 	bl	8001fb8 <main>

08002a22 <LoopForever>:

LoopForever:
    b LoopForever
 8002a22:	e7fe      	b.n	8002a22 <LoopForever>
  ldr   r0, =_estack
 8002a24:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a2c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002a30:	0800c7a8 	.word	0x0800c7a8
  ldr r2, =_sbss
 8002a34:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002a38:	20001f7c 	.word	0x20001f7c

08002a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a3c:	e7fe      	b.n	8002a3c <ADC1_2_IRQHandler>

08002a3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a48:	2003      	movs	r0, #3
 8002a4a:	f000 f8fe 	bl	8002c4a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7ff feda 	bl	8002808 <HAL_InitTick>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	71fb      	strb	r3, [r7, #7]
 8002a5e:	e001      	b.n	8002a64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a60:	f7ff fda0 	bl	80025a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a64:	79fb      	ldrb	r3, [r7, #7]

}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_IncTick+0x1c>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_IncTick+0x20>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	4a03      	ldr	r2, [pc, #12]	; (8002a8c <HAL_IncTick+0x1c>)
 8002a80:	6013      	str	r3, [r2, #0]
}
 8002a82:	bf00      	nop
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	20001f34 	.word	0x20001f34
 8002a90:	20000008 	.word	0x20000008

08002a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return uwTick;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_GetTick+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20001f34 	.word	0x20001f34

08002aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7ff ffee 	bl	8002a94 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d004      	beq.n	8002ad0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_Delay+0x40>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4413      	add	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ad0:	bf00      	nop
 8002ad2:	f7ff ffdf 	bl	8002a94 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d8f7      	bhi.n	8002ad2 <HAL_Delay+0x26>
  {
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000008 	.word	0x20000008

08002af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db0b      	blt.n	8002b7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	4907      	ldr	r1, [pc, #28]	; (8002b8c <__NVIC_EnableIRQ+0x38>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f1c3 0307 	rsb	r3, r3, #7
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf28      	it	cs
 8002c02:	2304      	movcs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d902      	bls.n	8002c14 <NVIC_EncodePriority+0x30>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3b03      	subs	r3, #3
 8002c12:	e000      	b.n	8002c16 <NVIC_EncodePriority+0x32>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43d9      	mvns	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	4313      	orrs	r3, r2
         );
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ff4c 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c6e:	f7ff ff63 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002c72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	6978      	ldr	r0, [r7, #20]
 8002c7a:	f7ff ffb3 	bl	8002be4 <NVIC_EncodePriority>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ff82 	bl	8002b90 <__NVIC_SetPriority>
}
 8002c8c:	bf00      	nop
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff ff56 	bl	8002b54 <__NVIC_EnableIRQ>
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e08d      	b.n	8002dde <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <HAL_DMA_Init+0x138>)
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d80f      	bhi.n	8002cee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4b45      	ldr	r3, [pc, #276]	; (8002dec <HAL_DMA_Init+0x13c>)
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a45      	ldr	r2, [pc, #276]	; (8002df0 <HAL_DMA_Init+0x140>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	009a      	lsls	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a42      	ldr	r2, [pc, #264]	; (8002df4 <HAL_DMA_Init+0x144>)
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
 8002cec:	e00e      	b.n	8002d0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4b40      	ldr	r3, [pc, #256]	; (8002df8 <HAL_DMA_Init+0x148>)
 8002cf6:	4413      	add	r3, r2
 8002cf8:	4a3d      	ldr	r2, [pc, #244]	; (8002df0 <HAL_DMA_Init+0x140>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	009a      	lsls	r2, r3, #2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a3c      	ldr	r2, [pc, #240]	; (8002dfc <HAL_DMA_Init+0x14c>)
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa1e 	bl	80031a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d6c:	d102      	bne.n	8002d74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d010      	beq.n	8002db4 <HAL_DMA_Init+0x104>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d80c      	bhi.n	8002db4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa3e 	bl	800321c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	e008      	b.n	8002dc6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40020407 	.word	0x40020407
 8002dec:	bffdfff8 	.word	0xbffdfff8
 8002df0:	cccccccd 	.word	0xcccccccd
 8002df4:	40020000 	.word	0x40020000
 8002df8:	bffdfbf8 	.word	0xbffdfbf8
 8002dfc:	40020400 	.word	0x40020400

08002e00 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_DMA_Start_IT+0x20>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e066      	b.n	8002eee <HAL_DMA_Start_IT+0xee>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d155      	bne.n	8002ee0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f962 	bl	8003122 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 020e 	orr.w	r2, r2, #14
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	e00f      	b.n	8002e98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0204 	bic.w	r2, r2, #4
 8002e86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 020a 	orr.w	r2, r2, #10
 8002e96:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eb4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ecc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0201 	orr.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e005      	b.n	8002eec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d00d      	beq.n	8002f2a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2204      	movs	r2, #4
 8002f12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	e047      	b.n	8002fba <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 020e 	bic.w	r2, r2, #14
 8002f38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f003 021f 	and.w	r2, r3, #31
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f76:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00c      	beq.n	8002f9a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f98:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	4798      	blx	r3
    }
  }
  return status;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d026      	beq.n	800303e <HAL_DMA_IRQHandler+0x7a>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d021      	beq.n	800303e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0204 	bic.w	r2, r2, #4
 8003016:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	f003 021f 	and.w	r2, r3, #31
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	2104      	movs	r1, #4
 8003026:	fa01 f202 	lsl.w	r2, r1, r2
 800302a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	2b00      	cmp	r3, #0
 8003032:	d071      	beq.n	8003118 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800303c:	e06c      	b.n	8003118 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	2202      	movs	r2, #2
 8003048:	409a      	lsls	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d02e      	beq.n	80030b0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d029      	beq.n	80030b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 020a 	bic.w	r2, r2, #10
 8003078:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	f003 021f 	and.w	r2, r3, #31
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2102      	movs	r1, #2
 8003090:	fa01 f202 	lsl.w	r2, r1, r2
 8003094:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d038      	beq.n	8003118 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80030ae:	e033      	b.n	8003118 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2208      	movs	r2, #8
 80030ba:	409a      	lsls	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d02a      	beq.n	800311a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d025      	beq.n	800311a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 020e 	bic.w	r2, r2, #14
 80030dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f003 021f 	and.w	r2, r3, #31
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f202 	lsl.w	r2, r1, r2
 80030f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	2b00      	cmp	r3, #0
 800310e:	d004      	beq.n	800311a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003118:	bf00      	nop
 800311a:	bf00      	nop
}
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003122:	b480      	push	{r7}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003138:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800314a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	f003 021f 	and.w	r2, r3, #31
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	2101      	movs	r1, #1
 800315a:	fa01 f202 	lsl.w	r2, r1, r2
 800315e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b10      	cmp	r3, #16
 800316e:	d108      	bne.n	8003182 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003180:	e007      	b.n	8003192 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	60da      	str	r2, [r3, #12]
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d802      	bhi.n	80031ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80031b4:	4b15      	ldr	r3, [pc, #84]	; (800320c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	e001      	b.n	80031be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80031bc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	3b08      	subs	r3, #8
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	089b      	lsrs	r3, r3, #2
 80031da:	009a      	lsls	r2, r3, #2
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4413      	add	r3, r2
 80031e0:	461a      	mov	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a0b      	ldr	r2, [pc, #44]	; (8003218 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80031ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	2201      	movs	r2, #1
 80031f4:	409a      	lsls	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40020407 	.word	0x40020407
 800320c:	40020800 	.word	0x40020800
 8003210:	40020820 	.word	0x40020820
 8003214:	cccccccd 	.word	0xcccccccd
 8003218:	40020880 	.word	0x40020880

0800321c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	461a      	mov	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a08      	ldr	r2, [pc, #32]	; (8003260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800323e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3b01      	subs	r3, #1
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2201      	movs	r2, #1
 800324a:	409a      	lsls	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	1000823f 	.word	0x1000823f
 8003260:	40020940 	.word	0x40020940

08003264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003272:	e15a      	b.n	800352a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	2101      	movs	r1, #1
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 814c 	beq.w	8003524 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d00b      	beq.n	80032ac <HAL_GPIO_Init+0x48>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d007      	beq.n	80032ac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032a0:	2b11      	cmp	r3, #17
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b12      	cmp	r3, #18
 80032aa:	d130      	bne.n	800330e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032e2:	2201      	movs	r2, #1
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	f003 0201 	and.w	r2, r3, #1
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0xea>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b12      	cmp	r3, #18
 800334c:	d123      	bne.n	8003396 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	08da      	lsrs	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3208      	adds	r2, #8
 8003356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	220f      	movs	r2, #15
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	08da      	lsrs	r2, r3, #3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3208      	adds	r2, #8
 8003390:	6939      	ldr	r1, [r7, #16]
 8003392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	2203      	movs	r2, #3
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 0203 	and.w	r2, r3, #3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80a6 	beq.w	8003524 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d8:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_GPIO_Init+0x2e4>)
 80033da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033dc:	4a5a      	ldr	r2, [pc, #360]	; (8003548 <HAL_GPIO_Init+0x2e4>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6613      	str	r3, [r2, #96]	; 0x60
 80033e4:	4b58      	ldr	r3, [pc, #352]	; (8003548 <HAL_GPIO_Init+0x2e4>)
 80033e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033f0:	4a56      	ldr	r2, [pc, #344]	; (800354c <HAL_GPIO_Init+0x2e8>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	220f      	movs	r2, #15
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800341a:	d01f      	beq.n	800345c <HAL_GPIO_Init+0x1f8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a4c      	ldr	r2, [pc, #304]	; (8003550 <HAL_GPIO_Init+0x2ec>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d019      	beq.n	8003458 <HAL_GPIO_Init+0x1f4>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a4b      	ldr	r2, [pc, #300]	; (8003554 <HAL_GPIO_Init+0x2f0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d013      	beq.n	8003454 <HAL_GPIO_Init+0x1f0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a4a      	ldr	r2, [pc, #296]	; (8003558 <HAL_GPIO_Init+0x2f4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00d      	beq.n	8003450 <HAL_GPIO_Init+0x1ec>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a49      	ldr	r2, [pc, #292]	; (800355c <HAL_GPIO_Init+0x2f8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d007      	beq.n	800344c <HAL_GPIO_Init+0x1e8>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a48      	ldr	r2, [pc, #288]	; (8003560 <HAL_GPIO_Init+0x2fc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d101      	bne.n	8003448 <HAL_GPIO_Init+0x1e4>
 8003444:	2305      	movs	r3, #5
 8003446:	e00a      	b.n	800345e <HAL_GPIO_Init+0x1fa>
 8003448:	2306      	movs	r3, #6
 800344a:	e008      	b.n	800345e <HAL_GPIO_Init+0x1fa>
 800344c:	2304      	movs	r3, #4
 800344e:	e006      	b.n	800345e <HAL_GPIO_Init+0x1fa>
 8003450:	2303      	movs	r3, #3
 8003452:	e004      	b.n	800345e <HAL_GPIO_Init+0x1fa>
 8003454:	2302      	movs	r3, #2
 8003456:	e002      	b.n	800345e <HAL_GPIO_Init+0x1fa>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <HAL_GPIO_Init+0x1fa>
 800345c:	2300      	movs	r3, #0
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	f002 0203 	and.w	r2, r2, #3
 8003464:	0092      	lsls	r2, r2, #2
 8003466:	4093      	lsls	r3, r2
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800346e:	4937      	ldr	r1, [pc, #220]	; (800354c <HAL_GPIO_Init+0x2e8>)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800347c:	4b39      	ldr	r3, [pc, #228]	; (8003564 <HAL_GPIO_Init+0x300>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	43db      	mvns	r3, r3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034a0:	4a30      	ldr	r2, [pc, #192]	; (8003564 <HAL_GPIO_Init+0x300>)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80034a6:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <HAL_GPIO_Init+0x300>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034ca:	4a26      	ldr	r2, [pc, #152]	; (8003564 <HAL_GPIO_Init+0x300>)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034d0:	4b24      	ldr	r3, [pc, #144]	; (8003564 <HAL_GPIO_Init+0x300>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43db      	mvns	r3, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034f4:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <HAL_GPIO_Init+0x300>)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034fa:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <HAL_GPIO_Init+0x300>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800351e:	4a11      	ldr	r2, [pc, #68]	; (8003564 <HAL_GPIO_Init+0x300>)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	3301      	adds	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	f47f ae9d 	bne.w	8003274 <HAL_GPIO_Init+0x10>
  }
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	40010000 	.word	0x40010000
 8003550:	48000400 	.word	0x48000400
 8003554:	48000800 	.word	0x48000800
 8003558:	48000c00 	.word	0x48000c00
 800355c:	48001000 	.word	0x48001000
 8003560:	48001400 	.word	0x48001400
 8003564:	40010400 	.word	0x40010400

08003568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	807b      	strh	r3, [r7, #2]
 8003574:	4613      	mov	r3, r2
 8003576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003578:	787b      	ldrb	r3, [r7, #1]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003584:	e002      	b.n	800358c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003586:	887a      	ldrh	r2, [r7, #2]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e081      	b.n	80036ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff f814 	bl	80025ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2224      	movs	r2, #36	; 0x24
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d107      	bne.n	8003612 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	e006      	b.n	8003620 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800361e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d104      	bne.n	8003632 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003630:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003644:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003654:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	ea42 0103 	orr.w	r1, r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	021a      	lsls	r2, r3, #8
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69d9      	ldr	r1, [r3, #28]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	4608      	mov	r0, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	461a      	mov	r2, r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	817b      	strh	r3, [r7, #10]
 80036ca:	460b      	mov	r3, r1
 80036cc:	813b      	strh	r3, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b20      	cmp	r3, #32
 80036dc:	f040 80f9 	bne.w	80038d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_I2C_Mem_Write+0x34>
 80036e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0ed      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_I2C_Mem_Write+0x4e>
 8003702:	2302      	movs	r3, #2
 8003704:	e0e6      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800370e:	f7ff f9c1 	bl	8002a94 <HAL_GetTick>
 8003712:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2319      	movs	r3, #25
 800371a:	2201      	movs	r2, #1
 800371c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fac3 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0d1      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2221      	movs	r2, #33	; 0x21
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2240      	movs	r2, #64	; 0x40
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a3a      	ldr	r2, [r7, #32]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003750:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003758:	88f8      	ldrh	r0, [r7, #6]
 800375a:	893a      	ldrh	r2, [r7, #8]
 800375c:	8979      	ldrh	r1, [r7, #10]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	4603      	mov	r3, r0
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f9d3 	bl	8003b14 <I2C_RequestMemoryWrite>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0a9      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	2bff      	cmp	r3, #255	; 0xff
 8003788:	d90e      	bls.n	80037a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	22ff      	movs	r2, #255	; 0xff
 800378e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003794:	b2da      	uxtb	r2, r3
 8003796:	8979      	ldrh	r1, [r7, #10]
 8003798:	2300      	movs	r3, #0
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fba5 	bl	8003ef0 <I2C_TransferConfig>
 80037a6:	e00f      	b.n	80037c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	8979      	ldrh	r1, [r7, #10]
 80037ba:	2300      	movs	r3, #0
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fb94 	bl	8003ef0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 faad 	bl	8003d2c <I2C_WaitOnTXISFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e07b      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d034      	beq.n	8003880 <HAL_I2C_Mem_Write+0x1c8>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	2b00      	cmp	r3, #0
 800381c:	d130      	bne.n	8003880 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	2200      	movs	r2, #0
 8003826:	2180      	movs	r1, #128	; 0x80
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fa3f 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e04d      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2bff      	cmp	r3, #255	; 0xff
 8003840:	d90e      	bls.n	8003860 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	22ff      	movs	r2, #255	; 0xff
 8003846:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384c:	b2da      	uxtb	r2, r3
 800384e:	8979      	ldrh	r1, [r7, #10]
 8003850:	2300      	movs	r3, #0
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fb49 	bl	8003ef0 <I2C_TransferConfig>
 800385e:	e00f      	b.n	8003880 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	b2da      	uxtb	r2, r3
 8003870:	8979      	ldrh	r1, [r7, #10]
 8003872:	2300      	movs	r3, #0
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fb38 	bl	8003ef0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d19e      	bne.n	80037c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fa8c 	bl	8003dac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e01a      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2220      	movs	r2, #32
 80038a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_I2C_Mem_Write+0x224>)
 80038b2:	400b      	ands	r3, r1
 80038b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	fe00e800 	.word	0xfe00e800

080038e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	4608      	mov	r0, r1
 80038ea:	4611      	mov	r1, r2
 80038ec:	461a      	mov	r2, r3
 80038ee:	4603      	mov	r3, r0
 80038f0:	817b      	strh	r3, [r7, #10]
 80038f2:	460b      	mov	r3, r1
 80038f4:	813b      	strh	r3, [r7, #8]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b20      	cmp	r3, #32
 8003904:	f040 80fd 	bne.w	8003b02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_I2C_Mem_Read+0x34>
 800390e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d105      	bne.n	8003920 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0f1      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_I2C_Mem_Read+0x4e>
 800392a:	2302      	movs	r3, #2
 800392c:	e0ea      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003936:	f7ff f8ad 	bl	8002a94 <HAL_GetTick>
 800393a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2319      	movs	r3, #25
 8003942:	2201      	movs	r2, #1
 8003944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f9af 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0d5      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2222      	movs	r2, #34	; 0x22
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2240      	movs	r2, #64	; 0x40
 8003964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003980:	88f8      	ldrh	r0, [r7, #6]
 8003982:	893a      	ldrh	r2, [r7, #8]
 8003984:	8979      	ldrh	r1, [r7, #10]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	4603      	mov	r3, r0
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f913 	bl	8003bbc <I2C_RequestMemoryRead>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0ad      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2bff      	cmp	r3, #255	; 0xff
 80039b0:	d90e      	bls.n	80039d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	22ff      	movs	r2, #255	; 0xff
 80039b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	8979      	ldrh	r1, [r7, #10]
 80039c0:	4b52      	ldr	r3, [pc, #328]	; (8003b0c <HAL_I2C_Mem_Read+0x22c>)
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fa91 	bl	8003ef0 <I2C_TransferConfig>
 80039ce:	e00f      	b.n	80039f0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	8979      	ldrh	r1, [r7, #10]
 80039e2:	4b4a      	ldr	r3, [pc, #296]	; (8003b0c <HAL_I2C_Mem_Read+0x22c>)
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fa80 	bl	8003ef0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	2200      	movs	r2, #0
 80039f8:	2104      	movs	r1, #4
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f956 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e07c      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d034      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x1d0>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d130      	bne.n	8003ab0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	2200      	movs	r2, #0
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f927 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e04d      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2bff      	cmp	r3, #255	; 0xff
 8003a70:	d90e      	bls.n	8003a90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	22ff      	movs	r2, #255	; 0xff
 8003a76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	2300      	movs	r3, #0
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fa31 	bl	8003ef0 <I2C_TransferConfig>
 8003a8e:	e00f      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	8979      	ldrh	r1, [r7, #10]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fa20 	bl	8003ef0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d19a      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f974 	bl	8003dac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e01a      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <HAL_I2C_Mem_Read+0x230>)
 8003ae2:	400b      	ands	r3, r1
 8003ae4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
  }
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	80002400 	.word	0x80002400
 8003b10:	fe00e800 	.word	0xfe00e800

08003b14 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	817b      	strh	r3, [r7, #10]
 8003b26:	460b      	mov	r3, r1
 8003b28:	813b      	strh	r3, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	8979      	ldrh	r1, [r7, #10]
 8003b34:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <I2C_RequestMemoryWrite+0xa4>)
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f9d7 	bl	8003ef0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	69b9      	ldr	r1, [r7, #24]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f8f0 	bl	8003d2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e02c      	b.n	8003bb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b5c:	893b      	ldrh	r3, [r7, #8]
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
 8003b66:	e015      	b.n	8003b94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b68:	893b      	ldrh	r3, [r7, #8]
 8003b6a:	0a1b      	lsrs	r3, r3, #8
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	69b9      	ldr	r1, [r7, #24]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f8d6 	bl	8003d2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e012      	b.n	8003bb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b8a:	893b      	ldrh	r3, [r7, #8]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2180      	movs	r1, #128	; 0x80
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f884 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	80002000 	.word	0x80002000

08003bbc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	817b      	strh	r3, [r7, #10]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	813b      	strh	r3, [r7, #8]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	8979      	ldrh	r1, [r7, #10]
 8003bdc:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <I2C_RequestMemoryRead+0xa4>)
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2300      	movs	r3, #0
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f984 	bl	8003ef0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	69b9      	ldr	r1, [r7, #24]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f89d 	bl	8003d2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e02c      	b.n	8003c56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d105      	bne.n	8003c0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c02:	893b      	ldrh	r3, [r7, #8]
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c0c:	e015      	b.n	8003c3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c0e:	893b      	ldrh	r3, [r7, #8]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	69b9      	ldr	r1, [r7, #24]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f883 	bl	8003d2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e012      	b.n	8003c56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2200      	movs	r2, #0
 8003c42:	2140      	movs	r1, #64	; 0x40
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f831 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	80002000 	.word	0x80002000

08003c64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d103      	bne.n	8003c82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d007      	beq.n	8003ca0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	619a      	str	r2, [r3, #24]
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cbc:	e022      	b.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d01e      	beq.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc6:	f7fe fee5 	bl	8002a94 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d113      	bne.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e00f      	b.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d0cd      	beq.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d38:	e02c      	b.n	8003d94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f870 	bl	8003e24 <I2C_IsAcknowledgeFailed>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e02a      	b.n	8003da4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d01e      	beq.n	8003d94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d56:	f7fe fe9d 	bl	8002a94 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d113      	bne.n	8003d94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	f043 0220 	orr.w	r2, r3, #32
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e007      	b.n	8003da4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d1cb      	bne.n	8003d3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003db8:	e028      	b.n	8003e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f830 	bl	8003e24 <I2C_IsAcknowledgeFailed>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e026      	b.n	8003e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fe fe61 	bl	8002a94 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d113      	bne.n	8003e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	f043 0220 	orr.w	r2, r3, #32
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e007      	b.n	8003e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d1cf      	bne.n	8003dba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b10      	cmp	r3, #16
 8003e3c:	d151      	bne.n	8003ee2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e3e:	e022      	b.n	8003e86 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d01e      	beq.n	8003e86 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e48:	f7fe fe24 	bl	8002a94 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d302      	bcc.n	8003e5e <I2C_IsAcknowledgeFailed+0x3a>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d113      	bne.n	8003e86 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f043 0220 	orr.w	r2, r3, #32
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e02e      	b.n	8003ee4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d1d5      	bne.n	8003e40 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2210      	movs	r2, #16
 8003e9a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff fedd 	bl	8003c64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <I2C_IsAcknowledgeFailed+0xc8>)
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f043 0204 	orr.w	r2, r3, #4
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	fe00e800 	.word	0xfe00e800

08003ef0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	817b      	strh	r3, [r7, #10]
 8003efe:	4613      	mov	r3, r2
 8003f00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	0d5b      	lsrs	r3, r3, #21
 8003f0c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f10:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <I2C_TransferConfig+0x58>)
 8003f12:	430b      	orrs	r3, r1
 8003f14:	43db      	mvns	r3, r3
 8003f16:	ea02 0103 	and.w	r1, r2, r3
 8003f1a:	897b      	ldrh	r3, [r7, #10]
 8003f1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f20:	7a7b      	ldrb	r3, [r7, #9]
 8003f22:	041b      	lsls	r3, r3, #16
 8003f24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	03ff63ff 	.word	0x03ff63ff

08003f4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d138      	bne.n	8003fd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e032      	b.n	8003fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	; 0x24
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6819      	ldr	r1, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d139      	bne.n	800406c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004002:	2302      	movs	r3, #2
 8004004:	e033      	b.n	800406e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2224      	movs	r2, #36	; 0x24
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0201 	bic.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004034:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d141      	bne.n	800410e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800408a:	4b4b      	ldr	r3, [pc, #300]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004096:	d131      	bne.n	80040fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004098:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800409e:	4a46      	ldr	r2, [pc, #280]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040a8:	4b43      	ldr	r3, [pc, #268]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040b0:	4a41      	ldr	r2, [pc, #260]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040b8:	4b40      	ldr	r3, [pc, #256]	; (80041bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2232      	movs	r2, #50	; 0x32
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	4a3f      	ldr	r2, [pc, #252]	; (80041c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	0c9b      	lsrs	r3, r3, #18
 80040ca:	3301      	adds	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ce:	e002      	b.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040d6:	4b38      	ldr	r3, [pc, #224]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e2:	d102      	bne.n	80040ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f2      	bne.n	80040d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040ea:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f6:	d158      	bne.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e057      	b.n	80041ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040fc:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004102:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004108:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800410c:	e04d      	b.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004114:	d141      	bne.n	800419a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004116:	4b28      	ldr	r3, [pc, #160]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800411e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004122:	d131      	bne.n	8004188 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004124:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800412a:	4a23      	ldr	r2, [pc, #140]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004130:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004134:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800413c:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004142:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004144:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2232      	movs	r2, #50	; 0x32
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	4a1c      	ldr	r2, [pc, #112]	; (80041c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	0c9b      	lsrs	r3, r3, #18
 8004156:	3301      	adds	r3, #1
 8004158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800415a:	e002      	b.n	8004162 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3b01      	subs	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416e:	d102      	bne.n	8004176 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f2      	bne.n	800415c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004176:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004182:	d112      	bne.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e011      	b.n	80041ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004194:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004198:	e007      	b.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800419a:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041a2:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	40007000 	.word	0x40007000
 80041bc:	20000000 	.word	0x20000000
 80041c0:	431bde83 	.word	0x431bde83

080041c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041d2:	6093      	str	r3, [r2, #8]
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40007000 	.word	0x40007000

080041e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e308      	b.n	8004808 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d075      	beq.n	80042ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004202:	4ba3      	ldr	r3, [pc, #652]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800420c:	4ba0      	ldr	r3, [pc, #640]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b0c      	cmp	r3, #12
 800421a:	d102      	bne.n	8004222 <HAL_RCC_OscConfig+0x3e>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b03      	cmp	r3, #3
 8004220:	d002      	beq.n	8004228 <HAL_RCC_OscConfig+0x44>
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d10b      	bne.n	8004240 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004228:	4b99      	ldr	r3, [pc, #612]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d05b      	beq.n	80042ec <HAL_RCC_OscConfig+0x108>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d157      	bne.n	80042ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e2e3      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004248:	d106      	bne.n	8004258 <HAL_RCC_OscConfig+0x74>
 800424a:	4b91      	ldr	r3, [pc, #580]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a90      	ldr	r2, [pc, #576]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e01d      	b.n	8004294 <HAL_RCC_OscConfig+0xb0>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x98>
 8004262:	4b8b      	ldr	r3, [pc, #556]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a8a      	ldr	r2, [pc, #552]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b88      	ldr	r3, [pc, #544]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a87      	ldr	r2, [pc, #540]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e00b      	b.n	8004294 <HAL_RCC_OscConfig+0xb0>
 800427c:	4b84      	ldr	r3, [pc, #528]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a83      	ldr	r2, [pc, #524]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	4b81      	ldr	r3, [pc, #516]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a80      	ldr	r2, [pc, #512]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 800428e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d013      	beq.n	80042c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fe fbfa 	bl	8002a94 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a4:	f7fe fbf6 	bl	8002a94 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e2a8      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042b6:	4b76      	ldr	r3, [pc, #472]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0xc0>
 80042c2:	e014      	b.n	80042ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fe fbe6 	bl	8002a94 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fe fbe2 	bl	8002a94 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e294      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042de:	4b6c      	ldr	r3, [pc, #432]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0xe8>
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d075      	beq.n	80043e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042fa:	4b65      	ldr	r3, [pc, #404]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004304:	4b62      	ldr	r3, [pc, #392]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b0c      	cmp	r3, #12
 8004312:	d102      	bne.n	800431a <HAL_RCC_OscConfig+0x136>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d002      	beq.n	8004320 <HAL_RCC_OscConfig+0x13c>
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b04      	cmp	r3, #4
 800431e:	d11f      	bne.n	8004360 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004320:	4b5b      	ldr	r3, [pc, #364]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_OscConfig+0x154>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e267      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004338:	4b55      	ldr	r3, [pc, #340]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	061b      	lsls	r3, r3, #24
 8004346:	4952      	ldr	r1, [pc, #328]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	4313      	orrs	r3, r2
 800434a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800434c:	4b51      	ldr	r3, [pc, #324]	; (8004494 <HAL_RCC_OscConfig+0x2b0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f7fe fa59 	bl	8002808 <HAL_InitTick>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d043      	beq.n	80043e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e253      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d023      	beq.n	80043b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004368:	4b49      	ldr	r3, [pc, #292]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a48      	ldr	r2, [pc, #288]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 800436e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fe fb8e 	bl	8002a94 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800437c:	f7fe fb8a 	bl	8002a94 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e23c      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800438e:	4b40      	ldr	r3, [pc, #256]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439a:	4b3d      	ldr	r3, [pc, #244]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	061b      	lsls	r3, r3, #24
 80043a8:	4939      	ldr	r1, [pc, #228]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	604b      	str	r3, [r1, #4]
 80043ae:	e01a      	b.n	80043e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b0:	4b37      	ldr	r3, [pc, #220]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a36      	ldr	r2, [pc, #216]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 80043b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe fb6a 	bl	8002a94 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c4:	f7fe fb66 	bl	8002a94 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e218      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043d6:	4b2e      	ldr	r3, [pc, #184]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x1e0>
 80043e2:	e000      	b.n	80043e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d03c      	beq.n	800446c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01c      	beq.n	8004434 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fa:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004400:	4a23      	ldr	r2, [pc, #140]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440a:	f7fe fb43 	bl	8002a94 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004412:	f7fe fb3f 	bl	8002a94 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e1f1      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004424:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0ef      	beq.n	8004412 <HAL_RCC_OscConfig+0x22e>
 8004432:	e01b      	b.n	800446c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004434:	4b16      	ldr	r3, [pc, #88]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800443a:	4a15      	ldr	r2, [pc, #84]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fe fb26 	bl	8002a94 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800444c:	f7fe fb22 	bl	8002a94 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e1d4      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1ef      	bne.n	800444c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80ab 	beq.w	80045d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800447a:	2300      	movs	r3, #0
 800447c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <HAL_RCC_OscConfig+0x2ac>)
 8004480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_RCC_OscConfig+0x2b4>
 800448a:	2301      	movs	r3, #1
 800448c:	e005      	b.n	800449a <HAL_RCC_OscConfig+0x2b6>
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000
 8004494:	20000004 	.word	0x20000004
 8004498:	2300      	movs	r3, #0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00d      	beq.n	80044ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449e:	4baf      	ldr	r3, [pc, #700]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	4aae      	ldr	r2, [pc, #696]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6593      	str	r3, [r2, #88]	; 0x58
 80044aa:	4bac      	ldr	r3, [pc, #688]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80044ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044b6:	2301      	movs	r3, #1
 80044b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ba:	4ba9      	ldr	r3, [pc, #676]	; (8004760 <HAL_RCC_OscConfig+0x57c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d118      	bne.n	80044f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044c6:	4ba6      	ldr	r3, [pc, #664]	; (8004760 <HAL_RCC_OscConfig+0x57c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4aa5      	ldr	r2, [pc, #660]	; (8004760 <HAL_RCC_OscConfig+0x57c>)
 80044cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d2:	f7fe fadf 	bl	8002a94 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044da:	f7fe fadb 	bl	8002a94 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e18d      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ec:	4b9c      	ldr	r3, [pc, #624]	; (8004760 <HAL_RCC_OscConfig+0x57c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d108      	bne.n	8004512 <HAL_RCC_OscConfig+0x32e>
 8004500:	4b96      	ldr	r3, [pc, #600]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	4a95      	ldr	r2, [pc, #596]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004510:	e024      	b.n	800455c <HAL_RCC_OscConfig+0x378>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b05      	cmp	r3, #5
 8004518:	d110      	bne.n	800453c <HAL_RCC_OscConfig+0x358>
 800451a:	4b90      	ldr	r3, [pc, #576]	; (800475c <HAL_RCC_OscConfig+0x578>)
 800451c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004520:	4a8e      	ldr	r2, [pc, #568]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004522:	f043 0304 	orr.w	r3, r3, #4
 8004526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800452a:	4b8c      	ldr	r3, [pc, #560]	; (800475c <HAL_RCC_OscConfig+0x578>)
 800452c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004530:	4a8a      	ldr	r2, [pc, #552]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800453a:	e00f      	b.n	800455c <HAL_RCC_OscConfig+0x378>
 800453c:	4b87      	ldr	r3, [pc, #540]	; (800475c <HAL_RCC_OscConfig+0x578>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	4a86      	ldr	r2, [pc, #536]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800454c:	4b83      	ldr	r3, [pc, #524]	; (800475c <HAL_RCC_OscConfig+0x578>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004552:	4a82      	ldr	r2, [pc, #520]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004554:	f023 0304 	bic.w	r3, r3, #4
 8004558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d016      	beq.n	8004592 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fe fa96 	bl	8002a94 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800456a:	e00a      	b.n	8004582 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456c:	f7fe fa92 	bl	8002a94 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	; 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e142      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004582:	4b76      	ldr	r3, [pc, #472]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0ed      	beq.n	800456c <HAL_RCC_OscConfig+0x388>
 8004590:	e015      	b.n	80045be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004592:	f7fe fa7f 	bl	8002a94 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004598:	e00a      	b.n	80045b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459a:	f7fe fa7b 	bl	8002a94 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e12b      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045b0:	4b6a      	ldr	r3, [pc, #424]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1ed      	bne.n	800459a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045be:	7ffb      	ldrb	r3, [r7, #31]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c4:	4b65      	ldr	r3, [pc, #404]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	4a64      	ldr	r2, [pc, #400]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80045ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d03c      	beq.n	8004656 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01c      	beq.n	800461e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045e4:	4b5d      	ldr	r3, [pc, #372]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80045e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ea:	4a5c      	ldr	r2, [pc, #368]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fe fa4e 	bl	8002a94 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fc:	f7fe fa4a 	bl	8002a94 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0fc      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800460e:	4b53      	ldr	r3, [pc, #332]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004610:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0ef      	beq.n	80045fc <HAL_RCC_OscConfig+0x418>
 800461c:	e01b      	b.n	8004656 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800461e:	4b4f      	ldr	r3, [pc, #316]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004624:	4a4d      	ldr	r2, [pc, #308]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462e:	f7fe fa31 	bl	8002a94 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004636:	f7fe fa2d 	bl	8002a94 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e0df      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004648:	4b44      	ldr	r3, [pc, #272]	; (800475c <HAL_RCC_OscConfig+0x578>)
 800464a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1ef      	bne.n	8004636 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80d3 	beq.w	8004806 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004660:	4b3e      	ldr	r3, [pc, #248]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b0c      	cmp	r3, #12
 800466a:	f000 808d 	beq.w	8004788 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d15a      	bne.n	800472c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004676:	4b39      	ldr	r3, [pc, #228]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a38      	ldr	r2, [pc, #224]	; (800475c <HAL_RCC_OscConfig+0x578>)
 800467c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7fe fa07 	bl	8002a94 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468a:	f7fe fa03 	bl	8002a94 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e0b5      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800469c:	4b2f      	ldr	r3, [pc, #188]	; (800475c <HAL_RCC_OscConfig+0x578>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046a8:	4b2c      	ldr	r3, [pc, #176]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	4b2d      	ldr	r3, [pc, #180]	; (8004764 <HAL_RCC_OscConfig+0x580>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6a11      	ldr	r1, [r2, #32]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046b8:	3a01      	subs	r2, #1
 80046ba:	0112      	lsls	r2, r2, #4
 80046bc:	4311      	orrs	r1, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80046c2:	0212      	lsls	r2, r2, #8
 80046c4:	4311      	orrs	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046ca:	0852      	lsrs	r2, r2, #1
 80046cc:	3a01      	subs	r2, #1
 80046ce:	0552      	lsls	r2, r2, #21
 80046d0:	4311      	orrs	r1, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046d6:	0852      	lsrs	r2, r2, #1
 80046d8:	3a01      	subs	r2, #1
 80046da:	0652      	lsls	r2, r2, #25
 80046dc:	4311      	orrs	r1, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046e2:	06d2      	lsls	r2, r2, #27
 80046e4:	430a      	orrs	r2, r1
 80046e6:	491d      	ldr	r1, [pc, #116]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1a      	ldr	r2, [pc, #104]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80046f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046f8:	4b18      	ldr	r3, [pc, #96]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a17      	ldr	r2, [pc, #92]	; (800475c <HAL_RCC_OscConfig+0x578>)
 80046fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004702:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fe f9c6 	bl	8002a94 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470c:	f7fe f9c2 	bl	8002a94 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e074      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800471e:	4b0f      	ldr	r3, [pc, #60]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x528>
 800472a:	e06c      	b.n	8004806 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_RCC_OscConfig+0x578>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a0a      	ldr	r2, [pc, #40]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004736:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004738:	4b08      	ldr	r3, [pc, #32]	; (800475c <HAL_RCC_OscConfig+0x578>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a07      	ldr	r2, [pc, #28]	; (800475c <HAL_RCC_OscConfig+0x578>)
 800473e:	f023 0303 	bic.w	r3, r3, #3
 8004742:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <HAL_RCC_OscConfig+0x578>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4a04      	ldr	r2, [pc, #16]	; (800475c <HAL_RCC_OscConfig+0x578>)
 800474a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800474e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004752:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fe f99e 	bl	8002a94 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800475a:	e00e      	b.n	800477a <HAL_RCC_OscConfig+0x596>
 800475c:	40021000 	.word	0x40021000
 8004760:	40007000 	.word	0x40007000
 8004764:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004768:	f7fe f994 	bl	8002a94 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e046      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800477a:	4b25      	ldr	r3, [pc, #148]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0x584>
 8004786:	e03e      	b.n	8004806 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e039      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004794:	4b1e      	ldr	r3, [pc, #120]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f003 0203 	and.w	r2, r3, #3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d12c      	bne.n	8004802 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	3b01      	subs	r3, #1
 80047b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d123      	bne.n	8004802 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d11b      	bne.n	8004802 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d113      	bne.n	8004802 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	3b01      	subs	r3, #1
 80047e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d109      	bne.n	8004802 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	3b01      	subs	r3, #1
 80047fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d001      	beq.n	8004806 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000

08004814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e11e      	b.n	8004a6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800482c:	4b91      	ldr	r3, [pc, #580]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d910      	bls.n	800485c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483a:	4b8e      	ldr	r3, [pc, #568]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 020f 	bic.w	r2, r3, #15
 8004842:	498c      	ldr	r1, [pc, #560]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	4313      	orrs	r3, r2
 8004848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800484a:	4b8a      	ldr	r3, [pc, #552]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e106      	b.n	8004a6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d073      	beq.n	8004950 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d129      	bne.n	80048c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004870:	4b81      	ldr	r3, [pc, #516]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0f4      	b.n	8004a6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004880:	f000 f9d0 	bl	8004c24 <RCC_GetSysClockFreqFromPLLSource>
 8004884:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4a7c      	ldr	r2, [pc, #496]	; (8004a7c <HAL_RCC_ClockConfig+0x268>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d93f      	bls.n	800490e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800488e:	4b7a      	ldr	r3, [pc, #488]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d033      	beq.n	800490e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d12f      	bne.n	800490e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ae:	4b72      	ldr	r3, [pc, #456]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048b6:	4a70      	ldr	r2, [pc, #448]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 80048b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e024      	b.n	800490e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d107      	bne.n	80048dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048cc:	4b6a      	ldr	r3, [pc, #424]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0c6      	b.n	8004a6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048dc:	4b66      	ldr	r3, [pc, #408]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0be      	b.n	8004a6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048ec:	f000 f8ce 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 80048f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4a61      	ldr	r2, [pc, #388]	; (8004a7c <HAL_RCC_ClockConfig+0x268>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d909      	bls.n	800490e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048fa:	4b5f      	ldr	r3, [pc, #380]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004902:	4a5d      	ldr	r2, [pc, #372]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 8004904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004908:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800490a:	2380      	movs	r3, #128	; 0x80
 800490c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800490e:	4b5a      	ldr	r3, [pc, #360]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f023 0203 	bic.w	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4957      	ldr	r1, [pc, #348]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 800491c:	4313      	orrs	r3, r2
 800491e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004920:	f7fe f8b8 	bl	8002a94 <HAL_GetTick>
 8004924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004926:	e00a      	b.n	800493e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004928:	f7fe f8b4 	bl	8002a94 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f241 3288 	movw	r2, #5000	; 0x1388
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e095      	b.n	8004a6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493e:	4b4e      	ldr	r3, [pc, #312]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 020c 	and.w	r2, r3, #12
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	429a      	cmp	r2, r3
 800494e:	d1eb      	bne.n	8004928 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d023      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004968:	4b43      	ldr	r3, [pc, #268]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4a42      	ldr	r2, [pc, #264]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 800496e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004972:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004980:	4b3d      	ldr	r3, [pc, #244]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004988:	4a3b      	ldr	r2, [pc, #236]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 800498a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800498e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004990:	4b39      	ldr	r3, [pc, #228]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4936      	ldr	r1, [pc, #216]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	608b      	str	r3, [r1, #8]
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2b80      	cmp	r3, #128	; 0x80
 80049a8:	d105      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049aa:	4b33      	ldr	r3, [pc, #204]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	4a32      	ldr	r2, [pc, #200]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 80049b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049b6:	4b2f      	ldr	r3, [pc, #188]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d21d      	bcs.n	8004a00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c4:	4b2b      	ldr	r3, [pc, #172]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f023 020f 	bic.w	r2, r3, #15
 80049cc:	4929      	ldr	r1, [pc, #164]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049d4:	f7fe f85e 	bl	8002a94 <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049dc:	f7fe f85a 	bl	8002a94 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e03b      	b.n	8004a6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1ed      	bne.n	80049dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a0c:	4b1a      	ldr	r3, [pc, #104]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	4917      	ldr	r1, [pc, #92]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a2a:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	490f      	ldr	r1, [pc, #60]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a3e:	f000 f825 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8004a42:	4601      	mov	r1, r0
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <HAL_RCC_ClockConfig+0x264>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	091b      	lsrs	r3, r3, #4
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	4a0c      	ldr	r2, [pc, #48]	; (8004a80 <HAL_RCC_ClockConfig+0x26c>)
 8004a50:	5cd3      	ldrb	r3, [r2, r3]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	fa21 f303 	lsr.w	r3, r1, r3
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <HAL_RCC_ClockConfig+0x270>)
 8004a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <HAL_RCC_ClockConfig+0x274>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fd fed0 	bl	8002808 <HAL_InitTick>
 8004a68:	4603      	mov	r3, r0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40022000 	.word	0x40022000
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	04c4b400 	.word	0x04c4b400
 8004a80:	0800c4b4 	.word	0x0800c4b4
 8004a84:	20000000 	.word	0x20000000
 8004a88:	20000004 	.word	0x20000004

08004a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a92:	4b2c      	ldr	r3, [pc, #176]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d102      	bne.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a9e:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	e047      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004aa4:	4b27      	ldr	r3, [pc, #156]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 030c 	and.w	r3, r3, #12
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d102      	bne.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ab0:	4b26      	ldr	r3, [pc, #152]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	e03e      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004ab6:	4b23      	ldr	r3, [pc, #140]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b0c      	cmp	r3, #12
 8004ac0:	d136      	bne.n	8004b30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ac2:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004acc:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	091b      	lsrs	r3, r3, #4
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d10c      	bne.n	8004afa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ae0:	4a1a      	ldr	r2, [pc, #104]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae8:	4a16      	ldr	r2, [pc, #88]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aea:	68d2      	ldr	r2, [r2, #12]
 8004aec:	0a12      	lsrs	r2, r2, #8
 8004aee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	617b      	str	r3, [r7, #20]
      break;
 8004af8:	e00c      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004afa:	4a13      	ldr	r2, [pc, #76]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b02:	4a10      	ldr	r2, [pc, #64]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b04:	68d2      	ldr	r2, [r2, #12]
 8004b06:	0a12      	lsrs	r2, r2, #8
 8004b08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	617b      	str	r3, [r7, #20]
      break;
 8004b12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	0e5b      	lsrs	r3, r3, #25
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	e001      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b34:	693b      	ldr	r3, [r7, #16]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	00f42400 	.word	0x00f42400
 8004b4c:	016e3600 	.word	0x016e3600

08004b50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b54:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b56:	681b      	ldr	r3, [r3, #0]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000000 	.word	0x20000000

08004b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b6c:	f7ff fff0 	bl	8004b50 <HAL_RCC_GetHCLKFreq>
 8004b70:	4601      	mov	r1, r0
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	0a1b      	lsrs	r3, r3, #8
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b7e:	5cd3      	ldrb	r3, [r2, r3]
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	0800c4c4 	.word	0x0800c4c4

08004b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b98:	f7ff ffda 	bl	8004b50 <HAL_RCC_GetHCLKFreq>
 8004b9c:	4601      	mov	r1, r0
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	0adb      	lsrs	r3, r3, #11
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	4a04      	ldr	r2, [pc, #16]	; (8004bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004baa:	5cd3      	ldrb	r3, [r2, r3]
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	0800c4c4 	.word	0x0800c4c4

08004bc0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	220f      	movs	r2, #15
 8004bce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004bd0:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <HAL_RCC_GetClockConfig+0x5c>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 0203 	and.w	r2, r3, #3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <HAL_RCC_GetClockConfig+0x5c>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004be8:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <HAL_RCC_GetClockConfig+0x5c>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004bf4:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <HAL_RCC_GetClockConfig+0x5c>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	08db      	lsrs	r3, r3, #3
 8004bfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c02:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <HAL_RCC_GetClockConfig+0x60>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 020f 	and.w	r2, r3, #15
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	601a      	str	r2, [r3, #0]
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	40022000 	.word	0x40022000

08004c24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	3301      	adds	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d10c      	bne.n	8004c62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c48:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c52:	68d2      	ldr	r2, [r2, #12]
 8004c54:	0a12      	lsrs	r2, r2, #8
 8004c56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	617b      	str	r3, [r7, #20]
    break;
 8004c60:	e00c      	b.n	8004c7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c62:	4a12      	ldr	r2, [pc, #72]	; (8004cac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c6c:	68d2      	ldr	r2, [r2, #12]
 8004c6e:	0a12      	lsrs	r2, r2, #8
 8004c70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c74:	fb02 f303 	mul.w	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]
    break;
 8004c7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c7c:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	0e5b      	lsrs	r3, r3, #25
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	3301      	adds	r3, #1
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c96:	687b      	ldr	r3, [r7, #4]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	016e3600 	.word	0x016e3600
 8004cac:	00f42400 	.word	0x00f42400

08004cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cb8:	2300      	movs	r3, #0
 8004cba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8098 	beq.w	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cd2:	4b43      	ldr	r3, [pc, #268]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10d      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cde:	4b40      	ldr	r3, [pc, #256]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce2:	4a3f      	ldr	r2, [pc, #252]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8004cea:	4b3d      	ldr	r3, [pc, #244]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cfa:	4b3a      	ldr	r3, [pc, #232]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a39      	ldr	r2, [pc, #228]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d06:	f7fd fec5 	bl	8002a94 <HAL_GetTick>
 8004d0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d0c:	e009      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0e:	f7fd fec1 	bl	8002a94 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d902      	bls.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	74fb      	strb	r3, [r7, #19]
        break;
 8004d20:	e005      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d22:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0ef      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d159      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d34:	4b2a      	ldr	r3, [pc, #168]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d01e      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d019      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d50:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d5c:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	4a1f      	ldr	r2, [pc, #124]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d6c:	4b1c      	ldr	r3, [pc, #112]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d72:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d7c:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d016      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7fd fe81 	bl	8002a94 <HAL_GetTick>
 8004d92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d94:	e00b      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fd fe7d 	bl	8002a94 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d902      	bls.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	74fb      	strb	r3, [r7, #19]
            break;
 8004dac:	e006      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dae:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0ec      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004dbc:	7cfb      	ldrb	r3, [r7, #19]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10b      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dc2:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	4903      	ldr	r1, [pc, #12]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dd8:	e008      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dda:	7cfb      	ldrb	r3, [r7, #19]
 8004ddc:	74bb      	strb	r3, [r7, #18]
 8004dde:	e005      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004de0:	40021000 	.word	0x40021000
 8004de4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dec:	7c7b      	ldrb	r3, [r7, #17]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d105      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df2:	4ba6      	ldr	r3, [pc, #664]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df6:	4aa5      	ldr	r2, [pc, #660]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e0a:	4ba0      	ldr	r3, [pc, #640]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	f023 0203 	bic.w	r2, r3, #3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	499c      	ldr	r1, [pc, #624]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e2c:	4b97      	ldr	r3, [pc, #604]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	f023 020c 	bic.w	r2, r3, #12
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	4994      	ldr	r1, [pc, #592]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e4e:	4b8f      	ldr	r3, [pc, #572]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	498b      	ldr	r1, [pc, #556]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e70:	4b86      	ldr	r3, [pc, #536]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	4983      	ldr	r1, [pc, #524]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e92:	4b7e      	ldr	r3, [pc, #504]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	497a      	ldr	r1, [pc, #488]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eb4:	4b75      	ldr	r3, [pc, #468]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	4972      	ldr	r1, [pc, #456]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ed6:	4b6d      	ldr	r3, [pc, #436]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004edc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	4969      	ldr	r1, [pc, #420]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ef8:	4b64      	ldr	r3, [pc, #400]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	4961      	ldr	r1, [pc, #388]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f1a:	4b5c      	ldr	r3, [pc, #368]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	4958      	ldr	r1, [pc, #352]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d015      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f3c:	4b53      	ldr	r3, [pc, #332]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	4950      	ldr	r1, [pc, #320]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f5c:	4b4b      	ldr	r3, [pc, #300]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	4a4a      	ldr	r2, [pc, #296]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d015      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f74:	4b45      	ldr	r3, [pc, #276]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	4942      	ldr	r1, [pc, #264]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f94:	4b3d      	ldr	r3, [pc, #244]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4a3c      	ldr	r2, [pc, #240]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f9e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d015      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fac:	4b37      	ldr	r3, [pc, #220]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	4934      	ldr	r1, [pc, #208]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fca:	d105      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fcc:	4b2f      	ldr	r3, [pc, #188]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4a2e      	ldr	r2, [pc, #184]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fd6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d015      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fe4:	4b29      	ldr	r3, [pc, #164]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff2:	4926      	ldr	r1, [pc, #152]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005002:	d105      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005004:	4b21      	ldr	r3, [pc, #132]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a20      	ldr	r2, [pc, #128]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800500e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d015      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800501c:	4b1b      	ldr	r3, [pc, #108]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	4918      	ldr	r1, [pc, #96]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503a:	d105      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800503c:	4b13      	ldr	r3, [pc, #76]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4a12      	ldr	r2, [pc, #72]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005046:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d015      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005054:	4b0d      	ldr	r3, [pc, #52]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	490a      	ldr	r1, [pc, #40]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005072:	d105      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	4a04      	ldr	r2, [pc, #16]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800507a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005080:	7cbb      	ldrb	r3, [r7, #18]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40021000 	.word	0x40021000

08005090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e049      	b.n	8005136 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f841 	bl	800513e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f000 fa52 	bl	8005578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
	...

08005154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	d001      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e04a      	b.n	8005202 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a21      	ldr	r2, [pc, #132]	; (8005210 <HAL_TIM_Base_Start_IT+0xbc>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d018      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x6c>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005196:	d013      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x6c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <HAL_TIM_Base_Start_IT+0xc0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00e      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x6c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1c      	ldr	r2, [pc, #112]	; (8005218 <HAL_TIM_Base_Start_IT+0xc4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x6c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1a      	ldr	r2, [pc, #104]	; (800521c <HAL_TIM_Base_Start_IT+0xc8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x6c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a19      	ldr	r2, [pc, #100]	; (8005220 <HAL_TIM_Base_Start_IT+0xcc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d115      	bne.n	80051ec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	4b17      	ldr	r3, [pc, #92]	; (8005224 <HAL_TIM_Base_Start_IT+0xd0>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b06      	cmp	r3, #6
 80051d0:	d015      	beq.n	80051fe <HAL_TIM_Base_Start_IT+0xaa>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d8:	d011      	beq.n	80051fe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0201 	orr.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ea:	e008      	b.n	80051fe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	e000      	b.n	8005200 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40000400 	.word	0x40000400
 8005218:	40000800 	.word	0x40000800
 800521c:	40013400 	.word	0x40013400
 8005220:	40014000 	.word	0x40014000
 8005224:	00010007 	.word	0x00010007

08005228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b02      	cmp	r3, #2
 800523c:	d122      	bne.n	8005284 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b02      	cmp	r3, #2
 800524a:	d11b      	bne.n	8005284 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0202 	mvn.w	r2, #2
 8005254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f965 	bl	800553a <HAL_TIM_IC_CaptureCallback>
 8005270:	e005      	b.n	800527e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f957 	bl	8005526 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f968 	bl	800554e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b04      	cmp	r3, #4
 8005290:	d122      	bne.n	80052d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b04      	cmp	r3, #4
 800529e:	d11b      	bne.n	80052d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0204 	mvn.w	r2, #4
 80052a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2202      	movs	r2, #2
 80052ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f93b 	bl	800553a <HAL_TIM_IC_CaptureCallback>
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f92d 	bl	8005526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f93e 	bl	800554e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d122      	bne.n	800532c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d11b      	bne.n	800532c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0208 	mvn.w	r2, #8
 80052fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2204      	movs	r2, #4
 8005302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f911 	bl	800553a <HAL_TIM_IC_CaptureCallback>
 8005318:	e005      	b.n	8005326 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f903 	bl	8005526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f914 	bl	800554e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0310 	and.w	r3, r3, #16
 8005336:	2b10      	cmp	r3, #16
 8005338:	d122      	bne.n	8005380 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b10      	cmp	r3, #16
 8005346:	d11b      	bne.n	8005380 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0210 	mvn.w	r2, #16
 8005350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2208      	movs	r2, #8
 8005356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f8e7 	bl	800553a <HAL_TIM_IC_CaptureCallback>
 800536c:	e005      	b.n	800537a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f8d9 	bl	8005526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f8ea 	bl	800554e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b01      	cmp	r3, #1
 800538c:	d10e      	bne.n	80053ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b01      	cmp	r3, #1
 800539a:	d107      	bne.n	80053ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0201 	mvn.w	r2, #1
 80053a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7fd f8e6 	bl	8002578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b6:	2b80      	cmp	r3, #128	; 0x80
 80053b8:	d10e      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c4:	2b80      	cmp	r3, #128	; 0x80
 80053c6:	d107      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f96a 	bl	80056ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e6:	d10e      	bne.n	8005406 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d107      	bne.n	8005406 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f95d 	bl	80056c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005410:	2b40      	cmp	r3, #64	; 0x40
 8005412:	d10e      	bne.n	8005432 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b40      	cmp	r3, #64	; 0x40
 8005420:	d107      	bne.n	8005432 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800542a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f898 	bl	8005562 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b20      	cmp	r3, #32
 800543e:	d10e      	bne.n	800545e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b20      	cmp	r3, #32
 800544c:	d107      	bne.n	800545e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f06f 0220 	mvn.w	r2, #32
 8005456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f91d 	bl	8005698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800546c:	d10f      	bne.n	800548e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800547c:	d107      	bne.n	800548e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f923 	bl	80056d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800549c:	d10f      	bne.n	80054be <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054ac:	d107      	bne.n	80054be <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80054b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f915 	bl	80056e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054cc:	d10f      	bne.n	80054ee <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054dc:	d107      	bne.n	80054ee <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80054e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f907 	bl	80056fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054fc:	d10f      	bne.n	800551e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800550c:	d107      	bne.n	800551e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f8f9 	bl	8005710 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a3c      	ldr	r2, [pc, #240]	; (800567c <TIM_Base_SetConfig+0x104>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00f      	beq.n	80055b0 <TIM_Base_SetConfig+0x38>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005596:	d00b      	beq.n	80055b0 <TIM_Base_SetConfig+0x38>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a39      	ldr	r2, [pc, #228]	; (8005680 <TIM_Base_SetConfig+0x108>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <TIM_Base_SetConfig+0x38>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a38      	ldr	r2, [pc, #224]	; (8005684 <TIM_Base_SetConfig+0x10c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_Base_SetConfig+0x38>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a37      	ldr	r2, [pc, #220]	; (8005688 <TIM_Base_SetConfig+0x110>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d108      	bne.n	80055c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2d      	ldr	r2, [pc, #180]	; (800567c <TIM_Base_SetConfig+0x104>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d01b      	beq.n	8005602 <TIM_Base_SetConfig+0x8a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d0:	d017      	beq.n	8005602 <TIM_Base_SetConfig+0x8a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a2a      	ldr	r2, [pc, #168]	; (8005680 <TIM_Base_SetConfig+0x108>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <TIM_Base_SetConfig+0x8a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a29      	ldr	r2, [pc, #164]	; (8005684 <TIM_Base_SetConfig+0x10c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00f      	beq.n	8005602 <TIM_Base_SetConfig+0x8a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a28      	ldr	r2, [pc, #160]	; (8005688 <TIM_Base_SetConfig+0x110>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00b      	beq.n	8005602 <TIM_Base_SetConfig+0x8a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a27      	ldr	r2, [pc, #156]	; (800568c <TIM_Base_SetConfig+0x114>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d007      	beq.n	8005602 <TIM_Base_SetConfig+0x8a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a26      	ldr	r2, [pc, #152]	; (8005690 <TIM_Base_SetConfig+0x118>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d003      	beq.n	8005602 <TIM_Base_SetConfig+0x8a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a25      	ldr	r2, [pc, #148]	; (8005694 <TIM_Base_SetConfig+0x11c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d108      	bne.n	8005614 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a10      	ldr	r2, [pc, #64]	; (800567c <TIM_Base_SetConfig+0x104>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00f      	beq.n	8005660 <TIM_Base_SetConfig+0xe8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a11      	ldr	r2, [pc, #68]	; (8005688 <TIM_Base_SetConfig+0x110>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00b      	beq.n	8005660 <TIM_Base_SetConfig+0xe8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a10      	ldr	r2, [pc, #64]	; (800568c <TIM_Base_SetConfig+0x114>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d007      	beq.n	8005660 <TIM_Base_SetConfig+0xe8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a0f      	ldr	r2, [pc, #60]	; (8005690 <TIM_Base_SetConfig+0x118>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_Base_SetConfig+0xe8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a0e      	ldr	r2, [pc, #56]	; (8005694 <TIM_Base_SetConfig+0x11c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d103      	bne.n	8005668 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	615a      	str	r2, [r3, #20]
}
 800566e:	bf00      	nop
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40000400 	.word	0x40000400
 8005684:	40000800 	.word	0x40000800
 8005688:	40013400 	.word	0x40013400
 800568c:	40014000 	.word	0x40014000
 8005690:	40014400 	.word	0x40014400
 8005694:	40014800 	.word	0x40014800

08005698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e042      	b.n	80057bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800573c:	2b00      	cmp	r3, #0
 800573e:	d106      	bne.n	800574e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7fc ffb1 	bl	80026b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2224      	movs	r2, #36	; 0x24
 8005752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fae8 	bl	8005d3c <UART_SetConfig>
 800576c:	4603      	mov	r3, r0
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e022      	b.n	80057bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fd84 	bl	800628c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fe0b 	bl	80063d0 <UART_CheckIdleState>
 80057ba:	4603      	mov	r3, r0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	; 0x28
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057da:	2b20      	cmp	r3, #32
 80057dc:	f040 8083 	bne.w	80058e6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_UART_Transmit+0x28>
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e07b      	b.n	80058e8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_UART_Transmit+0x3a>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e074      	b.n	80058e8 <HAL_UART_Transmit+0x124>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2221      	movs	r2, #33	; 0x21
 8005812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005816:	f7fd f93d 	bl	8002a94 <HAL_GetTick>
 800581a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	88fa      	ldrh	r2, [r7, #6]
 8005820:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	88fa      	ldrh	r2, [r7, #6]
 8005828:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005834:	d108      	bne.n	8005848 <HAL_UART_Transmit+0x84>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d104      	bne.n	8005848 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	e003      	b.n	8005850 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005858:	e02c      	b.n	80058b4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2200      	movs	r2, #0
 8005862:	2180      	movs	r1, #128	; 0x80
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fdfb 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e039      	b.n	80058e8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10b      	bne.n	8005892 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005888:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	3302      	adds	r3, #2
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	e007      	b.n	80058a2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	781a      	ldrb	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	3301      	adds	r3, #1
 80058a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1cc      	bne.n	800585a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2200      	movs	r2, #0
 80058c8:	2140      	movs	r1, #64	; 0x40
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fdc8 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e006      	b.n	80058e8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e000      	b.n	80058e8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80058e6:	2302      	movs	r3, #2
  }
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005904:	2b20      	cmp	r3, #32
 8005906:	d170      	bne.n	80059ea <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_UART_Receive_DMA+0x24>
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e069      	b.n	80059ec <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_UART_Receive_DMA+0x36>
 8005922:	2302      	movs	r3, #2
 8005924:	e062      	b.n	80059ec <HAL_UART_Receive_DMA+0xfc>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	88fa      	ldrh	r2, [r7, #6]
 8005938:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2222      	movs	r2, #34	; 0x22
 8005948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005950:	2b00      	cmp	r3, #0
 8005952:	d02c      	beq.n	80059ae <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005958:	4a26      	ldr	r2, [pc, #152]	; (80059f4 <HAL_UART_Receive_DMA+0x104>)
 800595a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005960:	4a25      	ldr	r2, [pc, #148]	; (80059f8 <HAL_UART_Receive_DMA+0x108>)
 8005962:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005968:	4a24      	ldr	r2, [pc, #144]	; (80059fc <HAL_UART_Receive_DMA+0x10c>)
 800596a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005970:	2200      	movs	r2, #0
 8005972:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3324      	adds	r3, #36	; 0x24
 800597e:	4619      	mov	r1, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005984:	461a      	mov	r2, r3
 8005986:	88fb      	ldrh	r3, [r7, #6]
 8005988:	f7fd fa3a 	bl	8002e00 <HAL_DMA_Start_IT>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00d      	beq.n	80059ae <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2210      	movs	r2, #16
 8005996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e01e      	b.n	80059ec <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059c4:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0201 	orr.w	r2, r2, #1
 80059d4:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	e000      	b.n	80059ec <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80059ea:	2302      	movs	r3, #2
  }
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	080065e3 	.word	0x080065e3
 80059f8:	0800664d 	.word	0x0800664d
 80059fc:	08006669 	.word	0x08006669

08005a00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a26:	4013      	ands	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d118      	bne.n	8005a62 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d013      	beq.n	8005a62 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 8145 	beq.w	8005ce2 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
      }
      return;
 8005a60:	e13f      	b.n	8005ce2 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 80e8 	beq.w	8005c3a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4ba1      	ldr	r3, [pc, #644]	; (8005cf4 <HAL_UART_IRQHandler+0x2f4>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4ba0      	ldr	r3, [pc, #640]	; (8005cf8 <HAL_UART_IRQHandler+0x2f8>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 80dd 	beq.w	8005c3a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d010      	beq.n	8005aac <HAL_UART_IRQHandler+0xac>
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00b      	beq.n	8005aac <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa2:	f043 0201 	orr.w	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d010      	beq.n	8005ad8 <HAL_UART_IRQHandler+0xd8>
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00b      	beq.n	8005ad8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ace:	f043 0204 	orr.w	r2, r3, #4
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d010      	beq.n	8005b04 <HAL_UART_IRQHandler+0x104>
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00b      	beq.n	8005b04 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2204      	movs	r2, #4
 8005af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afa:	f043 0202 	orr.w	r2, r3, #2
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d015      	beq.n	8005b3a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d104      	bne.n	8005b22 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4b76      	ldr	r3, [pc, #472]	; (8005cf4 <HAL_UART_IRQHandler+0x2f4>)
 8005b1c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00b      	beq.n	8005b3a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2208      	movs	r2, #8
 8005b28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b30:	f043 0208 	orr.w	r2, r3, #8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d011      	beq.n	8005b68 <HAL_UART_IRQHandler+0x168>
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00c      	beq.n	8005b68 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5e:	f043 0220 	orr.w	r2, r3, #32
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 80b9 	beq.w	8005ce6 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d011      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	f003 0320 	and.w	r3, r3, #32
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d104      	bne.n	8005b92 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d004      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d031      	beq.n	8005c26 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fcea 	bl	800659c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd2:	2b40      	cmp	r3, #64	; 0x40
 8005bd4:	d123      	bne.n	8005c1e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d013      	beq.n	8005c16 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf2:	4a42      	ldr	r2, [pc, #264]	; (8005cfc <HAL_UART_IRQHandler+0x2fc>)
 8005bf4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fd f97b 	bl	8002ef6 <HAL_DMA_Abort_IT>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d017      	beq.n	8005c36 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005c10:	4610      	mov	r0, r2
 8005c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c14:	e00f      	b.n	8005c36 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f886 	bl	8005d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1c:	e00b      	b.n	8005c36 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f882 	bl	8005d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c24:	e007      	b.n	8005c36 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f87e 	bl	8005d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005c34:	e057      	b.n	8005ce6 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c36:	bf00      	nop
    return;
 8005c38:	e055      	b.n	8005ce6 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00d      	beq.n	8005c60 <HAL_UART_IRQHandler+0x260>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fd75 	bl	8006748 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c5e:	e045      	b.n	8005cec <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d012      	beq.n	8005c90 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d104      	bne.n	8005c7e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d008      	beq.n	8005c90 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d031      	beq.n	8005cea <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	4798      	blx	r3
    }
    return;
 8005c8e:	e02c      	b.n	8005cea <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <HAL_UART_IRQHandler+0x2ac>
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fd35 	bl	8006714 <UART_EndTransmit_IT>
    return;
 8005caa:	e01f      	b.n	8005cec <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d008      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x2c8>
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fd55 	bl	8006770 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cc6:	e011      	b.n	8005cec <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00c      	beq.n	8005cec <HAL_UART_IRQHandler+0x2ec>
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	da09      	bge.n	8005cec <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fd3f 	bl	800675c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cde:	bf00      	nop
 8005ce0:	e004      	b.n	8005cec <HAL_UART_IRQHandler+0x2ec>
      return;
 8005ce2:	bf00      	nop
 8005ce4:	e002      	b.n	8005cec <HAL_UART_IRQHandler+0x2ec>
    return;
 8005ce6:	bf00      	nop
 8005ce8:	e000      	b.n	8005cec <HAL_UART_IRQHandler+0x2ec>
    return;
 8005cea:	bf00      	nop
  }
}
 8005cec:	3720      	adds	r7, #32
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	10000001 	.word	0x10000001
 8005cf8:	04000120 	.word	0x04000120
 8005cfc:	080066e9 	.word	0x080066e9

08005d00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d3c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005d40:	b088      	sub	sp, #32
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4bb0      	ldr	r3, [pc, #704]	; (8006034 <UART_SetConfig+0x2f8>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6812      	ldr	r2, [r2, #0]
 8005d7a:	69f9      	ldr	r1, [r7, #28]
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4aa5      	ldr	r2, [pc, #660]	; (8006038 <UART_SetConfig+0x2fc>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005dba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	69f9      	ldr	r1, [r7, #28]
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dce:	f023 010f 	bic.w	r1, r3, #15
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a96      	ldr	r2, [pc, #600]	; (800603c <UART_SetConfig+0x300>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d121      	bne.n	8005e2c <UART_SetConfig+0xf0>
 8005de8:	4b95      	ldr	r3, [pc, #596]	; (8006040 <UART_SetConfig+0x304>)
 8005dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d816      	bhi.n	8005e24 <UART_SetConfig+0xe8>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <UART_SetConfig+0xc0>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e19 	.word	0x08005e19
 8005e04:	08005e13 	.word	0x08005e13
 8005e08:	08005e1f 	.word	0x08005e1f
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	76fb      	strb	r3, [r7, #27]
 8005e10:	e0be      	b.n	8005f90 <UART_SetConfig+0x254>
 8005e12:	2302      	movs	r3, #2
 8005e14:	76fb      	strb	r3, [r7, #27]
 8005e16:	e0bb      	b.n	8005f90 <UART_SetConfig+0x254>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	76fb      	strb	r3, [r7, #27]
 8005e1c:	e0b8      	b.n	8005f90 <UART_SetConfig+0x254>
 8005e1e:	2308      	movs	r3, #8
 8005e20:	76fb      	strb	r3, [r7, #27]
 8005e22:	e0b5      	b.n	8005f90 <UART_SetConfig+0x254>
 8005e24:	2310      	movs	r3, #16
 8005e26:	76fb      	strb	r3, [r7, #27]
 8005e28:	bf00      	nop
 8005e2a:	e0b1      	b.n	8005f90 <UART_SetConfig+0x254>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a84      	ldr	r2, [pc, #528]	; (8006044 <UART_SetConfig+0x308>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d134      	bne.n	8005ea0 <UART_SetConfig+0x164>
 8005e36:	4b82      	ldr	r3, [pc, #520]	; (8006040 <UART_SetConfig+0x304>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3c:	f003 030c 	and.w	r3, r3, #12
 8005e40:	2b0c      	cmp	r3, #12
 8005e42:	d829      	bhi.n	8005e98 <UART_SetConfig+0x15c>
 8005e44:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <UART_SetConfig+0x110>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005e81 	.word	0x08005e81
 8005e50:	08005e99 	.word	0x08005e99
 8005e54:	08005e99 	.word	0x08005e99
 8005e58:	08005e99 	.word	0x08005e99
 8005e5c:	08005e8d 	.word	0x08005e8d
 8005e60:	08005e99 	.word	0x08005e99
 8005e64:	08005e99 	.word	0x08005e99
 8005e68:	08005e99 	.word	0x08005e99
 8005e6c:	08005e87 	.word	0x08005e87
 8005e70:	08005e99 	.word	0x08005e99
 8005e74:	08005e99 	.word	0x08005e99
 8005e78:	08005e99 	.word	0x08005e99
 8005e7c:	08005e93 	.word	0x08005e93
 8005e80:	2300      	movs	r3, #0
 8005e82:	76fb      	strb	r3, [r7, #27]
 8005e84:	e084      	b.n	8005f90 <UART_SetConfig+0x254>
 8005e86:	2302      	movs	r3, #2
 8005e88:	76fb      	strb	r3, [r7, #27]
 8005e8a:	e081      	b.n	8005f90 <UART_SetConfig+0x254>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	76fb      	strb	r3, [r7, #27]
 8005e90:	e07e      	b.n	8005f90 <UART_SetConfig+0x254>
 8005e92:	2308      	movs	r3, #8
 8005e94:	76fb      	strb	r3, [r7, #27]
 8005e96:	e07b      	b.n	8005f90 <UART_SetConfig+0x254>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	76fb      	strb	r3, [r7, #27]
 8005e9c:	bf00      	nop
 8005e9e:	e077      	b.n	8005f90 <UART_SetConfig+0x254>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a68      	ldr	r2, [pc, #416]	; (8006048 <UART_SetConfig+0x30c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d120      	bne.n	8005eec <UART_SetConfig+0x1b0>
 8005eaa:	4b65      	ldr	r3, [pc, #404]	; (8006040 <UART_SetConfig+0x304>)
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d00f      	beq.n	8005ed8 <UART_SetConfig+0x19c>
 8005eb8:	2b10      	cmp	r3, #16
 8005eba:	d802      	bhi.n	8005ec2 <UART_SetConfig+0x186>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <UART_SetConfig+0x190>
 8005ec0:	e010      	b.n	8005ee4 <UART_SetConfig+0x1a8>
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d005      	beq.n	8005ed2 <UART_SetConfig+0x196>
 8005ec6:	2b30      	cmp	r3, #48	; 0x30
 8005ec8:	d009      	beq.n	8005ede <UART_SetConfig+0x1a2>
 8005eca:	e00b      	b.n	8005ee4 <UART_SetConfig+0x1a8>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	76fb      	strb	r3, [r7, #27]
 8005ed0:	e05e      	b.n	8005f90 <UART_SetConfig+0x254>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	76fb      	strb	r3, [r7, #27]
 8005ed6:	e05b      	b.n	8005f90 <UART_SetConfig+0x254>
 8005ed8:	2304      	movs	r3, #4
 8005eda:	76fb      	strb	r3, [r7, #27]
 8005edc:	e058      	b.n	8005f90 <UART_SetConfig+0x254>
 8005ede:	2308      	movs	r3, #8
 8005ee0:	76fb      	strb	r3, [r7, #27]
 8005ee2:	e055      	b.n	8005f90 <UART_SetConfig+0x254>
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	76fb      	strb	r3, [r7, #27]
 8005ee8:	bf00      	nop
 8005eea:	e051      	b.n	8005f90 <UART_SetConfig+0x254>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a56      	ldr	r2, [pc, #344]	; (800604c <UART_SetConfig+0x310>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d120      	bne.n	8005f38 <UART_SetConfig+0x1fc>
 8005ef6:	4b52      	ldr	r3, [pc, #328]	; (8006040 <UART_SetConfig+0x304>)
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f00:	2b40      	cmp	r3, #64	; 0x40
 8005f02:	d00f      	beq.n	8005f24 <UART_SetConfig+0x1e8>
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	d802      	bhi.n	8005f0e <UART_SetConfig+0x1d2>
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <UART_SetConfig+0x1dc>
 8005f0c:	e010      	b.n	8005f30 <UART_SetConfig+0x1f4>
 8005f0e:	2b80      	cmp	r3, #128	; 0x80
 8005f10:	d005      	beq.n	8005f1e <UART_SetConfig+0x1e2>
 8005f12:	2bc0      	cmp	r3, #192	; 0xc0
 8005f14:	d009      	beq.n	8005f2a <UART_SetConfig+0x1ee>
 8005f16:	e00b      	b.n	8005f30 <UART_SetConfig+0x1f4>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	76fb      	strb	r3, [r7, #27]
 8005f1c:	e038      	b.n	8005f90 <UART_SetConfig+0x254>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	76fb      	strb	r3, [r7, #27]
 8005f22:	e035      	b.n	8005f90 <UART_SetConfig+0x254>
 8005f24:	2304      	movs	r3, #4
 8005f26:	76fb      	strb	r3, [r7, #27]
 8005f28:	e032      	b.n	8005f90 <UART_SetConfig+0x254>
 8005f2a:	2308      	movs	r3, #8
 8005f2c:	76fb      	strb	r3, [r7, #27]
 8005f2e:	e02f      	b.n	8005f90 <UART_SetConfig+0x254>
 8005f30:	2310      	movs	r3, #16
 8005f32:	76fb      	strb	r3, [r7, #27]
 8005f34:	bf00      	nop
 8005f36:	e02b      	b.n	8005f90 <UART_SetConfig+0x254>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a3e      	ldr	r2, [pc, #248]	; (8006038 <UART_SetConfig+0x2fc>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d124      	bne.n	8005f8c <UART_SetConfig+0x250>
 8005f42:	4b3f      	ldr	r3, [pc, #252]	; (8006040 <UART_SetConfig+0x304>)
 8005f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f50:	d012      	beq.n	8005f78 <UART_SetConfig+0x23c>
 8005f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f56:	d802      	bhi.n	8005f5e <UART_SetConfig+0x222>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <UART_SetConfig+0x230>
 8005f5c:	e012      	b.n	8005f84 <UART_SetConfig+0x248>
 8005f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f62:	d006      	beq.n	8005f72 <UART_SetConfig+0x236>
 8005f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f68:	d009      	beq.n	8005f7e <UART_SetConfig+0x242>
 8005f6a:	e00b      	b.n	8005f84 <UART_SetConfig+0x248>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	76fb      	strb	r3, [r7, #27]
 8005f70:	e00e      	b.n	8005f90 <UART_SetConfig+0x254>
 8005f72:	2302      	movs	r3, #2
 8005f74:	76fb      	strb	r3, [r7, #27]
 8005f76:	e00b      	b.n	8005f90 <UART_SetConfig+0x254>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	76fb      	strb	r3, [r7, #27]
 8005f7c:	e008      	b.n	8005f90 <UART_SetConfig+0x254>
 8005f7e:	2308      	movs	r3, #8
 8005f80:	76fb      	strb	r3, [r7, #27]
 8005f82:	e005      	b.n	8005f90 <UART_SetConfig+0x254>
 8005f84:	2310      	movs	r3, #16
 8005f86:	76fb      	strb	r3, [r7, #27]
 8005f88:	bf00      	nop
 8005f8a:	e001      	b.n	8005f90 <UART_SetConfig+0x254>
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a28      	ldr	r2, [pc, #160]	; (8006038 <UART_SetConfig+0x2fc>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	f040 80a1 	bne.w	80060de <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f9c:	7efb      	ldrb	r3, [r7, #27]
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d823      	bhi.n	8005fea <UART_SetConfig+0x2ae>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <UART_SetConfig+0x26c>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005feb 	.word	0x08005feb
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005feb 	.word	0x08005feb
 8005fb8:	08005fdb 	.word	0x08005fdb
 8005fbc:	08005feb 	.word	0x08005feb
 8005fc0:	08005feb 	.word	0x08005feb
 8005fc4:	08005feb 	.word	0x08005feb
 8005fc8:	08005fe3 	.word	0x08005fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fe fdcc 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	6178      	str	r0, [r7, #20]
        break;
 8005fd2:	e00f      	b.n	8005ff4 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd4:	4b1e      	ldr	r3, [pc, #120]	; (8006050 <UART_SetConfig+0x314>)
 8005fd6:	617b      	str	r3, [r7, #20]
        break;
 8005fd8:	e00c      	b.n	8005ff4 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fda:	f7fe fd57 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8005fde:	6178      	str	r0, [r7, #20]
        break;
 8005fe0:	e008      	b.n	8005ff4 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fe6:	617b      	str	r3, [r7, #20]
        break;
 8005fe8:	e004      	b.n	8005ff4 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	76bb      	strb	r3, [r7, #26]
        break;
 8005ff2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 8130 	beq.w	800625c <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	4a14      	ldr	r2, [pc, #80]	; (8006054 <UART_SetConfig+0x318>)
 8006002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006006:	461a      	mov	r2, r3
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	fbb3 f3f2 	udiv	r3, r3, r2
 800600e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	4413      	add	r3, r2
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	429a      	cmp	r2, r3
 800601e:	d305      	bcc.n	800602c <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	429a      	cmp	r2, r3
 800602a:	d915      	bls.n	8006058 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	76bb      	strb	r3, [r7, #26]
 8006030:	e114      	b.n	800625c <UART_SetConfig+0x520>
 8006032:	bf00      	nop
 8006034:	cfff69f3 	.word	0xcfff69f3
 8006038:	40008000 	.word	0x40008000
 800603c:	40013800 	.word	0x40013800
 8006040:	40021000 	.word	0x40021000
 8006044:	40004400 	.word	0x40004400
 8006048:	40004800 	.word	0x40004800
 800604c:	40004c00 	.word	0x40004c00
 8006050:	00f42400 	.word	0x00f42400
 8006054:	0800c4cc 	.word	0x0800c4cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	4618      	mov	r0, r3
 800605c:	f04f 0100 	mov.w	r1, #0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	4a87      	ldr	r2, [pc, #540]	; (8006284 <UART_SetConfig+0x548>)
 8006066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f04f 0400 	mov.w	r4, #0
 8006070:	461a      	mov	r2, r3
 8006072:	4623      	mov	r3, r4
 8006074:	f7fa fe3a 	bl	8000cec <__aeabi_uldivmod>
 8006078:	4603      	mov	r3, r0
 800607a:	460c      	mov	r4, r1
 800607c:	4619      	mov	r1, r3
 800607e:	4622      	mov	r2, r4
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	f04f 0400 	mov.w	r4, #0
 8006088:	0214      	lsls	r4, r2, #8
 800608a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800608e:	020b      	lsls	r3, r1, #8
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6852      	ldr	r2, [r2, #4]
 8006094:	0852      	lsrs	r2, r2, #1
 8006096:	4611      	mov	r1, r2
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	eb13 0b01 	adds.w	fp, r3, r1
 80060a0:	eb44 0c02 	adc.w	ip, r4, r2
 80060a4:	4658      	mov	r0, fp
 80060a6:	4661      	mov	r1, ip
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f04f 0400 	mov.w	r4, #0
 80060b0:	461a      	mov	r2, r3
 80060b2:	4623      	mov	r3, r4
 80060b4:	f7fa fe1a 	bl	8000cec <__aeabi_uldivmod>
 80060b8:	4603      	mov	r3, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060c4:	d308      	bcc.n	80060d8 <UART_SetConfig+0x39c>
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060cc:	d204      	bcs.n	80060d8 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	60da      	str	r2, [r3, #12]
 80060d6:	e0c1      	b.n	800625c <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	76bb      	strb	r3, [r7, #26]
 80060dc:	e0be      	b.n	800625c <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e6:	d164      	bne.n	80061b2 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 80060e8:	7efb      	ldrb	r3, [r7, #27]
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d827      	bhi.n	800613e <UART_SetConfig+0x402>
 80060ee:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <UART_SetConfig+0x3b8>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006119 	.word	0x08006119
 80060f8:	08006121 	.word	0x08006121
 80060fc:	08006129 	.word	0x08006129
 8006100:	0800613f 	.word	0x0800613f
 8006104:	0800612f 	.word	0x0800612f
 8006108:	0800613f 	.word	0x0800613f
 800610c:	0800613f 	.word	0x0800613f
 8006110:	0800613f 	.word	0x0800613f
 8006114:	08006137 	.word	0x08006137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006118:	f7fe fd26 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 800611c:	6178      	str	r0, [r7, #20]
        break;
 800611e:	e013      	b.n	8006148 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006120:	f7fe fd38 	bl	8004b94 <HAL_RCC_GetPCLK2Freq>
 8006124:	6178      	str	r0, [r7, #20]
        break;
 8006126:	e00f      	b.n	8006148 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006128:	4b57      	ldr	r3, [pc, #348]	; (8006288 <UART_SetConfig+0x54c>)
 800612a:	617b      	str	r3, [r7, #20]
        break;
 800612c:	e00c      	b.n	8006148 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800612e:	f7fe fcad 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8006132:	6178      	str	r0, [r7, #20]
        break;
 8006134:	e008      	b.n	8006148 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800613a:	617b      	str	r3, [r7, #20]
        break;
 800613c:	e004      	b.n	8006148 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	76bb      	strb	r3, [r7, #26]
        break;
 8006146:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 8086 	beq.w	800625c <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	4a4b      	ldr	r2, [pc, #300]	; (8006284 <UART_SetConfig+0x548>)
 8006156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800615a:	461a      	mov	r2, r3
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006162:	005a      	lsls	r2, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	441a      	add	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	fbb2 f3f3 	udiv	r3, r2, r3
 8006174:	b29b      	uxth	r3, r3
 8006176:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b0f      	cmp	r3, #15
 800617c:	d916      	bls.n	80061ac <UART_SetConfig+0x470>
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006184:	d212      	bcs.n	80061ac <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	b29b      	uxth	r3, r3
 800618a:	f023 030f 	bic.w	r3, r3, #15
 800618e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	b29b      	uxth	r3, r3
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	b29a      	uxth	r2, r3
 800619c:	89fb      	ldrh	r3, [r7, #14]
 800619e:	4313      	orrs	r3, r2
 80061a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	89fa      	ldrh	r2, [r7, #14]
 80061a8:	60da      	str	r2, [r3, #12]
 80061aa:	e057      	b.n	800625c <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	76bb      	strb	r3, [r7, #26]
 80061b0:	e054      	b.n	800625c <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061b2:	7efb      	ldrb	r3, [r7, #27]
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d828      	bhi.n	800620a <UART_SetConfig+0x4ce>
 80061b8:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <UART_SetConfig+0x484>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	080061ed 	.word	0x080061ed
 80061c8:	080061f5 	.word	0x080061f5
 80061cc:	0800620b 	.word	0x0800620b
 80061d0:	080061fb 	.word	0x080061fb
 80061d4:	0800620b 	.word	0x0800620b
 80061d8:	0800620b 	.word	0x0800620b
 80061dc:	0800620b 	.word	0x0800620b
 80061e0:	08006203 	.word	0x08006203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e4:	f7fe fcc0 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 80061e8:	6178      	str	r0, [r7, #20]
        break;
 80061ea:	e013      	b.n	8006214 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061ec:	f7fe fcd2 	bl	8004b94 <HAL_RCC_GetPCLK2Freq>
 80061f0:	6178      	str	r0, [r7, #20]
        break;
 80061f2:	e00f      	b.n	8006214 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061f4:	4b24      	ldr	r3, [pc, #144]	; (8006288 <UART_SetConfig+0x54c>)
 80061f6:	617b      	str	r3, [r7, #20]
        break;
 80061f8:	e00c      	b.n	8006214 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061fa:	f7fe fc47 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 80061fe:	6178      	str	r0, [r7, #20]
        break;
 8006200:	e008      	b.n	8006214 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006206:	617b      	str	r3, [r7, #20]
        break;
 8006208:	e004      	b.n	8006214 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	76bb      	strb	r3, [r7, #26]
        break;
 8006212:	bf00      	nop
    }

    if (pclk != 0U)
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d020      	beq.n	800625c <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	4a19      	ldr	r2, [pc, #100]	; (8006284 <UART_SetConfig+0x548>)
 8006220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006224:	461a      	mov	r2, r3
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	fbb3 f2f2 	udiv	r2, r3, r2
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	085b      	lsrs	r3, r3, #1
 8006232:	441a      	add	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	fbb2 f3f3 	udiv	r3, r2, r3
 800623c:	b29b      	uxth	r3, r3
 800623e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b0f      	cmp	r3, #15
 8006244:	d908      	bls.n	8006258 <UART_SetConfig+0x51c>
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624c:	d204      	bcs.n	8006258 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	e001      	b.n	800625c <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006278:	7ebb      	ldrb	r3, [r7, #26]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3720      	adds	r7, #32
 800627e:	46bd      	mov	sp, r7
 8006280:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006284:	0800c4cc 	.word	0x0800c4cc
 8006288:	00f42400 	.word	0x00f42400

0800628c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01a      	beq.n	80063a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800638a:	d10a      	bne.n	80063a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
  }
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063e0:	f7fc fb58 	bl	8002a94 <HAL_GetTick>
 80063e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d10e      	bne.n	8006412 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f82c 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e022      	b.n	8006458 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b04      	cmp	r3, #4
 800641e:	d10e      	bne.n	800643e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f816 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e00c      	b.n	8006458 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006470:	e062      	b.n	8006538 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d05e      	beq.n	8006538 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647a:	f7fc fb0b 	bl	8002a94 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <UART_WaitOnFlagUntilTimeout+0x30>
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d11d      	bne.n	80064cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800649e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0201 	bic.w	r2, r2, #1
 80064ae:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e045      	b.n	8006558 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0304 	and.w	r3, r3, #4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d02e      	beq.n	8006538 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e8:	d126      	bne.n	8006538 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006502:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0201 	bic.w	r2, r2, #1
 8006512:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2220      	movs	r2, #32
 8006518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2220      	movs	r2, #32
 8006520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e00f      	b.n	8006558 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69da      	ldr	r2, [r3, #28]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	4013      	ands	r3, r2
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	429a      	cmp	r2, r3
 8006546:	bf0c      	ite	eq
 8006548:	2301      	moveq	r3, #1
 800654a:	2300      	movne	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	461a      	mov	r2, r3
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	429a      	cmp	r2, r3
 8006554:	d08d      	beq.n	8006472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006576:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006586:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065c2:	f023 0301 	bic.w	r3, r3, #1
 80065c6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d11f      	bne.n	800663e <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006614:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0201 	bic.w	r2, r2, #1
 8006624:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006634:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f7fb fc70 	bl	8001f24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006644:	bf00      	nop
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006658:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7ff fb5a 	bl	8005d14 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800667c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006684:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006690:	2b80      	cmp	r3, #128	; 0x80
 8006692:	d109      	bne.n	80066a8 <UART_DMAError+0x40>
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b21      	cmp	r3, #33	; 0x21
 8006698:	d106      	bne.n	80066a8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2200      	movs	r2, #0
 800669e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80066a2:	6978      	ldr	r0, [r7, #20]
 80066a4:	f7ff ff5c 	bl	8006560 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b2:	2b40      	cmp	r3, #64	; 0x40
 80066b4:	d109      	bne.n	80066ca <UART_DMAError+0x62>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b22      	cmp	r3, #34	; 0x22
 80066ba:	d106      	bne.n	80066ca <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80066c4:	6978      	ldr	r0, [r7, #20]
 80066c6:	f7ff ff69 	bl	800659c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d0:	f043 0210 	orr.w	r2, r3, #16
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066da:	6978      	ldr	r0, [r7, #20]
 80066dc:	f7ff fb24 	bl	8005d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066e0:	bf00      	nop
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7ff fb0e 	bl	8005d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800670c:	bf00      	nop
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800672a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff fae0 	bl	8005d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_UARTEx_DisableFifoMode+0x16>
 8006796:	2302      	movs	r3, #2
 8006798:	e027      	b.n	80067ea <HAL_UARTEx_DisableFifoMode+0x66>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2224      	movs	r2, #36	; 0x24
 80067a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0201 	bic.w	r2, r2, #1
 80067c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800680a:	2302      	movs	r3, #2
 800680c:	e02d      	b.n	800686a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2224      	movs	r2, #36	; 0x24
 800681a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0201 	bic.w	r2, r2, #1
 8006834:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f850 	bl	80068f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006882:	2b01      	cmp	r3, #1
 8006884:	d101      	bne.n	800688a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006886:	2302      	movs	r3, #2
 8006888:	e02d      	b.n	80068e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2224      	movs	r2, #36	; 0x24
 8006896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0201 	bic.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f812 	bl	80068f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b089      	sub	sp, #36	; 0x24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80068f8:	4a2f      	ldr	r2, [pc, #188]	; (80069b8 <UARTEx_SetNbDataToProcess+0xc8>)
 80068fa:	f107 0314 	add.w	r3, r7, #20
 80068fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006902:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006906:	4a2d      	ldr	r2, [pc, #180]	; (80069bc <UARTEx_SetNbDataToProcess+0xcc>)
 8006908:	f107 030c 	add.w	r3, r7, #12
 800690c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006910:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006918:	2b00      	cmp	r3, #0
 800691a:	d108      	bne.n	800692e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800692c:	e03d      	b.n	80069aa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800692e:	2308      	movs	r3, #8
 8006930:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006932:	2308      	movs	r3, #8
 8006934:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	0e5b      	lsrs	r3, r3, #25
 800693e:	b2db      	uxtb	r3, r3
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	0f5b      	lsrs	r3, r3, #29
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006956:	7fbb      	ldrb	r3, [r7, #30]
 8006958:	7f3a      	ldrb	r2, [r7, #28]
 800695a:	f107 0120 	add.w	r1, r7, #32
 800695e:	440a      	add	r2, r1
 8006960:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006968:	7f3a      	ldrb	r2, [r7, #28]
 800696a:	f107 0120 	add.w	r1, r7, #32
 800696e:	440a      	add	r2, r1
 8006970:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006974:	fb93 f3f2 	sdiv	r3, r3, r2
 8006978:	b29a      	uxth	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006980:	7ffb      	ldrb	r3, [r7, #31]
 8006982:	7f7a      	ldrb	r2, [r7, #29]
 8006984:	f107 0120 	add.w	r1, r7, #32
 8006988:	440a      	add	r2, r1
 800698a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800698e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006992:	7f7a      	ldrb	r2, [r7, #29]
 8006994:	f107 0120 	add.w	r1, r7, #32
 8006998:	440a      	add	r2, r1
 800699a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800699e:	fb93 f3f2 	sdiv	r3, r3, r2
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80069aa:	bf00      	nop
 80069ac:	3724      	adds	r7, #36	; 0x24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	0800c3fc 	.word	0x0800c3fc
 80069bc:	0800c404 	.word	0x0800c404

080069c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80069c4:	bf00      	nop
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069d6:	f3ef 8305 	mrs	r3, IPSR
 80069da:	60bb      	str	r3, [r7, #8]
  return(result);
 80069dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10f      	bne.n	8006a02 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069e2:	f3ef 8310 	mrs	r3, PRIMASK
 80069e6:	607b      	str	r3, [r7, #4]
  return(result);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d105      	bne.n	80069fa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069ee:	f3ef 8311 	mrs	r3, BASEPRI
 80069f2:	603b      	str	r3, [r7, #0]
  return(result);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d007      	beq.n	8006a0a <osKernelInitialize+0x3a>
 80069fa:	4b0e      	ldr	r3, [pc, #56]	; (8006a34 <osKernelInitialize+0x64>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d103      	bne.n	8006a0a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006a02:	f06f 0305 	mvn.w	r3, #5
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	e00c      	b.n	8006a24 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a0a:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <osKernelInitialize+0x64>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d105      	bne.n	8006a1e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a12:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <osKernelInitialize+0x64>)
 8006a14:	2201      	movs	r2, #1
 8006a16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e002      	b.n	8006a24 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a24:	68fb      	ldr	r3, [r7, #12]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	20000210 	.word	0x20000210

08006a38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a3e:	f3ef 8305 	mrs	r3, IPSR
 8006a42:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10f      	bne.n	8006a6a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a4e:	607b      	str	r3, [r7, #4]
  return(result);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d105      	bne.n	8006a62 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a56:	f3ef 8311 	mrs	r3, BASEPRI
 8006a5a:	603b      	str	r3, [r7, #0]
  return(result);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d007      	beq.n	8006a72 <osKernelStart+0x3a>
 8006a62:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <osKernelStart+0x68>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d103      	bne.n	8006a72 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006a6a:	f06f 0305 	mvn.w	r3, #5
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e010      	b.n	8006a94 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a72:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <osKernelStart+0x68>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d109      	bne.n	8006a8e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a7a:	f7ff ffa1 	bl	80069c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a7e:	4b08      	ldr	r3, [pc, #32]	; (8006aa0 <osKernelStart+0x68>)
 8006a80:	2202      	movs	r2, #2
 8006a82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a84:	f001 f870 	bl	8007b68 <vTaskStartScheduler>
      stat = osOK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	e002      	b.n	8006a94 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a94:	68fb      	ldr	r3, [r7, #12]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000210 	.word	0x20000210

08006aa4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b090      	sub	sp, #64	; 0x40
 8006aa8:	af04      	add	r7, sp, #16
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ab4:	f3ef 8305 	mrs	r3, IPSR
 8006ab8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006aba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f040 808f 	bne.w	8006be0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ac6:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d105      	bne.n	8006ada <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ace:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad2:	617b      	str	r3, [r7, #20]
  return(result);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <osThreadNew+0x3e>
 8006ada:	4b44      	ldr	r3, [pc, #272]	; (8006bec <osThreadNew+0x148>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d07e      	beq.n	8006be0 <osThreadNew+0x13c>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d07b      	beq.n	8006be0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006ae8:	2380      	movs	r3, #128	; 0x80
 8006aea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006aec:	2318      	movs	r3, #24
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006af4:	f04f 33ff 	mov.w	r3, #4294967295
 8006af8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d045      	beq.n	8006b8c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <osThreadNew+0x6a>
        name = attr->name;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d002      	beq.n	8006b1c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d008      	beq.n	8006b34 <osThreadNew+0x90>
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	2b38      	cmp	r3, #56	; 0x38
 8006b26:	d805      	bhi.n	8006b34 <osThreadNew+0x90>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <osThreadNew+0x94>
        return (NULL);
 8006b34:	2300      	movs	r3, #0
 8006b36:	e054      	b.n	8006be2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	089b      	lsrs	r3, r3, #2
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00e      	beq.n	8006b6e <osThreadNew+0xca>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	2b5b      	cmp	r3, #91	; 0x5b
 8006b56:	d90a      	bls.n	8006b6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d006      	beq.n	8006b6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <osThreadNew+0xca>
        mem = 1;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	623b      	str	r3, [r7, #32]
 8006b6c:	e010      	b.n	8006b90 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10c      	bne.n	8006b90 <osThreadNew+0xec>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d108      	bne.n	8006b90 <osThreadNew+0xec>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d104      	bne.n	8006b90 <osThreadNew+0xec>
          mem = 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	623b      	str	r3, [r7, #32]
 8006b8a:	e001      	b.n	8006b90 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d110      	bne.n	8006bb8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b9e:	9202      	str	r2, [sp, #8]
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 fe09 	bl	80077c4 <xTaskCreateStatic>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	613b      	str	r3, [r7, #16]
 8006bb6:	e013      	b.n	8006be0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d110      	bne.n	8006be0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	f107 0310 	add.w	r3, r7, #16
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 fe51 	bl	8007878 <xTaskCreate>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d001      	beq.n	8006be0 <osThreadNew+0x13c>
          hTask = NULL;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006be0:	693b      	ldr	r3, [r7, #16]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3730      	adds	r7, #48	; 0x30
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000210 	.word	0x20000210

08006bf0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bf8:	f3ef 8305 	mrs	r3, IPSR
 8006bfc:	613b      	str	r3, [r7, #16]
  return(result);
 8006bfe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10f      	bne.n	8006c24 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c04:	f3ef 8310 	mrs	r3, PRIMASK
 8006c08:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d105      	bne.n	8006c1c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c10:	f3ef 8311 	mrs	r3, BASEPRI
 8006c14:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d007      	beq.n	8006c2c <osDelay+0x3c>
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <osDelay+0x58>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d103      	bne.n	8006c2c <osDelay+0x3c>
    stat = osErrorISR;
 8006c24:	f06f 0305 	mvn.w	r3, #5
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	e007      	b.n	8006c3c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 ff62 	bl	8007b00 <vTaskDelay>
    }
  }

  return (stat);
 8006c3c:	697b      	ldr	r3, [r7, #20]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000210 	.word	0x20000210

08006c4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4a07      	ldr	r2, [pc, #28]	; (8006c78 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4a06      	ldr	r2, [pc, #24]	; (8006c7c <vApplicationGetIdleTaskMemory+0x30>)
 8006c62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2280      	movs	r2, #128	; 0x80
 8006c68:	601a      	str	r2, [r3, #0]
}
 8006c6a:	bf00      	nop
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	20000214 	.word	0x20000214
 8006c7c:	20000270 	.word	0x20000270

08006c80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4a07      	ldr	r2, [pc, #28]	; (8006cac <vApplicationGetTimerTaskMemory+0x2c>)
 8006c90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	4a06      	ldr	r2, [pc, #24]	; (8006cb0 <vApplicationGetTimerTaskMemory+0x30>)
 8006c96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c9e:	601a      	str	r2, [r3, #0]
}
 8006ca0:	bf00      	nop
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	20000470 	.word	0x20000470
 8006cb0:	200004cc 	.word	0x200004cc

08006cb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f103 0208 	add.w	r2, r3, #8
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f103 0208 	add.w	r2, r3, #8
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f103 0208 	add.w	r2, r3, #8
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b085      	sub	sp, #20
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	601a      	str	r2, [r3, #0]
}
 8006d4a:	bf00      	nop
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d103      	bne.n	8006d76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	e00c      	b.n	8006d90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	e002      	b.n	8006d84 <vListInsert+0x2e>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d2f6      	bcs.n	8006d7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	601a      	str	r2, [r3, #0]
}
 8006dbc:	bf00      	nop
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6892      	ldr	r2, [r2, #8]
 8006dde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6852      	ldr	r2, [r2, #4]
 8006de8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d103      	bne.n	8006dfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	1e5a      	subs	r2, r3, #1
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d109      	bne.n	8006e44 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	60bb      	str	r3, [r7, #8]
 8006e42:	e7fe      	b.n	8006e42 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006e44:	f002 f812 	bl	8008e6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e50:	68f9      	ldr	r1, [r7, #12]
 8006e52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e54:	fb01 f303 	mul.w	r3, r1, r3
 8006e58:	441a      	add	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e74:	3b01      	subs	r3, #1
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e7a:	fb01 f303 	mul.w	r3, r1, r3
 8006e7e:	441a      	add	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	22ff      	movs	r2, #255	; 0xff
 8006e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	22ff      	movs	r2, #255	; 0xff
 8006e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d114      	bne.n	8006ec4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d01a      	beq.n	8006ed8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3310      	adds	r3, #16
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f001 f8de 	bl	8008068 <xTaskRemoveFromEventList>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d012      	beq.n	8006ed8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <xQueueGenericReset+0xcc>)
 8006eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	e009      	b.n	8006ed8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3310      	adds	r3, #16
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff fef3 	bl	8006cb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3324      	adds	r3, #36	; 0x24
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff feee 	bl	8006cb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ed8:	f001 fff6 	bl	8008ec8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006edc:	2301      	movs	r3, #1
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08e      	sub	sp, #56	; 0x38
 8006ef0:	af02      	add	r7, sp, #8
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d109      	bne.n	8006f14 <xQueueGenericCreateStatic+0x28>
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f12:	e7fe      	b.n	8006f12 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d109      	bne.n	8006f2e <xQueueGenericCreateStatic+0x42>
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f2c:	e7fe      	b.n	8006f2c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <xQueueGenericCreateStatic+0x4e>
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <xQueueGenericCreateStatic+0x52>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <xQueueGenericCreateStatic+0x54>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d109      	bne.n	8006f58 <xQueueGenericCreateStatic+0x6c>
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	623b      	str	r3, [r7, #32]
 8006f56:	e7fe      	b.n	8006f56 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d102      	bne.n	8006f64 <xQueueGenericCreateStatic+0x78>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <xQueueGenericCreateStatic+0x7c>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e000      	b.n	8006f6a <xQueueGenericCreateStatic+0x7e>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d109      	bne.n	8006f82 <xQueueGenericCreateStatic+0x96>
 8006f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	61fb      	str	r3, [r7, #28]
 8006f80:	e7fe      	b.n	8006f80 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f82:	2350      	movs	r3, #80	; 0x50
 8006f84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b50      	cmp	r3, #80	; 0x50
 8006f8a:	d009      	beq.n	8006fa0 <xQueueGenericCreateStatic+0xb4>
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	e7fe      	b.n	8006f9e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fa0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00d      	beq.n	8006fc8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fb4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f805 	bl	8006fd2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3730      	adds	r7, #48	; 0x30
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d103      	bne.n	8006fee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	e002      	b.n	8006ff4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007000:	2101      	movs	r1, #1
 8007002:	69b8      	ldr	r0, [r7, #24]
 8007004:	f7ff ff0a 	bl	8006e1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	78fa      	ldrb	r2, [r7, #3]
 800700c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08e      	sub	sp, #56	; 0x38
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007026:	2300      	movs	r3, #0
 8007028:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	2b00      	cmp	r3, #0
 8007032:	d109      	bne.n	8007048 <xQueueGenericSend+0x30>
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	62bb      	str	r3, [r7, #40]	; 0x28
 8007046:	e7fe      	b.n	8007046 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <xQueueGenericSend+0x3e>
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <xQueueGenericSend+0x42>
 8007056:	2301      	movs	r3, #1
 8007058:	e000      	b.n	800705c <xQueueGenericSend+0x44>
 800705a:	2300      	movs	r3, #0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d109      	bne.n	8007074 <xQueueGenericSend+0x5c>
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
 8007072:	e7fe      	b.n	8007072 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d103      	bne.n	8007082 <xQueueGenericSend+0x6a>
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707e:	2b01      	cmp	r3, #1
 8007080:	d101      	bne.n	8007086 <xQueueGenericSend+0x6e>
 8007082:	2301      	movs	r3, #1
 8007084:	e000      	b.n	8007088 <xQueueGenericSend+0x70>
 8007086:	2300      	movs	r3, #0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d109      	bne.n	80070a0 <xQueueGenericSend+0x88>
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	623b      	str	r3, [r7, #32]
 800709e:	e7fe      	b.n	800709e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070a0:	f001 f998 	bl	80083d4 <xTaskGetSchedulerState>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d102      	bne.n	80070b0 <xQueueGenericSend+0x98>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <xQueueGenericSend+0x9c>
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <xQueueGenericSend+0x9e>
 80070b4:	2300      	movs	r3, #0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <xQueueGenericSend+0xb6>
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	61fb      	str	r3, [r7, #28]
 80070cc:	e7fe      	b.n	80070cc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070ce:	f001 fecd 	bl	8008e6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	429a      	cmp	r2, r3
 80070dc:	d302      	bcc.n	80070e4 <xQueueGenericSend+0xcc>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d129      	bne.n	8007138 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	68b9      	ldr	r1, [r7, #8]
 80070e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070ea:	f000 f9ff 	bl	80074ec <prvCopyDataToQueue>
 80070ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d010      	beq.n	800711a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	3324      	adds	r3, #36	; 0x24
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 ffb3 	bl	8008068 <xTaskRemoveFromEventList>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d013      	beq.n	8007130 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007108:	4b3f      	ldr	r3, [pc, #252]	; (8007208 <xQueueGenericSend+0x1f0>)
 800710a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	e00a      	b.n	8007130 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	2b00      	cmp	r3, #0
 800711e:	d007      	beq.n	8007130 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007120:	4b39      	ldr	r3, [pc, #228]	; (8007208 <xQueueGenericSend+0x1f0>)
 8007122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007130:	f001 feca 	bl	8008ec8 <vPortExitCritical>
				return pdPASS;
 8007134:	2301      	movs	r3, #1
 8007136:	e063      	b.n	8007200 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800713e:	f001 fec3 	bl	8008ec8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007142:	2300      	movs	r3, #0
 8007144:	e05c      	b.n	8007200 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007148:	2b00      	cmp	r3, #0
 800714a:	d106      	bne.n	800715a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800714c:	f107 0314 	add.w	r3, r7, #20
 8007150:	4618      	mov	r0, r3
 8007152:	f000 ffeb 	bl	800812c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007156:	2301      	movs	r3, #1
 8007158:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800715a:	f001 feb5 	bl	8008ec8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800715e:	f000 fd67 	bl	8007c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007162:	f001 fe83 	bl	8008e6c <vPortEnterCritical>
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800716c:	b25b      	sxtb	r3, r3
 800716e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007172:	d103      	bne.n	800717c <xQueueGenericSend+0x164>
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007182:	b25b      	sxtb	r3, r3
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007188:	d103      	bne.n	8007192 <xQueueGenericSend+0x17a>
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007192:	f001 fe99 	bl	8008ec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007196:	1d3a      	adds	r2, r7, #4
 8007198:	f107 0314 	add.w	r3, r7, #20
 800719c:	4611      	mov	r1, r2
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 ffda 	bl	8008158 <xTaskCheckForTimeOut>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d124      	bne.n	80071f4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ac:	f000 fa96 	bl	80076dc <prvIsQueueFull>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d018      	beq.n	80071e8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	3310      	adds	r3, #16
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	4611      	mov	r1, r2
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 ff04 	bl	8007fcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071c6:	f000 fa21 	bl	800760c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071ca:	f000 fd3f 	bl	8007c4c <xTaskResumeAll>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f47f af7c 	bne.w	80070ce <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <xQueueGenericSend+0x1f0>)
 80071d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	e772      	b.n	80070ce <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ea:	f000 fa0f 	bl	800760c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071ee:	f000 fd2d 	bl	8007c4c <xTaskResumeAll>
 80071f2:	e76c      	b.n	80070ce <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80071f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071f6:	f000 fa09 	bl	800760c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071fa:	f000 fd27 	bl	8007c4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007200:	4618      	mov	r0, r3
 8007202:	3738      	adds	r7, #56	; 0x38
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	e000ed04 	.word	0xe000ed04

0800720c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08e      	sub	sp, #56	; 0x38
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	2b00      	cmp	r3, #0
 8007222:	d109      	bne.n	8007238 <xQueueGenericSendFromISR+0x2c>
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
 8007236:	e7fe      	b.n	8007236 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d103      	bne.n	8007246 <xQueueGenericSendFromISR+0x3a>
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <xQueueGenericSendFromISR+0x3e>
 8007246:	2301      	movs	r3, #1
 8007248:	e000      	b.n	800724c <xQueueGenericSendFromISR+0x40>
 800724a:	2300      	movs	r3, #0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d109      	bne.n	8007264 <xQueueGenericSendFromISR+0x58>
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	623b      	str	r3, [r7, #32]
 8007262:	e7fe      	b.n	8007262 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b02      	cmp	r3, #2
 8007268:	d103      	bne.n	8007272 <xQueueGenericSendFromISR+0x66>
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726e:	2b01      	cmp	r3, #1
 8007270:	d101      	bne.n	8007276 <xQueueGenericSendFromISR+0x6a>
 8007272:	2301      	movs	r3, #1
 8007274:	e000      	b.n	8007278 <xQueueGenericSendFromISR+0x6c>
 8007276:	2300      	movs	r3, #0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d109      	bne.n	8007290 <xQueueGenericSendFromISR+0x84>
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	61fb      	str	r3, [r7, #28]
 800728e:	e7fe      	b.n	800728e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007290:	f001 fec8 	bl	8009024 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007294:	f3ef 8211 	mrs	r2, BASEPRI
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	61ba      	str	r2, [r7, #24]
 80072aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d302      	bcc.n	80072c2 <xQueueGenericSendFromISR+0xb6>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d12c      	bne.n	800731c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072d2:	f000 f90b 	bl	80074ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072de:	d112      	bne.n	8007306 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d016      	beq.n	8007316 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ea:	3324      	adds	r3, #36	; 0x24
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 febb 	bl	8008068 <xTaskRemoveFromEventList>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00e      	beq.n	8007316 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00b      	beq.n	8007316 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	e007      	b.n	8007316 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800730a:	3301      	adds	r3, #1
 800730c:	b2db      	uxtb	r3, r3
 800730e:	b25a      	sxtb	r2, r3
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007316:	2301      	movs	r3, #1
 8007318:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800731a:	e001      	b.n	8007320 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800731c:	2300      	movs	r3, #0
 800731e:	637b      	str	r3, [r7, #52]	; 0x34
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800732a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800732c:	4618      	mov	r0, r3
 800732e:	3738      	adds	r7, #56	; 0x38
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08c      	sub	sp, #48	; 0x30
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007340:	2300      	movs	r3, #0
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	2b00      	cmp	r3, #0
 800734c:	d109      	bne.n	8007362 <xQueueReceive+0x2e>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	623b      	str	r3, [r7, #32]
 8007360:	e7fe      	b.n	8007360 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d103      	bne.n	8007370 <xQueueReceive+0x3c>
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <xQueueReceive+0x40>
 8007370:	2301      	movs	r3, #1
 8007372:	e000      	b.n	8007376 <xQueueReceive+0x42>
 8007374:	2300      	movs	r3, #0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d109      	bne.n	800738e <xQueueReceive+0x5a>
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	61fb      	str	r3, [r7, #28]
 800738c:	e7fe      	b.n	800738c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800738e:	f001 f821 	bl	80083d4 <xTaskGetSchedulerState>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d102      	bne.n	800739e <xQueueReceive+0x6a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <xQueueReceive+0x6e>
 800739e:	2301      	movs	r3, #1
 80073a0:	e000      	b.n	80073a4 <xQueueReceive+0x70>
 80073a2:	2300      	movs	r3, #0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d109      	bne.n	80073bc <xQueueReceive+0x88>
 80073a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	61bb      	str	r3, [r7, #24]
 80073ba:	e7fe      	b.n	80073ba <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073bc:	f001 fd56 	bl	8008e6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01f      	beq.n	800740c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073cc:	68b9      	ldr	r1, [r7, #8]
 80073ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073d0:	f000 f8f6 	bl	80075c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	1e5a      	subs	r2, r3, #1
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00f      	beq.n	8007404 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	3310      	adds	r3, #16
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 fe3d 	bl	8008068 <xTaskRemoveFromEventList>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d007      	beq.n	8007404 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073f4:	4b3c      	ldr	r3, [pc, #240]	; (80074e8 <xQueueReceive+0x1b4>)
 80073f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007404:	f001 fd60 	bl	8008ec8 <vPortExitCritical>
				return pdPASS;
 8007408:	2301      	movs	r3, #1
 800740a:	e069      	b.n	80074e0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d103      	bne.n	800741a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007412:	f001 fd59 	bl	8008ec8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007416:	2300      	movs	r3, #0
 8007418:	e062      	b.n	80074e0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741c:	2b00      	cmp	r3, #0
 800741e:	d106      	bne.n	800742e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007420:	f107 0310 	add.w	r3, r7, #16
 8007424:	4618      	mov	r0, r3
 8007426:	f000 fe81 	bl	800812c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800742a:	2301      	movs	r3, #1
 800742c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800742e:	f001 fd4b 	bl	8008ec8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007432:	f000 fbfd 	bl	8007c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007436:	f001 fd19 	bl	8008e6c <vPortEnterCritical>
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007440:	b25b      	sxtb	r3, r3
 8007442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007446:	d103      	bne.n	8007450 <xQueueReceive+0x11c>
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007456:	b25b      	sxtb	r3, r3
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d103      	bne.n	8007466 <xQueueReceive+0x132>
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007466:	f001 fd2f 	bl	8008ec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800746a:	1d3a      	adds	r2, r7, #4
 800746c:	f107 0310 	add.w	r3, r7, #16
 8007470:	4611      	mov	r1, r2
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fe70 	bl	8008158 <xTaskCheckForTimeOut>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d123      	bne.n	80074c6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800747e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007480:	f000 f916 	bl	80076b0 <prvIsQueueEmpty>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d017      	beq.n	80074ba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	3324      	adds	r3, #36	; 0x24
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fd9a 	bl	8007fcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800749a:	f000 f8b7 	bl	800760c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800749e:	f000 fbd5 	bl	8007c4c <xTaskResumeAll>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d189      	bne.n	80073bc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80074a8:	4b0f      	ldr	r3, [pc, #60]	; (80074e8 <xQueueReceive+0x1b4>)
 80074aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	e780      	b.n	80073bc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80074ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074bc:	f000 f8a6 	bl	800760c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074c0:	f000 fbc4 	bl	8007c4c <xTaskResumeAll>
 80074c4:	e77a      	b.n	80073bc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80074c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c8:	f000 f8a0 	bl	800760c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074cc:	f000 fbbe 	bl	8007c4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d2:	f000 f8ed 	bl	80076b0 <prvIsQueueEmpty>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f43f af6f 	beq.w	80073bc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3730      	adds	r7, #48	; 0x30
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074f8:	2300      	movs	r3, #0
 80074fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007500:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10d      	bne.n	8007526 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d14d      	bne.n	80075ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	4618      	mov	r0, r3
 8007518:	f000 ff7a 	bl	8008410 <xTaskPriorityDisinherit>
 800751c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	609a      	str	r2, [r3, #8]
 8007524:	e043      	b.n	80075ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d119      	bne.n	8007560 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6858      	ldr	r0, [r3, #4]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	461a      	mov	r2, r3
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	f001 ffba 	bl	80094b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	441a      	add	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	429a      	cmp	r2, r3
 8007554:	d32b      	bcc.n	80075ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	605a      	str	r2, [r3, #4]
 800755e:	e026      	b.n	80075ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	68d8      	ldr	r0, [r3, #12]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007568:	461a      	mov	r2, r3
 800756a:	68b9      	ldr	r1, [r7, #8]
 800756c:	f001 ffa0 	bl	80094b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	425b      	negs	r3, r3
 800757a:	441a      	add	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	68da      	ldr	r2, [r3, #12]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d207      	bcs.n	800759c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	425b      	negs	r3, r3
 8007596:	441a      	add	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d105      	bne.n	80075ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075b6:	697b      	ldr	r3, [r7, #20]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3718      	adds	r7, #24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d018      	beq.n	8007604 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	441a      	add	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d303      	bcc.n	80075f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68d9      	ldr	r1, [r3, #12]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fc:	461a      	mov	r2, r3
 80075fe:	6838      	ldr	r0, [r7, #0]
 8007600:	f001 ff56 	bl	80094b0 <memcpy>
	}
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007614:	f001 fc2a 	bl	8008e6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800761e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007620:	e011      	b.n	8007646 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	2b00      	cmp	r3, #0
 8007628:	d012      	beq.n	8007650 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3324      	adds	r3, #36	; 0x24
 800762e:	4618      	mov	r0, r3
 8007630:	f000 fd1a 	bl	8008068 <xTaskRemoveFromEventList>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800763a:	f000 fded 	bl	8008218 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	3b01      	subs	r3, #1
 8007642:	b2db      	uxtb	r3, r3
 8007644:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800764a:	2b00      	cmp	r3, #0
 800764c:	dce9      	bgt.n	8007622 <prvUnlockQueue+0x16>
 800764e:	e000      	b.n	8007652 <prvUnlockQueue+0x46>
					break;
 8007650:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	22ff      	movs	r2, #255	; 0xff
 8007656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800765a:	f001 fc35 	bl	8008ec8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800765e:	f001 fc05 	bl	8008e6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007668:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800766a:	e011      	b.n	8007690 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d012      	beq.n	800769a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3310      	adds	r3, #16
 8007678:	4618      	mov	r0, r3
 800767a:	f000 fcf5 	bl	8008068 <xTaskRemoveFromEventList>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007684:	f000 fdc8 	bl	8008218 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	3b01      	subs	r3, #1
 800768c:	b2db      	uxtb	r3, r3
 800768e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007694:	2b00      	cmp	r3, #0
 8007696:	dce9      	bgt.n	800766c <prvUnlockQueue+0x60>
 8007698:	e000      	b.n	800769c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800769a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	22ff      	movs	r2, #255	; 0xff
 80076a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076a4:	f001 fc10 	bl	8008ec8 <vPortExitCritical>
}
 80076a8:	bf00      	nop
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076b8:	f001 fbd8 	bl	8008e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d102      	bne.n	80076ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076c4:	2301      	movs	r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	e001      	b.n	80076ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076ce:	f001 fbfb 	bl	8008ec8 <vPortExitCritical>

	return xReturn;
 80076d2:	68fb      	ldr	r3, [r7, #12]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076e4:	f001 fbc2 	bl	8008e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d102      	bne.n	80076fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80076f4:	2301      	movs	r3, #1
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	e001      	b.n	80076fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076fe:	f001 fbe3 	bl	8008ec8 <vPortExitCritical>

	return xReturn;
 8007702:	68fb      	ldr	r3, [r7, #12]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
 800771a:	e014      	b.n	8007746 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800771c:	4a0e      	ldr	r2, [pc, #56]	; (8007758 <vQueueAddToRegistry+0x4c>)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10b      	bne.n	8007740 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007728:	490b      	ldr	r1, [pc, #44]	; (8007758 <vQueueAddToRegistry+0x4c>)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007732:	4a09      	ldr	r2, [pc, #36]	; (8007758 <vQueueAddToRegistry+0x4c>)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	4413      	add	r3, r2
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800773e:	e005      	b.n	800774c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3301      	adds	r3, #1
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b07      	cmp	r3, #7
 800774a:	d9e7      	bls.n	800771c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800774c:	bf00      	nop
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	20001f38 	.word	0x20001f38

0800775c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800776c:	f001 fb7e 	bl	8008e6c <vPortEnterCritical>
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007776:	b25b      	sxtb	r3, r3
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d103      	bne.n	8007786 <vQueueWaitForMessageRestricted+0x2a>
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800778c:	b25b      	sxtb	r3, r3
 800778e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007792:	d103      	bne.n	800779c <vQueueWaitForMessageRestricted+0x40>
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800779c:	f001 fb94 	bl	8008ec8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d106      	bne.n	80077b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	3324      	adds	r3, #36	; 0x24
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	68b9      	ldr	r1, [r7, #8]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fc2f 	bl	8008014 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077b6:	6978      	ldr	r0, [r7, #20]
 80077b8:	f7ff ff28 	bl	800760c <prvUnlockQueue>
	}
 80077bc:	bf00      	nop
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08e      	sub	sp, #56	; 0x38
 80077c8:	af04      	add	r7, sp, #16
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d109      	bne.n	80077ec <xTaskCreateStatic+0x28>
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	623b      	str	r3, [r7, #32]
 80077ea:	e7fe      	b.n	80077ea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d109      	bne.n	8007806 <xTaskCreateStatic+0x42>
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	61fb      	str	r3, [r7, #28]
 8007804:	e7fe      	b.n	8007804 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007806:	235c      	movs	r3, #92	; 0x5c
 8007808:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b5c      	cmp	r3, #92	; 0x5c
 800780e:	d009      	beq.n	8007824 <xTaskCreateStatic+0x60>
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	61bb      	str	r3, [r7, #24]
 8007822:	e7fe      	b.n	8007822 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007824:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01e      	beq.n	800786a <xTaskCreateStatic+0xa6>
 800782c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782e:	2b00      	cmp	r3, #0
 8007830:	d01b      	beq.n	800786a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800783a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	2202      	movs	r2, #2
 8007840:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007844:	2300      	movs	r3, #0
 8007846:	9303      	str	r3, [sp, #12]
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	9302      	str	r3, [sp, #8]
 800784c:	f107 0314 	add.w	r3, r7, #20
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	68b9      	ldr	r1, [r7, #8]
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 f850 	bl	8007902 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007862:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007864:	f000 f8dc 	bl	8007a20 <prvAddNewTaskToReadyList>
 8007868:	e001      	b.n	800786e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800786e:	697b      	ldr	r3, [r7, #20]
	}
 8007870:	4618      	mov	r0, r3
 8007872:	3728      	adds	r7, #40	; 0x28
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08c      	sub	sp, #48	; 0x30
 800787c:	af04      	add	r7, sp, #16
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	4613      	mov	r3, r2
 8007886:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007888:	88fb      	ldrh	r3, [r7, #6]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4618      	mov	r0, r3
 800788e:	f001 fc07 	bl	80090a0 <pvPortMalloc>
 8007892:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00e      	beq.n	80078b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800789a:	205c      	movs	r0, #92	; 0x5c
 800789c:	f001 fc00 	bl	80090a0 <pvPortMalloc>
 80078a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30
 80078ae:	e005      	b.n	80078bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078b0:	6978      	ldr	r0, [r7, #20]
 80078b2:	f001 fcb7 	bl	8009224 <vPortFree>
 80078b6:	e001      	b.n	80078bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d017      	beq.n	80078f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	2300      	movs	r3, #0
 80078ce:	9303      	str	r3, [sp, #12]
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	9302      	str	r3, [sp, #8]
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	9301      	str	r3, [sp, #4]
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f80e 	bl	8007902 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078e6:	69f8      	ldr	r0, [r7, #28]
 80078e8:	f000 f89a 	bl	8007a20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078ec:	2301      	movs	r3, #1
 80078ee:	61bb      	str	r3, [r7, #24]
 80078f0:	e002      	b.n	80078f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078f2:	f04f 33ff 	mov.w	r3, #4294967295
 80078f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078f8:	69bb      	ldr	r3, [r7, #24]
	}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3720      	adds	r7, #32
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b088      	sub	sp, #32
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	607a      	str	r2, [r7, #4]
 800790e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	461a      	mov	r2, r3
 800791a:	21a5      	movs	r1, #165	; 0xa5
 800791c:	f001 fdd3 	bl	80094c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800792a:	3b01      	subs	r3, #1
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	f023 0307 	bic.w	r3, r3, #7
 8007938:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	f003 0307 	and.w	r3, r3, #7
 8007940:	2b00      	cmp	r3, #0
 8007942:	d009      	beq.n	8007958 <prvInitialiseNewTask+0x56>
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	e7fe      	b.n	8007956 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d01f      	beq.n	800799e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800795e:	2300      	movs	r3, #0
 8007960:	61fb      	str	r3, [r7, #28]
 8007962:	e012      	b.n	800798a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	4413      	add	r3, r2
 800796a:	7819      	ldrb	r1, [r3, #0]
 800796c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	4413      	add	r3, r2
 8007972:	3334      	adds	r3, #52	; 0x34
 8007974:	460a      	mov	r2, r1
 8007976:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	4413      	add	r3, r2
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d006      	beq.n	8007992 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	3301      	adds	r3, #1
 8007988:	61fb      	str	r3, [r7, #28]
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	2b0f      	cmp	r3, #15
 800798e:	d9e9      	bls.n	8007964 <prvInitialiseNewTask+0x62>
 8007990:	e000      	b.n	8007994 <prvInitialiseNewTask+0x92>
			{
				break;
 8007992:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800799c:	e003      	b.n	80079a6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	2b37      	cmp	r3, #55	; 0x37
 80079aa:	d901      	bls.n	80079b0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079ac:	2337      	movs	r3, #55	; 0x37
 80079ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079be:	2200      	movs	r2, #0
 80079c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	3304      	adds	r3, #4
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff f994 	bl	8006cf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	3318      	adds	r3, #24
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7ff f98f 	bl	8006cf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	2200      	movs	r2, #0
 80079f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	68f9      	ldr	r1, [r7, #12]
 80079fe:	69b8      	ldr	r0, [r7, #24]
 8007a00:	f001 f90c 	bl	8008c1c <pxPortInitialiseStack>
 8007a04:	4602      	mov	r2, r0
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a16:	bf00      	nop
 8007a18:	3720      	adds	r7, #32
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a28:	f001 fa20 	bl	8008e6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a2c:	4b2d      	ldr	r3, [pc, #180]	; (8007ae4 <prvAddNewTaskToReadyList+0xc4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3301      	adds	r3, #1
 8007a32:	4a2c      	ldr	r2, [pc, #176]	; (8007ae4 <prvAddNewTaskToReadyList+0xc4>)
 8007a34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a36:	4b2c      	ldr	r3, [pc, #176]	; (8007ae8 <prvAddNewTaskToReadyList+0xc8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d109      	bne.n	8007a52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a3e:	4a2a      	ldr	r2, [pc, #168]	; (8007ae8 <prvAddNewTaskToReadyList+0xc8>)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a44:	4b27      	ldr	r3, [pc, #156]	; (8007ae4 <prvAddNewTaskToReadyList+0xc4>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d110      	bne.n	8007a6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a4c:	f000 fc08 	bl	8008260 <prvInitialiseTaskLists>
 8007a50:	e00d      	b.n	8007a6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a52:	4b26      	ldr	r3, [pc, #152]	; (8007aec <prvAddNewTaskToReadyList+0xcc>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d109      	bne.n	8007a6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a5a:	4b23      	ldr	r3, [pc, #140]	; (8007ae8 <prvAddNewTaskToReadyList+0xc8>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d802      	bhi.n	8007a6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a68:	4a1f      	ldr	r2, [pc, #124]	; (8007ae8 <prvAddNewTaskToReadyList+0xc8>)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a6e:	4b20      	ldr	r3, [pc, #128]	; (8007af0 <prvAddNewTaskToReadyList+0xd0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	4a1e      	ldr	r2, [pc, #120]	; (8007af0 <prvAddNewTaskToReadyList+0xd0>)
 8007a76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a78:	4b1d      	ldr	r3, [pc, #116]	; (8007af0 <prvAddNewTaskToReadyList+0xd0>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a84:	4b1b      	ldr	r3, [pc, #108]	; (8007af4 <prvAddNewTaskToReadyList+0xd4>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d903      	bls.n	8007a94 <prvAddNewTaskToReadyList+0x74>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	4a18      	ldr	r2, [pc, #96]	; (8007af4 <prvAddNewTaskToReadyList+0xd4>)
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a98:	4613      	mov	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4a15      	ldr	r2, [pc, #84]	; (8007af8 <prvAddNewTaskToReadyList+0xd8>)
 8007aa2:	441a      	add	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4610      	mov	r0, r2
 8007aac:	f7ff f92f 	bl	8006d0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ab0:	f001 fa0a 	bl	8008ec8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ab4:	4b0d      	ldr	r3, [pc, #52]	; (8007aec <prvAddNewTaskToReadyList+0xcc>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00e      	beq.n	8007ada <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007abc:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <prvAddNewTaskToReadyList+0xc8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d207      	bcs.n	8007ada <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007aca:	4b0c      	ldr	r3, [pc, #48]	; (8007afc <prvAddNewTaskToReadyList+0xdc>)
 8007acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000da0 	.word	0x20000da0
 8007ae8:	200008cc 	.word	0x200008cc
 8007aec:	20000dac 	.word	0x20000dac
 8007af0:	20000dbc 	.word	0x20000dbc
 8007af4:	20000da8 	.word	0x20000da8
 8007af8:	200008d0 	.word	0x200008d0
 8007afc:	e000ed04 	.word	0xe000ed04

08007b00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d016      	beq.n	8007b40 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b12:	4b13      	ldr	r3, [pc, #76]	; (8007b60 <vTaskDelay+0x60>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d009      	beq.n	8007b2e <vTaskDelay+0x2e>
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	60bb      	str	r3, [r7, #8]
 8007b2c:	e7fe      	b.n	8007b2c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007b2e:	f000 f87f 	bl	8007c30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b32:	2100      	movs	r1, #0
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fcd7 	bl	80084e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b3a:	f000 f887 	bl	8007c4c <xTaskResumeAll>
 8007b3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d107      	bne.n	8007b56 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007b46:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <vTaskDelay+0x64>)
 8007b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b56:	bf00      	nop
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000dc8 	.word	0x20000dc8
 8007b64:	e000ed04 	.word	0xe000ed04

08007b68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	; 0x28
 8007b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b72:	2300      	movs	r3, #0
 8007b74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b76:	463a      	mov	r2, r7
 8007b78:	1d39      	adds	r1, r7, #4
 8007b7a:	f107 0308 	add.w	r3, r7, #8
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7ff f864 	bl	8006c4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	9202      	str	r2, [sp, #8]
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	2300      	movs	r3, #0
 8007b94:	460a      	mov	r2, r1
 8007b96:	4920      	ldr	r1, [pc, #128]	; (8007c18 <vTaskStartScheduler+0xb0>)
 8007b98:	4820      	ldr	r0, [pc, #128]	; (8007c1c <vTaskStartScheduler+0xb4>)
 8007b9a:	f7ff fe13 	bl	80077c4 <xTaskCreateStatic>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	4b1f      	ldr	r3, [pc, #124]	; (8007c20 <vTaskStartScheduler+0xb8>)
 8007ba2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ba4:	4b1e      	ldr	r3, [pc, #120]	; (8007c20 <vTaskStartScheduler+0xb8>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007bac:	2301      	movs	r3, #1
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	e001      	b.n	8007bb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d102      	bne.n	8007bc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007bbc:	f000 fce8 	bl	8008590 <xTimerCreateTimerTask>
 8007bc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d115      	bne.n	8007bf4 <vTaskStartScheduler+0x8c>
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007bda:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <vTaskStartScheduler+0xbc>)
 8007bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8007be0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007be2:	4b11      	ldr	r3, [pc, #68]	; (8007c28 <vTaskStartScheduler+0xc0>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007be8:	4b10      	ldr	r3, [pc, #64]	; (8007c2c <vTaskStartScheduler+0xc4>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007bee:	f001 f89f 	bl	8008d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bf2:	e00d      	b.n	8007c10 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfa:	d109      	bne.n	8007c10 <vTaskStartScheduler+0xa8>
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	e7fe      	b.n	8007c0e <vTaskStartScheduler+0xa6>
}
 8007c10:	bf00      	nop
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	0800c40c 	.word	0x0800c40c
 8007c1c:	08008231 	.word	0x08008231
 8007c20:	20000dc4 	.word	0x20000dc4
 8007c24:	20000dc0 	.word	0x20000dc0
 8007c28:	20000dac 	.word	0x20000dac
 8007c2c:	20000da4 	.word	0x20000da4

08007c30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c30:	b480      	push	{r7}
 8007c32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c34:	4b04      	ldr	r3, [pc, #16]	; (8007c48 <vTaskSuspendAll+0x18>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	4a03      	ldr	r2, [pc, #12]	; (8007c48 <vTaskSuspendAll+0x18>)
 8007c3c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007c3e:	bf00      	nop
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	20000dc8 	.word	0x20000dc8

08007c4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c5a:	4b41      	ldr	r3, [pc, #260]	; (8007d60 <xTaskResumeAll+0x114>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d109      	bne.n	8007c76 <xTaskResumeAll+0x2a>
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	e7fe      	b.n	8007c74 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c76:	f001 f8f9 	bl	8008e6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c7a:	4b39      	ldr	r3, [pc, #228]	; (8007d60 <xTaskResumeAll+0x114>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	4a37      	ldr	r2, [pc, #220]	; (8007d60 <xTaskResumeAll+0x114>)
 8007c82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c84:	4b36      	ldr	r3, [pc, #216]	; (8007d60 <xTaskResumeAll+0x114>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d162      	bne.n	8007d52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c8c:	4b35      	ldr	r3, [pc, #212]	; (8007d64 <xTaskResumeAll+0x118>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d05e      	beq.n	8007d52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c94:	e02f      	b.n	8007cf6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c96:	4b34      	ldr	r3, [pc, #208]	; (8007d68 <xTaskResumeAll+0x11c>)
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3318      	adds	r3, #24
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff f890 	bl	8006dc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3304      	adds	r3, #4
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7ff f88b 	bl	8006dc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb6:	4b2d      	ldr	r3, [pc, #180]	; (8007d6c <xTaskResumeAll+0x120>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d903      	bls.n	8007cc6 <xTaskResumeAll+0x7a>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	4a2a      	ldr	r2, [pc, #168]	; (8007d6c <xTaskResumeAll+0x120>)
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4a27      	ldr	r2, [pc, #156]	; (8007d70 <xTaskResumeAll+0x124>)
 8007cd4:	441a      	add	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4610      	mov	r0, r2
 8007cde:	f7ff f816 	bl	8006d0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce6:	4b23      	ldr	r3, [pc, #140]	; (8007d74 <xTaskResumeAll+0x128>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d302      	bcc.n	8007cf6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007cf0:	4b21      	ldr	r3, [pc, #132]	; (8007d78 <xTaskResumeAll+0x12c>)
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cf6:	4b1c      	ldr	r3, [pc, #112]	; (8007d68 <xTaskResumeAll+0x11c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1cb      	bne.n	8007c96 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d04:	f000 fb46 	bl	8008394 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d08:	4b1c      	ldr	r3, [pc, #112]	; (8007d7c <xTaskResumeAll+0x130>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d010      	beq.n	8007d36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d14:	f000 f846 	bl	8007da4 <xTaskIncrementTick>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007d1e:	4b16      	ldr	r3, [pc, #88]	; (8007d78 <xTaskResumeAll+0x12c>)
 8007d20:	2201      	movs	r2, #1
 8007d22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1f1      	bne.n	8007d14 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007d30:	4b12      	ldr	r3, [pc, #72]	; (8007d7c <xTaskResumeAll+0x130>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d36:	4b10      	ldr	r3, [pc, #64]	; (8007d78 <xTaskResumeAll+0x12c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d009      	beq.n	8007d52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d42:	4b0f      	ldr	r3, [pc, #60]	; (8007d80 <xTaskResumeAll+0x134>)
 8007d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d52:	f001 f8b9 	bl	8008ec8 <vPortExitCritical>

	return xAlreadyYielded;
 8007d56:	68bb      	ldr	r3, [r7, #8]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	20000dc8 	.word	0x20000dc8
 8007d64:	20000da0 	.word	0x20000da0
 8007d68:	20000d60 	.word	0x20000d60
 8007d6c:	20000da8 	.word	0x20000da8
 8007d70:	200008d0 	.word	0x200008d0
 8007d74:	200008cc 	.word	0x200008cc
 8007d78:	20000db4 	.word	0x20000db4
 8007d7c:	20000db0 	.word	0x20000db0
 8007d80:	e000ed04 	.word	0xe000ed04

08007d84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <xTaskGetTickCount+0x1c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d90:	687b      	ldr	r3, [r7, #4]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000da4 	.word	0x20000da4

08007da4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dae:	4b4e      	ldr	r3, [pc, #312]	; (8007ee8 <xTaskIncrementTick+0x144>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f040 8088 	bne.w	8007ec8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007db8:	4b4c      	ldr	r3, [pc, #304]	; (8007eec <xTaskIncrementTick+0x148>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007dc0:	4a4a      	ldr	r2, [pc, #296]	; (8007eec <xTaskIncrementTick+0x148>)
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d11f      	bne.n	8007e0c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007dcc:	4b48      	ldr	r3, [pc, #288]	; (8007ef0 <xTaskIncrementTick+0x14c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d009      	beq.n	8007dea <xTaskIncrementTick+0x46>
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	603b      	str	r3, [r7, #0]
 8007de8:	e7fe      	b.n	8007de8 <xTaskIncrementTick+0x44>
 8007dea:	4b41      	ldr	r3, [pc, #260]	; (8007ef0 <xTaskIncrementTick+0x14c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	4b40      	ldr	r3, [pc, #256]	; (8007ef4 <xTaskIncrementTick+0x150>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a3e      	ldr	r2, [pc, #248]	; (8007ef0 <xTaskIncrementTick+0x14c>)
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	4a3e      	ldr	r2, [pc, #248]	; (8007ef4 <xTaskIncrementTick+0x150>)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6013      	str	r3, [r2, #0]
 8007dfe:	4b3e      	ldr	r3, [pc, #248]	; (8007ef8 <xTaskIncrementTick+0x154>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	4a3c      	ldr	r2, [pc, #240]	; (8007ef8 <xTaskIncrementTick+0x154>)
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	f000 fac4 	bl	8008394 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e0c:	4b3b      	ldr	r3, [pc, #236]	; (8007efc <xTaskIncrementTick+0x158>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d349      	bcc.n	8007eaa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e16:	4b36      	ldr	r3, [pc, #216]	; (8007ef0 <xTaskIncrementTick+0x14c>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d104      	bne.n	8007e2a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e20:	4b36      	ldr	r3, [pc, #216]	; (8007efc <xTaskIncrementTick+0x158>)
 8007e22:	f04f 32ff 	mov.w	r2, #4294967295
 8007e26:	601a      	str	r2, [r3, #0]
					break;
 8007e28:	e03f      	b.n	8007eaa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e2a:	4b31      	ldr	r3, [pc, #196]	; (8007ef0 <xTaskIncrementTick+0x14c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d203      	bcs.n	8007e4a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e42:	4a2e      	ldr	r2, [pc, #184]	; (8007efc <xTaskIncrementTick+0x158>)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e48:	e02f      	b.n	8007eaa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fe ffba 	bl	8006dc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d004      	beq.n	8007e66 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	3318      	adds	r3, #24
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fe ffb1 	bl	8006dc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6a:	4b25      	ldr	r3, [pc, #148]	; (8007f00 <xTaskIncrementTick+0x15c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d903      	bls.n	8007e7a <xTaskIncrementTick+0xd6>
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e76:	4a22      	ldr	r2, [pc, #136]	; (8007f00 <xTaskIncrementTick+0x15c>)
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7e:	4613      	mov	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4a1f      	ldr	r2, [pc, #124]	; (8007f04 <xTaskIncrementTick+0x160>)
 8007e88:	441a      	add	r2, r3
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	4619      	mov	r1, r3
 8007e90:	4610      	mov	r0, r2
 8007e92:	f7fe ff3c 	bl	8006d0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9a:	4b1b      	ldr	r3, [pc, #108]	; (8007f08 <xTaskIncrementTick+0x164>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d3b8      	bcc.n	8007e16 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ea8:	e7b5      	b.n	8007e16 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007eaa:	4b17      	ldr	r3, [pc, #92]	; (8007f08 <xTaskIncrementTick+0x164>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb0:	4914      	ldr	r1, [pc, #80]	; (8007f04 <xTaskIncrementTick+0x160>)
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	440b      	add	r3, r1
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d907      	bls.n	8007ed2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	617b      	str	r3, [r7, #20]
 8007ec6:	e004      	b.n	8007ed2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ec8:	4b10      	ldr	r3, [pc, #64]	; (8007f0c <xTaskIncrementTick+0x168>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	4a0f      	ldr	r2, [pc, #60]	; (8007f0c <xTaskIncrementTick+0x168>)
 8007ed0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ed2:	4b0f      	ldr	r3, [pc, #60]	; (8007f10 <xTaskIncrementTick+0x16c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007eda:	2301      	movs	r3, #1
 8007edc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ede:	697b      	ldr	r3, [r7, #20]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	20000dc8 	.word	0x20000dc8
 8007eec:	20000da4 	.word	0x20000da4
 8007ef0:	20000d58 	.word	0x20000d58
 8007ef4:	20000d5c 	.word	0x20000d5c
 8007ef8:	20000db8 	.word	0x20000db8
 8007efc:	20000dc0 	.word	0x20000dc0
 8007f00:	20000da8 	.word	0x20000da8
 8007f04:	200008d0 	.word	0x200008d0
 8007f08:	200008cc 	.word	0x200008cc
 8007f0c:	20000db0 	.word	0x20000db0
 8007f10:	20000db4 	.word	0x20000db4

08007f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f1a:	4b27      	ldr	r3, [pc, #156]	; (8007fb8 <vTaskSwitchContext+0xa4>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f22:	4b26      	ldr	r3, [pc, #152]	; (8007fbc <vTaskSwitchContext+0xa8>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f28:	e040      	b.n	8007fac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007f2a:	4b24      	ldr	r3, [pc, #144]	; (8007fbc <vTaskSwitchContext+0xa8>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f30:	4b23      	ldr	r3, [pc, #140]	; (8007fc0 <vTaskSwitchContext+0xac>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	e00f      	b.n	8007f58 <vTaskSwitchContext+0x44>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <vTaskSwitchContext+0x3e>
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	607b      	str	r3, [r7, #4]
 8007f50:	e7fe      	b.n	8007f50 <vTaskSwitchContext+0x3c>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	491a      	ldr	r1, [pc, #104]	; (8007fc4 <vTaskSwitchContext+0xb0>)
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0e5      	beq.n	8007f38 <vTaskSwitchContext+0x24>
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4a13      	ldr	r2, [pc, #76]	; (8007fc4 <vTaskSwitchContext+0xb0>)
 8007f78:	4413      	add	r3, r2
 8007f7a:	60bb      	str	r3, [r7, #8]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	605a      	str	r2, [r3, #4]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d104      	bne.n	8007f9c <vTaskSwitchContext+0x88>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	605a      	str	r2, [r3, #4]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	4a09      	ldr	r2, [pc, #36]	; (8007fc8 <vTaskSwitchContext+0xb4>)
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	4a06      	ldr	r2, [pc, #24]	; (8007fc0 <vTaskSwitchContext+0xac>)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6013      	str	r3, [r2, #0]
}
 8007fac:	bf00      	nop
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	20000dc8 	.word	0x20000dc8
 8007fbc:	20000db4 	.word	0x20000db4
 8007fc0:	20000da8 	.word	0x20000da8
 8007fc4:	200008d0 	.word	0x200008d0
 8007fc8:	200008cc 	.word	0x200008cc

08007fcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d109      	bne.n	8007ff0 <vTaskPlaceOnEventList+0x24>
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	e7fe      	b.n	8007fee <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ff0:	4b07      	ldr	r3, [pc, #28]	; (8008010 <vTaskPlaceOnEventList+0x44>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3318      	adds	r3, #24
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7fe feac 	bl	8006d56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ffe:	2101      	movs	r1, #1
 8008000:	6838      	ldr	r0, [r7, #0]
 8008002:	f000 fa71 	bl	80084e8 <prvAddCurrentTaskToDelayedList>
}
 8008006:	bf00      	nop
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	200008cc 	.word	0x200008cc

08008014 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <vTaskPlaceOnEventListRestricted+0x26>
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	e7fe      	b.n	8008038 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800803a:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <vTaskPlaceOnEventListRestricted+0x50>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3318      	adds	r3, #24
 8008040:	4619      	mov	r1, r3
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7fe fe63 	bl	8006d0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800804e:	f04f 33ff 	mov.w	r3, #4294967295
 8008052:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	68b8      	ldr	r0, [r7, #8]
 8008058:	f000 fa46 	bl	80084e8 <prvAddCurrentTaskToDelayedList>
	}
 800805c:	bf00      	nop
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	200008cc 	.word	0x200008cc

08008068 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d109      	bne.n	8008092 <xTaskRemoveFromEventList+0x2a>
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	e7fe      	b.n	8008090 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	3318      	adds	r3, #24
 8008096:	4618      	mov	r0, r3
 8008098:	f7fe fe96 	bl	8006dc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800809c:	4b1d      	ldr	r3, [pc, #116]	; (8008114 <xTaskRemoveFromEventList+0xac>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d11d      	bne.n	80080e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fe8d 	bl	8006dc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b2:	4b19      	ldr	r3, [pc, #100]	; (8008118 <xTaskRemoveFromEventList+0xb0>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d903      	bls.n	80080c2 <xTaskRemoveFromEventList+0x5a>
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	4a16      	ldr	r2, [pc, #88]	; (8008118 <xTaskRemoveFromEventList+0xb0>)
 80080c0:	6013      	str	r3, [r2, #0]
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4a13      	ldr	r2, [pc, #76]	; (800811c <xTaskRemoveFromEventList+0xb4>)
 80080d0:	441a      	add	r2, r3
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	3304      	adds	r3, #4
 80080d6:	4619      	mov	r1, r3
 80080d8:	4610      	mov	r0, r2
 80080da:	f7fe fe18 	bl	8006d0e <vListInsertEnd>
 80080de:	e005      	b.n	80080ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	3318      	adds	r3, #24
 80080e4:	4619      	mov	r1, r3
 80080e6:	480e      	ldr	r0, [pc, #56]	; (8008120 <xTaskRemoveFromEventList+0xb8>)
 80080e8:	f7fe fe11 	bl	8006d0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f0:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <xTaskRemoveFromEventList+0xbc>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d905      	bls.n	8008106 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80080fa:	2301      	movs	r3, #1
 80080fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80080fe:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <xTaskRemoveFromEventList+0xc0>)
 8008100:	2201      	movs	r2, #1
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	e001      	b.n	800810a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008106:	2300      	movs	r3, #0
 8008108:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800810a:	697b      	ldr	r3, [r7, #20]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	20000dc8 	.word	0x20000dc8
 8008118:	20000da8 	.word	0x20000da8
 800811c:	200008d0 	.word	0x200008d0
 8008120:	20000d60 	.word	0x20000d60
 8008124:	200008cc 	.word	0x200008cc
 8008128:	20000db4 	.word	0x20000db4

0800812c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008134:	4b06      	ldr	r3, [pc, #24]	; (8008150 <vTaskInternalSetTimeOutState+0x24>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800813c:	4b05      	ldr	r3, [pc, #20]	; (8008154 <vTaskInternalSetTimeOutState+0x28>)
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	605a      	str	r2, [r3, #4]
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	20000db8 	.word	0x20000db8
 8008154:	20000da4 	.word	0x20000da4

08008158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d109      	bne.n	800817c <xTaskCheckForTimeOut+0x24>
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	613b      	str	r3, [r7, #16]
 800817a:	e7fe      	b.n	800817a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d109      	bne.n	8008196 <xTaskCheckForTimeOut+0x3e>
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	e7fe      	b.n	8008194 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008196:	f000 fe69 	bl	8008e6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800819a:	4b1d      	ldr	r3, [pc, #116]	; (8008210 <xTaskCheckForTimeOut+0xb8>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b2:	d102      	bne.n	80081ba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081b4:	2300      	movs	r3, #0
 80081b6:	61fb      	str	r3, [r7, #28]
 80081b8:	e023      	b.n	8008202 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	4b15      	ldr	r3, [pc, #84]	; (8008214 <xTaskCheckForTimeOut+0xbc>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d007      	beq.n	80081d6 <xTaskCheckForTimeOut+0x7e>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d302      	bcc.n	80081d6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80081d0:	2301      	movs	r3, #1
 80081d2:	61fb      	str	r3, [r7, #28]
 80081d4:	e015      	b.n	8008202 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d20b      	bcs.n	80081f8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	1ad2      	subs	r2, r2, r3
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7ff ff9d 	bl	800812c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80081f2:	2300      	movs	r3, #0
 80081f4:	61fb      	str	r3, [r7, #28]
 80081f6:	e004      	b.n	8008202 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80081fe:	2301      	movs	r3, #1
 8008200:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008202:	f000 fe61 	bl	8008ec8 <vPortExitCritical>

	return xReturn;
 8008206:	69fb      	ldr	r3, [r7, #28]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3720      	adds	r7, #32
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	20000da4 	.word	0x20000da4
 8008214:	20000db8 	.word	0x20000db8

08008218 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800821c:	4b03      	ldr	r3, [pc, #12]	; (800822c <vTaskMissedYield+0x14>)
 800821e:	2201      	movs	r2, #1
 8008220:	601a      	str	r2, [r3, #0]
}
 8008222:	bf00      	nop
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	20000db4 	.word	0x20000db4

08008230 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008238:	f000 f852 	bl	80082e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800823c:	4b06      	ldr	r3, [pc, #24]	; (8008258 <prvIdleTask+0x28>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d9f9      	bls.n	8008238 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008244:	4b05      	ldr	r3, [pc, #20]	; (800825c <prvIdleTask+0x2c>)
 8008246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008254:	e7f0      	b.n	8008238 <prvIdleTask+0x8>
 8008256:	bf00      	nop
 8008258:	200008d0 	.word	0x200008d0
 800825c:	e000ed04 	.word	0xe000ed04

08008260 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008266:	2300      	movs	r3, #0
 8008268:	607b      	str	r3, [r7, #4]
 800826a:	e00c      	b.n	8008286 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	4613      	mov	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4a12      	ldr	r2, [pc, #72]	; (80082c0 <prvInitialiseTaskLists+0x60>)
 8008278:	4413      	add	r3, r2
 800827a:	4618      	mov	r0, r3
 800827c:	f7fe fd1a 	bl	8006cb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3301      	adds	r3, #1
 8008284:	607b      	str	r3, [r7, #4]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b37      	cmp	r3, #55	; 0x37
 800828a:	d9ef      	bls.n	800826c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800828c:	480d      	ldr	r0, [pc, #52]	; (80082c4 <prvInitialiseTaskLists+0x64>)
 800828e:	f7fe fd11 	bl	8006cb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008292:	480d      	ldr	r0, [pc, #52]	; (80082c8 <prvInitialiseTaskLists+0x68>)
 8008294:	f7fe fd0e 	bl	8006cb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008298:	480c      	ldr	r0, [pc, #48]	; (80082cc <prvInitialiseTaskLists+0x6c>)
 800829a:	f7fe fd0b 	bl	8006cb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800829e:	480c      	ldr	r0, [pc, #48]	; (80082d0 <prvInitialiseTaskLists+0x70>)
 80082a0:	f7fe fd08 	bl	8006cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082a4:	480b      	ldr	r0, [pc, #44]	; (80082d4 <prvInitialiseTaskLists+0x74>)
 80082a6:	f7fe fd05 	bl	8006cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082aa:	4b0b      	ldr	r3, [pc, #44]	; (80082d8 <prvInitialiseTaskLists+0x78>)
 80082ac:	4a05      	ldr	r2, [pc, #20]	; (80082c4 <prvInitialiseTaskLists+0x64>)
 80082ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082b0:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <prvInitialiseTaskLists+0x7c>)
 80082b2:	4a05      	ldr	r2, [pc, #20]	; (80082c8 <prvInitialiseTaskLists+0x68>)
 80082b4:	601a      	str	r2, [r3, #0]
}
 80082b6:	bf00      	nop
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	200008d0 	.word	0x200008d0
 80082c4:	20000d30 	.word	0x20000d30
 80082c8:	20000d44 	.word	0x20000d44
 80082cc:	20000d60 	.word	0x20000d60
 80082d0:	20000d74 	.word	0x20000d74
 80082d4:	20000d8c 	.word	0x20000d8c
 80082d8:	20000d58 	.word	0x20000d58
 80082dc:	20000d5c 	.word	0x20000d5c

080082e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082e6:	e019      	b.n	800831c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082e8:	f000 fdc0 	bl	8008e6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ec:	4b0f      	ldr	r3, [pc, #60]	; (800832c <prvCheckTasksWaitingTermination+0x4c>)
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3304      	adds	r3, #4
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe fd65 	bl	8006dc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80082fe:	4b0c      	ldr	r3, [pc, #48]	; (8008330 <prvCheckTasksWaitingTermination+0x50>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	3b01      	subs	r3, #1
 8008304:	4a0a      	ldr	r2, [pc, #40]	; (8008330 <prvCheckTasksWaitingTermination+0x50>)
 8008306:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008308:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <prvCheckTasksWaitingTermination+0x54>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3b01      	subs	r3, #1
 800830e:	4a09      	ldr	r2, [pc, #36]	; (8008334 <prvCheckTasksWaitingTermination+0x54>)
 8008310:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008312:	f000 fdd9 	bl	8008ec8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f80e 	bl	8008338 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800831c:	4b05      	ldr	r3, [pc, #20]	; (8008334 <prvCheckTasksWaitingTermination+0x54>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e1      	bne.n	80082e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20000d74 	.word	0x20000d74
 8008330:	20000da0 	.word	0x20000da0
 8008334:	20000d88 	.word	0x20000d88

08008338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008346:	2b00      	cmp	r3, #0
 8008348:	d108      	bne.n	800835c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834e:	4618      	mov	r0, r3
 8008350:	f000 ff68 	bl	8009224 <vPortFree>
				vPortFree( pxTCB );
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 ff65 	bl	8009224 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800835a:	e017      	b.n	800838c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008362:	2b01      	cmp	r3, #1
 8008364:	d103      	bne.n	800836e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 ff5c 	bl	8009224 <vPortFree>
	}
 800836c:	e00e      	b.n	800838c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008374:	2b02      	cmp	r3, #2
 8008376:	d009      	beq.n	800838c <prvDeleteTCB+0x54>
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	60fb      	str	r3, [r7, #12]
 800838a:	e7fe      	b.n	800838a <prvDeleteTCB+0x52>
	}
 800838c:	bf00      	nop
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800839a:	4b0c      	ldr	r3, [pc, #48]	; (80083cc <prvResetNextTaskUnblockTime+0x38>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d104      	bne.n	80083ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083a4:	4b0a      	ldr	r3, [pc, #40]	; (80083d0 <prvResetNextTaskUnblockTime+0x3c>)
 80083a6:	f04f 32ff 	mov.w	r2, #4294967295
 80083aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083ac:	e008      	b.n	80083c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ae:	4b07      	ldr	r3, [pc, #28]	; (80083cc <prvResetNextTaskUnblockTime+0x38>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	4a04      	ldr	r2, [pc, #16]	; (80083d0 <prvResetNextTaskUnblockTime+0x3c>)
 80083be:	6013      	str	r3, [r2, #0]
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	20000d58 	.word	0x20000d58
 80083d0:	20000dc0 	.word	0x20000dc0

080083d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80083da:	4b0b      	ldr	r3, [pc, #44]	; (8008408 <xTaskGetSchedulerState+0x34>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d102      	bne.n	80083e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083e2:	2301      	movs	r3, #1
 80083e4:	607b      	str	r3, [r7, #4]
 80083e6:	e008      	b.n	80083fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083e8:	4b08      	ldr	r3, [pc, #32]	; (800840c <xTaskGetSchedulerState+0x38>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d102      	bne.n	80083f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083f0:	2302      	movs	r3, #2
 80083f2:	607b      	str	r3, [r7, #4]
 80083f4:	e001      	b.n	80083fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083f6:	2300      	movs	r3, #0
 80083f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083fa:	687b      	ldr	r3, [r7, #4]
	}
 80083fc:	4618      	mov	r0, r3
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	20000dac 	.word	0x20000dac
 800840c:	20000dc8 	.word	0x20000dc8

08008410 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d054      	beq.n	80084d0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008426:	4b2d      	ldr	r3, [pc, #180]	; (80084dc <xTaskPriorityDisinherit+0xcc>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	429a      	cmp	r2, r3
 800842e:	d009      	beq.n	8008444 <xTaskPriorityDisinherit+0x34>
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	e7fe      	b.n	8008442 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008448:	2b00      	cmp	r3, #0
 800844a:	d109      	bne.n	8008460 <xTaskPriorityDisinherit+0x50>
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	60bb      	str	r3, [r7, #8]
 800845e:	e7fe      	b.n	800845e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008464:	1e5a      	subs	r2, r3, #1
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008472:	429a      	cmp	r2, r3
 8008474:	d02c      	beq.n	80084d0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800847a:	2b00      	cmp	r3, #0
 800847c:	d128      	bne.n	80084d0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	3304      	adds	r3, #4
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fca0 	bl	8006dc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008494:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	4b0f      	ldr	r3, [pc, #60]	; (80084e0 <xTaskPriorityDisinherit+0xd0>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d903      	bls.n	80084b0 <xTaskPriorityDisinherit+0xa0>
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	4a0c      	ldr	r2, [pc, #48]	; (80084e0 <xTaskPriorityDisinherit+0xd0>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4a09      	ldr	r2, [pc, #36]	; (80084e4 <xTaskPriorityDisinherit+0xd4>)
 80084be:	441a      	add	r2, r3
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f7fe fc21 	bl	8006d0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80084cc:	2301      	movs	r3, #1
 80084ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084d0:	697b      	ldr	r3, [r7, #20]
	}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	200008cc 	.word	0x200008cc
 80084e0:	20000da8 	.word	0x20000da8
 80084e4:	200008d0 	.word	0x200008d0

080084e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084f2:	4b21      	ldr	r3, [pc, #132]	; (8008578 <prvAddCurrentTaskToDelayedList+0x90>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084f8:	4b20      	ldr	r3, [pc, #128]	; (800857c <prvAddCurrentTaskToDelayedList+0x94>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3304      	adds	r3, #4
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe fc62 	bl	8006dc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850a:	d10a      	bne.n	8008522 <prvAddCurrentTaskToDelayedList+0x3a>
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d007      	beq.n	8008522 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008512:	4b1a      	ldr	r3, [pc, #104]	; (800857c <prvAddCurrentTaskToDelayedList+0x94>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3304      	adds	r3, #4
 8008518:	4619      	mov	r1, r3
 800851a:	4819      	ldr	r0, [pc, #100]	; (8008580 <prvAddCurrentTaskToDelayedList+0x98>)
 800851c:	f7fe fbf7 	bl	8006d0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008520:	e026      	b.n	8008570 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4413      	add	r3, r2
 8008528:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800852a:	4b14      	ldr	r3, [pc, #80]	; (800857c <prvAddCurrentTaskToDelayedList+0x94>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	429a      	cmp	r2, r3
 8008538:	d209      	bcs.n	800854e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800853a:	4b12      	ldr	r3, [pc, #72]	; (8008584 <prvAddCurrentTaskToDelayedList+0x9c>)
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	4b0f      	ldr	r3, [pc, #60]	; (800857c <prvAddCurrentTaskToDelayedList+0x94>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3304      	adds	r3, #4
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f7fe fc05 	bl	8006d56 <vListInsert>
}
 800854c:	e010      	b.n	8008570 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800854e:	4b0e      	ldr	r3, [pc, #56]	; (8008588 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4b0a      	ldr	r3, [pc, #40]	; (800857c <prvAddCurrentTaskToDelayedList+0x94>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3304      	adds	r3, #4
 8008558:	4619      	mov	r1, r3
 800855a:	4610      	mov	r0, r2
 800855c:	f7fe fbfb 	bl	8006d56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008560:	4b0a      	ldr	r3, [pc, #40]	; (800858c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	429a      	cmp	r2, r3
 8008568:	d202      	bcs.n	8008570 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800856a:	4a08      	ldr	r2, [pc, #32]	; (800858c <prvAddCurrentTaskToDelayedList+0xa4>)
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6013      	str	r3, [r2, #0]
}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	20000da4 	.word	0x20000da4
 800857c:	200008cc 	.word	0x200008cc
 8008580:	20000d8c 	.word	0x20000d8c
 8008584:	20000d5c 	.word	0x20000d5c
 8008588:	20000d58 	.word	0x20000d58
 800858c:	20000dc0 	.word	0x20000dc0

08008590 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08a      	sub	sp, #40	; 0x28
 8008594:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800859a:	f000 faff 	bl	8008b9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800859e:	4b1c      	ldr	r3, [pc, #112]	; (8008610 <xTimerCreateTimerTask+0x80>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d021      	beq.n	80085ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80085ae:	1d3a      	adds	r2, r7, #4
 80085b0:	f107 0108 	add.w	r1, r7, #8
 80085b4:	f107 030c 	add.w	r3, r7, #12
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe fb61 	bl	8006c80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	9202      	str	r2, [sp, #8]
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	2302      	movs	r3, #2
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	2300      	movs	r3, #0
 80085ce:	460a      	mov	r2, r1
 80085d0:	4910      	ldr	r1, [pc, #64]	; (8008614 <xTimerCreateTimerTask+0x84>)
 80085d2:	4811      	ldr	r0, [pc, #68]	; (8008618 <xTimerCreateTimerTask+0x88>)
 80085d4:	f7ff f8f6 	bl	80077c4 <xTaskCreateStatic>
 80085d8:	4602      	mov	r2, r0
 80085da:	4b10      	ldr	r3, [pc, #64]	; (800861c <xTimerCreateTimerTask+0x8c>)
 80085dc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80085de:	4b0f      	ldr	r3, [pc, #60]	; (800861c <xTimerCreateTimerTask+0x8c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80085e6:	2301      	movs	r3, #1
 80085e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d109      	bne.n	8008604 <xTimerCreateTimerTask+0x74>
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	613b      	str	r3, [r7, #16]
 8008602:	e7fe      	b.n	8008602 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008604:	697b      	ldr	r3, [r7, #20]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20000dfc 	.word	0x20000dfc
 8008614:	0800c414 	.word	0x0800c414
 8008618:	08008751 	.word	0x08008751
 800861c:	20000e00 	.word	0x20000e00

08008620 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08a      	sub	sp, #40	; 0x28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800862e:	2300      	movs	r3, #0
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d109      	bne.n	800864c <xTimerGenericCommand+0x2c>
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	623b      	str	r3, [r7, #32]
 800864a:	e7fe      	b.n	800864a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800864c:	4b19      	ldr	r3, [pc, #100]	; (80086b4 <xTimerGenericCommand+0x94>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d02a      	beq.n	80086aa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b05      	cmp	r3, #5
 8008664:	dc18      	bgt.n	8008698 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008666:	f7ff feb5 	bl	80083d4 <xTaskGetSchedulerState>
 800866a:	4603      	mov	r3, r0
 800866c:	2b02      	cmp	r3, #2
 800866e:	d109      	bne.n	8008684 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008670:	4b10      	ldr	r3, [pc, #64]	; (80086b4 <xTimerGenericCommand+0x94>)
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	f107 0110 	add.w	r1, r7, #16
 8008678:	2300      	movs	r3, #0
 800867a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800867c:	f7fe fccc 	bl	8007018 <xQueueGenericSend>
 8008680:	6278      	str	r0, [r7, #36]	; 0x24
 8008682:	e012      	b.n	80086aa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008684:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <xTimerGenericCommand+0x94>)
 8008686:	6818      	ldr	r0, [r3, #0]
 8008688:	f107 0110 	add.w	r1, r7, #16
 800868c:	2300      	movs	r3, #0
 800868e:	2200      	movs	r2, #0
 8008690:	f7fe fcc2 	bl	8007018 <xQueueGenericSend>
 8008694:	6278      	str	r0, [r7, #36]	; 0x24
 8008696:	e008      	b.n	80086aa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008698:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <xTimerGenericCommand+0x94>)
 800869a:	6818      	ldr	r0, [r3, #0]
 800869c:	f107 0110 	add.w	r1, r7, #16
 80086a0:	2300      	movs	r3, #0
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	f7fe fdb2 	bl	800720c <xQueueGenericSendFromISR>
 80086a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3728      	adds	r7, #40	; 0x28
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20000dfc 	.word	0x20000dfc

080086b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af02      	add	r7, sp, #8
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c2:	4b22      	ldr	r3, [pc, #136]	; (800874c <prvProcessExpiredTimer+0x94>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe fb79 	bl	8006dc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d021      	beq.n	8008728 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	699a      	ldr	r2, [r3, #24]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	18d1      	adds	r1, r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	6978      	ldr	r0, [r7, #20]
 80086f2:	f000 f8d1 	bl	8008898 <prvInsertTimerInActiveList>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d01e      	beq.n	800873a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086fc:	2300      	movs	r3, #0
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	2300      	movs	r3, #0
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	2100      	movs	r1, #0
 8008706:	6978      	ldr	r0, [r7, #20]
 8008708:	f7ff ff8a 	bl	8008620 <xTimerGenericCommand>
 800870c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d112      	bne.n	800873a <prvProcessExpiredTimer+0x82>
 8008714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e7fe      	b.n	8008726 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800872e:	f023 0301 	bic.w	r3, r3, #1
 8008732:	b2da      	uxtb	r2, r3
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	6978      	ldr	r0, [r7, #20]
 8008740:	4798      	blx	r3
}
 8008742:	bf00      	nop
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	20000df4 	.word	0x20000df4

08008750 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008758:	f107 0308 	add.w	r3, r7, #8
 800875c:	4618      	mov	r0, r3
 800875e:	f000 f857 	bl	8008810 <prvGetNextExpireTime>
 8008762:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	4619      	mov	r1, r3
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f000 f803 	bl	8008774 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800876e:	f000 f8d5 	bl	800891c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008772:	e7f1      	b.n	8008758 <prvTimerTask+0x8>

08008774 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800877e:	f7ff fa57 	bl	8007c30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008782:	f107 0308 	add.w	r3, r7, #8
 8008786:	4618      	mov	r0, r3
 8008788:	f000 f866 	bl	8008858 <prvSampleTimeNow>
 800878c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d130      	bne.n	80087f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10a      	bne.n	80087b0 <prvProcessTimerOrBlockTask+0x3c>
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d806      	bhi.n	80087b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80087a2:	f7ff fa53 	bl	8007c4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80087a6:	68f9      	ldr	r1, [r7, #12]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7ff ff85 	bl	80086b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80087ae:	e024      	b.n	80087fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d008      	beq.n	80087c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80087b6:	4b13      	ldr	r3, [pc, #76]	; (8008804 <prvProcessTimerOrBlockTask+0x90>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <prvProcessTimerOrBlockTask+0x50>
 80087c0:	2301      	movs	r3, #1
 80087c2:	e000      	b.n	80087c6 <prvProcessTimerOrBlockTask+0x52>
 80087c4:	2300      	movs	r3, #0
 80087c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80087c8:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <prvProcessTimerOrBlockTask+0x94>)
 80087ca:	6818      	ldr	r0, [r3, #0]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	4619      	mov	r1, r3
 80087d6:	f7fe ffc1 	bl	800775c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80087da:	f7ff fa37 	bl	8007c4c <xTaskResumeAll>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10a      	bne.n	80087fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80087e4:	4b09      	ldr	r3, [pc, #36]	; (800880c <prvProcessTimerOrBlockTask+0x98>)
 80087e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	f3bf 8f6f 	isb	sy
}
 80087f4:	e001      	b.n	80087fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80087f6:	f7ff fa29 	bl	8007c4c <xTaskResumeAll>
}
 80087fa:	bf00      	nop
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000df8 	.word	0x20000df8
 8008808:	20000dfc 	.word	0x20000dfc
 800880c:	e000ed04 	.word	0xe000ed04

08008810 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008818:	4b0e      	ldr	r3, [pc, #56]	; (8008854 <prvGetNextExpireTime+0x44>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <prvGetNextExpireTime+0x16>
 8008822:	2201      	movs	r2, #1
 8008824:	e000      	b.n	8008828 <prvGetNextExpireTime+0x18>
 8008826:	2200      	movs	r2, #0
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d105      	bne.n	8008840 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008834:	4b07      	ldr	r3, [pc, #28]	; (8008854 <prvGetNextExpireTime+0x44>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	e001      	b.n	8008844 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008844:	68fb      	ldr	r3, [r7, #12]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	20000df4 	.word	0x20000df4

08008858 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008860:	f7ff fa90 	bl	8007d84 <xTaskGetTickCount>
 8008864:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008866:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <prvSampleTimeNow+0x3c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	429a      	cmp	r2, r3
 800886e:	d205      	bcs.n	800887c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008870:	f000 f930 	bl	8008ad4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	e002      	b.n	8008882 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008882:	4a04      	ldr	r2, [pc, #16]	; (8008894 <prvSampleTimeNow+0x3c>)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008888:	68fb      	ldr	r3, [r7, #12]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	20000e04 	.word	0x20000e04

08008898 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d812      	bhi.n	80088e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	1ad2      	subs	r2, r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d302      	bcc.n	80088d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80088cc:	2301      	movs	r3, #1
 80088ce:	617b      	str	r3, [r7, #20]
 80088d0:	e01b      	b.n	800890a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80088d2:	4b10      	ldr	r3, [pc, #64]	; (8008914 <prvInsertTimerInActiveList+0x7c>)
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3304      	adds	r3, #4
 80088da:	4619      	mov	r1, r3
 80088dc:	4610      	mov	r0, r2
 80088de:	f7fe fa3a 	bl	8006d56 <vListInsert>
 80088e2:	e012      	b.n	800890a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d206      	bcs.n	80088fa <prvInsertTimerInActiveList+0x62>
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d302      	bcc.n	80088fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80088f4:	2301      	movs	r3, #1
 80088f6:	617b      	str	r3, [r7, #20]
 80088f8:	e007      	b.n	800890a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088fa:	4b07      	ldr	r3, [pc, #28]	; (8008918 <prvInsertTimerInActiveList+0x80>)
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3304      	adds	r3, #4
 8008902:	4619      	mov	r1, r3
 8008904:	4610      	mov	r0, r2
 8008906:	f7fe fa26 	bl	8006d56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800890a:	697b      	ldr	r3, [r7, #20]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	20000df8 	.word	0x20000df8
 8008918:	20000df4 	.word	0x20000df4

0800891c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08e      	sub	sp, #56	; 0x38
 8008920:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008922:	e0c6      	b.n	8008ab2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	da17      	bge.n	800895a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800892a:	1d3b      	adds	r3, r7, #4
 800892c:	3304      	adds	r3, #4
 800892e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008932:	2b00      	cmp	r3, #0
 8008934:	d109      	bne.n	800894a <prvProcessReceivedCommands+0x2e>
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	61fb      	str	r3, [r7, #28]
 8008948:	e7fe      	b.n	8008948 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800894a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008950:	6850      	ldr	r0, [r2, #4]
 8008952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008954:	6892      	ldr	r2, [r2, #8]
 8008956:	4611      	mov	r1, r2
 8008958:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f2c0 80a7 	blt.w	8008ab0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d004      	beq.n	8008978 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	3304      	adds	r3, #4
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe fa28 	bl	8006dc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008978:	463b      	mov	r3, r7
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff ff6c 	bl	8008858 <prvSampleTimeNow>
 8008980:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b09      	cmp	r3, #9
 8008986:	f200 8094 	bhi.w	8008ab2 <prvProcessReceivedCommands+0x196>
 800898a:	a201      	add	r2, pc, #4	; (adr r2, 8008990 <prvProcessReceivedCommands+0x74>)
 800898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008990:	080089b9 	.word	0x080089b9
 8008994:	080089b9 	.word	0x080089b9
 8008998:	080089b9 	.word	0x080089b9
 800899c:	08008a2b 	.word	0x08008a2b
 80089a0:	08008a3f 	.word	0x08008a3f
 80089a4:	08008a87 	.word	0x08008a87
 80089a8:	080089b9 	.word	0x080089b9
 80089ac:	080089b9 	.word	0x080089b9
 80089b0:	08008a2b 	.word	0x08008a2b
 80089b4:	08008a3f 	.word	0x08008a3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089be:	f043 0301 	orr.w	r3, r3, #1
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	18d1      	adds	r1, r2, r3
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089d8:	f7ff ff5e 	bl	8008898 <prvInsertTimerInActiveList>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d067      	beq.n	8008ab2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d05c      	beq.n	8008ab2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	441a      	add	r2, r3
 8008a00:	2300      	movs	r3, #0
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	2300      	movs	r3, #0
 8008a06:	2100      	movs	r1, #0
 8008a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a0a:	f7ff fe09 	bl	8008620 <xTimerGenericCommand>
 8008a0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d14d      	bne.n	8008ab2 <prvProcessReceivedCommands+0x196>
 8008a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	61bb      	str	r3, [r7, #24]
 8008a28:	e7fe      	b.n	8008a28 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a30:	f023 0301 	bic.w	r3, r3, #1
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008a3c:	e039      	b.n	8008ab2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a44:	f043 0301 	orr.w	r3, r3, #1
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d109      	bne.n	8008a72 <prvProcessReceivedCommands+0x156>
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	e7fe      	b.n	8008a70 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	699a      	ldr	r2, [r3, #24]
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	18d1      	adds	r1, r2, r3
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a80:	f7ff ff0a 	bl	8008898 <prvInsertTimerInActiveList>
					break;
 8008a84:	e015      	b.n	8008ab2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a8c:	f003 0302 	and.w	r3, r3, #2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d103      	bne.n	8008a9c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8008a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a96:	f000 fbc5 	bl	8009224 <vPortFree>
 8008a9a:	e00a      	b.n	8008ab2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008aa2:	f023 0301 	bic.w	r3, r3, #1
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008aae:	e000      	b.n	8008ab2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008ab0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ab2:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <prvProcessReceivedCommands+0x1b4>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	1d39      	adds	r1, r7, #4
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe fc3a 	bl	8007334 <xQueueReceive>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f47f af2e 	bne.w	8008924 <prvProcessReceivedCommands+0x8>
	}
}
 8008ac8:	bf00      	nop
 8008aca:	3730      	adds	r7, #48	; 0x30
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	20000dfc 	.word	0x20000dfc

08008ad4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ada:	e047      	b.n	8008b6c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008adc:	4b2d      	ldr	r3, [pc, #180]	; (8008b94 <prvSwitchTimerLists+0xc0>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ae6:	4b2b      	ldr	r3, [pc, #172]	; (8008b94 <prvSwitchTimerLists+0xc0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3304      	adds	r3, #4
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe f967 	bl	8006dc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d02d      	beq.n	8008b6c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	4413      	add	r3, r2
 8008b18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d90e      	bls.n	8008b40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b2e:	4b19      	ldr	r3, [pc, #100]	; (8008b94 <prvSwitchTimerLists+0xc0>)
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3304      	adds	r3, #4
 8008b36:	4619      	mov	r1, r3
 8008b38:	4610      	mov	r0, r2
 8008b3a:	f7fe f90c 	bl	8006d56 <vListInsert>
 8008b3e:	e015      	b.n	8008b6c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b40:	2300      	movs	r3, #0
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	2300      	movs	r3, #0
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	2100      	movs	r1, #0
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f7ff fd68 	bl	8008620 <xTimerGenericCommand>
 8008b50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d109      	bne.n	8008b6c <prvSwitchTimerLists+0x98>
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	603b      	str	r3, [r7, #0]
 8008b6a:	e7fe      	b.n	8008b6a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b6c:	4b09      	ldr	r3, [pc, #36]	; (8008b94 <prvSwitchTimerLists+0xc0>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1b2      	bne.n	8008adc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b76:	4b07      	ldr	r3, [pc, #28]	; (8008b94 <prvSwitchTimerLists+0xc0>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b7c:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <prvSwitchTimerLists+0xc4>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a04      	ldr	r2, [pc, #16]	; (8008b94 <prvSwitchTimerLists+0xc0>)
 8008b82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b84:	4a04      	ldr	r2, [pc, #16]	; (8008b98 <prvSwitchTimerLists+0xc4>)
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	6013      	str	r3, [r2, #0]
}
 8008b8a:	bf00      	nop
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000df4 	.word	0x20000df4
 8008b98:	20000df8 	.word	0x20000df8

08008b9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ba2:	f000 f963 	bl	8008e6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ba6:	4b15      	ldr	r3, [pc, #84]	; (8008bfc <prvCheckForValidListAndQueue+0x60>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d120      	bne.n	8008bf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008bae:	4814      	ldr	r0, [pc, #80]	; (8008c00 <prvCheckForValidListAndQueue+0x64>)
 8008bb0:	f7fe f880 	bl	8006cb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008bb4:	4813      	ldr	r0, [pc, #76]	; (8008c04 <prvCheckForValidListAndQueue+0x68>)
 8008bb6:	f7fe f87d 	bl	8006cb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008bba:	4b13      	ldr	r3, [pc, #76]	; (8008c08 <prvCheckForValidListAndQueue+0x6c>)
 8008bbc:	4a10      	ldr	r2, [pc, #64]	; (8008c00 <prvCheckForValidListAndQueue+0x64>)
 8008bbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008bc0:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <prvCheckForValidListAndQueue+0x70>)
 8008bc2:	4a10      	ldr	r2, [pc, #64]	; (8008c04 <prvCheckForValidListAndQueue+0x68>)
 8008bc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	4b11      	ldr	r3, [pc, #68]	; (8008c10 <prvCheckForValidListAndQueue+0x74>)
 8008bcc:	4a11      	ldr	r2, [pc, #68]	; (8008c14 <prvCheckForValidListAndQueue+0x78>)
 8008bce:	2110      	movs	r1, #16
 8008bd0:	200a      	movs	r0, #10
 8008bd2:	f7fe f98b 	bl	8006eec <xQueueGenericCreateStatic>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	4b08      	ldr	r3, [pc, #32]	; (8008bfc <prvCheckForValidListAndQueue+0x60>)
 8008bda:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008bdc:	4b07      	ldr	r3, [pc, #28]	; (8008bfc <prvCheckForValidListAndQueue+0x60>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d005      	beq.n	8008bf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008be4:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <prvCheckForValidListAndQueue+0x60>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	490b      	ldr	r1, [pc, #44]	; (8008c18 <prvCheckForValidListAndQueue+0x7c>)
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fe fd8e 	bl	800770c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bf0:	f000 f96a 	bl	8008ec8 <vPortExitCritical>
}
 8008bf4:	bf00      	nop
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20000dfc 	.word	0x20000dfc
 8008c00:	20000dcc 	.word	0x20000dcc
 8008c04:	20000de0 	.word	0x20000de0
 8008c08:	20000df4 	.word	0x20000df4
 8008c0c:	20000df8 	.word	0x20000df8
 8008c10:	20000ea8 	.word	0x20000ea8
 8008c14:	20000e08 	.word	0x20000e08
 8008c18:	0800c41c 	.word	0x0800c41c

08008c1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3b04      	subs	r3, #4
 8008c2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3b04      	subs	r3, #4
 8008c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	f023 0201 	bic.w	r2, r3, #1
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	3b04      	subs	r3, #4
 8008c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c4c:	4a0c      	ldr	r2, [pc, #48]	; (8008c80 <pxPortInitialiseStack+0x64>)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3b14      	subs	r3, #20
 8008c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3b04      	subs	r3, #4
 8008c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f06f 0202 	mvn.w	r2, #2
 8008c6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3b20      	subs	r3, #32
 8008c70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c72:	68fb      	ldr	r3, [r7, #12]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	08008c85 	.word	0x08008c85

08008c84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c8e:	4b11      	ldr	r3, [pc, #68]	; (8008cd4 <prvTaskExitError+0x50>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c96:	d009      	beq.n	8008cac <prvTaskExitError+0x28>
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	60fb      	str	r3, [r7, #12]
 8008caa:	e7fe      	b.n	8008caa <prvTaskExitError+0x26>
 8008cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008cbe:	bf00      	nop
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d0fc      	beq.n	8008cc0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008cc6:	bf00      	nop
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	2000000c 	.word	0x2000000c
	...

08008ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ce0:	4b07      	ldr	r3, [pc, #28]	; (8008d00 <pxCurrentTCBConst2>)
 8008ce2:	6819      	ldr	r1, [r3, #0]
 8008ce4:	6808      	ldr	r0, [r1, #0]
 8008ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cea:	f380 8809 	msr	PSP, r0
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f04f 0000 	mov.w	r0, #0
 8008cf6:	f380 8811 	msr	BASEPRI, r0
 8008cfa:	4770      	bx	lr
 8008cfc:	f3af 8000 	nop.w

08008d00 <pxCurrentTCBConst2>:
 8008d00:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop

08008d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d08:	4808      	ldr	r0, [pc, #32]	; (8008d2c <prvPortStartFirstTask+0x24>)
 8008d0a:	6800      	ldr	r0, [r0, #0]
 8008d0c:	6800      	ldr	r0, [r0, #0]
 8008d0e:	f380 8808 	msr	MSP, r0
 8008d12:	f04f 0000 	mov.w	r0, #0
 8008d16:	f380 8814 	msr	CONTROL, r0
 8008d1a:	b662      	cpsie	i
 8008d1c:	b661      	cpsie	f
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	df00      	svc	0
 8008d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d2a:	bf00      	nop
 8008d2c:	e000ed08 	.word	0xe000ed08

08008d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d36:	4b44      	ldr	r3, [pc, #272]	; (8008e48 <xPortStartScheduler+0x118>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a44      	ldr	r2, [pc, #272]	; (8008e4c <xPortStartScheduler+0x11c>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d109      	bne.n	8008d54 <xPortStartScheduler+0x24>
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	613b      	str	r3, [r7, #16]
 8008d52:	e7fe      	b.n	8008d52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d54:	4b3c      	ldr	r3, [pc, #240]	; (8008e48 <xPortStartScheduler+0x118>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a3d      	ldr	r2, [pc, #244]	; (8008e50 <xPortStartScheduler+0x120>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d109      	bne.n	8008d72 <xPortStartScheduler+0x42>
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	e7fe      	b.n	8008d70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d72:	4b38      	ldr	r3, [pc, #224]	; (8008e54 <xPortStartScheduler+0x124>)
 8008d74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	22ff      	movs	r2, #255	; 0xff
 8008d82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	4b30      	ldr	r3, [pc, #192]	; (8008e58 <xPortStartScheduler+0x128>)
 8008d98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d9a:	4b30      	ldr	r3, [pc, #192]	; (8008e5c <xPortStartScheduler+0x12c>)
 8008d9c:	2207      	movs	r2, #7
 8008d9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008da0:	e009      	b.n	8008db6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008da2:	4b2e      	ldr	r3, [pc, #184]	; (8008e5c <xPortStartScheduler+0x12c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	4a2c      	ldr	r2, [pc, #176]	; (8008e5c <xPortStartScheduler+0x12c>)
 8008daa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	005b      	lsls	r3, r3, #1
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dbe:	2b80      	cmp	r3, #128	; 0x80
 8008dc0:	d0ef      	beq.n	8008da2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008dc2:	4b26      	ldr	r3, [pc, #152]	; (8008e5c <xPortStartScheduler+0x12c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f1c3 0307 	rsb	r3, r3, #7
 8008dca:	2b04      	cmp	r3, #4
 8008dcc:	d009      	beq.n	8008de2 <xPortStartScheduler+0xb2>
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	60bb      	str	r3, [r7, #8]
 8008de0:	e7fe      	b.n	8008de0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008de2:	4b1e      	ldr	r3, [pc, #120]	; (8008e5c <xPortStartScheduler+0x12c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	021b      	lsls	r3, r3, #8
 8008de8:	4a1c      	ldr	r2, [pc, #112]	; (8008e5c <xPortStartScheduler+0x12c>)
 8008dea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008dec:	4b1b      	ldr	r3, [pc, #108]	; (8008e5c <xPortStartScheduler+0x12c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008df4:	4a19      	ldr	r2, [pc, #100]	; (8008e5c <xPortStartScheduler+0x12c>)
 8008df6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e00:	4b17      	ldr	r3, [pc, #92]	; (8008e60 <xPortStartScheduler+0x130>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a16      	ldr	r2, [pc, #88]	; (8008e60 <xPortStartScheduler+0x130>)
 8008e06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e0c:	4b14      	ldr	r3, [pc, #80]	; (8008e60 <xPortStartScheduler+0x130>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a13      	ldr	r2, [pc, #76]	; (8008e60 <xPortStartScheduler+0x130>)
 8008e12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e18:	f000 f8d6 	bl	8008fc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e1c:	4b11      	ldr	r3, [pc, #68]	; (8008e64 <xPortStartScheduler+0x134>)
 8008e1e:	2200      	movs	r2, #0
 8008e20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e22:	f000 f8f5 	bl	8009010 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e26:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <xPortStartScheduler+0x138>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a0f      	ldr	r2, [pc, #60]	; (8008e68 <xPortStartScheduler+0x138>)
 8008e2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e32:	f7ff ff69 	bl	8008d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e36:	f7ff f86d 	bl	8007f14 <vTaskSwitchContext>
	prvTaskExitError();
 8008e3a:	f7ff ff23 	bl	8008c84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	e000ed00 	.word	0xe000ed00
 8008e4c:	410fc271 	.word	0x410fc271
 8008e50:	410fc270 	.word	0x410fc270
 8008e54:	e000e400 	.word	0xe000e400
 8008e58:	20000ef8 	.word	0x20000ef8
 8008e5c:	20000efc 	.word	0x20000efc
 8008e60:	e000ed20 	.word	0xe000ed20
 8008e64:	2000000c 	.word	0x2000000c
 8008e68:	e000ef34 	.word	0xe000ef34

08008e6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e84:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <vPortEnterCritical+0x54>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	4a0d      	ldr	r2, [pc, #52]	; (8008ec0 <vPortEnterCritical+0x54>)
 8008e8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e8e:	4b0c      	ldr	r3, [pc, #48]	; (8008ec0 <vPortEnterCritical+0x54>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d10e      	bne.n	8008eb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e96:	4b0b      	ldr	r3, [pc, #44]	; (8008ec4 <vPortEnterCritical+0x58>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d009      	beq.n	8008eb4 <vPortEnterCritical+0x48>
 8008ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	603b      	str	r3, [r7, #0]
 8008eb2:	e7fe      	b.n	8008eb2 <vPortEnterCritical+0x46>
	}
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	2000000c 	.word	0x2000000c
 8008ec4:	e000ed04 	.word	0xe000ed04

08008ec8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ece:	4b11      	ldr	r3, [pc, #68]	; (8008f14 <vPortExitCritical+0x4c>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d109      	bne.n	8008eea <vPortExitCritical+0x22>
 8008ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	607b      	str	r3, [r7, #4]
 8008ee8:	e7fe      	b.n	8008ee8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008eea:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <vPortExitCritical+0x4c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	4a08      	ldr	r2, [pc, #32]	; (8008f14 <vPortExitCritical+0x4c>)
 8008ef2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ef4:	4b07      	ldr	r3, [pc, #28]	; (8008f14 <vPortExitCritical+0x4c>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d104      	bne.n	8008f06 <vPortExitCritical+0x3e>
 8008efc:	2300      	movs	r3, #0
 8008efe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f06:	bf00      	nop
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	2000000c 	.word	0x2000000c
	...

08008f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f20:	f3ef 8009 	mrs	r0, PSP
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	4b15      	ldr	r3, [pc, #84]	; (8008f80 <pxCurrentTCBConst>)
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	f01e 0f10 	tst.w	lr, #16
 8008f30:	bf08      	it	eq
 8008f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3a:	6010      	str	r0, [r2, #0]
 8008f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f44:	f380 8811 	msr	BASEPRI, r0
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f7fe ffe0 	bl	8007f14 <vTaskSwitchContext>
 8008f54:	f04f 0000 	mov.w	r0, #0
 8008f58:	f380 8811 	msr	BASEPRI, r0
 8008f5c:	bc09      	pop	{r0, r3}
 8008f5e:	6819      	ldr	r1, [r3, #0]
 8008f60:	6808      	ldr	r0, [r1, #0]
 8008f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f66:	f01e 0f10 	tst.w	lr, #16
 8008f6a:	bf08      	it	eq
 8008f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f70:	f380 8809 	msr	PSP, r0
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	f3af 8000 	nop.w

08008f80 <pxCurrentTCBConst>:
 8008f80:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop

08008f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008fa0:	f7fe ff00 	bl	8007da4 <xTaskIncrementTick>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008faa:	4b06      	ldr	r3, [pc, #24]	; (8008fc4 <SysTick_Handler+0x3c>)
 8008fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008fbc:	bf00      	nop
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	e000ed04 	.word	0xe000ed04

08008fc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fcc:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <vPortSetupTimerInterrupt+0x34>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fd2:	4b0b      	ldr	r3, [pc, #44]	; (8009000 <vPortSetupTimerInterrupt+0x38>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fd8:	4b0a      	ldr	r3, [pc, #40]	; (8009004 <vPortSetupTimerInterrupt+0x3c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a0a      	ldr	r2, [pc, #40]	; (8009008 <vPortSetupTimerInterrupt+0x40>)
 8008fde:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe2:	099b      	lsrs	r3, r3, #6
 8008fe4:	4a09      	ldr	r2, [pc, #36]	; (800900c <vPortSetupTimerInterrupt+0x44>)
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fea:	4b04      	ldr	r3, [pc, #16]	; (8008ffc <vPortSetupTimerInterrupt+0x34>)
 8008fec:	2207      	movs	r2, #7
 8008fee:	601a      	str	r2, [r3, #0]
}
 8008ff0:	bf00      	nop
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	e000e010 	.word	0xe000e010
 8009000:	e000e018 	.word	0xe000e018
 8009004:	20000000 	.word	0x20000000
 8009008:	10624dd3 	.word	0x10624dd3
 800900c:	e000e014 	.word	0xe000e014

08009010 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009010:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009020 <vPortEnableVFP+0x10>
 8009014:	6801      	ldr	r1, [r0, #0]
 8009016:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800901a:	6001      	str	r1, [r0, #0]
 800901c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800901e:	bf00      	nop
 8009020:	e000ed88 	.word	0xe000ed88

08009024 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800902a:	f3ef 8305 	mrs	r3, IPSR
 800902e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2b0f      	cmp	r3, #15
 8009034:	d913      	bls.n	800905e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009036:	4a16      	ldr	r2, [pc, #88]	; (8009090 <vPortValidateInterruptPriority+0x6c>)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009040:	4b14      	ldr	r3, [pc, #80]	; (8009094 <vPortValidateInterruptPriority+0x70>)
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	7afa      	ldrb	r2, [r7, #11]
 8009046:	429a      	cmp	r2, r3
 8009048:	d209      	bcs.n	800905e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	607b      	str	r3, [r7, #4]
 800905c:	e7fe      	b.n	800905c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800905e:	4b0e      	ldr	r3, [pc, #56]	; (8009098 <vPortValidateInterruptPriority+0x74>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009066:	4b0d      	ldr	r3, [pc, #52]	; (800909c <vPortValidateInterruptPriority+0x78>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	429a      	cmp	r2, r3
 800906c:	d909      	bls.n	8009082 <vPortValidateInterruptPriority+0x5e>
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	e7fe      	b.n	8009080 <vPortValidateInterruptPriority+0x5c>
	}
 8009082:	bf00      	nop
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	e000e3f0 	.word	0xe000e3f0
 8009094:	20000ef8 	.word	0x20000ef8
 8009098:	e000ed0c 	.word	0xe000ed0c
 800909c:	20000efc 	.word	0x20000efc

080090a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08a      	sub	sp, #40	; 0x28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090a8:	2300      	movs	r3, #0
 80090aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80090ac:	f7fe fdc0 	bl	8007c30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80090b0:	4b57      	ldr	r3, [pc, #348]	; (8009210 <pvPortMalloc+0x170>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d101      	bne.n	80090bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80090b8:	f000 f90c 	bl	80092d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80090bc:	4b55      	ldr	r3, [pc, #340]	; (8009214 <pvPortMalloc+0x174>)
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4013      	ands	r3, r2
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f040 808c 	bne.w	80091e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d01c      	beq.n	800910a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80090d0:	2208      	movs	r2, #8
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4413      	add	r3, r2
 80090d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f003 0307 	and.w	r3, r3, #7
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d013      	beq.n	800910a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f023 0307 	bic.w	r3, r3, #7
 80090e8:	3308      	adds	r3, #8
 80090ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d009      	beq.n	800910a <pvPortMalloc+0x6a>
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	617b      	str	r3, [r7, #20]
 8009108:	e7fe      	b.n	8009108 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d068      	beq.n	80091e2 <pvPortMalloc+0x142>
 8009110:	4b41      	ldr	r3, [pc, #260]	; (8009218 <pvPortMalloc+0x178>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	429a      	cmp	r2, r3
 8009118:	d863      	bhi.n	80091e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800911a:	4b40      	ldr	r3, [pc, #256]	; (800921c <pvPortMalloc+0x17c>)
 800911c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800911e:	4b3f      	ldr	r3, [pc, #252]	; (800921c <pvPortMalloc+0x17c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009124:	e004      	b.n	8009130 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	429a      	cmp	r2, r3
 8009138:	d903      	bls.n	8009142 <pvPortMalloc+0xa2>
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1f1      	bne.n	8009126 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009142:	4b33      	ldr	r3, [pc, #204]	; (8009210 <pvPortMalloc+0x170>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009148:	429a      	cmp	r2, r3
 800914a:	d04a      	beq.n	80091e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2208      	movs	r2, #8
 8009152:	4413      	add	r3, r2
 8009154:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	1ad2      	subs	r2, r2, r3
 8009166:	2308      	movs	r3, #8
 8009168:	005b      	lsls	r3, r3, #1
 800916a:	429a      	cmp	r2, r3
 800916c:	d91e      	bls.n	80091ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800916e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4413      	add	r3, r2
 8009174:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	f003 0307 	and.w	r3, r3, #7
 800917c:	2b00      	cmp	r3, #0
 800917e:	d009      	beq.n	8009194 <pvPortMalloc+0xf4>
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	613b      	str	r3, [r7, #16]
 8009192:	e7fe      	b.n	8009192 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	1ad2      	subs	r2, r2, r3
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091a6:	69b8      	ldr	r0, [r7, #24]
 80091a8:	f000 f8f6 	bl	8009398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091ac:	4b1a      	ldr	r3, [pc, #104]	; (8009218 <pvPortMalloc+0x178>)
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	4a18      	ldr	r2, [pc, #96]	; (8009218 <pvPortMalloc+0x178>)
 80091b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80091ba:	4b17      	ldr	r3, [pc, #92]	; (8009218 <pvPortMalloc+0x178>)
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	4b18      	ldr	r3, [pc, #96]	; (8009220 <pvPortMalloc+0x180>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d203      	bcs.n	80091ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80091c6:	4b14      	ldr	r3, [pc, #80]	; (8009218 <pvPortMalloc+0x178>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a15      	ldr	r2, [pc, #84]	; (8009220 <pvPortMalloc+0x180>)
 80091cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	4b10      	ldr	r3, [pc, #64]	; (8009214 <pvPortMalloc+0x174>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	431a      	orrs	r2, r3
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80091e2:	f7fe fd33 	bl	8007c4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	f003 0307 	and.w	r3, r3, #7
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d009      	beq.n	8009204 <pvPortMalloc+0x164>
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	60fb      	str	r3, [r7, #12]
 8009202:	e7fe      	b.n	8009202 <pvPortMalloc+0x162>
	return pvReturn;
 8009204:	69fb      	ldr	r3, [r7, #28]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3728      	adds	r7, #40	; 0x28
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20001b08 	.word	0x20001b08
 8009214:	20001b14 	.word	0x20001b14
 8009218:	20001b0c 	.word	0x20001b0c
 800921c:	20001b00 	.word	0x20001b00
 8009220:	20001b10 	.word	0x20001b10

08009224 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d046      	beq.n	80092c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009236:	2308      	movs	r3, #8
 8009238:	425b      	negs	r3, r3
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	4413      	add	r3, r2
 800923e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	4b20      	ldr	r3, [pc, #128]	; (80092cc <vPortFree+0xa8>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4013      	ands	r3, r2
 800924e:	2b00      	cmp	r3, #0
 8009250:	d109      	bne.n	8009266 <vPortFree+0x42>
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	e7fe      	b.n	8009264 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d009      	beq.n	8009282 <vPortFree+0x5e>
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	60bb      	str	r3, [r7, #8]
 8009280:	e7fe      	b.n	8009280 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	4b11      	ldr	r3, [pc, #68]	; (80092cc <vPortFree+0xa8>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4013      	ands	r3, r2
 800928c:	2b00      	cmp	r3, #0
 800928e:	d019      	beq.n	80092c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d115      	bne.n	80092c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	4b0b      	ldr	r3, [pc, #44]	; (80092cc <vPortFree+0xa8>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	43db      	mvns	r3, r3
 80092a2:	401a      	ands	r2, r3
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80092a8:	f7fe fcc2 	bl	8007c30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <vPortFree+0xac>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4413      	add	r3, r2
 80092b6:	4a06      	ldr	r2, [pc, #24]	; (80092d0 <vPortFree+0xac>)
 80092b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80092ba:	6938      	ldr	r0, [r7, #16]
 80092bc:	f000 f86c 	bl	8009398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80092c0:	f7fe fcc4 	bl	8007c4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80092c4:	bf00      	nop
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20001b14 	.word	0x20001b14
 80092d0:	20001b0c 	.word	0x20001b0c

080092d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80092da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80092de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80092e0:	4b27      	ldr	r3, [pc, #156]	; (8009380 <prvHeapInit+0xac>)
 80092e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f003 0307 	and.w	r3, r3, #7
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00c      	beq.n	8009308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3307      	adds	r3, #7
 80092f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 0307 	bic.w	r3, r3, #7
 80092fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	4a1f      	ldr	r2, [pc, #124]	; (8009380 <prvHeapInit+0xac>)
 8009304:	4413      	add	r3, r2
 8009306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800930c:	4a1d      	ldr	r2, [pc, #116]	; (8009384 <prvHeapInit+0xb0>)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009312:	4b1c      	ldr	r3, [pc, #112]	; (8009384 <prvHeapInit+0xb0>)
 8009314:	2200      	movs	r2, #0
 8009316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	4413      	add	r3, r2
 800931e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009320:	2208      	movs	r2, #8
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	1a9b      	subs	r3, r3, r2
 8009326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 0307 	bic.w	r3, r3, #7
 800932e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4a15      	ldr	r2, [pc, #84]	; (8009388 <prvHeapInit+0xb4>)
 8009334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009336:	4b14      	ldr	r3, [pc, #80]	; (8009388 <prvHeapInit+0xb4>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2200      	movs	r2, #0
 800933c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800933e:	4b12      	ldr	r3, [pc, #72]	; (8009388 <prvHeapInit+0xb4>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	1ad2      	subs	r2, r2, r3
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009354:	4b0c      	ldr	r3, [pc, #48]	; (8009388 <prvHeapInit+0xb4>)
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	4a0a      	ldr	r2, [pc, #40]	; (800938c <prvHeapInit+0xb8>)
 8009362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	4a09      	ldr	r2, [pc, #36]	; (8009390 <prvHeapInit+0xbc>)
 800936a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800936c:	4b09      	ldr	r3, [pc, #36]	; (8009394 <prvHeapInit+0xc0>)
 800936e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009372:	601a      	str	r2, [r3, #0]
}
 8009374:	bf00      	nop
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	20000f00 	.word	0x20000f00
 8009384:	20001b00 	.word	0x20001b00
 8009388:	20001b08 	.word	0x20001b08
 800938c:	20001b10 	.word	0x20001b10
 8009390:	20001b0c 	.word	0x20001b0c
 8009394:	20001b14 	.word	0x20001b14

08009398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093a0:	4b28      	ldr	r3, [pc, #160]	; (8009444 <prvInsertBlockIntoFreeList+0xac>)
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	e002      	b.n	80093ac <prvInsertBlockIntoFreeList+0x14>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d8f7      	bhi.n	80093a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	4413      	add	r3, r2
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d108      	bne.n	80093da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	441a      	add	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	441a      	add	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d118      	bne.n	8009420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	4b15      	ldr	r3, [pc, #84]	; (8009448 <prvInsertBlockIntoFreeList+0xb0>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d00d      	beq.n	8009416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685a      	ldr	r2, [r3, #4]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	441a      	add	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	e008      	b.n	8009428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009416:	4b0c      	ldr	r3, [pc, #48]	; (8009448 <prvInsertBlockIntoFreeList+0xb0>)
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	601a      	str	r2, [r3, #0]
 800941e:	e003      	b.n	8009428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	429a      	cmp	r2, r3
 800942e:	d002      	beq.n	8009436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009436:	bf00      	nop
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	20001b00 	.word	0x20001b00
 8009448:	20001b08 	.word	0x20001b08

0800944c <atof>:
 800944c:	2100      	movs	r1, #0
 800944e:	f000 be77 	b.w	800a140 <strtod>

08009452 <atol>:
 8009452:	220a      	movs	r2, #10
 8009454:	2100      	movs	r1, #0
 8009456:	f000 bf03 	b.w	800a260 <strtol>
	...

0800945c <__errno>:
 800945c:	4b01      	ldr	r3, [pc, #4]	; (8009464 <__errno+0x8>)
 800945e:	6818      	ldr	r0, [r3, #0]
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	20000010 	.word	0x20000010

08009468 <__libc_init_array>:
 8009468:	b570      	push	{r4, r5, r6, lr}
 800946a:	4e0d      	ldr	r6, [pc, #52]	; (80094a0 <__libc_init_array+0x38>)
 800946c:	4c0d      	ldr	r4, [pc, #52]	; (80094a4 <__libc_init_array+0x3c>)
 800946e:	1ba4      	subs	r4, r4, r6
 8009470:	10a4      	asrs	r4, r4, #2
 8009472:	2500      	movs	r5, #0
 8009474:	42a5      	cmp	r5, r4
 8009476:	d109      	bne.n	800948c <__libc_init_array+0x24>
 8009478:	4e0b      	ldr	r6, [pc, #44]	; (80094a8 <__libc_init_array+0x40>)
 800947a:	4c0c      	ldr	r4, [pc, #48]	; (80094ac <__libc_init_array+0x44>)
 800947c:	f002 ff96 	bl	800c3ac <_init>
 8009480:	1ba4      	subs	r4, r4, r6
 8009482:	10a4      	asrs	r4, r4, #2
 8009484:	2500      	movs	r5, #0
 8009486:	42a5      	cmp	r5, r4
 8009488:	d105      	bne.n	8009496 <__libc_init_array+0x2e>
 800948a:	bd70      	pop	{r4, r5, r6, pc}
 800948c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009490:	4798      	blx	r3
 8009492:	3501      	adds	r5, #1
 8009494:	e7ee      	b.n	8009474 <__libc_init_array+0xc>
 8009496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800949a:	4798      	blx	r3
 800949c:	3501      	adds	r5, #1
 800949e:	e7f2      	b.n	8009486 <__libc_init_array+0x1e>
 80094a0:	0800c7a0 	.word	0x0800c7a0
 80094a4:	0800c7a0 	.word	0x0800c7a0
 80094a8:	0800c7a0 	.word	0x0800c7a0
 80094ac:	0800c7a4 	.word	0x0800c7a4

080094b0 <memcpy>:
 80094b0:	b510      	push	{r4, lr}
 80094b2:	1e43      	subs	r3, r0, #1
 80094b4:	440a      	add	r2, r1
 80094b6:	4291      	cmp	r1, r2
 80094b8:	d100      	bne.n	80094bc <memcpy+0xc>
 80094ba:	bd10      	pop	{r4, pc}
 80094bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094c4:	e7f7      	b.n	80094b6 <memcpy+0x6>

080094c6 <memset>:
 80094c6:	4402      	add	r2, r0
 80094c8:	4603      	mov	r3, r0
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d100      	bne.n	80094d0 <memset+0xa>
 80094ce:	4770      	bx	lr
 80094d0:	f803 1b01 	strb.w	r1, [r3], #1
 80094d4:	e7f9      	b.n	80094ca <memset+0x4>

080094d6 <strchr>:
 80094d6:	b2c9      	uxtb	r1, r1
 80094d8:	4603      	mov	r3, r0
 80094da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094de:	b11a      	cbz	r2, 80094e8 <strchr+0x12>
 80094e0:	428a      	cmp	r2, r1
 80094e2:	d1f9      	bne.n	80094d8 <strchr+0x2>
 80094e4:	4618      	mov	r0, r3
 80094e6:	4770      	bx	lr
 80094e8:	2900      	cmp	r1, #0
 80094ea:	bf18      	it	ne
 80094ec:	2300      	movne	r3, #0
 80094ee:	e7f9      	b.n	80094e4 <strchr+0xe>

080094f0 <strncpy>:
 80094f0:	b570      	push	{r4, r5, r6, lr}
 80094f2:	3901      	subs	r1, #1
 80094f4:	4604      	mov	r4, r0
 80094f6:	b902      	cbnz	r2, 80094fa <strncpy+0xa>
 80094f8:	bd70      	pop	{r4, r5, r6, pc}
 80094fa:	4623      	mov	r3, r4
 80094fc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009500:	f803 5b01 	strb.w	r5, [r3], #1
 8009504:	1e56      	subs	r6, r2, #1
 8009506:	b92d      	cbnz	r5, 8009514 <strncpy+0x24>
 8009508:	4414      	add	r4, r2
 800950a:	42a3      	cmp	r3, r4
 800950c:	d0f4      	beq.n	80094f8 <strncpy+0x8>
 800950e:	f803 5b01 	strb.w	r5, [r3], #1
 8009512:	e7fa      	b.n	800950a <strncpy+0x1a>
 8009514:	461c      	mov	r4, r3
 8009516:	4632      	mov	r2, r6
 8009518:	e7ed      	b.n	80094f6 <strncpy+0x6>

0800951a <sulp>:
 800951a:	b570      	push	{r4, r5, r6, lr}
 800951c:	4604      	mov	r4, r0
 800951e:	460d      	mov	r5, r1
 8009520:	ec45 4b10 	vmov	d0, r4, r5
 8009524:	4616      	mov	r6, r2
 8009526:	f001 fcb9 	bl	800ae9c <__ulp>
 800952a:	ec51 0b10 	vmov	r0, r1, d0
 800952e:	b17e      	cbz	r6, 8009550 <sulp+0x36>
 8009530:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009534:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009538:	2b00      	cmp	r3, #0
 800953a:	dd09      	ble.n	8009550 <sulp+0x36>
 800953c:	051b      	lsls	r3, r3, #20
 800953e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009542:	2400      	movs	r4, #0
 8009544:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009548:	4622      	mov	r2, r4
 800954a:	462b      	mov	r3, r5
 800954c:	f7f7 f836 	bl	80005bc <__aeabi_dmul>
 8009550:	bd70      	pop	{r4, r5, r6, pc}
 8009552:	0000      	movs	r0, r0
 8009554:	0000      	movs	r0, r0
	...

08009558 <_strtod_l>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	461f      	mov	r7, r3
 800955e:	b0a1      	sub	sp, #132	; 0x84
 8009560:	2300      	movs	r3, #0
 8009562:	4681      	mov	r9, r0
 8009564:	4638      	mov	r0, r7
 8009566:	460e      	mov	r6, r1
 8009568:	9217      	str	r2, [sp, #92]	; 0x5c
 800956a:	931c      	str	r3, [sp, #112]	; 0x70
 800956c:	f001 f9b7 	bl	800a8de <__localeconv_l>
 8009570:	4680      	mov	r8, r0
 8009572:	6800      	ldr	r0, [r0, #0]
 8009574:	f7f6 fe5e 	bl	8000234 <strlen>
 8009578:	f04f 0a00 	mov.w	sl, #0
 800957c:	4604      	mov	r4, r0
 800957e:	f04f 0b00 	mov.w	fp, #0
 8009582:	961b      	str	r6, [sp, #108]	; 0x6c
 8009584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009586:	781a      	ldrb	r2, [r3, #0]
 8009588:	2a0d      	cmp	r2, #13
 800958a:	d832      	bhi.n	80095f2 <_strtod_l+0x9a>
 800958c:	2a09      	cmp	r2, #9
 800958e:	d236      	bcs.n	80095fe <_strtod_l+0xa6>
 8009590:	2a00      	cmp	r2, #0
 8009592:	d03e      	beq.n	8009612 <_strtod_l+0xba>
 8009594:	2300      	movs	r3, #0
 8009596:	930d      	str	r3, [sp, #52]	; 0x34
 8009598:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800959a:	782b      	ldrb	r3, [r5, #0]
 800959c:	2b30      	cmp	r3, #48	; 0x30
 800959e:	f040 80ac 	bne.w	80096fa <_strtod_l+0x1a2>
 80095a2:	786b      	ldrb	r3, [r5, #1]
 80095a4:	2b58      	cmp	r3, #88	; 0x58
 80095a6:	d001      	beq.n	80095ac <_strtod_l+0x54>
 80095a8:	2b78      	cmp	r3, #120	; 0x78
 80095aa:	d167      	bne.n	800967c <_strtod_l+0x124>
 80095ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095ae:	9301      	str	r3, [sp, #4]
 80095b0:	ab1c      	add	r3, sp, #112	; 0x70
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	9702      	str	r7, [sp, #8]
 80095b6:	ab1d      	add	r3, sp, #116	; 0x74
 80095b8:	4a88      	ldr	r2, [pc, #544]	; (80097dc <_strtod_l+0x284>)
 80095ba:	a91b      	add	r1, sp, #108	; 0x6c
 80095bc:	4648      	mov	r0, r9
 80095be:	f000 feb4 	bl	800a32a <__gethex>
 80095c2:	f010 0407 	ands.w	r4, r0, #7
 80095c6:	4606      	mov	r6, r0
 80095c8:	d005      	beq.n	80095d6 <_strtod_l+0x7e>
 80095ca:	2c06      	cmp	r4, #6
 80095cc:	d12b      	bne.n	8009626 <_strtod_l+0xce>
 80095ce:	3501      	adds	r5, #1
 80095d0:	2300      	movs	r3, #0
 80095d2:	951b      	str	r5, [sp, #108]	; 0x6c
 80095d4:	930d      	str	r3, [sp, #52]	; 0x34
 80095d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f040 859a 	bne.w	800a112 <_strtod_l+0xbba>
 80095de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095e0:	b1e3      	cbz	r3, 800961c <_strtod_l+0xc4>
 80095e2:	4652      	mov	r2, sl
 80095e4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80095e8:	ec43 2b10 	vmov	d0, r2, r3
 80095ec:	b021      	add	sp, #132	; 0x84
 80095ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f2:	2a2b      	cmp	r2, #43	; 0x2b
 80095f4:	d015      	beq.n	8009622 <_strtod_l+0xca>
 80095f6:	2a2d      	cmp	r2, #45	; 0x2d
 80095f8:	d004      	beq.n	8009604 <_strtod_l+0xac>
 80095fa:	2a20      	cmp	r2, #32
 80095fc:	d1ca      	bne.n	8009594 <_strtod_l+0x3c>
 80095fe:	3301      	adds	r3, #1
 8009600:	931b      	str	r3, [sp, #108]	; 0x6c
 8009602:	e7bf      	b.n	8009584 <_strtod_l+0x2c>
 8009604:	2201      	movs	r2, #1
 8009606:	920d      	str	r2, [sp, #52]	; 0x34
 8009608:	1c5a      	adds	r2, r3, #1
 800960a:	921b      	str	r2, [sp, #108]	; 0x6c
 800960c:	785b      	ldrb	r3, [r3, #1]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1c2      	bne.n	8009598 <_strtod_l+0x40>
 8009612:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009614:	961b      	str	r6, [sp, #108]	; 0x6c
 8009616:	2b00      	cmp	r3, #0
 8009618:	f040 8579 	bne.w	800a10e <_strtod_l+0xbb6>
 800961c:	4652      	mov	r2, sl
 800961e:	465b      	mov	r3, fp
 8009620:	e7e2      	b.n	80095e8 <_strtod_l+0x90>
 8009622:	2200      	movs	r2, #0
 8009624:	e7ef      	b.n	8009606 <_strtod_l+0xae>
 8009626:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009628:	b13a      	cbz	r2, 800963a <_strtod_l+0xe2>
 800962a:	2135      	movs	r1, #53	; 0x35
 800962c:	a81e      	add	r0, sp, #120	; 0x78
 800962e:	f001 fd2d 	bl	800b08c <__copybits>
 8009632:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009634:	4648      	mov	r0, r9
 8009636:	f001 f99a 	bl	800a96e <_Bfree>
 800963a:	3c01      	subs	r4, #1
 800963c:	2c04      	cmp	r4, #4
 800963e:	d806      	bhi.n	800964e <_strtod_l+0xf6>
 8009640:	e8df f004 	tbb	[pc, r4]
 8009644:	1714030a 	.word	0x1714030a
 8009648:	0a          	.byte	0x0a
 8009649:	00          	.byte	0x00
 800964a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800964e:	0730      	lsls	r0, r6, #28
 8009650:	d5c1      	bpl.n	80095d6 <_strtod_l+0x7e>
 8009652:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009656:	e7be      	b.n	80095d6 <_strtod_l+0x7e>
 8009658:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800965c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800965e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009662:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009666:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800966a:	e7f0      	b.n	800964e <_strtod_l+0xf6>
 800966c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80097e0 <_strtod_l+0x288>
 8009670:	e7ed      	b.n	800964e <_strtod_l+0xf6>
 8009672:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009676:	f04f 3aff 	mov.w	sl, #4294967295
 800967a:	e7e8      	b.n	800964e <_strtod_l+0xf6>
 800967c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800967e:	1c5a      	adds	r2, r3, #1
 8009680:	921b      	str	r2, [sp, #108]	; 0x6c
 8009682:	785b      	ldrb	r3, [r3, #1]
 8009684:	2b30      	cmp	r3, #48	; 0x30
 8009686:	d0f9      	beq.n	800967c <_strtod_l+0x124>
 8009688:	2b00      	cmp	r3, #0
 800968a:	d0a4      	beq.n	80095d6 <_strtod_l+0x7e>
 800968c:	2301      	movs	r3, #1
 800968e:	2500      	movs	r5, #0
 8009690:	9306      	str	r3, [sp, #24]
 8009692:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009694:	9308      	str	r3, [sp, #32]
 8009696:	9507      	str	r5, [sp, #28]
 8009698:	9505      	str	r5, [sp, #20]
 800969a:	220a      	movs	r2, #10
 800969c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800969e:	7807      	ldrb	r7, [r0, #0]
 80096a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80096a4:	b2d9      	uxtb	r1, r3
 80096a6:	2909      	cmp	r1, #9
 80096a8:	d929      	bls.n	80096fe <_strtod_l+0x1a6>
 80096aa:	4622      	mov	r2, r4
 80096ac:	f8d8 1000 	ldr.w	r1, [r8]
 80096b0:	f001 fda0 	bl	800b1f4 <strncmp>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d031      	beq.n	800971c <_strtod_l+0x1c4>
 80096b8:	2000      	movs	r0, #0
 80096ba:	9c05      	ldr	r4, [sp, #20]
 80096bc:	9004      	str	r0, [sp, #16]
 80096be:	463b      	mov	r3, r7
 80096c0:	4602      	mov	r2, r0
 80096c2:	2b65      	cmp	r3, #101	; 0x65
 80096c4:	d001      	beq.n	80096ca <_strtod_l+0x172>
 80096c6:	2b45      	cmp	r3, #69	; 0x45
 80096c8:	d114      	bne.n	80096f4 <_strtod_l+0x19c>
 80096ca:	b924      	cbnz	r4, 80096d6 <_strtod_l+0x17e>
 80096cc:	b910      	cbnz	r0, 80096d4 <_strtod_l+0x17c>
 80096ce:	9b06      	ldr	r3, [sp, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d09e      	beq.n	8009612 <_strtod_l+0xba>
 80096d4:	2400      	movs	r4, #0
 80096d6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80096d8:	1c73      	adds	r3, r6, #1
 80096da:	931b      	str	r3, [sp, #108]	; 0x6c
 80096dc:	7873      	ldrb	r3, [r6, #1]
 80096de:	2b2b      	cmp	r3, #43	; 0x2b
 80096e0:	d078      	beq.n	80097d4 <_strtod_l+0x27c>
 80096e2:	2b2d      	cmp	r3, #45	; 0x2d
 80096e4:	d070      	beq.n	80097c8 <_strtod_l+0x270>
 80096e6:	f04f 0c00 	mov.w	ip, #0
 80096ea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80096ee:	2f09      	cmp	r7, #9
 80096f0:	d97c      	bls.n	80097ec <_strtod_l+0x294>
 80096f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80096f4:	f04f 0e00 	mov.w	lr, #0
 80096f8:	e09a      	b.n	8009830 <_strtod_l+0x2d8>
 80096fa:	2300      	movs	r3, #0
 80096fc:	e7c7      	b.n	800968e <_strtod_l+0x136>
 80096fe:	9905      	ldr	r1, [sp, #20]
 8009700:	2908      	cmp	r1, #8
 8009702:	bfdd      	ittte	le
 8009704:	9907      	ldrle	r1, [sp, #28]
 8009706:	fb02 3301 	mlale	r3, r2, r1, r3
 800970a:	9307      	strle	r3, [sp, #28]
 800970c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009710:	9b05      	ldr	r3, [sp, #20]
 8009712:	3001      	adds	r0, #1
 8009714:	3301      	adds	r3, #1
 8009716:	9305      	str	r3, [sp, #20]
 8009718:	901b      	str	r0, [sp, #108]	; 0x6c
 800971a:	e7bf      	b.n	800969c <_strtod_l+0x144>
 800971c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800971e:	191a      	adds	r2, r3, r4
 8009720:	921b      	str	r2, [sp, #108]	; 0x6c
 8009722:	9a05      	ldr	r2, [sp, #20]
 8009724:	5d1b      	ldrb	r3, [r3, r4]
 8009726:	2a00      	cmp	r2, #0
 8009728:	d037      	beq.n	800979a <_strtod_l+0x242>
 800972a:	9c05      	ldr	r4, [sp, #20]
 800972c:	4602      	mov	r2, r0
 800972e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009732:	2909      	cmp	r1, #9
 8009734:	d913      	bls.n	800975e <_strtod_l+0x206>
 8009736:	2101      	movs	r1, #1
 8009738:	9104      	str	r1, [sp, #16]
 800973a:	e7c2      	b.n	80096c2 <_strtod_l+0x16a>
 800973c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800973e:	1c5a      	adds	r2, r3, #1
 8009740:	921b      	str	r2, [sp, #108]	; 0x6c
 8009742:	785b      	ldrb	r3, [r3, #1]
 8009744:	3001      	adds	r0, #1
 8009746:	2b30      	cmp	r3, #48	; 0x30
 8009748:	d0f8      	beq.n	800973c <_strtod_l+0x1e4>
 800974a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800974e:	2a08      	cmp	r2, #8
 8009750:	f200 84e4 	bhi.w	800a11c <_strtod_l+0xbc4>
 8009754:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009756:	9208      	str	r2, [sp, #32]
 8009758:	4602      	mov	r2, r0
 800975a:	2000      	movs	r0, #0
 800975c:	4604      	mov	r4, r0
 800975e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009762:	f100 0101 	add.w	r1, r0, #1
 8009766:	d012      	beq.n	800978e <_strtod_l+0x236>
 8009768:	440a      	add	r2, r1
 800976a:	eb00 0c04 	add.w	ip, r0, r4
 800976e:	4621      	mov	r1, r4
 8009770:	270a      	movs	r7, #10
 8009772:	458c      	cmp	ip, r1
 8009774:	d113      	bne.n	800979e <_strtod_l+0x246>
 8009776:	1821      	adds	r1, r4, r0
 8009778:	2908      	cmp	r1, #8
 800977a:	f104 0401 	add.w	r4, r4, #1
 800977e:	4404      	add	r4, r0
 8009780:	dc19      	bgt.n	80097b6 <_strtod_l+0x25e>
 8009782:	9b07      	ldr	r3, [sp, #28]
 8009784:	210a      	movs	r1, #10
 8009786:	fb01 e303 	mla	r3, r1, r3, lr
 800978a:	9307      	str	r3, [sp, #28]
 800978c:	2100      	movs	r1, #0
 800978e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009790:	1c58      	adds	r0, r3, #1
 8009792:	901b      	str	r0, [sp, #108]	; 0x6c
 8009794:	785b      	ldrb	r3, [r3, #1]
 8009796:	4608      	mov	r0, r1
 8009798:	e7c9      	b.n	800972e <_strtod_l+0x1d6>
 800979a:	9805      	ldr	r0, [sp, #20]
 800979c:	e7d3      	b.n	8009746 <_strtod_l+0x1ee>
 800979e:	2908      	cmp	r1, #8
 80097a0:	f101 0101 	add.w	r1, r1, #1
 80097a4:	dc03      	bgt.n	80097ae <_strtod_l+0x256>
 80097a6:	9b07      	ldr	r3, [sp, #28]
 80097a8:	437b      	muls	r3, r7
 80097aa:	9307      	str	r3, [sp, #28]
 80097ac:	e7e1      	b.n	8009772 <_strtod_l+0x21a>
 80097ae:	2910      	cmp	r1, #16
 80097b0:	bfd8      	it	le
 80097b2:	437d      	mulle	r5, r7
 80097b4:	e7dd      	b.n	8009772 <_strtod_l+0x21a>
 80097b6:	2c10      	cmp	r4, #16
 80097b8:	bfdc      	itt	le
 80097ba:	210a      	movle	r1, #10
 80097bc:	fb01 e505 	mlale	r5, r1, r5, lr
 80097c0:	e7e4      	b.n	800978c <_strtod_l+0x234>
 80097c2:	2301      	movs	r3, #1
 80097c4:	9304      	str	r3, [sp, #16]
 80097c6:	e781      	b.n	80096cc <_strtod_l+0x174>
 80097c8:	f04f 0c01 	mov.w	ip, #1
 80097cc:	1cb3      	adds	r3, r6, #2
 80097ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80097d0:	78b3      	ldrb	r3, [r6, #2]
 80097d2:	e78a      	b.n	80096ea <_strtod_l+0x192>
 80097d4:	f04f 0c00 	mov.w	ip, #0
 80097d8:	e7f8      	b.n	80097cc <_strtod_l+0x274>
 80097da:	bf00      	nop
 80097dc:	0800c4f0 	.word	0x0800c4f0
 80097e0:	7ff00000 	.word	0x7ff00000
 80097e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097e6:	1c5f      	adds	r7, r3, #1
 80097e8:	971b      	str	r7, [sp, #108]	; 0x6c
 80097ea:	785b      	ldrb	r3, [r3, #1]
 80097ec:	2b30      	cmp	r3, #48	; 0x30
 80097ee:	d0f9      	beq.n	80097e4 <_strtod_l+0x28c>
 80097f0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80097f4:	2f08      	cmp	r7, #8
 80097f6:	f63f af7d 	bhi.w	80096f4 <_strtod_l+0x19c>
 80097fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80097fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009800:	930a      	str	r3, [sp, #40]	; 0x28
 8009802:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009804:	1c5f      	adds	r7, r3, #1
 8009806:	971b      	str	r7, [sp, #108]	; 0x6c
 8009808:	785b      	ldrb	r3, [r3, #1]
 800980a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800980e:	f1b8 0f09 	cmp.w	r8, #9
 8009812:	d937      	bls.n	8009884 <_strtod_l+0x32c>
 8009814:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009816:	1a7f      	subs	r7, r7, r1
 8009818:	2f08      	cmp	r7, #8
 800981a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800981e:	dc37      	bgt.n	8009890 <_strtod_l+0x338>
 8009820:	45be      	cmp	lr, r7
 8009822:	bfa8      	it	ge
 8009824:	46be      	movge	lr, r7
 8009826:	f1bc 0f00 	cmp.w	ip, #0
 800982a:	d001      	beq.n	8009830 <_strtod_l+0x2d8>
 800982c:	f1ce 0e00 	rsb	lr, lr, #0
 8009830:	2c00      	cmp	r4, #0
 8009832:	d151      	bne.n	80098d8 <_strtod_l+0x380>
 8009834:	2800      	cmp	r0, #0
 8009836:	f47f aece 	bne.w	80095d6 <_strtod_l+0x7e>
 800983a:	9a06      	ldr	r2, [sp, #24]
 800983c:	2a00      	cmp	r2, #0
 800983e:	f47f aeca 	bne.w	80095d6 <_strtod_l+0x7e>
 8009842:	9a04      	ldr	r2, [sp, #16]
 8009844:	2a00      	cmp	r2, #0
 8009846:	f47f aee4 	bne.w	8009612 <_strtod_l+0xba>
 800984a:	2b4e      	cmp	r3, #78	; 0x4e
 800984c:	d027      	beq.n	800989e <_strtod_l+0x346>
 800984e:	dc21      	bgt.n	8009894 <_strtod_l+0x33c>
 8009850:	2b49      	cmp	r3, #73	; 0x49
 8009852:	f47f aede 	bne.w	8009612 <_strtod_l+0xba>
 8009856:	49a0      	ldr	r1, [pc, #640]	; (8009ad8 <_strtod_l+0x580>)
 8009858:	a81b      	add	r0, sp, #108	; 0x6c
 800985a:	f000 ff99 	bl	800a790 <__match>
 800985e:	2800      	cmp	r0, #0
 8009860:	f43f aed7 	beq.w	8009612 <_strtod_l+0xba>
 8009864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009866:	499d      	ldr	r1, [pc, #628]	; (8009adc <_strtod_l+0x584>)
 8009868:	3b01      	subs	r3, #1
 800986a:	a81b      	add	r0, sp, #108	; 0x6c
 800986c:	931b      	str	r3, [sp, #108]	; 0x6c
 800986e:	f000 ff8f 	bl	800a790 <__match>
 8009872:	b910      	cbnz	r0, 800987a <_strtod_l+0x322>
 8009874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009876:	3301      	adds	r3, #1
 8009878:	931b      	str	r3, [sp, #108]	; 0x6c
 800987a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009af0 <_strtod_l+0x598>
 800987e:	f04f 0a00 	mov.w	sl, #0
 8009882:	e6a8      	b.n	80095d6 <_strtod_l+0x7e>
 8009884:	210a      	movs	r1, #10
 8009886:	fb01 3e0e 	mla	lr, r1, lr, r3
 800988a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800988e:	e7b8      	b.n	8009802 <_strtod_l+0x2aa>
 8009890:	46be      	mov	lr, r7
 8009892:	e7c8      	b.n	8009826 <_strtod_l+0x2ce>
 8009894:	2b69      	cmp	r3, #105	; 0x69
 8009896:	d0de      	beq.n	8009856 <_strtod_l+0x2fe>
 8009898:	2b6e      	cmp	r3, #110	; 0x6e
 800989a:	f47f aeba 	bne.w	8009612 <_strtod_l+0xba>
 800989e:	4990      	ldr	r1, [pc, #576]	; (8009ae0 <_strtod_l+0x588>)
 80098a0:	a81b      	add	r0, sp, #108	; 0x6c
 80098a2:	f000 ff75 	bl	800a790 <__match>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f43f aeb3 	beq.w	8009612 <_strtod_l+0xba>
 80098ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2b28      	cmp	r3, #40	; 0x28
 80098b2:	d10e      	bne.n	80098d2 <_strtod_l+0x37a>
 80098b4:	aa1e      	add	r2, sp, #120	; 0x78
 80098b6:	498b      	ldr	r1, [pc, #556]	; (8009ae4 <_strtod_l+0x58c>)
 80098b8:	a81b      	add	r0, sp, #108	; 0x6c
 80098ba:	f000 ff7d 	bl	800a7b8 <__hexnan>
 80098be:	2805      	cmp	r0, #5
 80098c0:	d107      	bne.n	80098d2 <_strtod_l+0x37a>
 80098c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80098c4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80098c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80098cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80098d0:	e681      	b.n	80095d6 <_strtod_l+0x7e>
 80098d2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009af8 <_strtod_l+0x5a0>
 80098d6:	e7d2      	b.n	800987e <_strtod_l+0x326>
 80098d8:	ebae 0302 	sub.w	r3, lr, r2
 80098dc:	9306      	str	r3, [sp, #24]
 80098de:	9b05      	ldr	r3, [sp, #20]
 80098e0:	9807      	ldr	r0, [sp, #28]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	bf08      	it	eq
 80098e6:	4623      	moveq	r3, r4
 80098e8:	2c10      	cmp	r4, #16
 80098ea:	9305      	str	r3, [sp, #20]
 80098ec:	46a0      	mov	r8, r4
 80098ee:	bfa8      	it	ge
 80098f0:	f04f 0810 	movge.w	r8, #16
 80098f4:	f7f6 fde8 	bl	80004c8 <__aeabi_ui2d>
 80098f8:	2c09      	cmp	r4, #9
 80098fa:	4682      	mov	sl, r0
 80098fc:	468b      	mov	fp, r1
 80098fe:	dc13      	bgt.n	8009928 <_strtod_l+0x3d0>
 8009900:	9b06      	ldr	r3, [sp, #24]
 8009902:	2b00      	cmp	r3, #0
 8009904:	f43f ae67 	beq.w	80095d6 <_strtod_l+0x7e>
 8009908:	9b06      	ldr	r3, [sp, #24]
 800990a:	dd7a      	ble.n	8009a02 <_strtod_l+0x4aa>
 800990c:	2b16      	cmp	r3, #22
 800990e:	dc61      	bgt.n	80099d4 <_strtod_l+0x47c>
 8009910:	4a75      	ldr	r2, [pc, #468]	; (8009ae8 <_strtod_l+0x590>)
 8009912:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009916:	e9de 0100 	ldrd	r0, r1, [lr]
 800991a:	4652      	mov	r2, sl
 800991c:	465b      	mov	r3, fp
 800991e:	f7f6 fe4d 	bl	80005bc <__aeabi_dmul>
 8009922:	4682      	mov	sl, r0
 8009924:	468b      	mov	fp, r1
 8009926:	e656      	b.n	80095d6 <_strtod_l+0x7e>
 8009928:	4b6f      	ldr	r3, [pc, #444]	; (8009ae8 <_strtod_l+0x590>)
 800992a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800992e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009932:	f7f6 fe43 	bl	80005bc <__aeabi_dmul>
 8009936:	4606      	mov	r6, r0
 8009938:	4628      	mov	r0, r5
 800993a:	460f      	mov	r7, r1
 800993c:	f7f6 fdc4 	bl	80004c8 <__aeabi_ui2d>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4630      	mov	r0, r6
 8009946:	4639      	mov	r1, r7
 8009948:	f7f6 fc82 	bl	8000250 <__adddf3>
 800994c:	2c0f      	cmp	r4, #15
 800994e:	4682      	mov	sl, r0
 8009950:	468b      	mov	fp, r1
 8009952:	ddd5      	ble.n	8009900 <_strtod_l+0x3a8>
 8009954:	9b06      	ldr	r3, [sp, #24]
 8009956:	eba4 0808 	sub.w	r8, r4, r8
 800995a:	4498      	add	r8, r3
 800995c:	f1b8 0f00 	cmp.w	r8, #0
 8009960:	f340 8096 	ble.w	8009a90 <_strtod_l+0x538>
 8009964:	f018 030f 	ands.w	r3, r8, #15
 8009968:	d00a      	beq.n	8009980 <_strtod_l+0x428>
 800996a:	495f      	ldr	r1, [pc, #380]	; (8009ae8 <_strtod_l+0x590>)
 800996c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009970:	4652      	mov	r2, sl
 8009972:	465b      	mov	r3, fp
 8009974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009978:	f7f6 fe20 	bl	80005bc <__aeabi_dmul>
 800997c:	4682      	mov	sl, r0
 800997e:	468b      	mov	fp, r1
 8009980:	f038 080f 	bics.w	r8, r8, #15
 8009984:	d073      	beq.n	8009a6e <_strtod_l+0x516>
 8009986:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800998a:	dd47      	ble.n	8009a1c <_strtod_l+0x4c4>
 800998c:	2400      	movs	r4, #0
 800998e:	46a0      	mov	r8, r4
 8009990:	9407      	str	r4, [sp, #28]
 8009992:	9405      	str	r4, [sp, #20]
 8009994:	2322      	movs	r3, #34	; 0x22
 8009996:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009af0 <_strtod_l+0x598>
 800999a:	f8c9 3000 	str.w	r3, [r9]
 800999e:	f04f 0a00 	mov.w	sl, #0
 80099a2:	9b07      	ldr	r3, [sp, #28]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f43f ae16 	beq.w	80095d6 <_strtod_l+0x7e>
 80099aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80099ac:	4648      	mov	r0, r9
 80099ae:	f000 ffde 	bl	800a96e <_Bfree>
 80099b2:	9905      	ldr	r1, [sp, #20]
 80099b4:	4648      	mov	r0, r9
 80099b6:	f000 ffda 	bl	800a96e <_Bfree>
 80099ba:	4641      	mov	r1, r8
 80099bc:	4648      	mov	r0, r9
 80099be:	f000 ffd6 	bl	800a96e <_Bfree>
 80099c2:	9907      	ldr	r1, [sp, #28]
 80099c4:	4648      	mov	r0, r9
 80099c6:	f000 ffd2 	bl	800a96e <_Bfree>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4648      	mov	r0, r9
 80099ce:	f000 ffce 	bl	800a96e <_Bfree>
 80099d2:	e600      	b.n	80095d6 <_strtod_l+0x7e>
 80099d4:	9a06      	ldr	r2, [sp, #24]
 80099d6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80099da:	4293      	cmp	r3, r2
 80099dc:	dbba      	blt.n	8009954 <_strtod_l+0x3fc>
 80099de:	4d42      	ldr	r5, [pc, #264]	; (8009ae8 <_strtod_l+0x590>)
 80099e0:	f1c4 040f 	rsb	r4, r4, #15
 80099e4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80099e8:	4652      	mov	r2, sl
 80099ea:	465b      	mov	r3, fp
 80099ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099f0:	f7f6 fde4 	bl	80005bc <__aeabi_dmul>
 80099f4:	9b06      	ldr	r3, [sp, #24]
 80099f6:	1b1c      	subs	r4, r3, r4
 80099f8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80099fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a00:	e78d      	b.n	800991e <_strtod_l+0x3c6>
 8009a02:	f113 0f16 	cmn.w	r3, #22
 8009a06:	dba5      	blt.n	8009954 <_strtod_l+0x3fc>
 8009a08:	4a37      	ldr	r2, [pc, #220]	; (8009ae8 <_strtod_l+0x590>)
 8009a0a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009a0e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009a12:	4650      	mov	r0, sl
 8009a14:	4659      	mov	r1, fp
 8009a16:	f7f6 fefb 	bl	8000810 <__aeabi_ddiv>
 8009a1a:	e782      	b.n	8009922 <_strtod_l+0x3ca>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	4e33      	ldr	r6, [pc, #204]	; (8009aec <_strtod_l+0x594>)
 8009a20:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009a24:	4650      	mov	r0, sl
 8009a26:	4659      	mov	r1, fp
 8009a28:	461d      	mov	r5, r3
 8009a2a:	f1b8 0f01 	cmp.w	r8, #1
 8009a2e:	dc21      	bgt.n	8009a74 <_strtod_l+0x51c>
 8009a30:	b10b      	cbz	r3, 8009a36 <_strtod_l+0x4de>
 8009a32:	4682      	mov	sl, r0
 8009a34:	468b      	mov	fp, r1
 8009a36:	4b2d      	ldr	r3, [pc, #180]	; (8009aec <_strtod_l+0x594>)
 8009a38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009a3c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009a40:	4652      	mov	r2, sl
 8009a42:	465b      	mov	r3, fp
 8009a44:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009a48:	f7f6 fdb8 	bl	80005bc <__aeabi_dmul>
 8009a4c:	4b28      	ldr	r3, [pc, #160]	; (8009af0 <_strtod_l+0x598>)
 8009a4e:	460a      	mov	r2, r1
 8009a50:	400b      	ands	r3, r1
 8009a52:	4928      	ldr	r1, [pc, #160]	; (8009af4 <_strtod_l+0x59c>)
 8009a54:	428b      	cmp	r3, r1
 8009a56:	4682      	mov	sl, r0
 8009a58:	d898      	bhi.n	800998c <_strtod_l+0x434>
 8009a5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009a5e:	428b      	cmp	r3, r1
 8009a60:	bf86      	itte	hi
 8009a62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009afc <_strtod_l+0x5a4>
 8009a66:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009a6e:	2300      	movs	r3, #0
 8009a70:	9304      	str	r3, [sp, #16]
 8009a72:	e077      	b.n	8009b64 <_strtod_l+0x60c>
 8009a74:	f018 0f01 	tst.w	r8, #1
 8009a78:	d006      	beq.n	8009a88 <_strtod_l+0x530>
 8009a7a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	f7f6 fd9b 	bl	80005bc <__aeabi_dmul>
 8009a86:	2301      	movs	r3, #1
 8009a88:	3501      	adds	r5, #1
 8009a8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009a8e:	e7cc      	b.n	8009a2a <_strtod_l+0x4d2>
 8009a90:	d0ed      	beq.n	8009a6e <_strtod_l+0x516>
 8009a92:	f1c8 0800 	rsb	r8, r8, #0
 8009a96:	f018 020f 	ands.w	r2, r8, #15
 8009a9a:	d00a      	beq.n	8009ab2 <_strtod_l+0x55a>
 8009a9c:	4b12      	ldr	r3, [pc, #72]	; (8009ae8 <_strtod_l+0x590>)
 8009a9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aa2:	4650      	mov	r0, sl
 8009aa4:	4659      	mov	r1, fp
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	f7f6 feb1 	bl	8000810 <__aeabi_ddiv>
 8009aae:	4682      	mov	sl, r0
 8009ab0:	468b      	mov	fp, r1
 8009ab2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009ab6:	d0da      	beq.n	8009a6e <_strtod_l+0x516>
 8009ab8:	f1b8 0f1f 	cmp.w	r8, #31
 8009abc:	dd20      	ble.n	8009b00 <_strtod_l+0x5a8>
 8009abe:	2400      	movs	r4, #0
 8009ac0:	46a0      	mov	r8, r4
 8009ac2:	9407      	str	r4, [sp, #28]
 8009ac4:	9405      	str	r4, [sp, #20]
 8009ac6:	2322      	movs	r3, #34	; 0x22
 8009ac8:	f04f 0a00 	mov.w	sl, #0
 8009acc:	f04f 0b00 	mov.w	fp, #0
 8009ad0:	f8c9 3000 	str.w	r3, [r9]
 8009ad4:	e765      	b.n	80099a2 <_strtod_l+0x44a>
 8009ad6:	bf00      	nop
 8009ad8:	0800c4e4 	.word	0x0800c4e4
 8009adc:	0800c4e7 	.word	0x0800c4e7
 8009ae0:	0800c4ed 	.word	0x0800c4ed
 8009ae4:	0800c504 	.word	0x0800c504
 8009ae8:	0800c578 	.word	0x0800c578
 8009aec:	0800c550 	.word	0x0800c550
 8009af0:	7ff00000 	.word	0x7ff00000
 8009af4:	7ca00000 	.word	0x7ca00000
 8009af8:	fff80000 	.word	0xfff80000
 8009afc:	7fefffff 	.word	0x7fefffff
 8009b00:	f018 0310 	ands.w	r3, r8, #16
 8009b04:	bf18      	it	ne
 8009b06:	236a      	movne	r3, #106	; 0x6a
 8009b08:	4da0      	ldr	r5, [pc, #640]	; (8009d8c <_strtod_l+0x834>)
 8009b0a:	9304      	str	r3, [sp, #16]
 8009b0c:	4650      	mov	r0, sl
 8009b0e:	4659      	mov	r1, fp
 8009b10:	2300      	movs	r3, #0
 8009b12:	f1b8 0f00 	cmp.w	r8, #0
 8009b16:	f300 810a 	bgt.w	8009d2e <_strtod_l+0x7d6>
 8009b1a:	b10b      	cbz	r3, 8009b20 <_strtod_l+0x5c8>
 8009b1c:	4682      	mov	sl, r0
 8009b1e:	468b      	mov	fp, r1
 8009b20:	9b04      	ldr	r3, [sp, #16]
 8009b22:	b1bb      	cbz	r3, 8009b54 <_strtod_l+0x5fc>
 8009b24:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009b28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	4659      	mov	r1, fp
 8009b30:	dd10      	ble.n	8009b54 <_strtod_l+0x5fc>
 8009b32:	2b1f      	cmp	r3, #31
 8009b34:	f340 8107 	ble.w	8009d46 <_strtod_l+0x7ee>
 8009b38:	2b34      	cmp	r3, #52	; 0x34
 8009b3a:	bfde      	ittt	le
 8009b3c:	3b20      	suble	r3, #32
 8009b3e:	f04f 32ff 	movle.w	r2, #4294967295
 8009b42:	fa02 f303 	lslle.w	r3, r2, r3
 8009b46:	f04f 0a00 	mov.w	sl, #0
 8009b4a:	bfcc      	ite	gt
 8009b4c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009b50:	ea03 0b01 	andle.w	fp, r3, r1
 8009b54:	2200      	movs	r2, #0
 8009b56:	2300      	movs	r3, #0
 8009b58:	4650      	mov	r0, sl
 8009b5a:	4659      	mov	r1, fp
 8009b5c:	f7f6 ff96 	bl	8000a8c <__aeabi_dcmpeq>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d1ac      	bne.n	8009abe <_strtod_l+0x566>
 8009b64:	9b07      	ldr	r3, [sp, #28]
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	9a05      	ldr	r2, [sp, #20]
 8009b6a:	9908      	ldr	r1, [sp, #32]
 8009b6c:	4623      	mov	r3, r4
 8009b6e:	4648      	mov	r0, r9
 8009b70:	f000 ff4f 	bl	800aa12 <__s2b>
 8009b74:	9007      	str	r0, [sp, #28]
 8009b76:	2800      	cmp	r0, #0
 8009b78:	f43f af08 	beq.w	800998c <_strtod_l+0x434>
 8009b7c:	9a06      	ldr	r2, [sp, #24]
 8009b7e:	9b06      	ldr	r3, [sp, #24]
 8009b80:	2a00      	cmp	r2, #0
 8009b82:	f1c3 0300 	rsb	r3, r3, #0
 8009b86:	bfa8      	it	ge
 8009b88:	2300      	movge	r3, #0
 8009b8a:	930e      	str	r3, [sp, #56]	; 0x38
 8009b8c:	2400      	movs	r4, #0
 8009b8e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009b92:	9316      	str	r3, [sp, #88]	; 0x58
 8009b94:	46a0      	mov	r8, r4
 8009b96:	9b07      	ldr	r3, [sp, #28]
 8009b98:	4648      	mov	r0, r9
 8009b9a:	6859      	ldr	r1, [r3, #4]
 8009b9c:	f000 feb3 	bl	800a906 <_Balloc>
 8009ba0:	9005      	str	r0, [sp, #20]
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	f43f aef6 	beq.w	8009994 <_strtod_l+0x43c>
 8009ba8:	9b07      	ldr	r3, [sp, #28]
 8009baa:	691a      	ldr	r2, [r3, #16]
 8009bac:	3202      	adds	r2, #2
 8009bae:	f103 010c 	add.w	r1, r3, #12
 8009bb2:	0092      	lsls	r2, r2, #2
 8009bb4:	300c      	adds	r0, #12
 8009bb6:	f7ff fc7b 	bl	80094b0 <memcpy>
 8009bba:	aa1e      	add	r2, sp, #120	; 0x78
 8009bbc:	a91d      	add	r1, sp, #116	; 0x74
 8009bbe:	ec4b ab10 	vmov	d0, sl, fp
 8009bc2:	4648      	mov	r0, r9
 8009bc4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009bc8:	f001 f9de 	bl	800af88 <__d2b>
 8009bcc:	901c      	str	r0, [sp, #112]	; 0x70
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f43f aee0 	beq.w	8009994 <_strtod_l+0x43c>
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	4648      	mov	r0, r9
 8009bd8:	f000 ffa7 	bl	800ab2a <__i2b>
 8009bdc:	4680      	mov	r8, r0
 8009bde:	2800      	cmp	r0, #0
 8009be0:	f43f aed8 	beq.w	8009994 <_strtod_l+0x43c>
 8009be4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009be6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009be8:	2e00      	cmp	r6, #0
 8009bea:	bfab      	itete	ge
 8009bec:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009bee:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009bf0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009bf2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009bf4:	bfac      	ite	ge
 8009bf6:	18f7      	addge	r7, r6, r3
 8009bf8:	1b9d      	sublt	r5, r3, r6
 8009bfa:	9b04      	ldr	r3, [sp, #16]
 8009bfc:	1af6      	subs	r6, r6, r3
 8009bfe:	4416      	add	r6, r2
 8009c00:	4b63      	ldr	r3, [pc, #396]	; (8009d90 <_strtod_l+0x838>)
 8009c02:	3e01      	subs	r6, #1
 8009c04:	429e      	cmp	r6, r3
 8009c06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c0a:	f280 80af 	bge.w	8009d6c <_strtod_l+0x814>
 8009c0e:	1b9b      	subs	r3, r3, r6
 8009c10:	2b1f      	cmp	r3, #31
 8009c12:	eba2 0203 	sub.w	r2, r2, r3
 8009c16:	f04f 0101 	mov.w	r1, #1
 8009c1a:	f300 809b 	bgt.w	8009d54 <_strtod_l+0x7fc>
 8009c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c22:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c24:	2300      	movs	r3, #0
 8009c26:	930a      	str	r3, [sp, #40]	; 0x28
 8009c28:	18be      	adds	r6, r7, r2
 8009c2a:	9b04      	ldr	r3, [sp, #16]
 8009c2c:	42b7      	cmp	r7, r6
 8009c2e:	4415      	add	r5, r2
 8009c30:	441d      	add	r5, r3
 8009c32:	463b      	mov	r3, r7
 8009c34:	bfa8      	it	ge
 8009c36:	4633      	movge	r3, r6
 8009c38:	42ab      	cmp	r3, r5
 8009c3a:	bfa8      	it	ge
 8009c3c:	462b      	movge	r3, r5
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	bfc2      	ittt	gt
 8009c42:	1af6      	subgt	r6, r6, r3
 8009c44:	1aed      	subgt	r5, r5, r3
 8009c46:	1aff      	subgt	r7, r7, r3
 8009c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c4a:	b1bb      	cbz	r3, 8009c7c <_strtod_l+0x724>
 8009c4c:	4641      	mov	r1, r8
 8009c4e:	461a      	mov	r2, r3
 8009c50:	4648      	mov	r0, r9
 8009c52:	f001 f809 	bl	800ac68 <__pow5mult>
 8009c56:	4680      	mov	r8, r0
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	f43f ae9b 	beq.w	8009994 <_strtod_l+0x43c>
 8009c5e:	4601      	mov	r1, r0
 8009c60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c62:	4648      	mov	r0, r9
 8009c64:	f000 ff6a 	bl	800ab3c <__multiply>
 8009c68:	900c      	str	r0, [sp, #48]	; 0x30
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	f43f ae92 	beq.w	8009994 <_strtod_l+0x43c>
 8009c70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c72:	4648      	mov	r0, r9
 8009c74:	f000 fe7b 	bl	800a96e <_Bfree>
 8009c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c7a:	931c      	str	r3, [sp, #112]	; 0x70
 8009c7c:	2e00      	cmp	r6, #0
 8009c7e:	dc7a      	bgt.n	8009d76 <_strtod_l+0x81e>
 8009c80:	9b06      	ldr	r3, [sp, #24]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dd08      	ble.n	8009c98 <_strtod_l+0x740>
 8009c86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009c88:	9905      	ldr	r1, [sp, #20]
 8009c8a:	4648      	mov	r0, r9
 8009c8c:	f000 ffec 	bl	800ac68 <__pow5mult>
 8009c90:	9005      	str	r0, [sp, #20]
 8009c92:	2800      	cmp	r0, #0
 8009c94:	f43f ae7e 	beq.w	8009994 <_strtod_l+0x43c>
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	dd08      	ble.n	8009cae <_strtod_l+0x756>
 8009c9c:	462a      	mov	r2, r5
 8009c9e:	9905      	ldr	r1, [sp, #20]
 8009ca0:	4648      	mov	r0, r9
 8009ca2:	f001 f82f 	bl	800ad04 <__lshift>
 8009ca6:	9005      	str	r0, [sp, #20]
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	f43f ae73 	beq.w	8009994 <_strtod_l+0x43c>
 8009cae:	2f00      	cmp	r7, #0
 8009cb0:	dd08      	ble.n	8009cc4 <_strtod_l+0x76c>
 8009cb2:	4641      	mov	r1, r8
 8009cb4:	463a      	mov	r2, r7
 8009cb6:	4648      	mov	r0, r9
 8009cb8:	f001 f824 	bl	800ad04 <__lshift>
 8009cbc:	4680      	mov	r8, r0
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f43f ae68 	beq.w	8009994 <_strtod_l+0x43c>
 8009cc4:	9a05      	ldr	r2, [sp, #20]
 8009cc6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009cc8:	4648      	mov	r0, r9
 8009cca:	f001 f889 	bl	800ade0 <__mdiff>
 8009cce:	4604      	mov	r4, r0
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	f43f ae5f 	beq.w	8009994 <_strtod_l+0x43c>
 8009cd6:	68c3      	ldr	r3, [r0, #12]
 8009cd8:	930c      	str	r3, [sp, #48]	; 0x30
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60c3      	str	r3, [r0, #12]
 8009cde:	4641      	mov	r1, r8
 8009ce0:	f001 f864 	bl	800adac <__mcmp>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	da55      	bge.n	8009d94 <_strtod_l+0x83c>
 8009ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cea:	b9e3      	cbnz	r3, 8009d26 <_strtod_l+0x7ce>
 8009cec:	f1ba 0f00 	cmp.w	sl, #0
 8009cf0:	d119      	bne.n	8009d26 <_strtod_l+0x7ce>
 8009cf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cf6:	b9b3      	cbnz	r3, 8009d26 <_strtod_l+0x7ce>
 8009cf8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009cfc:	0d1b      	lsrs	r3, r3, #20
 8009cfe:	051b      	lsls	r3, r3, #20
 8009d00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009d04:	d90f      	bls.n	8009d26 <_strtod_l+0x7ce>
 8009d06:	6963      	ldr	r3, [r4, #20]
 8009d08:	b913      	cbnz	r3, 8009d10 <_strtod_l+0x7b8>
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	dd0a      	ble.n	8009d26 <_strtod_l+0x7ce>
 8009d10:	4621      	mov	r1, r4
 8009d12:	2201      	movs	r2, #1
 8009d14:	4648      	mov	r0, r9
 8009d16:	f000 fff5 	bl	800ad04 <__lshift>
 8009d1a:	4641      	mov	r1, r8
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	f001 f845 	bl	800adac <__mcmp>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	dc67      	bgt.n	8009df6 <_strtod_l+0x89e>
 8009d26:	9b04      	ldr	r3, [sp, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d171      	bne.n	8009e10 <_strtod_l+0x8b8>
 8009d2c:	e63d      	b.n	80099aa <_strtod_l+0x452>
 8009d2e:	f018 0f01 	tst.w	r8, #1
 8009d32:	d004      	beq.n	8009d3e <_strtod_l+0x7e6>
 8009d34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d38:	f7f6 fc40 	bl	80005bc <__aeabi_dmul>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009d42:	3508      	adds	r5, #8
 8009d44:	e6e5      	b.n	8009b12 <_strtod_l+0x5ba>
 8009d46:	f04f 32ff 	mov.w	r2, #4294967295
 8009d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4e:	ea03 0a0a 	and.w	sl, r3, sl
 8009d52:	e6ff      	b.n	8009b54 <_strtod_l+0x5fc>
 8009d54:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009d58:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009d5c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009d60:	36e2      	adds	r6, #226	; 0xe2
 8009d62:	fa01 f306 	lsl.w	r3, r1, r6
 8009d66:	930a      	str	r3, [sp, #40]	; 0x28
 8009d68:	910f      	str	r1, [sp, #60]	; 0x3c
 8009d6a:	e75d      	b.n	8009c28 <_strtod_l+0x6d0>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d70:	2301      	movs	r3, #1
 8009d72:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d74:	e758      	b.n	8009c28 <_strtod_l+0x6d0>
 8009d76:	4632      	mov	r2, r6
 8009d78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d7a:	4648      	mov	r0, r9
 8009d7c:	f000 ffc2 	bl	800ad04 <__lshift>
 8009d80:	901c      	str	r0, [sp, #112]	; 0x70
 8009d82:	2800      	cmp	r0, #0
 8009d84:	f47f af7c 	bne.w	8009c80 <_strtod_l+0x728>
 8009d88:	e604      	b.n	8009994 <_strtod_l+0x43c>
 8009d8a:	bf00      	nop
 8009d8c:	0800c518 	.word	0x0800c518
 8009d90:	fffffc02 	.word	0xfffffc02
 8009d94:	465d      	mov	r5, fp
 8009d96:	f040 8086 	bne.w	8009ea6 <_strtod_l+0x94e>
 8009d9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009da0:	b32a      	cbz	r2, 8009dee <_strtod_l+0x896>
 8009da2:	4aaf      	ldr	r2, [pc, #700]	; (800a060 <_strtod_l+0xb08>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d153      	bne.n	8009e50 <_strtod_l+0x8f8>
 8009da8:	9b04      	ldr	r3, [sp, #16]
 8009daa:	4650      	mov	r0, sl
 8009dac:	b1d3      	cbz	r3, 8009de4 <_strtod_l+0x88c>
 8009dae:	4aad      	ldr	r2, [pc, #692]	; (800a064 <_strtod_l+0xb0c>)
 8009db0:	402a      	ands	r2, r5
 8009db2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009db6:	f04f 31ff 	mov.w	r1, #4294967295
 8009dba:	d816      	bhi.n	8009dea <_strtod_l+0x892>
 8009dbc:	0d12      	lsrs	r2, r2, #20
 8009dbe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8009dc6:	4298      	cmp	r0, r3
 8009dc8:	d142      	bne.n	8009e50 <_strtod_l+0x8f8>
 8009dca:	4ba7      	ldr	r3, [pc, #668]	; (800a068 <_strtod_l+0xb10>)
 8009dcc:	429d      	cmp	r5, r3
 8009dce:	d102      	bne.n	8009dd6 <_strtod_l+0x87e>
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	f43f addf 	beq.w	8009994 <_strtod_l+0x43c>
 8009dd6:	4ba3      	ldr	r3, [pc, #652]	; (800a064 <_strtod_l+0xb0c>)
 8009dd8:	402b      	ands	r3, r5
 8009dda:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009dde:	f04f 0a00 	mov.w	sl, #0
 8009de2:	e7a0      	b.n	8009d26 <_strtod_l+0x7ce>
 8009de4:	f04f 33ff 	mov.w	r3, #4294967295
 8009de8:	e7ed      	b.n	8009dc6 <_strtod_l+0x86e>
 8009dea:	460b      	mov	r3, r1
 8009dec:	e7eb      	b.n	8009dc6 <_strtod_l+0x86e>
 8009dee:	bb7b      	cbnz	r3, 8009e50 <_strtod_l+0x8f8>
 8009df0:	f1ba 0f00 	cmp.w	sl, #0
 8009df4:	d12c      	bne.n	8009e50 <_strtod_l+0x8f8>
 8009df6:	9904      	ldr	r1, [sp, #16]
 8009df8:	4a9a      	ldr	r2, [pc, #616]	; (800a064 <_strtod_l+0xb0c>)
 8009dfa:	465b      	mov	r3, fp
 8009dfc:	b1f1      	cbz	r1, 8009e3c <_strtod_l+0x8e4>
 8009dfe:	ea02 010b 	and.w	r1, r2, fp
 8009e02:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009e06:	dc19      	bgt.n	8009e3c <_strtod_l+0x8e4>
 8009e08:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e0c:	f77f ae5b 	ble.w	8009ac6 <_strtod_l+0x56e>
 8009e10:	4a96      	ldr	r2, [pc, #600]	; (800a06c <_strtod_l+0xb14>)
 8009e12:	2300      	movs	r3, #0
 8009e14:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009e18:	4650      	mov	r0, sl
 8009e1a:	4659      	mov	r1, fp
 8009e1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009e20:	f7f6 fbcc 	bl	80005bc <__aeabi_dmul>
 8009e24:	4682      	mov	sl, r0
 8009e26:	468b      	mov	fp, r1
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	f47f adbe 	bne.w	80099aa <_strtod_l+0x452>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f47f adbb 	bne.w	80099aa <_strtod_l+0x452>
 8009e34:	2322      	movs	r3, #34	; 0x22
 8009e36:	f8c9 3000 	str.w	r3, [r9]
 8009e3a:	e5b6      	b.n	80099aa <_strtod_l+0x452>
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009e42:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e46:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e4a:	f04f 3aff 	mov.w	sl, #4294967295
 8009e4e:	e76a      	b.n	8009d26 <_strtod_l+0x7ce>
 8009e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e52:	b193      	cbz	r3, 8009e7a <_strtod_l+0x922>
 8009e54:	422b      	tst	r3, r5
 8009e56:	f43f af66 	beq.w	8009d26 <_strtod_l+0x7ce>
 8009e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e5c:	9a04      	ldr	r2, [sp, #16]
 8009e5e:	4650      	mov	r0, sl
 8009e60:	4659      	mov	r1, fp
 8009e62:	b173      	cbz	r3, 8009e82 <_strtod_l+0x92a>
 8009e64:	f7ff fb59 	bl	800951a <sulp>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e70:	f7f6 f9ee 	bl	8000250 <__adddf3>
 8009e74:	4682      	mov	sl, r0
 8009e76:	468b      	mov	fp, r1
 8009e78:	e755      	b.n	8009d26 <_strtod_l+0x7ce>
 8009e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e7c:	ea13 0f0a 	tst.w	r3, sl
 8009e80:	e7e9      	b.n	8009e56 <_strtod_l+0x8fe>
 8009e82:	f7ff fb4a 	bl	800951a <sulp>
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e8e:	f7f6 f9dd 	bl	800024c <__aeabi_dsub>
 8009e92:	2200      	movs	r2, #0
 8009e94:	2300      	movs	r3, #0
 8009e96:	4682      	mov	sl, r0
 8009e98:	468b      	mov	fp, r1
 8009e9a:	f7f6 fdf7 	bl	8000a8c <__aeabi_dcmpeq>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	f47f ae11 	bne.w	8009ac6 <_strtod_l+0x56e>
 8009ea4:	e73f      	b.n	8009d26 <_strtod_l+0x7ce>
 8009ea6:	4641      	mov	r1, r8
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f001 f8bc 	bl	800b026 <__ratio>
 8009eae:	ec57 6b10 	vmov	r6, r7, d0
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009eb8:	ee10 0a10 	vmov	r0, s0
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	f7f6 fdf9 	bl	8000ab4 <__aeabi_dcmple>
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	d077      	beq.n	8009fb6 <_strtod_l+0xa5e>
 8009ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d04a      	beq.n	8009f62 <_strtod_l+0xa0a>
 8009ecc:	4b68      	ldr	r3, [pc, #416]	; (800a070 <_strtod_l+0xb18>)
 8009ece:	2200      	movs	r2, #0
 8009ed0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009ed4:	4f66      	ldr	r7, [pc, #408]	; (800a070 <_strtod_l+0xb18>)
 8009ed6:	2600      	movs	r6, #0
 8009ed8:	4b62      	ldr	r3, [pc, #392]	; (800a064 <_strtod_l+0xb0c>)
 8009eda:	402b      	ands	r3, r5
 8009edc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ede:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ee0:	4b64      	ldr	r3, [pc, #400]	; (800a074 <_strtod_l+0xb1c>)
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	f040 80ce 	bne.w	800a084 <_strtod_l+0xb2c>
 8009ee8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009eec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ef0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009ef4:	ec4b ab10 	vmov	d0, sl, fp
 8009ef8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009efc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009f00:	f000 ffcc 	bl	800ae9c <__ulp>
 8009f04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f08:	ec53 2b10 	vmov	r2, r3, d0
 8009f0c:	f7f6 fb56 	bl	80005bc <__aeabi_dmul>
 8009f10:	4652      	mov	r2, sl
 8009f12:	465b      	mov	r3, fp
 8009f14:	f7f6 f99c 	bl	8000250 <__adddf3>
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4952      	ldr	r1, [pc, #328]	; (800a064 <_strtod_l+0xb0c>)
 8009f1c:	4a56      	ldr	r2, [pc, #344]	; (800a078 <_strtod_l+0xb20>)
 8009f1e:	4019      	ands	r1, r3
 8009f20:	4291      	cmp	r1, r2
 8009f22:	4682      	mov	sl, r0
 8009f24:	d95b      	bls.n	8009fde <_strtod_l+0xa86>
 8009f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f28:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d103      	bne.n	8009f38 <_strtod_l+0x9e0>
 8009f30:	9b08      	ldr	r3, [sp, #32]
 8009f32:	3301      	adds	r3, #1
 8009f34:	f43f ad2e 	beq.w	8009994 <_strtod_l+0x43c>
 8009f38:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800a068 <_strtod_l+0xb10>
 8009f3c:	f04f 3aff 	mov.w	sl, #4294967295
 8009f40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009f42:	4648      	mov	r0, r9
 8009f44:	f000 fd13 	bl	800a96e <_Bfree>
 8009f48:	9905      	ldr	r1, [sp, #20]
 8009f4a:	4648      	mov	r0, r9
 8009f4c:	f000 fd0f 	bl	800a96e <_Bfree>
 8009f50:	4641      	mov	r1, r8
 8009f52:	4648      	mov	r0, r9
 8009f54:	f000 fd0b 	bl	800a96e <_Bfree>
 8009f58:	4621      	mov	r1, r4
 8009f5a:	4648      	mov	r0, r9
 8009f5c:	f000 fd07 	bl	800a96e <_Bfree>
 8009f60:	e619      	b.n	8009b96 <_strtod_l+0x63e>
 8009f62:	f1ba 0f00 	cmp.w	sl, #0
 8009f66:	d11a      	bne.n	8009f9e <_strtod_l+0xa46>
 8009f68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f6c:	b9eb      	cbnz	r3, 8009faa <_strtod_l+0xa52>
 8009f6e:	2200      	movs	r2, #0
 8009f70:	4b3f      	ldr	r3, [pc, #252]	; (800a070 <_strtod_l+0xb18>)
 8009f72:	4630      	mov	r0, r6
 8009f74:	4639      	mov	r1, r7
 8009f76:	f7f6 fd93 	bl	8000aa0 <__aeabi_dcmplt>
 8009f7a:	b9c8      	cbnz	r0, 8009fb0 <_strtod_l+0xa58>
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	4639      	mov	r1, r7
 8009f80:	2200      	movs	r2, #0
 8009f82:	4b3e      	ldr	r3, [pc, #248]	; (800a07c <_strtod_l+0xb24>)
 8009f84:	f7f6 fb1a 	bl	80005bc <__aeabi_dmul>
 8009f88:	4606      	mov	r6, r0
 8009f8a:	460f      	mov	r7, r1
 8009f8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009f90:	9618      	str	r6, [sp, #96]	; 0x60
 8009f92:	9319      	str	r3, [sp, #100]	; 0x64
 8009f94:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009f98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009f9c:	e79c      	b.n	8009ed8 <_strtod_l+0x980>
 8009f9e:	f1ba 0f01 	cmp.w	sl, #1
 8009fa2:	d102      	bne.n	8009faa <_strtod_l+0xa52>
 8009fa4:	2d00      	cmp	r5, #0
 8009fa6:	f43f ad8e 	beq.w	8009ac6 <_strtod_l+0x56e>
 8009faa:	2200      	movs	r2, #0
 8009fac:	4b34      	ldr	r3, [pc, #208]	; (800a080 <_strtod_l+0xb28>)
 8009fae:	e78f      	b.n	8009ed0 <_strtod_l+0x978>
 8009fb0:	2600      	movs	r6, #0
 8009fb2:	4f32      	ldr	r7, [pc, #200]	; (800a07c <_strtod_l+0xb24>)
 8009fb4:	e7ea      	b.n	8009f8c <_strtod_l+0xa34>
 8009fb6:	4b31      	ldr	r3, [pc, #196]	; (800a07c <_strtod_l+0xb24>)
 8009fb8:	4630      	mov	r0, r6
 8009fba:	4639      	mov	r1, r7
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f7f6 fafd 	bl	80005bc <__aeabi_dmul>
 8009fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fc4:	4606      	mov	r6, r0
 8009fc6:	460f      	mov	r7, r1
 8009fc8:	b933      	cbnz	r3, 8009fd8 <_strtod_l+0xa80>
 8009fca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fce:	9010      	str	r0, [sp, #64]	; 0x40
 8009fd0:	9311      	str	r3, [sp, #68]	; 0x44
 8009fd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009fd6:	e7df      	b.n	8009f98 <_strtod_l+0xa40>
 8009fd8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009fdc:	e7f9      	b.n	8009fd2 <_strtod_l+0xa7a>
 8009fde:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1ab      	bne.n	8009f40 <_strtod_l+0x9e8>
 8009fe8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009fec:	0d1b      	lsrs	r3, r3, #20
 8009fee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ff0:	051b      	lsls	r3, r3, #20
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	465d      	mov	r5, fp
 8009ff6:	d1a3      	bne.n	8009f40 <_strtod_l+0x9e8>
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f7f6 fd8e 	bl	8000b1c <__aeabi_d2iz>
 800a000:	f7f6 fa72 	bl	80004e8 <__aeabi_i2d>
 800a004:	460b      	mov	r3, r1
 800a006:	4602      	mov	r2, r0
 800a008:	4639      	mov	r1, r7
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7f6 f91e 	bl	800024c <__aeabi_dsub>
 800a010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a012:	4606      	mov	r6, r0
 800a014:	460f      	mov	r7, r1
 800a016:	b933      	cbnz	r3, 800a026 <_strtod_l+0xace>
 800a018:	f1ba 0f00 	cmp.w	sl, #0
 800a01c:	d103      	bne.n	800a026 <_strtod_l+0xace>
 800a01e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800a022:	2d00      	cmp	r5, #0
 800a024:	d06d      	beq.n	800a102 <_strtod_l+0xbaa>
 800a026:	a30a      	add	r3, pc, #40	; (adr r3, 800a050 <_strtod_l+0xaf8>)
 800a028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02c:	4630      	mov	r0, r6
 800a02e:	4639      	mov	r1, r7
 800a030:	f7f6 fd36 	bl	8000aa0 <__aeabi_dcmplt>
 800a034:	2800      	cmp	r0, #0
 800a036:	f47f acb8 	bne.w	80099aa <_strtod_l+0x452>
 800a03a:	a307      	add	r3, pc, #28	; (adr r3, 800a058 <_strtod_l+0xb00>)
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	4630      	mov	r0, r6
 800a042:	4639      	mov	r1, r7
 800a044:	f7f6 fd4a 	bl	8000adc <__aeabi_dcmpgt>
 800a048:	2800      	cmp	r0, #0
 800a04a:	f43f af79 	beq.w	8009f40 <_strtod_l+0x9e8>
 800a04e:	e4ac      	b.n	80099aa <_strtod_l+0x452>
 800a050:	94a03595 	.word	0x94a03595
 800a054:	3fdfffff 	.word	0x3fdfffff
 800a058:	35afe535 	.word	0x35afe535
 800a05c:	3fe00000 	.word	0x3fe00000
 800a060:	000fffff 	.word	0x000fffff
 800a064:	7ff00000 	.word	0x7ff00000
 800a068:	7fefffff 	.word	0x7fefffff
 800a06c:	39500000 	.word	0x39500000
 800a070:	3ff00000 	.word	0x3ff00000
 800a074:	7fe00000 	.word	0x7fe00000
 800a078:	7c9fffff 	.word	0x7c9fffff
 800a07c:	3fe00000 	.word	0x3fe00000
 800a080:	bff00000 	.word	0xbff00000
 800a084:	9b04      	ldr	r3, [sp, #16]
 800a086:	b333      	cbz	r3, 800a0d6 <_strtod_l+0xb7e>
 800a088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a08a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a08e:	d822      	bhi.n	800a0d6 <_strtod_l+0xb7e>
 800a090:	a327      	add	r3, pc, #156	; (adr r3, 800a130 <_strtod_l+0xbd8>)
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	4630      	mov	r0, r6
 800a098:	4639      	mov	r1, r7
 800a09a:	f7f6 fd0b 	bl	8000ab4 <__aeabi_dcmple>
 800a09e:	b1a0      	cbz	r0, 800a0ca <_strtod_l+0xb72>
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f7f6 fd62 	bl	8000b6c <__aeabi_d2uiz>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	bf08      	it	eq
 800a0ac:	2001      	moveq	r0, #1
 800a0ae:	f7f6 fa0b 	bl	80004c8 <__aeabi_ui2d>
 800a0b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	460f      	mov	r7, r1
 800a0b8:	bb03      	cbnz	r3, 800a0fc <_strtod_l+0xba4>
 800a0ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0be:	9012      	str	r0, [sp, #72]	; 0x48
 800a0c0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a0c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a0c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0ce:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a0d2:	1a9b      	subs	r3, r3, r2
 800a0d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0d6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a0da:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a0de:	f000 fedd 	bl	800ae9c <__ulp>
 800a0e2:	4650      	mov	r0, sl
 800a0e4:	ec53 2b10 	vmov	r2, r3, d0
 800a0e8:	4659      	mov	r1, fp
 800a0ea:	f7f6 fa67 	bl	80005bc <__aeabi_dmul>
 800a0ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a0f2:	f7f6 f8ad 	bl	8000250 <__adddf3>
 800a0f6:	4682      	mov	sl, r0
 800a0f8:	468b      	mov	fp, r1
 800a0fa:	e772      	b.n	8009fe2 <_strtod_l+0xa8a>
 800a0fc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800a100:	e7df      	b.n	800a0c2 <_strtod_l+0xb6a>
 800a102:	a30d      	add	r3, pc, #52	; (adr r3, 800a138 <_strtod_l+0xbe0>)
 800a104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a108:	f7f6 fcca 	bl	8000aa0 <__aeabi_dcmplt>
 800a10c:	e79c      	b.n	800a048 <_strtod_l+0xaf0>
 800a10e:	2300      	movs	r3, #0
 800a110:	930d      	str	r3, [sp, #52]	; 0x34
 800a112:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a114:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a116:	6013      	str	r3, [r2, #0]
 800a118:	f7ff ba61 	b.w	80095de <_strtod_l+0x86>
 800a11c:	2b65      	cmp	r3, #101	; 0x65
 800a11e:	f04f 0200 	mov.w	r2, #0
 800a122:	f43f ab4e 	beq.w	80097c2 <_strtod_l+0x26a>
 800a126:	2101      	movs	r1, #1
 800a128:	4614      	mov	r4, r2
 800a12a:	9104      	str	r1, [sp, #16]
 800a12c:	f7ff bacb 	b.w	80096c6 <_strtod_l+0x16e>
 800a130:	ffc00000 	.word	0xffc00000
 800a134:	41dfffff 	.word	0x41dfffff
 800a138:	94a03595 	.word	0x94a03595
 800a13c:	3fcfffff 	.word	0x3fcfffff

0800a140 <strtod>:
 800a140:	4b07      	ldr	r3, [pc, #28]	; (800a160 <strtod+0x20>)
 800a142:	4a08      	ldr	r2, [pc, #32]	; (800a164 <strtod+0x24>)
 800a144:	b410      	push	{r4}
 800a146:	681c      	ldr	r4, [r3, #0]
 800a148:	6a23      	ldr	r3, [r4, #32]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	bf08      	it	eq
 800a14e:	4613      	moveq	r3, r2
 800a150:	460a      	mov	r2, r1
 800a152:	4601      	mov	r1, r0
 800a154:	4620      	mov	r0, r4
 800a156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a15a:	f7ff b9fd 	b.w	8009558 <_strtod_l>
 800a15e:	bf00      	nop
 800a160:	20000010 	.word	0x20000010
 800a164:	20000074 	.word	0x20000074

0800a168 <_strtol_l.isra.0>:
 800a168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a16c:	4680      	mov	r8, r0
 800a16e:	4689      	mov	r9, r1
 800a170:	4692      	mov	sl, r2
 800a172:	461e      	mov	r6, r3
 800a174:	460f      	mov	r7, r1
 800a176:	463d      	mov	r5, r7
 800a178:	9808      	ldr	r0, [sp, #32]
 800a17a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a17e:	f000 fbab 	bl	800a8d8 <__locale_ctype_ptr_l>
 800a182:	4420      	add	r0, r4
 800a184:	7843      	ldrb	r3, [r0, #1]
 800a186:	f013 0308 	ands.w	r3, r3, #8
 800a18a:	d132      	bne.n	800a1f2 <_strtol_l.isra.0+0x8a>
 800a18c:	2c2d      	cmp	r4, #45	; 0x2d
 800a18e:	d132      	bne.n	800a1f6 <_strtol_l.isra.0+0x8e>
 800a190:	787c      	ldrb	r4, [r7, #1]
 800a192:	1cbd      	adds	r5, r7, #2
 800a194:	2201      	movs	r2, #1
 800a196:	2e00      	cmp	r6, #0
 800a198:	d05d      	beq.n	800a256 <_strtol_l.isra.0+0xee>
 800a19a:	2e10      	cmp	r6, #16
 800a19c:	d109      	bne.n	800a1b2 <_strtol_l.isra.0+0x4a>
 800a19e:	2c30      	cmp	r4, #48	; 0x30
 800a1a0:	d107      	bne.n	800a1b2 <_strtol_l.isra.0+0x4a>
 800a1a2:	782b      	ldrb	r3, [r5, #0]
 800a1a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a1a8:	2b58      	cmp	r3, #88	; 0x58
 800a1aa:	d14f      	bne.n	800a24c <_strtol_l.isra.0+0xe4>
 800a1ac:	786c      	ldrb	r4, [r5, #1]
 800a1ae:	2610      	movs	r6, #16
 800a1b0:	3502      	adds	r5, #2
 800a1b2:	2a00      	cmp	r2, #0
 800a1b4:	bf14      	ite	ne
 800a1b6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a1ba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a1be:	2700      	movs	r7, #0
 800a1c0:	fbb1 fcf6 	udiv	ip, r1, r6
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a1ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a1ce:	2b09      	cmp	r3, #9
 800a1d0:	d817      	bhi.n	800a202 <_strtol_l.isra.0+0x9a>
 800a1d2:	461c      	mov	r4, r3
 800a1d4:	42a6      	cmp	r6, r4
 800a1d6:	dd23      	ble.n	800a220 <_strtol_l.isra.0+0xb8>
 800a1d8:	1c7b      	adds	r3, r7, #1
 800a1da:	d007      	beq.n	800a1ec <_strtol_l.isra.0+0x84>
 800a1dc:	4584      	cmp	ip, r0
 800a1de:	d31c      	bcc.n	800a21a <_strtol_l.isra.0+0xb2>
 800a1e0:	d101      	bne.n	800a1e6 <_strtol_l.isra.0+0x7e>
 800a1e2:	45a6      	cmp	lr, r4
 800a1e4:	db19      	blt.n	800a21a <_strtol_l.isra.0+0xb2>
 800a1e6:	fb00 4006 	mla	r0, r0, r6, r4
 800a1ea:	2701      	movs	r7, #1
 800a1ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1f0:	e7eb      	b.n	800a1ca <_strtol_l.isra.0+0x62>
 800a1f2:	462f      	mov	r7, r5
 800a1f4:	e7bf      	b.n	800a176 <_strtol_l.isra.0+0xe>
 800a1f6:	2c2b      	cmp	r4, #43	; 0x2b
 800a1f8:	bf04      	itt	eq
 800a1fa:	1cbd      	addeq	r5, r7, #2
 800a1fc:	787c      	ldrbeq	r4, [r7, #1]
 800a1fe:	461a      	mov	r2, r3
 800a200:	e7c9      	b.n	800a196 <_strtol_l.isra.0+0x2e>
 800a202:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a206:	2b19      	cmp	r3, #25
 800a208:	d801      	bhi.n	800a20e <_strtol_l.isra.0+0xa6>
 800a20a:	3c37      	subs	r4, #55	; 0x37
 800a20c:	e7e2      	b.n	800a1d4 <_strtol_l.isra.0+0x6c>
 800a20e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a212:	2b19      	cmp	r3, #25
 800a214:	d804      	bhi.n	800a220 <_strtol_l.isra.0+0xb8>
 800a216:	3c57      	subs	r4, #87	; 0x57
 800a218:	e7dc      	b.n	800a1d4 <_strtol_l.isra.0+0x6c>
 800a21a:	f04f 37ff 	mov.w	r7, #4294967295
 800a21e:	e7e5      	b.n	800a1ec <_strtol_l.isra.0+0x84>
 800a220:	1c7b      	adds	r3, r7, #1
 800a222:	d108      	bne.n	800a236 <_strtol_l.isra.0+0xce>
 800a224:	2322      	movs	r3, #34	; 0x22
 800a226:	f8c8 3000 	str.w	r3, [r8]
 800a22a:	4608      	mov	r0, r1
 800a22c:	f1ba 0f00 	cmp.w	sl, #0
 800a230:	d107      	bne.n	800a242 <_strtol_l.isra.0+0xda>
 800a232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a236:	b102      	cbz	r2, 800a23a <_strtol_l.isra.0+0xd2>
 800a238:	4240      	negs	r0, r0
 800a23a:	f1ba 0f00 	cmp.w	sl, #0
 800a23e:	d0f8      	beq.n	800a232 <_strtol_l.isra.0+0xca>
 800a240:	b10f      	cbz	r7, 800a246 <_strtol_l.isra.0+0xde>
 800a242:	f105 39ff 	add.w	r9, r5, #4294967295
 800a246:	f8ca 9000 	str.w	r9, [sl]
 800a24a:	e7f2      	b.n	800a232 <_strtol_l.isra.0+0xca>
 800a24c:	2430      	movs	r4, #48	; 0x30
 800a24e:	2e00      	cmp	r6, #0
 800a250:	d1af      	bne.n	800a1b2 <_strtol_l.isra.0+0x4a>
 800a252:	2608      	movs	r6, #8
 800a254:	e7ad      	b.n	800a1b2 <_strtol_l.isra.0+0x4a>
 800a256:	2c30      	cmp	r4, #48	; 0x30
 800a258:	d0a3      	beq.n	800a1a2 <_strtol_l.isra.0+0x3a>
 800a25a:	260a      	movs	r6, #10
 800a25c:	e7a9      	b.n	800a1b2 <_strtol_l.isra.0+0x4a>
	...

0800a260 <strtol>:
 800a260:	4b08      	ldr	r3, [pc, #32]	; (800a284 <strtol+0x24>)
 800a262:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a264:	681c      	ldr	r4, [r3, #0]
 800a266:	4d08      	ldr	r5, [pc, #32]	; (800a288 <strtol+0x28>)
 800a268:	6a23      	ldr	r3, [r4, #32]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	bf08      	it	eq
 800a26e:	462b      	moveq	r3, r5
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	4613      	mov	r3, r2
 800a274:	460a      	mov	r2, r1
 800a276:	4601      	mov	r1, r0
 800a278:	4620      	mov	r0, r4
 800a27a:	f7ff ff75 	bl	800a168 <_strtol_l.isra.0>
 800a27e:	b003      	add	sp, #12
 800a280:	bd30      	pop	{r4, r5, pc}
 800a282:	bf00      	nop
 800a284:	20000010 	.word	0x20000010
 800a288:	20000074 	.word	0x20000074

0800a28c <rshift>:
 800a28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a28e:	6906      	ldr	r6, [r0, #16]
 800a290:	114b      	asrs	r3, r1, #5
 800a292:	429e      	cmp	r6, r3
 800a294:	f100 0414 	add.w	r4, r0, #20
 800a298:	dd30      	ble.n	800a2fc <rshift+0x70>
 800a29a:	f011 011f 	ands.w	r1, r1, #31
 800a29e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a2a2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a2a6:	d108      	bne.n	800a2ba <rshift+0x2e>
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	42b2      	cmp	r2, r6
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	d211      	bcs.n	800a2d4 <rshift+0x48>
 800a2b0:	f852 3b04 	ldr.w	r3, [r2], #4
 800a2b4:	f841 3b04 	str.w	r3, [r1], #4
 800a2b8:	e7f7      	b.n	800a2aa <rshift+0x1e>
 800a2ba:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a2be:	f1c1 0c20 	rsb	ip, r1, #32
 800a2c2:	40cd      	lsrs	r5, r1
 800a2c4:	3204      	adds	r2, #4
 800a2c6:	4623      	mov	r3, r4
 800a2c8:	42b2      	cmp	r2, r6
 800a2ca:	4617      	mov	r7, r2
 800a2cc:	d30c      	bcc.n	800a2e8 <rshift+0x5c>
 800a2ce:	601d      	str	r5, [r3, #0]
 800a2d0:	b105      	cbz	r5, 800a2d4 <rshift+0x48>
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	1b1a      	subs	r2, r3, r4
 800a2d6:	42a3      	cmp	r3, r4
 800a2d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a2dc:	bf08      	it	eq
 800a2de:	2300      	moveq	r3, #0
 800a2e0:	6102      	str	r2, [r0, #16]
 800a2e2:	bf08      	it	eq
 800a2e4:	6143      	streq	r3, [r0, #20]
 800a2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2e8:	683f      	ldr	r7, [r7, #0]
 800a2ea:	fa07 f70c 	lsl.w	r7, r7, ip
 800a2ee:	433d      	orrs	r5, r7
 800a2f0:	f843 5b04 	str.w	r5, [r3], #4
 800a2f4:	f852 5b04 	ldr.w	r5, [r2], #4
 800a2f8:	40cd      	lsrs	r5, r1
 800a2fa:	e7e5      	b.n	800a2c8 <rshift+0x3c>
 800a2fc:	4623      	mov	r3, r4
 800a2fe:	e7e9      	b.n	800a2d4 <rshift+0x48>

0800a300 <__hexdig_fun>:
 800a300:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a304:	2b09      	cmp	r3, #9
 800a306:	d802      	bhi.n	800a30e <__hexdig_fun+0xe>
 800a308:	3820      	subs	r0, #32
 800a30a:	b2c0      	uxtb	r0, r0
 800a30c:	4770      	bx	lr
 800a30e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a312:	2b05      	cmp	r3, #5
 800a314:	d801      	bhi.n	800a31a <__hexdig_fun+0x1a>
 800a316:	3847      	subs	r0, #71	; 0x47
 800a318:	e7f7      	b.n	800a30a <__hexdig_fun+0xa>
 800a31a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a31e:	2b05      	cmp	r3, #5
 800a320:	d801      	bhi.n	800a326 <__hexdig_fun+0x26>
 800a322:	3827      	subs	r0, #39	; 0x27
 800a324:	e7f1      	b.n	800a30a <__hexdig_fun+0xa>
 800a326:	2000      	movs	r0, #0
 800a328:	4770      	bx	lr

0800a32a <__gethex>:
 800a32a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32e:	b08b      	sub	sp, #44	; 0x2c
 800a330:	468a      	mov	sl, r1
 800a332:	9002      	str	r0, [sp, #8]
 800a334:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a336:	9306      	str	r3, [sp, #24]
 800a338:	4690      	mov	r8, r2
 800a33a:	f000 fad0 	bl	800a8de <__localeconv_l>
 800a33e:	6803      	ldr	r3, [r0, #0]
 800a340:	9303      	str	r3, [sp, #12]
 800a342:	4618      	mov	r0, r3
 800a344:	f7f5 ff76 	bl	8000234 <strlen>
 800a348:	9b03      	ldr	r3, [sp, #12]
 800a34a:	9001      	str	r0, [sp, #4]
 800a34c:	4403      	add	r3, r0
 800a34e:	f04f 0b00 	mov.w	fp, #0
 800a352:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a356:	9307      	str	r3, [sp, #28]
 800a358:	f8da 3000 	ldr.w	r3, [sl]
 800a35c:	3302      	adds	r3, #2
 800a35e:	461f      	mov	r7, r3
 800a360:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a364:	2830      	cmp	r0, #48	; 0x30
 800a366:	d06c      	beq.n	800a442 <__gethex+0x118>
 800a368:	f7ff ffca 	bl	800a300 <__hexdig_fun>
 800a36c:	4604      	mov	r4, r0
 800a36e:	2800      	cmp	r0, #0
 800a370:	d16a      	bne.n	800a448 <__gethex+0x11e>
 800a372:	9a01      	ldr	r2, [sp, #4]
 800a374:	9903      	ldr	r1, [sp, #12]
 800a376:	4638      	mov	r0, r7
 800a378:	f000 ff3c 	bl	800b1f4 <strncmp>
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d166      	bne.n	800a44e <__gethex+0x124>
 800a380:	9b01      	ldr	r3, [sp, #4]
 800a382:	5cf8      	ldrb	r0, [r7, r3]
 800a384:	18fe      	adds	r6, r7, r3
 800a386:	f7ff ffbb 	bl	800a300 <__hexdig_fun>
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d062      	beq.n	800a454 <__gethex+0x12a>
 800a38e:	4633      	mov	r3, r6
 800a390:	7818      	ldrb	r0, [r3, #0]
 800a392:	2830      	cmp	r0, #48	; 0x30
 800a394:	461f      	mov	r7, r3
 800a396:	f103 0301 	add.w	r3, r3, #1
 800a39a:	d0f9      	beq.n	800a390 <__gethex+0x66>
 800a39c:	f7ff ffb0 	bl	800a300 <__hexdig_fun>
 800a3a0:	fab0 f580 	clz	r5, r0
 800a3a4:	096d      	lsrs	r5, r5, #5
 800a3a6:	4634      	mov	r4, r6
 800a3a8:	f04f 0b01 	mov.w	fp, #1
 800a3ac:	463a      	mov	r2, r7
 800a3ae:	4616      	mov	r6, r2
 800a3b0:	3201      	adds	r2, #1
 800a3b2:	7830      	ldrb	r0, [r6, #0]
 800a3b4:	f7ff ffa4 	bl	800a300 <__hexdig_fun>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d1f8      	bne.n	800a3ae <__gethex+0x84>
 800a3bc:	9a01      	ldr	r2, [sp, #4]
 800a3be:	9903      	ldr	r1, [sp, #12]
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	f000 ff17 	bl	800b1f4 <strncmp>
 800a3c6:	b950      	cbnz	r0, 800a3de <__gethex+0xb4>
 800a3c8:	b954      	cbnz	r4, 800a3e0 <__gethex+0xb6>
 800a3ca:	9b01      	ldr	r3, [sp, #4]
 800a3cc:	18f4      	adds	r4, r6, r3
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	4616      	mov	r6, r2
 800a3d2:	3201      	adds	r2, #1
 800a3d4:	7830      	ldrb	r0, [r6, #0]
 800a3d6:	f7ff ff93 	bl	800a300 <__hexdig_fun>
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	d1f8      	bne.n	800a3d0 <__gethex+0xa6>
 800a3de:	b10c      	cbz	r4, 800a3e4 <__gethex+0xba>
 800a3e0:	1ba4      	subs	r4, r4, r6
 800a3e2:	00a4      	lsls	r4, r4, #2
 800a3e4:	7833      	ldrb	r3, [r6, #0]
 800a3e6:	2b50      	cmp	r3, #80	; 0x50
 800a3e8:	d001      	beq.n	800a3ee <__gethex+0xc4>
 800a3ea:	2b70      	cmp	r3, #112	; 0x70
 800a3ec:	d140      	bne.n	800a470 <__gethex+0x146>
 800a3ee:	7873      	ldrb	r3, [r6, #1]
 800a3f0:	2b2b      	cmp	r3, #43	; 0x2b
 800a3f2:	d031      	beq.n	800a458 <__gethex+0x12e>
 800a3f4:	2b2d      	cmp	r3, #45	; 0x2d
 800a3f6:	d033      	beq.n	800a460 <__gethex+0x136>
 800a3f8:	1c71      	adds	r1, r6, #1
 800a3fa:	f04f 0900 	mov.w	r9, #0
 800a3fe:	7808      	ldrb	r0, [r1, #0]
 800a400:	f7ff ff7e 	bl	800a300 <__hexdig_fun>
 800a404:	1e43      	subs	r3, r0, #1
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b18      	cmp	r3, #24
 800a40a:	d831      	bhi.n	800a470 <__gethex+0x146>
 800a40c:	f1a0 0210 	sub.w	r2, r0, #16
 800a410:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a414:	f7ff ff74 	bl	800a300 <__hexdig_fun>
 800a418:	1e43      	subs	r3, r0, #1
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b18      	cmp	r3, #24
 800a41e:	d922      	bls.n	800a466 <__gethex+0x13c>
 800a420:	f1b9 0f00 	cmp.w	r9, #0
 800a424:	d000      	beq.n	800a428 <__gethex+0xfe>
 800a426:	4252      	negs	r2, r2
 800a428:	4414      	add	r4, r2
 800a42a:	f8ca 1000 	str.w	r1, [sl]
 800a42e:	b30d      	cbz	r5, 800a474 <__gethex+0x14a>
 800a430:	f1bb 0f00 	cmp.w	fp, #0
 800a434:	bf0c      	ite	eq
 800a436:	2706      	moveq	r7, #6
 800a438:	2700      	movne	r7, #0
 800a43a:	4638      	mov	r0, r7
 800a43c:	b00b      	add	sp, #44	; 0x2c
 800a43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a442:	f10b 0b01 	add.w	fp, fp, #1
 800a446:	e78a      	b.n	800a35e <__gethex+0x34>
 800a448:	2500      	movs	r5, #0
 800a44a:	462c      	mov	r4, r5
 800a44c:	e7ae      	b.n	800a3ac <__gethex+0x82>
 800a44e:	463e      	mov	r6, r7
 800a450:	2501      	movs	r5, #1
 800a452:	e7c7      	b.n	800a3e4 <__gethex+0xba>
 800a454:	4604      	mov	r4, r0
 800a456:	e7fb      	b.n	800a450 <__gethex+0x126>
 800a458:	f04f 0900 	mov.w	r9, #0
 800a45c:	1cb1      	adds	r1, r6, #2
 800a45e:	e7ce      	b.n	800a3fe <__gethex+0xd4>
 800a460:	f04f 0901 	mov.w	r9, #1
 800a464:	e7fa      	b.n	800a45c <__gethex+0x132>
 800a466:	230a      	movs	r3, #10
 800a468:	fb03 0202 	mla	r2, r3, r2, r0
 800a46c:	3a10      	subs	r2, #16
 800a46e:	e7cf      	b.n	800a410 <__gethex+0xe6>
 800a470:	4631      	mov	r1, r6
 800a472:	e7da      	b.n	800a42a <__gethex+0x100>
 800a474:	1bf3      	subs	r3, r6, r7
 800a476:	3b01      	subs	r3, #1
 800a478:	4629      	mov	r1, r5
 800a47a:	2b07      	cmp	r3, #7
 800a47c:	dc49      	bgt.n	800a512 <__gethex+0x1e8>
 800a47e:	9802      	ldr	r0, [sp, #8]
 800a480:	f000 fa41 	bl	800a906 <_Balloc>
 800a484:	9b01      	ldr	r3, [sp, #4]
 800a486:	f100 0914 	add.w	r9, r0, #20
 800a48a:	f04f 0b00 	mov.w	fp, #0
 800a48e:	f1c3 0301 	rsb	r3, r3, #1
 800a492:	4605      	mov	r5, r0
 800a494:	f8cd 9010 	str.w	r9, [sp, #16]
 800a498:	46da      	mov	sl, fp
 800a49a:	9308      	str	r3, [sp, #32]
 800a49c:	42b7      	cmp	r7, r6
 800a49e:	d33b      	bcc.n	800a518 <__gethex+0x1ee>
 800a4a0:	9804      	ldr	r0, [sp, #16]
 800a4a2:	f840 ab04 	str.w	sl, [r0], #4
 800a4a6:	eba0 0009 	sub.w	r0, r0, r9
 800a4aa:	1080      	asrs	r0, r0, #2
 800a4ac:	6128      	str	r0, [r5, #16]
 800a4ae:	0147      	lsls	r7, r0, #5
 800a4b0:	4650      	mov	r0, sl
 800a4b2:	f000 faec 	bl	800aa8e <__hi0bits>
 800a4b6:	f8d8 6000 	ldr.w	r6, [r8]
 800a4ba:	1a3f      	subs	r7, r7, r0
 800a4bc:	42b7      	cmp	r7, r6
 800a4be:	dd64      	ble.n	800a58a <__gethex+0x260>
 800a4c0:	1bbf      	subs	r7, r7, r6
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f000 fdfb 	bl	800b0c0 <__any_on>
 800a4ca:	4682      	mov	sl, r0
 800a4cc:	b178      	cbz	r0, 800a4ee <__gethex+0x1c4>
 800a4ce:	1e7b      	subs	r3, r7, #1
 800a4d0:	1159      	asrs	r1, r3, #5
 800a4d2:	f003 021f 	and.w	r2, r3, #31
 800a4d6:	f04f 0a01 	mov.w	sl, #1
 800a4da:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a4de:	fa0a f202 	lsl.w	r2, sl, r2
 800a4e2:	420a      	tst	r2, r1
 800a4e4:	d003      	beq.n	800a4ee <__gethex+0x1c4>
 800a4e6:	4553      	cmp	r3, sl
 800a4e8:	dc46      	bgt.n	800a578 <__gethex+0x24e>
 800a4ea:	f04f 0a02 	mov.w	sl, #2
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	f7ff fecb 	bl	800a28c <rshift>
 800a4f6:	443c      	add	r4, r7
 800a4f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4fc:	42a3      	cmp	r3, r4
 800a4fe:	da52      	bge.n	800a5a6 <__gethex+0x27c>
 800a500:	4629      	mov	r1, r5
 800a502:	9802      	ldr	r0, [sp, #8]
 800a504:	f000 fa33 	bl	800a96e <_Bfree>
 800a508:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a50a:	2300      	movs	r3, #0
 800a50c:	6013      	str	r3, [r2, #0]
 800a50e:	27a3      	movs	r7, #163	; 0xa3
 800a510:	e793      	b.n	800a43a <__gethex+0x110>
 800a512:	3101      	adds	r1, #1
 800a514:	105b      	asrs	r3, r3, #1
 800a516:	e7b0      	b.n	800a47a <__gethex+0x150>
 800a518:	1e73      	subs	r3, r6, #1
 800a51a:	9305      	str	r3, [sp, #20]
 800a51c:	9a07      	ldr	r2, [sp, #28]
 800a51e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a522:	4293      	cmp	r3, r2
 800a524:	d018      	beq.n	800a558 <__gethex+0x22e>
 800a526:	f1bb 0f20 	cmp.w	fp, #32
 800a52a:	d107      	bne.n	800a53c <__gethex+0x212>
 800a52c:	9b04      	ldr	r3, [sp, #16]
 800a52e:	f8c3 a000 	str.w	sl, [r3]
 800a532:	3304      	adds	r3, #4
 800a534:	f04f 0a00 	mov.w	sl, #0
 800a538:	9304      	str	r3, [sp, #16]
 800a53a:	46d3      	mov	fp, sl
 800a53c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a540:	f7ff fede 	bl	800a300 <__hexdig_fun>
 800a544:	f000 000f 	and.w	r0, r0, #15
 800a548:	fa00 f00b 	lsl.w	r0, r0, fp
 800a54c:	ea4a 0a00 	orr.w	sl, sl, r0
 800a550:	f10b 0b04 	add.w	fp, fp, #4
 800a554:	9b05      	ldr	r3, [sp, #20]
 800a556:	e00d      	b.n	800a574 <__gethex+0x24a>
 800a558:	9b05      	ldr	r3, [sp, #20]
 800a55a:	9a08      	ldr	r2, [sp, #32]
 800a55c:	4413      	add	r3, r2
 800a55e:	42bb      	cmp	r3, r7
 800a560:	d3e1      	bcc.n	800a526 <__gethex+0x1fc>
 800a562:	4618      	mov	r0, r3
 800a564:	9a01      	ldr	r2, [sp, #4]
 800a566:	9903      	ldr	r1, [sp, #12]
 800a568:	9309      	str	r3, [sp, #36]	; 0x24
 800a56a:	f000 fe43 	bl	800b1f4 <strncmp>
 800a56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a570:	2800      	cmp	r0, #0
 800a572:	d1d8      	bne.n	800a526 <__gethex+0x1fc>
 800a574:	461e      	mov	r6, r3
 800a576:	e791      	b.n	800a49c <__gethex+0x172>
 800a578:	1eb9      	subs	r1, r7, #2
 800a57a:	4628      	mov	r0, r5
 800a57c:	f000 fda0 	bl	800b0c0 <__any_on>
 800a580:	2800      	cmp	r0, #0
 800a582:	d0b2      	beq.n	800a4ea <__gethex+0x1c0>
 800a584:	f04f 0a03 	mov.w	sl, #3
 800a588:	e7b1      	b.n	800a4ee <__gethex+0x1c4>
 800a58a:	da09      	bge.n	800a5a0 <__gethex+0x276>
 800a58c:	1bf7      	subs	r7, r6, r7
 800a58e:	4629      	mov	r1, r5
 800a590:	463a      	mov	r2, r7
 800a592:	9802      	ldr	r0, [sp, #8]
 800a594:	f000 fbb6 	bl	800ad04 <__lshift>
 800a598:	1be4      	subs	r4, r4, r7
 800a59a:	4605      	mov	r5, r0
 800a59c:	f100 0914 	add.w	r9, r0, #20
 800a5a0:	f04f 0a00 	mov.w	sl, #0
 800a5a4:	e7a8      	b.n	800a4f8 <__gethex+0x1ce>
 800a5a6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a5aa:	42a0      	cmp	r0, r4
 800a5ac:	dd6a      	ble.n	800a684 <__gethex+0x35a>
 800a5ae:	1b04      	subs	r4, r0, r4
 800a5b0:	42a6      	cmp	r6, r4
 800a5b2:	dc2e      	bgt.n	800a612 <__gethex+0x2e8>
 800a5b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d022      	beq.n	800a602 <__gethex+0x2d8>
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d024      	beq.n	800a60a <__gethex+0x2e0>
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d115      	bne.n	800a5f0 <__gethex+0x2c6>
 800a5c4:	42a6      	cmp	r6, r4
 800a5c6:	d113      	bne.n	800a5f0 <__gethex+0x2c6>
 800a5c8:	2e01      	cmp	r6, #1
 800a5ca:	dc0b      	bgt.n	800a5e4 <__gethex+0x2ba>
 800a5cc:	9a06      	ldr	r2, [sp, #24]
 800a5ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a5d2:	6013      	str	r3, [r2, #0]
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	612b      	str	r3, [r5, #16]
 800a5d8:	f8c9 3000 	str.w	r3, [r9]
 800a5dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5de:	2762      	movs	r7, #98	; 0x62
 800a5e0:	601d      	str	r5, [r3, #0]
 800a5e2:	e72a      	b.n	800a43a <__gethex+0x110>
 800a5e4:	1e71      	subs	r1, r6, #1
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f000 fd6a 	bl	800b0c0 <__any_on>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d1ed      	bne.n	800a5cc <__gethex+0x2a2>
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	9802      	ldr	r0, [sp, #8]
 800a5f4:	f000 f9bb 	bl	800a96e <_Bfree>
 800a5f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	6013      	str	r3, [r2, #0]
 800a5fe:	2750      	movs	r7, #80	; 0x50
 800a600:	e71b      	b.n	800a43a <__gethex+0x110>
 800a602:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a604:	2b00      	cmp	r3, #0
 800a606:	d0e1      	beq.n	800a5cc <__gethex+0x2a2>
 800a608:	e7f2      	b.n	800a5f0 <__gethex+0x2c6>
 800a60a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1dd      	bne.n	800a5cc <__gethex+0x2a2>
 800a610:	e7ee      	b.n	800a5f0 <__gethex+0x2c6>
 800a612:	1e67      	subs	r7, r4, #1
 800a614:	f1ba 0f00 	cmp.w	sl, #0
 800a618:	d131      	bne.n	800a67e <__gethex+0x354>
 800a61a:	b127      	cbz	r7, 800a626 <__gethex+0x2fc>
 800a61c:	4639      	mov	r1, r7
 800a61e:	4628      	mov	r0, r5
 800a620:	f000 fd4e 	bl	800b0c0 <__any_on>
 800a624:	4682      	mov	sl, r0
 800a626:	117a      	asrs	r2, r7, #5
 800a628:	2301      	movs	r3, #1
 800a62a:	f007 071f 	and.w	r7, r7, #31
 800a62e:	fa03 f707 	lsl.w	r7, r3, r7
 800a632:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a636:	4621      	mov	r1, r4
 800a638:	421f      	tst	r7, r3
 800a63a:	4628      	mov	r0, r5
 800a63c:	bf18      	it	ne
 800a63e:	f04a 0a02 	orrne.w	sl, sl, #2
 800a642:	1b36      	subs	r6, r6, r4
 800a644:	f7ff fe22 	bl	800a28c <rshift>
 800a648:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a64c:	2702      	movs	r7, #2
 800a64e:	f1ba 0f00 	cmp.w	sl, #0
 800a652:	d048      	beq.n	800a6e6 <__gethex+0x3bc>
 800a654:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d015      	beq.n	800a688 <__gethex+0x35e>
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d017      	beq.n	800a690 <__gethex+0x366>
 800a660:	2b01      	cmp	r3, #1
 800a662:	d109      	bne.n	800a678 <__gethex+0x34e>
 800a664:	f01a 0f02 	tst.w	sl, #2
 800a668:	d006      	beq.n	800a678 <__gethex+0x34e>
 800a66a:	f8d9 3000 	ldr.w	r3, [r9]
 800a66e:	ea4a 0a03 	orr.w	sl, sl, r3
 800a672:	f01a 0f01 	tst.w	sl, #1
 800a676:	d10e      	bne.n	800a696 <__gethex+0x36c>
 800a678:	f047 0710 	orr.w	r7, r7, #16
 800a67c:	e033      	b.n	800a6e6 <__gethex+0x3bc>
 800a67e:	f04f 0a01 	mov.w	sl, #1
 800a682:	e7d0      	b.n	800a626 <__gethex+0x2fc>
 800a684:	2701      	movs	r7, #1
 800a686:	e7e2      	b.n	800a64e <__gethex+0x324>
 800a688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a68a:	f1c3 0301 	rsb	r3, r3, #1
 800a68e:	9315      	str	r3, [sp, #84]	; 0x54
 800a690:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a692:	2b00      	cmp	r3, #0
 800a694:	d0f0      	beq.n	800a678 <__gethex+0x34e>
 800a696:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a69a:	f105 0314 	add.w	r3, r5, #20
 800a69e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a6a2:	eb03 010a 	add.w	r1, r3, sl
 800a6a6:	f04f 0c00 	mov.w	ip, #0
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a6b4:	d01c      	beq.n	800a6f0 <__gethex+0x3c6>
 800a6b6:	3201      	adds	r2, #1
 800a6b8:	6002      	str	r2, [r0, #0]
 800a6ba:	2f02      	cmp	r7, #2
 800a6bc:	f105 0314 	add.w	r3, r5, #20
 800a6c0:	d138      	bne.n	800a734 <__gethex+0x40a>
 800a6c2:	f8d8 2000 	ldr.w	r2, [r8]
 800a6c6:	3a01      	subs	r2, #1
 800a6c8:	42b2      	cmp	r2, r6
 800a6ca:	d10a      	bne.n	800a6e2 <__gethex+0x3b8>
 800a6cc:	1171      	asrs	r1, r6, #5
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f006 061f 	and.w	r6, r6, #31
 800a6d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a6d8:	fa02 f606 	lsl.w	r6, r2, r6
 800a6dc:	421e      	tst	r6, r3
 800a6de:	bf18      	it	ne
 800a6e0:	4617      	movne	r7, r2
 800a6e2:	f047 0720 	orr.w	r7, r7, #32
 800a6e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6e8:	601d      	str	r5, [r3, #0]
 800a6ea:	9b06      	ldr	r3, [sp, #24]
 800a6ec:	601c      	str	r4, [r3, #0]
 800a6ee:	e6a4      	b.n	800a43a <__gethex+0x110>
 800a6f0:	4299      	cmp	r1, r3
 800a6f2:	f843 cc04 	str.w	ip, [r3, #-4]
 800a6f6:	d8d8      	bhi.n	800a6aa <__gethex+0x380>
 800a6f8:	68ab      	ldr	r3, [r5, #8]
 800a6fa:	4599      	cmp	r9, r3
 800a6fc:	db12      	blt.n	800a724 <__gethex+0x3fa>
 800a6fe:	6869      	ldr	r1, [r5, #4]
 800a700:	9802      	ldr	r0, [sp, #8]
 800a702:	3101      	adds	r1, #1
 800a704:	f000 f8ff 	bl	800a906 <_Balloc>
 800a708:	692a      	ldr	r2, [r5, #16]
 800a70a:	3202      	adds	r2, #2
 800a70c:	f105 010c 	add.w	r1, r5, #12
 800a710:	4683      	mov	fp, r0
 800a712:	0092      	lsls	r2, r2, #2
 800a714:	300c      	adds	r0, #12
 800a716:	f7fe fecb 	bl	80094b0 <memcpy>
 800a71a:	4629      	mov	r1, r5
 800a71c:	9802      	ldr	r0, [sp, #8]
 800a71e:	f000 f926 	bl	800a96e <_Bfree>
 800a722:	465d      	mov	r5, fp
 800a724:	692b      	ldr	r3, [r5, #16]
 800a726:	1c5a      	adds	r2, r3, #1
 800a728:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a72c:	612a      	str	r2, [r5, #16]
 800a72e:	2201      	movs	r2, #1
 800a730:	615a      	str	r2, [r3, #20]
 800a732:	e7c2      	b.n	800a6ba <__gethex+0x390>
 800a734:	692a      	ldr	r2, [r5, #16]
 800a736:	454a      	cmp	r2, r9
 800a738:	dd0b      	ble.n	800a752 <__gethex+0x428>
 800a73a:	2101      	movs	r1, #1
 800a73c:	4628      	mov	r0, r5
 800a73e:	f7ff fda5 	bl	800a28c <rshift>
 800a742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a746:	3401      	adds	r4, #1
 800a748:	42a3      	cmp	r3, r4
 800a74a:	f6ff aed9 	blt.w	800a500 <__gethex+0x1d6>
 800a74e:	2701      	movs	r7, #1
 800a750:	e7c7      	b.n	800a6e2 <__gethex+0x3b8>
 800a752:	f016 061f 	ands.w	r6, r6, #31
 800a756:	d0fa      	beq.n	800a74e <__gethex+0x424>
 800a758:	449a      	add	sl, r3
 800a75a:	f1c6 0620 	rsb	r6, r6, #32
 800a75e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a762:	f000 f994 	bl	800aa8e <__hi0bits>
 800a766:	42b0      	cmp	r0, r6
 800a768:	dbe7      	blt.n	800a73a <__gethex+0x410>
 800a76a:	e7f0      	b.n	800a74e <__gethex+0x424>

0800a76c <L_shift>:
 800a76c:	f1c2 0208 	rsb	r2, r2, #8
 800a770:	0092      	lsls	r2, r2, #2
 800a772:	b570      	push	{r4, r5, r6, lr}
 800a774:	f1c2 0620 	rsb	r6, r2, #32
 800a778:	6843      	ldr	r3, [r0, #4]
 800a77a:	6804      	ldr	r4, [r0, #0]
 800a77c:	fa03 f506 	lsl.w	r5, r3, r6
 800a780:	432c      	orrs	r4, r5
 800a782:	40d3      	lsrs	r3, r2
 800a784:	6004      	str	r4, [r0, #0]
 800a786:	f840 3f04 	str.w	r3, [r0, #4]!
 800a78a:	4288      	cmp	r0, r1
 800a78c:	d3f4      	bcc.n	800a778 <L_shift+0xc>
 800a78e:	bd70      	pop	{r4, r5, r6, pc}

0800a790 <__match>:
 800a790:	b530      	push	{r4, r5, lr}
 800a792:	6803      	ldr	r3, [r0, #0]
 800a794:	3301      	adds	r3, #1
 800a796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a79a:	b914      	cbnz	r4, 800a7a2 <__match+0x12>
 800a79c:	6003      	str	r3, [r0, #0]
 800a79e:	2001      	movs	r0, #1
 800a7a0:	bd30      	pop	{r4, r5, pc}
 800a7a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a7aa:	2d19      	cmp	r5, #25
 800a7ac:	bf98      	it	ls
 800a7ae:	3220      	addls	r2, #32
 800a7b0:	42a2      	cmp	r2, r4
 800a7b2:	d0f0      	beq.n	800a796 <__match+0x6>
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	e7f3      	b.n	800a7a0 <__match+0x10>

0800a7b8 <__hexnan>:
 800a7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7bc:	680b      	ldr	r3, [r1, #0]
 800a7be:	6801      	ldr	r1, [r0, #0]
 800a7c0:	115f      	asrs	r7, r3, #5
 800a7c2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a7c6:	f013 031f 	ands.w	r3, r3, #31
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	bf18      	it	ne
 800a7ce:	3704      	addne	r7, #4
 800a7d0:	2500      	movs	r5, #0
 800a7d2:	1f3e      	subs	r6, r7, #4
 800a7d4:	4682      	mov	sl, r0
 800a7d6:	4690      	mov	r8, r2
 800a7d8:	9301      	str	r3, [sp, #4]
 800a7da:	f847 5c04 	str.w	r5, [r7, #-4]
 800a7de:	46b1      	mov	r9, r6
 800a7e0:	4634      	mov	r4, r6
 800a7e2:	9502      	str	r5, [sp, #8]
 800a7e4:	46ab      	mov	fp, r5
 800a7e6:	784a      	ldrb	r2, [r1, #1]
 800a7e8:	1c4b      	adds	r3, r1, #1
 800a7ea:	9303      	str	r3, [sp, #12]
 800a7ec:	b342      	cbz	r2, 800a840 <__hexnan+0x88>
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	9105      	str	r1, [sp, #20]
 800a7f2:	9204      	str	r2, [sp, #16]
 800a7f4:	f7ff fd84 	bl	800a300 <__hexdig_fun>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d143      	bne.n	800a884 <__hexnan+0xcc>
 800a7fc:	9a04      	ldr	r2, [sp, #16]
 800a7fe:	9905      	ldr	r1, [sp, #20]
 800a800:	2a20      	cmp	r2, #32
 800a802:	d818      	bhi.n	800a836 <__hexnan+0x7e>
 800a804:	9b02      	ldr	r3, [sp, #8]
 800a806:	459b      	cmp	fp, r3
 800a808:	dd13      	ble.n	800a832 <__hexnan+0x7a>
 800a80a:	454c      	cmp	r4, r9
 800a80c:	d206      	bcs.n	800a81c <__hexnan+0x64>
 800a80e:	2d07      	cmp	r5, #7
 800a810:	dc04      	bgt.n	800a81c <__hexnan+0x64>
 800a812:	462a      	mov	r2, r5
 800a814:	4649      	mov	r1, r9
 800a816:	4620      	mov	r0, r4
 800a818:	f7ff ffa8 	bl	800a76c <L_shift>
 800a81c:	4544      	cmp	r4, r8
 800a81e:	d944      	bls.n	800a8aa <__hexnan+0xf2>
 800a820:	2300      	movs	r3, #0
 800a822:	f1a4 0904 	sub.w	r9, r4, #4
 800a826:	f844 3c04 	str.w	r3, [r4, #-4]
 800a82a:	f8cd b008 	str.w	fp, [sp, #8]
 800a82e:	464c      	mov	r4, r9
 800a830:	461d      	mov	r5, r3
 800a832:	9903      	ldr	r1, [sp, #12]
 800a834:	e7d7      	b.n	800a7e6 <__hexnan+0x2e>
 800a836:	2a29      	cmp	r2, #41	; 0x29
 800a838:	d14a      	bne.n	800a8d0 <__hexnan+0x118>
 800a83a:	3102      	adds	r1, #2
 800a83c:	f8ca 1000 	str.w	r1, [sl]
 800a840:	f1bb 0f00 	cmp.w	fp, #0
 800a844:	d044      	beq.n	800a8d0 <__hexnan+0x118>
 800a846:	454c      	cmp	r4, r9
 800a848:	d206      	bcs.n	800a858 <__hexnan+0xa0>
 800a84a:	2d07      	cmp	r5, #7
 800a84c:	dc04      	bgt.n	800a858 <__hexnan+0xa0>
 800a84e:	462a      	mov	r2, r5
 800a850:	4649      	mov	r1, r9
 800a852:	4620      	mov	r0, r4
 800a854:	f7ff ff8a 	bl	800a76c <L_shift>
 800a858:	4544      	cmp	r4, r8
 800a85a:	d928      	bls.n	800a8ae <__hexnan+0xf6>
 800a85c:	4643      	mov	r3, r8
 800a85e:	f854 2b04 	ldr.w	r2, [r4], #4
 800a862:	f843 2b04 	str.w	r2, [r3], #4
 800a866:	42a6      	cmp	r6, r4
 800a868:	d2f9      	bcs.n	800a85e <__hexnan+0xa6>
 800a86a:	2200      	movs	r2, #0
 800a86c:	f843 2b04 	str.w	r2, [r3], #4
 800a870:	429e      	cmp	r6, r3
 800a872:	d2fb      	bcs.n	800a86c <__hexnan+0xb4>
 800a874:	6833      	ldr	r3, [r6, #0]
 800a876:	b91b      	cbnz	r3, 800a880 <__hexnan+0xc8>
 800a878:	4546      	cmp	r6, r8
 800a87a:	d127      	bne.n	800a8cc <__hexnan+0x114>
 800a87c:	2301      	movs	r3, #1
 800a87e:	6033      	str	r3, [r6, #0]
 800a880:	2005      	movs	r0, #5
 800a882:	e026      	b.n	800a8d2 <__hexnan+0x11a>
 800a884:	3501      	adds	r5, #1
 800a886:	2d08      	cmp	r5, #8
 800a888:	f10b 0b01 	add.w	fp, fp, #1
 800a88c:	dd06      	ble.n	800a89c <__hexnan+0xe4>
 800a88e:	4544      	cmp	r4, r8
 800a890:	d9cf      	bls.n	800a832 <__hexnan+0x7a>
 800a892:	2300      	movs	r3, #0
 800a894:	f844 3c04 	str.w	r3, [r4, #-4]
 800a898:	2501      	movs	r5, #1
 800a89a:	3c04      	subs	r4, #4
 800a89c:	6822      	ldr	r2, [r4, #0]
 800a89e:	f000 000f 	and.w	r0, r0, #15
 800a8a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a8a6:	6020      	str	r0, [r4, #0]
 800a8a8:	e7c3      	b.n	800a832 <__hexnan+0x7a>
 800a8aa:	2508      	movs	r5, #8
 800a8ac:	e7c1      	b.n	800a832 <__hexnan+0x7a>
 800a8ae:	9b01      	ldr	r3, [sp, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d0df      	beq.n	800a874 <__hexnan+0xbc>
 800a8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b8:	f1c3 0320 	rsb	r3, r3, #32
 800a8bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a8c4:	401a      	ands	r2, r3
 800a8c6:	f847 2c04 	str.w	r2, [r7, #-4]
 800a8ca:	e7d3      	b.n	800a874 <__hexnan+0xbc>
 800a8cc:	3e04      	subs	r6, #4
 800a8ce:	e7d1      	b.n	800a874 <__hexnan+0xbc>
 800a8d0:	2004      	movs	r0, #4
 800a8d2:	b007      	add	sp, #28
 800a8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8d8 <__locale_ctype_ptr_l>:
 800a8d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a8dc:	4770      	bx	lr

0800a8de <__localeconv_l>:
 800a8de:	30f0      	adds	r0, #240	; 0xf0
 800a8e0:	4770      	bx	lr

0800a8e2 <__ascii_mbtowc>:
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	b901      	cbnz	r1, 800a8e8 <__ascii_mbtowc+0x6>
 800a8e6:	a901      	add	r1, sp, #4
 800a8e8:	b142      	cbz	r2, 800a8fc <__ascii_mbtowc+0x1a>
 800a8ea:	b14b      	cbz	r3, 800a900 <__ascii_mbtowc+0x1e>
 800a8ec:	7813      	ldrb	r3, [r2, #0]
 800a8ee:	600b      	str	r3, [r1, #0]
 800a8f0:	7812      	ldrb	r2, [r2, #0]
 800a8f2:	1c10      	adds	r0, r2, #0
 800a8f4:	bf18      	it	ne
 800a8f6:	2001      	movne	r0, #1
 800a8f8:	b002      	add	sp, #8
 800a8fa:	4770      	bx	lr
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	e7fb      	b.n	800a8f8 <__ascii_mbtowc+0x16>
 800a900:	f06f 0001 	mvn.w	r0, #1
 800a904:	e7f8      	b.n	800a8f8 <__ascii_mbtowc+0x16>

0800a906 <_Balloc>:
 800a906:	b570      	push	{r4, r5, r6, lr}
 800a908:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a90a:	4604      	mov	r4, r0
 800a90c:	460e      	mov	r6, r1
 800a90e:	b93d      	cbnz	r5, 800a920 <_Balloc+0x1a>
 800a910:	2010      	movs	r0, #16
 800a912:	f000 fc8f 	bl	800b234 <malloc>
 800a916:	6260      	str	r0, [r4, #36]	; 0x24
 800a918:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a91c:	6005      	str	r5, [r0, #0]
 800a91e:	60c5      	str	r5, [r0, #12]
 800a920:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a922:	68eb      	ldr	r3, [r5, #12]
 800a924:	b183      	cbz	r3, 800a948 <_Balloc+0x42>
 800a926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a92e:	b9b8      	cbnz	r0, 800a960 <_Balloc+0x5a>
 800a930:	2101      	movs	r1, #1
 800a932:	fa01 f506 	lsl.w	r5, r1, r6
 800a936:	1d6a      	adds	r2, r5, #5
 800a938:	0092      	lsls	r2, r2, #2
 800a93a:	4620      	mov	r0, r4
 800a93c:	f000 fbe1 	bl	800b102 <_calloc_r>
 800a940:	b160      	cbz	r0, 800a95c <_Balloc+0x56>
 800a942:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a946:	e00e      	b.n	800a966 <_Balloc+0x60>
 800a948:	2221      	movs	r2, #33	; 0x21
 800a94a:	2104      	movs	r1, #4
 800a94c:	4620      	mov	r0, r4
 800a94e:	f000 fbd8 	bl	800b102 <_calloc_r>
 800a952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a954:	60e8      	str	r0, [r5, #12]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1e4      	bne.n	800a926 <_Balloc+0x20>
 800a95c:	2000      	movs	r0, #0
 800a95e:	bd70      	pop	{r4, r5, r6, pc}
 800a960:	6802      	ldr	r2, [r0, #0]
 800a962:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a966:	2300      	movs	r3, #0
 800a968:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a96c:	e7f7      	b.n	800a95e <_Balloc+0x58>

0800a96e <_Bfree>:
 800a96e:	b570      	push	{r4, r5, r6, lr}
 800a970:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a972:	4606      	mov	r6, r0
 800a974:	460d      	mov	r5, r1
 800a976:	b93c      	cbnz	r4, 800a988 <_Bfree+0x1a>
 800a978:	2010      	movs	r0, #16
 800a97a:	f000 fc5b 	bl	800b234 <malloc>
 800a97e:	6270      	str	r0, [r6, #36]	; 0x24
 800a980:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a984:	6004      	str	r4, [r0, #0]
 800a986:	60c4      	str	r4, [r0, #12]
 800a988:	b13d      	cbz	r5, 800a99a <_Bfree+0x2c>
 800a98a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a98c:	686a      	ldr	r2, [r5, #4]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a994:	6029      	str	r1, [r5, #0]
 800a996:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a99a:	bd70      	pop	{r4, r5, r6, pc}

0800a99c <__multadd>:
 800a99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a0:	690d      	ldr	r5, [r1, #16]
 800a9a2:	461f      	mov	r7, r3
 800a9a4:	4606      	mov	r6, r0
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	f101 0c14 	add.w	ip, r1, #20
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	f8dc 0000 	ldr.w	r0, [ip]
 800a9b2:	b281      	uxth	r1, r0
 800a9b4:	fb02 7101 	mla	r1, r2, r1, r7
 800a9b8:	0c0f      	lsrs	r7, r1, #16
 800a9ba:	0c00      	lsrs	r0, r0, #16
 800a9bc:	fb02 7000 	mla	r0, r2, r0, r7
 800a9c0:	b289      	uxth	r1, r1
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a9c8:	429d      	cmp	r5, r3
 800a9ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a9ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a9d2:	dcec      	bgt.n	800a9ae <__multadd+0x12>
 800a9d4:	b1d7      	cbz	r7, 800aa0c <__multadd+0x70>
 800a9d6:	68a3      	ldr	r3, [r4, #8]
 800a9d8:	42ab      	cmp	r3, r5
 800a9da:	dc12      	bgt.n	800aa02 <__multadd+0x66>
 800a9dc:	6861      	ldr	r1, [r4, #4]
 800a9de:	4630      	mov	r0, r6
 800a9e0:	3101      	adds	r1, #1
 800a9e2:	f7ff ff90 	bl	800a906 <_Balloc>
 800a9e6:	6922      	ldr	r2, [r4, #16]
 800a9e8:	3202      	adds	r2, #2
 800a9ea:	f104 010c 	add.w	r1, r4, #12
 800a9ee:	4680      	mov	r8, r0
 800a9f0:	0092      	lsls	r2, r2, #2
 800a9f2:	300c      	adds	r0, #12
 800a9f4:	f7fe fd5c 	bl	80094b0 <memcpy>
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f7ff ffb7 	bl	800a96e <_Bfree>
 800aa00:	4644      	mov	r4, r8
 800aa02:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa06:	3501      	adds	r5, #1
 800aa08:	615f      	str	r7, [r3, #20]
 800aa0a:	6125      	str	r5, [r4, #16]
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aa12 <__s2b>:
 800aa12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa16:	460c      	mov	r4, r1
 800aa18:	4615      	mov	r5, r2
 800aa1a:	461f      	mov	r7, r3
 800aa1c:	2209      	movs	r2, #9
 800aa1e:	3308      	adds	r3, #8
 800aa20:	4606      	mov	r6, r0
 800aa22:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa26:	2100      	movs	r1, #0
 800aa28:	2201      	movs	r2, #1
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	db20      	blt.n	800aa70 <__s2b+0x5e>
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f7ff ff69 	bl	800a906 <_Balloc>
 800aa34:	9b08      	ldr	r3, [sp, #32]
 800aa36:	6143      	str	r3, [r0, #20]
 800aa38:	2d09      	cmp	r5, #9
 800aa3a:	f04f 0301 	mov.w	r3, #1
 800aa3e:	6103      	str	r3, [r0, #16]
 800aa40:	dd19      	ble.n	800aa76 <__s2b+0x64>
 800aa42:	f104 0809 	add.w	r8, r4, #9
 800aa46:	46c1      	mov	r9, r8
 800aa48:	442c      	add	r4, r5
 800aa4a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800aa4e:	4601      	mov	r1, r0
 800aa50:	3b30      	subs	r3, #48	; 0x30
 800aa52:	220a      	movs	r2, #10
 800aa54:	4630      	mov	r0, r6
 800aa56:	f7ff ffa1 	bl	800a99c <__multadd>
 800aa5a:	45a1      	cmp	r9, r4
 800aa5c:	d1f5      	bne.n	800aa4a <__s2b+0x38>
 800aa5e:	eb08 0405 	add.w	r4, r8, r5
 800aa62:	3c08      	subs	r4, #8
 800aa64:	1b2d      	subs	r5, r5, r4
 800aa66:	1963      	adds	r3, r4, r5
 800aa68:	42bb      	cmp	r3, r7
 800aa6a:	db07      	blt.n	800aa7c <__s2b+0x6a>
 800aa6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa70:	0052      	lsls	r2, r2, #1
 800aa72:	3101      	adds	r1, #1
 800aa74:	e7d9      	b.n	800aa2a <__s2b+0x18>
 800aa76:	340a      	adds	r4, #10
 800aa78:	2509      	movs	r5, #9
 800aa7a:	e7f3      	b.n	800aa64 <__s2b+0x52>
 800aa7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa80:	4601      	mov	r1, r0
 800aa82:	3b30      	subs	r3, #48	; 0x30
 800aa84:	220a      	movs	r2, #10
 800aa86:	4630      	mov	r0, r6
 800aa88:	f7ff ff88 	bl	800a99c <__multadd>
 800aa8c:	e7eb      	b.n	800aa66 <__s2b+0x54>

0800aa8e <__hi0bits>:
 800aa8e:	0c02      	lsrs	r2, r0, #16
 800aa90:	0412      	lsls	r2, r2, #16
 800aa92:	4603      	mov	r3, r0
 800aa94:	b9b2      	cbnz	r2, 800aac4 <__hi0bits+0x36>
 800aa96:	0403      	lsls	r3, r0, #16
 800aa98:	2010      	movs	r0, #16
 800aa9a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aa9e:	bf04      	itt	eq
 800aaa0:	021b      	lsleq	r3, r3, #8
 800aaa2:	3008      	addeq	r0, #8
 800aaa4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aaa8:	bf04      	itt	eq
 800aaaa:	011b      	lsleq	r3, r3, #4
 800aaac:	3004      	addeq	r0, #4
 800aaae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aab2:	bf04      	itt	eq
 800aab4:	009b      	lsleq	r3, r3, #2
 800aab6:	3002      	addeq	r0, #2
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	db06      	blt.n	800aaca <__hi0bits+0x3c>
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	d503      	bpl.n	800aac8 <__hi0bits+0x3a>
 800aac0:	3001      	adds	r0, #1
 800aac2:	4770      	bx	lr
 800aac4:	2000      	movs	r0, #0
 800aac6:	e7e8      	b.n	800aa9a <__hi0bits+0xc>
 800aac8:	2020      	movs	r0, #32
 800aaca:	4770      	bx	lr

0800aacc <__lo0bits>:
 800aacc:	6803      	ldr	r3, [r0, #0]
 800aace:	f013 0207 	ands.w	r2, r3, #7
 800aad2:	4601      	mov	r1, r0
 800aad4:	d00b      	beq.n	800aaee <__lo0bits+0x22>
 800aad6:	07da      	lsls	r2, r3, #31
 800aad8:	d423      	bmi.n	800ab22 <__lo0bits+0x56>
 800aada:	0798      	lsls	r0, r3, #30
 800aadc:	bf49      	itett	mi
 800aade:	085b      	lsrmi	r3, r3, #1
 800aae0:	089b      	lsrpl	r3, r3, #2
 800aae2:	2001      	movmi	r0, #1
 800aae4:	600b      	strmi	r3, [r1, #0]
 800aae6:	bf5c      	itt	pl
 800aae8:	600b      	strpl	r3, [r1, #0]
 800aaea:	2002      	movpl	r0, #2
 800aaec:	4770      	bx	lr
 800aaee:	b298      	uxth	r0, r3
 800aaf0:	b9a8      	cbnz	r0, 800ab1e <__lo0bits+0x52>
 800aaf2:	0c1b      	lsrs	r3, r3, #16
 800aaf4:	2010      	movs	r0, #16
 800aaf6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aafa:	bf04      	itt	eq
 800aafc:	0a1b      	lsreq	r3, r3, #8
 800aafe:	3008      	addeq	r0, #8
 800ab00:	071a      	lsls	r2, r3, #28
 800ab02:	bf04      	itt	eq
 800ab04:	091b      	lsreq	r3, r3, #4
 800ab06:	3004      	addeq	r0, #4
 800ab08:	079a      	lsls	r2, r3, #30
 800ab0a:	bf04      	itt	eq
 800ab0c:	089b      	lsreq	r3, r3, #2
 800ab0e:	3002      	addeq	r0, #2
 800ab10:	07da      	lsls	r2, r3, #31
 800ab12:	d402      	bmi.n	800ab1a <__lo0bits+0x4e>
 800ab14:	085b      	lsrs	r3, r3, #1
 800ab16:	d006      	beq.n	800ab26 <__lo0bits+0x5a>
 800ab18:	3001      	adds	r0, #1
 800ab1a:	600b      	str	r3, [r1, #0]
 800ab1c:	4770      	bx	lr
 800ab1e:	4610      	mov	r0, r2
 800ab20:	e7e9      	b.n	800aaf6 <__lo0bits+0x2a>
 800ab22:	2000      	movs	r0, #0
 800ab24:	4770      	bx	lr
 800ab26:	2020      	movs	r0, #32
 800ab28:	4770      	bx	lr

0800ab2a <__i2b>:
 800ab2a:	b510      	push	{r4, lr}
 800ab2c:	460c      	mov	r4, r1
 800ab2e:	2101      	movs	r1, #1
 800ab30:	f7ff fee9 	bl	800a906 <_Balloc>
 800ab34:	2201      	movs	r2, #1
 800ab36:	6144      	str	r4, [r0, #20]
 800ab38:	6102      	str	r2, [r0, #16]
 800ab3a:	bd10      	pop	{r4, pc}

0800ab3c <__multiply>:
 800ab3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab40:	4614      	mov	r4, r2
 800ab42:	690a      	ldr	r2, [r1, #16]
 800ab44:	6923      	ldr	r3, [r4, #16]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	bfb8      	it	lt
 800ab4a:	460b      	movlt	r3, r1
 800ab4c:	4688      	mov	r8, r1
 800ab4e:	bfbc      	itt	lt
 800ab50:	46a0      	movlt	r8, r4
 800ab52:	461c      	movlt	r4, r3
 800ab54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ab5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab64:	eb07 0609 	add.w	r6, r7, r9
 800ab68:	42b3      	cmp	r3, r6
 800ab6a:	bfb8      	it	lt
 800ab6c:	3101      	addlt	r1, #1
 800ab6e:	f7ff feca 	bl	800a906 <_Balloc>
 800ab72:	f100 0514 	add.w	r5, r0, #20
 800ab76:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ab7a:	462b      	mov	r3, r5
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	4573      	cmp	r3, lr
 800ab80:	d316      	bcc.n	800abb0 <__multiply+0x74>
 800ab82:	f104 0214 	add.w	r2, r4, #20
 800ab86:	f108 0114 	add.w	r1, r8, #20
 800ab8a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ab8e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	9b00      	ldr	r3, [sp, #0]
 800ab96:	9201      	str	r2, [sp, #4]
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d80c      	bhi.n	800abb6 <__multiply+0x7a>
 800ab9c:	2e00      	cmp	r6, #0
 800ab9e:	dd03      	ble.n	800aba8 <__multiply+0x6c>
 800aba0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d05d      	beq.n	800ac64 <__multiply+0x128>
 800aba8:	6106      	str	r6, [r0, #16]
 800abaa:	b003      	add	sp, #12
 800abac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb0:	f843 2b04 	str.w	r2, [r3], #4
 800abb4:	e7e3      	b.n	800ab7e <__multiply+0x42>
 800abb6:	f8b2 b000 	ldrh.w	fp, [r2]
 800abba:	f1bb 0f00 	cmp.w	fp, #0
 800abbe:	d023      	beq.n	800ac08 <__multiply+0xcc>
 800abc0:	4689      	mov	r9, r1
 800abc2:	46ac      	mov	ip, r5
 800abc4:	f04f 0800 	mov.w	r8, #0
 800abc8:	f859 4b04 	ldr.w	r4, [r9], #4
 800abcc:	f8dc a000 	ldr.w	sl, [ip]
 800abd0:	b2a3      	uxth	r3, r4
 800abd2:	fa1f fa8a 	uxth.w	sl, sl
 800abd6:	fb0b a303 	mla	r3, fp, r3, sl
 800abda:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800abde:	f8dc 4000 	ldr.w	r4, [ip]
 800abe2:	4443      	add	r3, r8
 800abe4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800abe8:	fb0b 840a 	mla	r4, fp, sl, r8
 800abec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800abf0:	46e2      	mov	sl, ip
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800abf8:	454f      	cmp	r7, r9
 800abfa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800abfe:	f84a 3b04 	str.w	r3, [sl], #4
 800ac02:	d82b      	bhi.n	800ac5c <__multiply+0x120>
 800ac04:	f8cc 8004 	str.w	r8, [ip, #4]
 800ac08:	9b01      	ldr	r3, [sp, #4]
 800ac0a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ac0e:	3204      	adds	r2, #4
 800ac10:	f1ba 0f00 	cmp.w	sl, #0
 800ac14:	d020      	beq.n	800ac58 <__multiply+0x11c>
 800ac16:	682b      	ldr	r3, [r5, #0]
 800ac18:	4689      	mov	r9, r1
 800ac1a:	46a8      	mov	r8, r5
 800ac1c:	f04f 0b00 	mov.w	fp, #0
 800ac20:	f8b9 c000 	ldrh.w	ip, [r9]
 800ac24:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ac28:	fb0a 440c 	mla	r4, sl, ip, r4
 800ac2c:	445c      	add	r4, fp
 800ac2e:	46c4      	mov	ip, r8
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ac36:	f84c 3b04 	str.w	r3, [ip], #4
 800ac3a:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac3e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ac42:	0c1b      	lsrs	r3, r3, #16
 800ac44:	fb0a b303 	mla	r3, sl, r3, fp
 800ac48:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ac4c:	454f      	cmp	r7, r9
 800ac4e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ac52:	d805      	bhi.n	800ac60 <__multiply+0x124>
 800ac54:	f8c8 3004 	str.w	r3, [r8, #4]
 800ac58:	3504      	adds	r5, #4
 800ac5a:	e79b      	b.n	800ab94 <__multiply+0x58>
 800ac5c:	46d4      	mov	ip, sl
 800ac5e:	e7b3      	b.n	800abc8 <__multiply+0x8c>
 800ac60:	46e0      	mov	r8, ip
 800ac62:	e7dd      	b.n	800ac20 <__multiply+0xe4>
 800ac64:	3e01      	subs	r6, #1
 800ac66:	e799      	b.n	800ab9c <__multiply+0x60>

0800ac68 <__pow5mult>:
 800ac68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	4615      	mov	r5, r2
 800ac6e:	f012 0203 	ands.w	r2, r2, #3
 800ac72:	4606      	mov	r6, r0
 800ac74:	460f      	mov	r7, r1
 800ac76:	d007      	beq.n	800ac88 <__pow5mult+0x20>
 800ac78:	3a01      	subs	r2, #1
 800ac7a:	4c21      	ldr	r4, [pc, #132]	; (800ad00 <__pow5mult+0x98>)
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac82:	f7ff fe8b 	bl	800a99c <__multadd>
 800ac86:	4607      	mov	r7, r0
 800ac88:	10ad      	asrs	r5, r5, #2
 800ac8a:	d035      	beq.n	800acf8 <__pow5mult+0x90>
 800ac8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac8e:	b93c      	cbnz	r4, 800aca0 <__pow5mult+0x38>
 800ac90:	2010      	movs	r0, #16
 800ac92:	f000 facf 	bl	800b234 <malloc>
 800ac96:	6270      	str	r0, [r6, #36]	; 0x24
 800ac98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac9c:	6004      	str	r4, [r0, #0]
 800ac9e:	60c4      	str	r4, [r0, #12]
 800aca0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aca4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aca8:	b94c      	cbnz	r4, 800acbe <__pow5mult+0x56>
 800acaa:	f240 2171 	movw	r1, #625	; 0x271
 800acae:	4630      	mov	r0, r6
 800acb0:	f7ff ff3b 	bl	800ab2a <__i2b>
 800acb4:	2300      	movs	r3, #0
 800acb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800acba:	4604      	mov	r4, r0
 800acbc:	6003      	str	r3, [r0, #0]
 800acbe:	f04f 0800 	mov.w	r8, #0
 800acc2:	07eb      	lsls	r3, r5, #31
 800acc4:	d50a      	bpl.n	800acdc <__pow5mult+0x74>
 800acc6:	4639      	mov	r1, r7
 800acc8:	4622      	mov	r2, r4
 800acca:	4630      	mov	r0, r6
 800accc:	f7ff ff36 	bl	800ab3c <__multiply>
 800acd0:	4639      	mov	r1, r7
 800acd2:	4681      	mov	r9, r0
 800acd4:	4630      	mov	r0, r6
 800acd6:	f7ff fe4a 	bl	800a96e <_Bfree>
 800acda:	464f      	mov	r7, r9
 800acdc:	106d      	asrs	r5, r5, #1
 800acde:	d00b      	beq.n	800acf8 <__pow5mult+0x90>
 800ace0:	6820      	ldr	r0, [r4, #0]
 800ace2:	b938      	cbnz	r0, 800acf4 <__pow5mult+0x8c>
 800ace4:	4622      	mov	r2, r4
 800ace6:	4621      	mov	r1, r4
 800ace8:	4630      	mov	r0, r6
 800acea:	f7ff ff27 	bl	800ab3c <__multiply>
 800acee:	6020      	str	r0, [r4, #0]
 800acf0:	f8c0 8000 	str.w	r8, [r0]
 800acf4:	4604      	mov	r4, r0
 800acf6:	e7e4      	b.n	800acc2 <__pow5mult+0x5a>
 800acf8:	4638      	mov	r0, r7
 800acfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acfe:	bf00      	nop
 800ad00:	0800c640 	.word	0x0800c640

0800ad04 <__lshift>:
 800ad04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad08:	460c      	mov	r4, r1
 800ad0a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad0e:	6923      	ldr	r3, [r4, #16]
 800ad10:	6849      	ldr	r1, [r1, #4]
 800ad12:	eb0a 0903 	add.w	r9, sl, r3
 800ad16:	68a3      	ldr	r3, [r4, #8]
 800ad18:	4607      	mov	r7, r0
 800ad1a:	4616      	mov	r6, r2
 800ad1c:	f109 0501 	add.w	r5, r9, #1
 800ad20:	42ab      	cmp	r3, r5
 800ad22:	db32      	blt.n	800ad8a <__lshift+0x86>
 800ad24:	4638      	mov	r0, r7
 800ad26:	f7ff fdee 	bl	800a906 <_Balloc>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	f100 0114 	add.w	r1, r0, #20
 800ad32:	461a      	mov	r2, r3
 800ad34:	4553      	cmp	r3, sl
 800ad36:	db2b      	blt.n	800ad90 <__lshift+0x8c>
 800ad38:	6920      	ldr	r0, [r4, #16]
 800ad3a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad3e:	f104 0314 	add.w	r3, r4, #20
 800ad42:	f016 021f 	ands.w	r2, r6, #31
 800ad46:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad4a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad4e:	d025      	beq.n	800ad9c <__lshift+0x98>
 800ad50:	f1c2 0e20 	rsb	lr, r2, #32
 800ad54:	2000      	movs	r0, #0
 800ad56:	681e      	ldr	r6, [r3, #0]
 800ad58:	468a      	mov	sl, r1
 800ad5a:	4096      	lsls	r6, r2
 800ad5c:	4330      	orrs	r0, r6
 800ad5e:	f84a 0b04 	str.w	r0, [sl], #4
 800ad62:	f853 0b04 	ldr.w	r0, [r3], #4
 800ad66:	459c      	cmp	ip, r3
 800ad68:	fa20 f00e 	lsr.w	r0, r0, lr
 800ad6c:	d814      	bhi.n	800ad98 <__lshift+0x94>
 800ad6e:	6048      	str	r0, [r1, #4]
 800ad70:	b108      	cbz	r0, 800ad76 <__lshift+0x72>
 800ad72:	f109 0502 	add.w	r5, r9, #2
 800ad76:	3d01      	subs	r5, #1
 800ad78:	4638      	mov	r0, r7
 800ad7a:	f8c8 5010 	str.w	r5, [r8, #16]
 800ad7e:	4621      	mov	r1, r4
 800ad80:	f7ff fdf5 	bl	800a96e <_Bfree>
 800ad84:	4640      	mov	r0, r8
 800ad86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad8a:	3101      	adds	r1, #1
 800ad8c:	005b      	lsls	r3, r3, #1
 800ad8e:	e7c7      	b.n	800ad20 <__lshift+0x1c>
 800ad90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ad94:	3301      	adds	r3, #1
 800ad96:	e7cd      	b.n	800ad34 <__lshift+0x30>
 800ad98:	4651      	mov	r1, sl
 800ad9a:	e7dc      	b.n	800ad56 <__lshift+0x52>
 800ad9c:	3904      	subs	r1, #4
 800ad9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ada2:	f841 2f04 	str.w	r2, [r1, #4]!
 800ada6:	459c      	cmp	ip, r3
 800ada8:	d8f9      	bhi.n	800ad9e <__lshift+0x9a>
 800adaa:	e7e4      	b.n	800ad76 <__lshift+0x72>

0800adac <__mcmp>:
 800adac:	6903      	ldr	r3, [r0, #16]
 800adae:	690a      	ldr	r2, [r1, #16]
 800adb0:	1a9b      	subs	r3, r3, r2
 800adb2:	b530      	push	{r4, r5, lr}
 800adb4:	d10c      	bne.n	800add0 <__mcmp+0x24>
 800adb6:	0092      	lsls	r2, r2, #2
 800adb8:	3014      	adds	r0, #20
 800adba:	3114      	adds	r1, #20
 800adbc:	1884      	adds	r4, r0, r2
 800adbe:	4411      	add	r1, r2
 800adc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800adc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800adc8:	4295      	cmp	r5, r2
 800adca:	d003      	beq.n	800add4 <__mcmp+0x28>
 800adcc:	d305      	bcc.n	800adda <__mcmp+0x2e>
 800adce:	2301      	movs	r3, #1
 800add0:	4618      	mov	r0, r3
 800add2:	bd30      	pop	{r4, r5, pc}
 800add4:	42a0      	cmp	r0, r4
 800add6:	d3f3      	bcc.n	800adc0 <__mcmp+0x14>
 800add8:	e7fa      	b.n	800add0 <__mcmp+0x24>
 800adda:	f04f 33ff 	mov.w	r3, #4294967295
 800adde:	e7f7      	b.n	800add0 <__mcmp+0x24>

0800ade0 <__mdiff>:
 800ade0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade4:	460d      	mov	r5, r1
 800ade6:	4607      	mov	r7, r0
 800ade8:	4611      	mov	r1, r2
 800adea:	4628      	mov	r0, r5
 800adec:	4614      	mov	r4, r2
 800adee:	f7ff ffdd 	bl	800adac <__mcmp>
 800adf2:	1e06      	subs	r6, r0, #0
 800adf4:	d108      	bne.n	800ae08 <__mdiff+0x28>
 800adf6:	4631      	mov	r1, r6
 800adf8:	4638      	mov	r0, r7
 800adfa:	f7ff fd84 	bl	800a906 <_Balloc>
 800adfe:	2301      	movs	r3, #1
 800ae00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ae04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae08:	bfa4      	itt	ge
 800ae0a:	4623      	movge	r3, r4
 800ae0c:	462c      	movge	r4, r5
 800ae0e:	4638      	mov	r0, r7
 800ae10:	6861      	ldr	r1, [r4, #4]
 800ae12:	bfa6      	itte	ge
 800ae14:	461d      	movge	r5, r3
 800ae16:	2600      	movge	r6, #0
 800ae18:	2601      	movlt	r6, #1
 800ae1a:	f7ff fd74 	bl	800a906 <_Balloc>
 800ae1e:	692b      	ldr	r3, [r5, #16]
 800ae20:	60c6      	str	r6, [r0, #12]
 800ae22:	6926      	ldr	r6, [r4, #16]
 800ae24:	f105 0914 	add.w	r9, r5, #20
 800ae28:	f104 0214 	add.w	r2, r4, #20
 800ae2c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ae30:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ae34:	f100 0514 	add.w	r5, r0, #20
 800ae38:	f04f 0e00 	mov.w	lr, #0
 800ae3c:	f852 ab04 	ldr.w	sl, [r2], #4
 800ae40:	f859 4b04 	ldr.w	r4, [r9], #4
 800ae44:	fa1e f18a 	uxtah	r1, lr, sl
 800ae48:	b2a3      	uxth	r3, r4
 800ae4a:	1ac9      	subs	r1, r1, r3
 800ae4c:	0c23      	lsrs	r3, r4, #16
 800ae4e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ae52:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ae56:	b289      	uxth	r1, r1
 800ae58:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ae5c:	45c8      	cmp	r8, r9
 800ae5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ae62:	4694      	mov	ip, r2
 800ae64:	f845 3b04 	str.w	r3, [r5], #4
 800ae68:	d8e8      	bhi.n	800ae3c <__mdiff+0x5c>
 800ae6a:	45bc      	cmp	ip, r7
 800ae6c:	d304      	bcc.n	800ae78 <__mdiff+0x98>
 800ae6e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ae72:	b183      	cbz	r3, 800ae96 <__mdiff+0xb6>
 800ae74:	6106      	str	r6, [r0, #16]
 800ae76:	e7c5      	b.n	800ae04 <__mdiff+0x24>
 800ae78:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ae7c:	fa1e f381 	uxtah	r3, lr, r1
 800ae80:	141a      	asrs	r2, r3, #16
 800ae82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae8c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ae90:	f845 3b04 	str.w	r3, [r5], #4
 800ae94:	e7e9      	b.n	800ae6a <__mdiff+0x8a>
 800ae96:	3e01      	subs	r6, #1
 800ae98:	e7e9      	b.n	800ae6e <__mdiff+0x8e>
	...

0800ae9c <__ulp>:
 800ae9c:	4b12      	ldr	r3, [pc, #72]	; (800aee8 <__ulp+0x4c>)
 800ae9e:	ee10 2a90 	vmov	r2, s1
 800aea2:	401a      	ands	r2, r3
 800aea4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	dd04      	ble.n	800aeb6 <__ulp+0x1a>
 800aeac:	2000      	movs	r0, #0
 800aeae:	4619      	mov	r1, r3
 800aeb0:	ec41 0b10 	vmov	d0, r0, r1
 800aeb4:	4770      	bx	lr
 800aeb6:	425b      	negs	r3, r3
 800aeb8:	151b      	asrs	r3, r3, #20
 800aeba:	2b13      	cmp	r3, #19
 800aebc:	f04f 0000 	mov.w	r0, #0
 800aec0:	f04f 0100 	mov.w	r1, #0
 800aec4:	dc04      	bgt.n	800aed0 <__ulp+0x34>
 800aec6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aeca:	fa42 f103 	asr.w	r1, r2, r3
 800aece:	e7ef      	b.n	800aeb0 <__ulp+0x14>
 800aed0:	3b14      	subs	r3, #20
 800aed2:	2b1e      	cmp	r3, #30
 800aed4:	f04f 0201 	mov.w	r2, #1
 800aed8:	bfda      	itte	le
 800aeda:	f1c3 031f 	rsble	r3, r3, #31
 800aede:	fa02 f303 	lslle.w	r3, r2, r3
 800aee2:	4613      	movgt	r3, r2
 800aee4:	4618      	mov	r0, r3
 800aee6:	e7e3      	b.n	800aeb0 <__ulp+0x14>
 800aee8:	7ff00000 	.word	0x7ff00000

0800aeec <__b2d>:
 800aeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeee:	6905      	ldr	r5, [r0, #16]
 800aef0:	f100 0714 	add.w	r7, r0, #20
 800aef4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aef8:	1f2e      	subs	r6, r5, #4
 800aefa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aefe:	4620      	mov	r0, r4
 800af00:	f7ff fdc5 	bl	800aa8e <__hi0bits>
 800af04:	f1c0 0320 	rsb	r3, r0, #32
 800af08:	280a      	cmp	r0, #10
 800af0a:	600b      	str	r3, [r1, #0]
 800af0c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800af84 <__b2d+0x98>
 800af10:	dc14      	bgt.n	800af3c <__b2d+0x50>
 800af12:	f1c0 0e0b 	rsb	lr, r0, #11
 800af16:	fa24 f10e 	lsr.w	r1, r4, lr
 800af1a:	42b7      	cmp	r7, r6
 800af1c:	ea41 030c 	orr.w	r3, r1, ip
 800af20:	bf34      	ite	cc
 800af22:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af26:	2100      	movcs	r1, #0
 800af28:	3015      	adds	r0, #21
 800af2a:	fa04 f000 	lsl.w	r0, r4, r0
 800af2e:	fa21 f10e 	lsr.w	r1, r1, lr
 800af32:	ea40 0201 	orr.w	r2, r0, r1
 800af36:	ec43 2b10 	vmov	d0, r2, r3
 800af3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af3c:	42b7      	cmp	r7, r6
 800af3e:	bf3a      	itte	cc
 800af40:	f1a5 0608 	subcc.w	r6, r5, #8
 800af44:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af48:	2100      	movcs	r1, #0
 800af4a:	380b      	subs	r0, #11
 800af4c:	d015      	beq.n	800af7a <__b2d+0x8e>
 800af4e:	4084      	lsls	r4, r0
 800af50:	f1c0 0520 	rsb	r5, r0, #32
 800af54:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800af58:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800af5c:	42be      	cmp	r6, r7
 800af5e:	fa21 fc05 	lsr.w	ip, r1, r5
 800af62:	ea44 030c 	orr.w	r3, r4, ip
 800af66:	bf8c      	ite	hi
 800af68:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800af6c:	2400      	movls	r4, #0
 800af6e:	fa01 f000 	lsl.w	r0, r1, r0
 800af72:	40ec      	lsrs	r4, r5
 800af74:	ea40 0204 	orr.w	r2, r0, r4
 800af78:	e7dd      	b.n	800af36 <__b2d+0x4a>
 800af7a:	ea44 030c 	orr.w	r3, r4, ip
 800af7e:	460a      	mov	r2, r1
 800af80:	e7d9      	b.n	800af36 <__b2d+0x4a>
 800af82:	bf00      	nop
 800af84:	3ff00000 	.word	0x3ff00000

0800af88 <__d2b>:
 800af88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af8c:	460e      	mov	r6, r1
 800af8e:	2101      	movs	r1, #1
 800af90:	ec59 8b10 	vmov	r8, r9, d0
 800af94:	4615      	mov	r5, r2
 800af96:	f7ff fcb6 	bl	800a906 <_Balloc>
 800af9a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800af9e:	4607      	mov	r7, r0
 800afa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afa4:	bb34      	cbnz	r4, 800aff4 <__d2b+0x6c>
 800afa6:	9301      	str	r3, [sp, #4]
 800afa8:	f1b8 0300 	subs.w	r3, r8, #0
 800afac:	d027      	beq.n	800affe <__d2b+0x76>
 800afae:	a802      	add	r0, sp, #8
 800afb0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800afb4:	f7ff fd8a 	bl	800aacc <__lo0bits>
 800afb8:	9900      	ldr	r1, [sp, #0]
 800afba:	b1f0      	cbz	r0, 800affa <__d2b+0x72>
 800afbc:	9a01      	ldr	r2, [sp, #4]
 800afbe:	f1c0 0320 	rsb	r3, r0, #32
 800afc2:	fa02 f303 	lsl.w	r3, r2, r3
 800afc6:	430b      	orrs	r3, r1
 800afc8:	40c2      	lsrs	r2, r0
 800afca:	617b      	str	r3, [r7, #20]
 800afcc:	9201      	str	r2, [sp, #4]
 800afce:	9b01      	ldr	r3, [sp, #4]
 800afd0:	61bb      	str	r3, [r7, #24]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	bf14      	ite	ne
 800afd6:	2102      	movne	r1, #2
 800afd8:	2101      	moveq	r1, #1
 800afda:	6139      	str	r1, [r7, #16]
 800afdc:	b1c4      	cbz	r4, 800b010 <__d2b+0x88>
 800afde:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800afe2:	4404      	add	r4, r0
 800afe4:	6034      	str	r4, [r6, #0]
 800afe6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800afea:	6028      	str	r0, [r5, #0]
 800afec:	4638      	mov	r0, r7
 800afee:	b003      	add	sp, #12
 800aff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aff4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aff8:	e7d5      	b.n	800afa6 <__d2b+0x1e>
 800affa:	6179      	str	r1, [r7, #20]
 800affc:	e7e7      	b.n	800afce <__d2b+0x46>
 800affe:	a801      	add	r0, sp, #4
 800b000:	f7ff fd64 	bl	800aacc <__lo0bits>
 800b004:	9b01      	ldr	r3, [sp, #4]
 800b006:	617b      	str	r3, [r7, #20]
 800b008:	2101      	movs	r1, #1
 800b00a:	6139      	str	r1, [r7, #16]
 800b00c:	3020      	adds	r0, #32
 800b00e:	e7e5      	b.n	800afdc <__d2b+0x54>
 800b010:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b014:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b018:	6030      	str	r0, [r6, #0]
 800b01a:	6918      	ldr	r0, [r3, #16]
 800b01c:	f7ff fd37 	bl	800aa8e <__hi0bits>
 800b020:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b024:	e7e1      	b.n	800afea <__d2b+0x62>

0800b026 <__ratio>:
 800b026:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02a:	4688      	mov	r8, r1
 800b02c:	4669      	mov	r1, sp
 800b02e:	4681      	mov	r9, r0
 800b030:	f7ff ff5c 	bl	800aeec <__b2d>
 800b034:	a901      	add	r1, sp, #4
 800b036:	4640      	mov	r0, r8
 800b038:	ec57 6b10 	vmov	r6, r7, d0
 800b03c:	f7ff ff56 	bl	800aeec <__b2d>
 800b040:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b044:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b048:	eba3 0c02 	sub.w	ip, r3, r2
 800b04c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b050:	1a9b      	subs	r3, r3, r2
 800b052:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b056:	ec5b ab10 	vmov	sl, fp, d0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	bfce      	itee	gt
 800b05e:	463a      	movgt	r2, r7
 800b060:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b064:	465a      	movle	r2, fp
 800b066:	4659      	mov	r1, fp
 800b068:	463d      	mov	r5, r7
 800b06a:	bfd4      	ite	le
 800b06c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b070:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b074:	4630      	mov	r0, r6
 800b076:	ee10 2a10 	vmov	r2, s0
 800b07a:	460b      	mov	r3, r1
 800b07c:	4629      	mov	r1, r5
 800b07e:	f7f5 fbc7 	bl	8000810 <__aeabi_ddiv>
 800b082:	ec41 0b10 	vmov	d0, r0, r1
 800b086:	b003      	add	sp, #12
 800b088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b08c <__copybits>:
 800b08c:	3901      	subs	r1, #1
 800b08e:	b510      	push	{r4, lr}
 800b090:	1149      	asrs	r1, r1, #5
 800b092:	6914      	ldr	r4, [r2, #16]
 800b094:	3101      	adds	r1, #1
 800b096:	f102 0314 	add.w	r3, r2, #20
 800b09a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b09e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b0a2:	42a3      	cmp	r3, r4
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	d303      	bcc.n	800b0b0 <__copybits+0x24>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	428a      	cmp	r2, r1
 800b0ac:	d305      	bcc.n	800b0ba <__copybits+0x2e>
 800b0ae:	bd10      	pop	{r4, pc}
 800b0b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0b4:	f840 2b04 	str.w	r2, [r0], #4
 800b0b8:	e7f3      	b.n	800b0a2 <__copybits+0x16>
 800b0ba:	f842 3b04 	str.w	r3, [r2], #4
 800b0be:	e7f4      	b.n	800b0aa <__copybits+0x1e>

0800b0c0 <__any_on>:
 800b0c0:	f100 0214 	add.w	r2, r0, #20
 800b0c4:	6900      	ldr	r0, [r0, #16]
 800b0c6:	114b      	asrs	r3, r1, #5
 800b0c8:	4298      	cmp	r0, r3
 800b0ca:	b510      	push	{r4, lr}
 800b0cc:	db11      	blt.n	800b0f2 <__any_on+0x32>
 800b0ce:	dd0a      	ble.n	800b0e6 <__any_on+0x26>
 800b0d0:	f011 011f 	ands.w	r1, r1, #31
 800b0d4:	d007      	beq.n	800b0e6 <__any_on+0x26>
 800b0d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b0da:	fa24 f001 	lsr.w	r0, r4, r1
 800b0de:	fa00 f101 	lsl.w	r1, r0, r1
 800b0e2:	428c      	cmp	r4, r1
 800b0e4:	d10b      	bne.n	800b0fe <__any_on+0x3e>
 800b0e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d803      	bhi.n	800b0f6 <__any_on+0x36>
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	bd10      	pop	{r4, pc}
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	e7f7      	b.n	800b0e6 <__any_on+0x26>
 800b0f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0fa:	2900      	cmp	r1, #0
 800b0fc:	d0f5      	beq.n	800b0ea <__any_on+0x2a>
 800b0fe:	2001      	movs	r0, #1
 800b100:	e7f6      	b.n	800b0f0 <__any_on+0x30>

0800b102 <_calloc_r>:
 800b102:	b538      	push	{r3, r4, r5, lr}
 800b104:	fb02 f401 	mul.w	r4, r2, r1
 800b108:	4621      	mov	r1, r4
 800b10a:	f000 f809 	bl	800b120 <_malloc_r>
 800b10e:	4605      	mov	r5, r0
 800b110:	b118      	cbz	r0, 800b11a <_calloc_r+0x18>
 800b112:	4622      	mov	r2, r4
 800b114:	2100      	movs	r1, #0
 800b116:	f7fe f9d6 	bl	80094c6 <memset>
 800b11a:	4628      	mov	r0, r5
 800b11c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b120 <_malloc_r>:
 800b120:	b570      	push	{r4, r5, r6, lr}
 800b122:	1ccd      	adds	r5, r1, #3
 800b124:	f025 0503 	bic.w	r5, r5, #3
 800b128:	3508      	adds	r5, #8
 800b12a:	2d0c      	cmp	r5, #12
 800b12c:	bf38      	it	cc
 800b12e:	250c      	movcc	r5, #12
 800b130:	2d00      	cmp	r5, #0
 800b132:	4606      	mov	r6, r0
 800b134:	db01      	blt.n	800b13a <_malloc_r+0x1a>
 800b136:	42a9      	cmp	r1, r5
 800b138:	d903      	bls.n	800b142 <_malloc_r+0x22>
 800b13a:	230c      	movs	r3, #12
 800b13c:	6033      	str	r3, [r6, #0]
 800b13e:	2000      	movs	r0, #0
 800b140:	bd70      	pop	{r4, r5, r6, pc}
 800b142:	f000 f87f 	bl	800b244 <__malloc_lock>
 800b146:	4a21      	ldr	r2, [pc, #132]	; (800b1cc <_malloc_r+0xac>)
 800b148:	6814      	ldr	r4, [r2, #0]
 800b14a:	4621      	mov	r1, r4
 800b14c:	b991      	cbnz	r1, 800b174 <_malloc_r+0x54>
 800b14e:	4c20      	ldr	r4, [pc, #128]	; (800b1d0 <_malloc_r+0xb0>)
 800b150:	6823      	ldr	r3, [r4, #0]
 800b152:	b91b      	cbnz	r3, 800b15c <_malloc_r+0x3c>
 800b154:	4630      	mov	r0, r6
 800b156:	f000 f83d 	bl	800b1d4 <_sbrk_r>
 800b15a:	6020      	str	r0, [r4, #0]
 800b15c:	4629      	mov	r1, r5
 800b15e:	4630      	mov	r0, r6
 800b160:	f000 f838 	bl	800b1d4 <_sbrk_r>
 800b164:	1c43      	adds	r3, r0, #1
 800b166:	d124      	bne.n	800b1b2 <_malloc_r+0x92>
 800b168:	230c      	movs	r3, #12
 800b16a:	6033      	str	r3, [r6, #0]
 800b16c:	4630      	mov	r0, r6
 800b16e:	f000 f86a 	bl	800b246 <__malloc_unlock>
 800b172:	e7e4      	b.n	800b13e <_malloc_r+0x1e>
 800b174:	680b      	ldr	r3, [r1, #0]
 800b176:	1b5b      	subs	r3, r3, r5
 800b178:	d418      	bmi.n	800b1ac <_malloc_r+0x8c>
 800b17a:	2b0b      	cmp	r3, #11
 800b17c:	d90f      	bls.n	800b19e <_malloc_r+0x7e>
 800b17e:	600b      	str	r3, [r1, #0]
 800b180:	50cd      	str	r5, [r1, r3]
 800b182:	18cc      	adds	r4, r1, r3
 800b184:	4630      	mov	r0, r6
 800b186:	f000 f85e 	bl	800b246 <__malloc_unlock>
 800b18a:	f104 000b 	add.w	r0, r4, #11
 800b18e:	1d23      	adds	r3, r4, #4
 800b190:	f020 0007 	bic.w	r0, r0, #7
 800b194:	1ac3      	subs	r3, r0, r3
 800b196:	d0d3      	beq.n	800b140 <_malloc_r+0x20>
 800b198:	425a      	negs	r2, r3
 800b19a:	50e2      	str	r2, [r4, r3]
 800b19c:	e7d0      	b.n	800b140 <_malloc_r+0x20>
 800b19e:	428c      	cmp	r4, r1
 800b1a0:	684b      	ldr	r3, [r1, #4]
 800b1a2:	bf16      	itet	ne
 800b1a4:	6063      	strne	r3, [r4, #4]
 800b1a6:	6013      	streq	r3, [r2, #0]
 800b1a8:	460c      	movne	r4, r1
 800b1aa:	e7eb      	b.n	800b184 <_malloc_r+0x64>
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	6849      	ldr	r1, [r1, #4]
 800b1b0:	e7cc      	b.n	800b14c <_malloc_r+0x2c>
 800b1b2:	1cc4      	adds	r4, r0, #3
 800b1b4:	f024 0403 	bic.w	r4, r4, #3
 800b1b8:	42a0      	cmp	r0, r4
 800b1ba:	d005      	beq.n	800b1c8 <_malloc_r+0xa8>
 800b1bc:	1a21      	subs	r1, r4, r0
 800b1be:	4630      	mov	r0, r6
 800b1c0:	f000 f808 	bl	800b1d4 <_sbrk_r>
 800b1c4:	3001      	adds	r0, #1
 800b1c6:	d0cf      	beq.n	800b168 <_malloc_r+0x48>
 800b1c8:	6025      	str	r5, [r4, #0]
 800b1ca:	e7db      	b.n	800b184 <_malloc_r+0x64>
 800b1cc:	20001b18 	.word	0x20001b18
 800b1d0:	20001b1c 	.word	0x20001b1c

0800b1d4 <_sbrk_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4c06      	ldr	r4, [pc, #24]	; (800b1f0 <_sbrk_r+0x1c>)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4605      	mov	r5, r0
 800b1dc:	4608      	mov	r0, r1
 800b1de:	6023      	str	r3, [r4, #0]
 800b1e0:	f7f7 fbb8 	bl	8002954 <_sbrk>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d102      	bne.n	800b1ee <_sbrk_r+0x1a>
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	b103      	cbz	r3, 800b1ee <_sbrk_r+0x1a>
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	20001f78 	.word	0x20001f78

0800b1f4 <strncmp>:
 800b1f4:	b510      	push	{r4, lr}
 800b1f6:	b16a      	cbz	r2, 800b214 <strncmp+0x20>
 800b1f8:	3901      	subs	r1, #1
 800b1fa:	1884      	adds	r4, r0, r2
 800b1fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b200:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b204:	4293      	cmp	r3, r2
 800b206:	d103      	bne.n	800b210 <strncmp+0x1c>
 800b208:	42a0      	cmp	r0, r4
 800b20a:	d001      	beq.n	800b210 <strncmp+0x1c>
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1f5      	bne.n	800b1fc <strncmp+0x8>
 800b210:	1a98      	subs	r0, r3, r2
 800b212:	bd10      	pop	{r4, pc}
 800b214:	4610      	mov	r0, r2
 800b216:	e7fc      	b.n	800b212 <strncmp+0x1e>

0800b218 <__ascii_wctomb>:
 800b218:	b149      	cbz	r1, 800b22e <__ascii_wctomb+0x16>
 800b21a:	2aff      	cmp	r2, #255	; 0xff
 800b21c:	bf85      	ittet	hi
 800b21e:	238a      	movhi	r3, #138	; 0x8a
 800b220:	6003      	strhi	r3, [r0, #0]
 800b222:	700a      	strbls	r2, [r1, #0]
 800b224:	f04f 30ff 	movhi.w	r0, #4294967295
 800b228:	bf98      	it	ls
 800b22a:	2001      	movls	r0, #1
 800b22c:	4770      	bx	lr
 800b22e:	4608      	mov	r0, r1
 800b230:	4770      	bx	lr
	...

0800b234 <malloc>:
 800b234:	4b02      	ldr	r3, [pc, #8]	; (800b240 <malloc+0xc>)
 800b236:	4601      	mov	r1, r0
 800b238:	6818      	ldr	r0, [r3, #0]
 800b23a:	f7ff bf71 	b.w	800b120 <_malloc_r>
 800b23e:	bf00      	nop
 800b240:	20000010 	.word	0x20000010

0800b244 <__malloc_lock>:
 800b244:	4770      	bx	lr

0800b246 <__malloc_unlock>:
 800b246:	4770      	bx	lr

0800b248 <pow>:
 800b248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b24c:	ed2d 8b04 	vpush	{d8-d9}
 800b250:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b524 <pow+0x2dc>
 800b254:	b08d      	sub	sp, #52	; 0x34
 800b256:	ec57 6b10 	vmov	r6, r7, d0
 800b25a:	ec55 4b11 	vmov	r4, r5, d1
 800b25e:	f000 f9bf 	bl	800b5e0 <__ieee754_pow>
 800b262:	f999 3000 	ldrsb.w	r3, [r9]
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	3301      	adds	r3, #1
 800b26a:	eeb0 8a40 	vmov.f32	s16, s0
 800b26e:	eef0 8a60 	vmov.f32	s17, s1
 800b272:	46c8      	mov	r8, r9
 800b274:	d05f      	beq.n	800b336 <pow+0xee>
 800b276:	4622      	mov	r2, r4
 800b278:	462b      	mov	r3, r5
 800b27a:	4620      	mov	r0, r4
 800b27c:	4629      	mov	r1, r5
 800b27e:	f7f5 fc37 	bl	8000af0 <__aeabi_dcmpun>
 800b282:	4683      	mov	fp, r0
 800b284:	2800      	cmp	r0, #0
 800b286:	d156      	bne.n	800b336 <pow+0xee>
 800b288:	4632      	mov	r2, r6
 800b28a:	463b      	mov	r3, r7
 800b28c:	4630      	mov	r0, r6
 800b28e:	4639      	mov	r1, r7
 800b290:	f7f5 fc2e 	bl	8000af0 <__aeabi_dcmpun>
 800b294:	9001      	str	r0, [sp, #4]
 800b296:	b1e8      	cbz	r0, 800b2d4 <pow+0x8c>
 800b298:	2200      	movs	r2, #0
 800b29a:	2300      	movs	r3, #0
 800b29c:	4620      	mov	r0, r4
 800b29e:	4629      	mov	r1, r5
 800b2a0:	f7f5 fbf4 	bl	8000a8c <__aeabi_dcmpeq>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d046      	beq.n	800b336 <pow+0xee>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	9302      	str	r3, [sp, #8]
 800b2ac:	4b96      	ldr	r3, [pc, #600]	; (800b508 <pow+0x2c0>)
 800b2ae:	9303      	str	r3, [sp, #12]
 800b2b0:	4b96      	ldr	r3, [pc, #600]	; (800b50c <pow+0x2c4>)
 800b2b2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b2bc:	9b00      	ldr	r3, [sp, #0]
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b2c4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b2c8:	d033      	beq.n	800b332 <pow+0xea>
 800b2ca:	a802      	add	r0, sp, #8
 800b2cc:	f000 ff57 	bl	800c17e <matherr>
 800b2d0:	bb48      	cbnz	r0, 800b326 <pow+0xde>
 800b2d2:	e05d      	b.n	800b390 <pow+0x148>
 800b2d4:	f04f 0a00 	mov.w	sl, #0
 800b2d8:	f04f 0b00 	mov.w	fp, #0
 800b2dc:	4652      	mov	r2, sl
 800b2de:	465b      	mov	r3, fp
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	f7f5 fbd2 	bl	8000a8c <__aeabi_dcmpeq>
 800b2e8:	ec4b ab19 	vmov	d9, sl, fp
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d054      	beq.n	800b39a <pow+0x152>
 800b2f0:	4652      	mov	r2, sl
 800b2f2:	465b      	mov	r3, fp
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	f7f5 fbc8 	bl	8000a8c <__aeabi_dcmpeq>
 800b2fc:	4680      	mov	r8, r0
 800b2fe:	b318      	cbz	r0, 800b348 <pow+0x100>
 800b300:	2301      	movs	r3, #1
 800b302:	9302      	str	r3, [sp, #8]
 800b304:	4b80      	ldr	r3, [pc, #512]	; (800b508 <pow+0x2c0>)
 800b306:	9303      	str	r3, [sp, #12]
 800b308:	9b01      	ldr	r3, [sp, #4]
 800b30a:	930a      	str	r3, [sp, #40]	; 0x28
 800b30c:	9b00      	ldr	r3, [sp, #0]
 800b30e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b312:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b316:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0d5      	beq.n	800b2ca <pow+0x82>
 800b31e:	4b7b      	ldr	r3, [pc, #492]	; (800b50c <pow+0x2c4>)
 800b320:	2200      	movs	r2, #0
 800b322:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b328:	b11b      	cbz	r3, 800b332 <pow+0xea>
 800b32a:	f7fe f897 	bl	800945c <__errno>
 800b32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b330:	6003      	str	r3, [r0, #0]
 800b332:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b336:	eeb0 0a48 	vmov.f32	s0, s16
 800b33a:	eef0 0a68 	vmov.f32	s1, s17
 800b33e:	b00d      	add	sp, #52	; 0x34
 800b340:	ecbd 8b04 	vpop	{d8-d9}
 800b344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b348:	ec45 4b10 	vmov	d0, r4, r5
 800b34c:	f000 ff0f 	bl	800c16e <finite>
 800b350:	2800      	cmp	r0, #0
 800b352:	d0f0      	beq.n	800b336 <pow+0xee>
 800b354:	4652      	mov	r2, sl
 800b356:	465b      	mov	r3, fp
 800b358:	4620      	mov	r0, r4
 800b35a:	4629      	mov	r1, r5
 800b35c:	f7f5 fba0 	bl	8000aa0 <__aeabi_dcmplt>
 800b360:	2800      	cmp	r0, #0
 800b362:	d0e8      	beq.n	800b336 <pow+0xee>
 800b364:	2301      	movs	r3, #1
 800b366:	9302      	str	r3, [sp, #8]
 800b368:	4b67      	ldr	r3, [pc, #412]	; (800b508 <pow+0x2c0>)
 800b36a:	9303      	str	r3, [sp, #12]
 800b36c:	f999 3000 	ldrsb.w	r3, [r9]
 800b370:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b374:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b378:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b37c:	b913      	cbnz	r3, 800b384 <pow+0x13c>
 800b37e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b382:	e7a2      	b.n	800b2ca <pow+0x82>
 800b384:	4962      	ldr	r1, [pc, #392]	; (800b510 <pow+0x2c8>)
 800b386:	2000      	movs	r0, #0
 800b388:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d19c      	bne.n	800b2ca <pow+0x82>
 800b390:	f7fe f864 	bl	800945c <__errno>
 800b394:	2321      	movs	r3, #33	; 0x21
 800b396:	6003      	str	r3, [r0, #0]
 800b398:	e7c5      	b.n	800b326 <pow+0xde>
 800b39a:	eeb0 0a48 	vmov.f32	s0, s16
 800b39e:	eef0 0a68 	vmov.f32	s1, s17
 800b3a2:	f000 fee4 	bl	800c16e <finite>
 800b3a6:	9000      	str	r0, [sp, #0]
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	f040 8081 	bne.w	800b4b0 <pow+0x268>
 800b3ae:	ec47 6b10 	vmov	d0, r6, r7
 800b3b2:	f000 fedc 	bl	800c16e <finite>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d07a      	beq.n	800b4b0 <pow+0x268>
 800b3ba:	ec45 4b10 	vmov	d0, r4, r5
 800b3be:	f000 fed6 	bl	800c16e <finite>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d074      	beq.n	800b4b0 <pow+0x268>
 800b3c6:	ec53 2b18 	vmov	r2, r3, d8
 800b3ca:	ee18 0a10 	vmov	r0, s16
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	f7f5 fb8e 	bl	8000af0 <__aeabi_dcmpun>
 800b3d4:	f999 9000 	ldrsb.w	r9, [r9]
 800b3d8:	4b4b      	ldr	r3, [pc, #300]	; (800b508 <pow+0x2c0>)
 800b3da:	b1b0      	cbz	r0, 800b40a <pow+0x1c2>
 800b3dc:	2201      	movs	r2, #1
 800b3de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3e2:	9b00      	ldr	r3, [sp, #0]
 800b3e4:	930a      	str	r3, [sp, #40]	; 0x28
 800b3e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b3ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b3ee:	f1b9 0f00 	cmp.w	r9, #0
 800b3f2:	d0c4      	beq.n	800b37e <pow+0x136>
 800b3f4:	4652      	mov	r2, sl
 800b3f6:	465b      	mov	r3, fp
 800b3f8:	4650      	mov	r0, sl
 800b3fa:	4659      	mov	r1, fp
 800b3fc:	f7f5 fa08 	bl	8000810 <__aeabi_ddiv>
 800b400:	f1b9 0f02 	cmp.w	r9, #2
 800b404:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b408:	e7c1      	b.n	800b38e <pow+0x146>
 800b40a:	2203      	movs	r2, #3
 800b40c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b410:	900a      	str	r0, [sp, #40]	; 0x28
 800b412:	4629      	mov	r1, r5
 800b414:	4620      	mov	r0, r4
 800b416:	2200      	movs	r2, #0
 800b418:	4b3e      	ldr	r3, [pc, #248]	; (800b514 <pow+0x2cc>)
 800b41a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b41e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b422:	f7f5 f8cb 	bl	80005bc <__aeabi_dmul>
 800b426:	4604      	mov	r4, r0
 800b428:	460d      	mov	r5, r1
 800b42a:	f1b9 0f00 	cmp.w	r9, #0
 800b42e:	d124      	bne.n	800b47a <pow+0x232>
 800b430:	4b39      	ldr	r3, [pc, #228]	; (800b518 <pow+0x2d0>)
 800b432:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b436:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b43a:	4630      	mov	r0, r6
 800b43c:	4652      	mov	r2, sl
 800b43e:	465b      	mov	r3, fp
 800b440:	4639      	mov	r1, r7
 800b442:	f7f5 fb2d 	bl	8000aa0 <__aeabi_dcmplt>
 800b446:	2800      	cmp	r0, #0
 800b448:	d056      	beq.n	800b4f8 <pow+0x2b0>
 800b44a:	ec45 4b10 	vmov	d0, r4, r5
 800b44e:	f000 fea3 	bl	800c198 <rint>
 800b452:	4622      	mov	r2, r4
 800b454:	462b      	mov	r3, r5
 800b456:	ec51 0b10 	vmov	r0, r1, d0
 800b45a:	f7f5 fb17 	bl	8000a8c <__aeabi_dcmpeq>
 800b45e:	b920      	cbnz	r0, 800b46a <pow+0x222>
 800b460:	4b2e      	ldr	r3, [pc, #184]	; (800b51c <pow+0x2d4>)
 800b462:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b466:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b46a:	f998 3000 	ldrsb.w	r3, [r8]
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d142      	bne.n	800b4f8 <pow+0x2b0>
 800b472:	f7fd fff3 	bl	800945c <__errno>
 800b476:	2322      	movs	r3, #34	; 0x22
 800b478:	e78d      	b.n	800b396 <pow+0x14e>
 800b47a:	4b29      	ldr	r3, [pc, #164]	; (800b520 <pow+0x2d8>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b482:	4630      	mov	r0, r6
 800b484:	4652      	mov	r2, sl
 800b486:	465b      	mov	r3, fp
 800b488:	4639      	mov	r1, r7
 800b48a:	f7f5 fb09 	bl	8000aa0 <__aeabi_dcmplt>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d0eb      	beq.n	800b46a <pow+0x222>
 800b492:	ec45 4b10 	vmov	d0, r4, r5
 800b496:	f000 fe7f 	bl	800c198 <rint>
 800b49a:	4622      	mov	r2, r4
 800b49c:	462b      	mov	r3, r5
 800b49e:	ec51 0b10 	vmov	r0, r1, d0
 800b4a2:	f7f5 faf3 	bl	8000a8c <__aeabi_dcmpeq>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d1df      	bne.n	800b46a <pow+0x222>
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	4b18      	ldr	r3, [pc, #96]	; (800b510 <pow+0x2c8>)
 800b4ae:	e7da      	b.n	800b466 <pow+0x21e>
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	ec51 0b18 	vmov	r0, r1, d8
 800b4b8:	f7f5 fae8 	bl	8000a8c <__aeabi_dcmpeq>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	f43f af3a 	beq.w	800b336 <pow+0xee>
 800b4c2:	ec47 6b10 	vmov	d0, r6, r7
 800b4c6:	f000 fe52 	bl	800c16e <finite>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	f43f af33 	beq.w	800b336 <pow+0xee>
 800b4d0:	ec45 4b10 	vmov	d0, r4, r5
 800b4d4:	f000 fe4b 	bl	800c16e <finite>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	f43f af2c 	beq.w	800b336 <pow+0xee>
 800b4de:	2304      	movs	r3, #4
 800b4e0:	9302      	str	r3, [sp, #8]
 800b4e2:	4b09      	ldr	r3, [pc, #36]	; (800b508 <pow+0x2c0>)
 800b4e4:	9303      	str	r3, [sp, #12]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	930a      	str	r3, [sp, #40]	; 0x28
 800b4ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b4ee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b4f2:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b4f6:	e7b8      	b.n	800b46a <pow+0x222>
 800b4f8:	a802      	add	r0, sp, #8
 800b4fa:	f000 fe40 	bl	800c17e <matherr>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f47f af11 	bne.w	800b326 <pow+0xde>
 800b504:	e7b5      	b.n	800b472 <pow+0x22a>
 800b506:	bf00      	nop
 800b508:	0800c74d 	.word	0x0800c74d
 800b50c:	3ff00000 	.word	0x3ff00000
 800b510:	fff00000 	.word	0xfff00000
 800b514:	3fe00000 	.word	0x3fe00000
 800b518:	47efffff 	.word	0x47efffff
 800b51c:	c7efffff 	.word	0xc7efffff
 800b520:	7ff00000 	.word	0x7ff00000
 800b524:	200001e0 	.word	0x200001e0

0800b528 <sqrt>:
 800b528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b52c:	ed2d 8b02 	vpush	{d8}
 800b530:	b08b      	sub	sp, #44	; 0x2c
 800b532:	ec55 4b10 	vmov	r4, r5, d0
 800b536:	f000 fd61 	bl	800bffc <__ieee754_sqrt>
 800b53a:	4b26      	ldr	r3, [pc, #152]	; (800b5d4 <sqrt+0xac>)
 800b53c:	eeb0 8a40 	vmov.f32	s16, s0
 800b540:	eef0 8a60 	vmov.f32	s17, s1
 800b544:	f993 6000 	ldrsb.w	r6, [r3]
 800b548:	1c73      	adds	r3, r6, #1
 800b54a:	d02a      	beq.n	800b5a2 <sqrt+0x7a>
 800b54c:	4622      	mov	r2, r4
 800b54e:	462b      	mov	r3, r5
 800b550:	4620      	mov	r0, r4
 800b552:	4629      	mov	r1, r5
 800b554:	f7f5 facc 	bl	8000af0 <__aeabi_dcmpun>
 800b558:	4607      	mov	r7, r0
 800b55a:	bb10      	cbnz	r0, 800b5a2 <sqrt+0x7a>
 800b55c:	f04f 0800 	mov.w	r8, #0
 800b560:	f04f 0900 	mov.w	r9, #0
 800b564:	4642      	mov	r2, r8
 800b566:	464b      	mov	r3, r9
 800b568:	4620      	mov	r0, r4
 800b56a:	4629      	mov	r1, r5
 800b56c:	f7f5 fa98 	bl	8000aa0 <__aeabi_dcmplt>
 800b570:	b1b8      	cbz	r0, 800b5a2 <sqrt+0x7a>
 800b572:	2301      	movs	r3, #1
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	4b18      	ldr	r3, [pc, #96]	; (800b5d8 <sqrt+0xb0>)
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	9708      	str	r7, [sp, #32]
 800b57c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b580:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b584:	b9b6      	cbnz	r6, 800b5b4 <sqrt+0x8c>
 800b586:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b58a:	4668      	mov	r0, sp
 800b58c:	f000 fdf7 	bl	800c17e <matherr>
 800b590:	b1d0      	cbz	r0, 800b5c8 <sqrt+0xa0>
 800b592:	9b08      	ldr	r3, [sp, #32]
 800b594:	b11b      	cbz	r3, 800b59e <sqrt+0x76>
 800b596:	f7fd ff61 	bl	800945c <__errno>
 800b59a:	9b08      	ldr	r3, [sp, #32]
 800b59c:	6003      	str	r3, [r0, #0]
 800b59e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b5a2:	eeb0 0a48 	vmov.f32	s0, s16
 800b5a6:	eef0 0a68 	vmov.f32	s1, s17
 800b5aa:	b00b      	add	sp, #44	; 0x2c
 800b5ac:	ecbd 8b02 	vpop	{d8}
 800b5b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5b4:	4642      	mov	r2, r8
 800b5b6:	464b      	mov	r3, r9
 800b5b8:	4640      	mov	r0, r8
 800b5ba:	4649      	mov	r1, r9
 800b5bc:	f7f5 f928 	bl	8000810 <__aeabi_ddiv>
 800b5c0:	2e02      	cmp	r6, #2
 800b5c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b5c6:	d1e0      	bne.n	800b58a <sqrt+0x62>
 800b5c8:	f7fd ff48 	bl	800945c <__errno>
 800b5cc:	2321      	movs	r3, #33	; 0x21
 800b5ce:	6003      	str	r3, [r0, #0]
 800b5d0:	e7df      	b.n	800b592 <sqrt+0x6a>
 800b5d2:	bf00      	nop
 800b5d4:	200001e0 	.word	0x200001e0
 800b5d8:	0800c751 	.word	0x0800c751
 800b5dc:	00000000 	.word	0x00000000

0800b5e0 <__ieee754_pow>:
 800b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e4:	b091      	sub	sp, #68	; 0x44
 800b5e6:	ed8d 1b00 	vstr	d1, [sp]
 800b5ea:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b5ee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b5f2:	ea58 0302 	orrs.w	r3, r8, r2
 800b5f6:	ec57 6b10 	vmov	r6, r7, d0
 800b5fa:	f000 84be 	beq.w	800bf7a <__ieee754_pow+0x99a>
 800b5fe:	4b7a      	ldr	r3, [pc, #488]	; (800b7e8 <__ieee754_pow+0x208>)
 800b600:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b604:	429c      	cmp	r4, r3
 800b606:	463d      	mov	r5, r7
 800b608:	ee10 aa10 	vmov	sl, s0
 800b60c:	dc09      	bgt.n	800b622 <__ieee754_pow+0x42>
 800b60e:	d103      	bne.n	800b618 <__ieee754_pow+0x38>
 800b610:	b93e      	cbnz	r6, 800b622 <__ieee754_pow+0x42>
 800b612:	45a0      	cmp	r8, r4
 800b614:	dc0d      	bgt.n	800b632 <__ieee754_pow+0x52>
 800b616:	e001      	b.n	800b61c <__ieee754_pow+0x3c>
 800b618:	4598      	cmp	r8, r3
 800b61a:	dc02      	bgt.n	800b622 <__ieee754_pow+0x42>
 800b61c:	4598      	cmp	r8, r3
 800b61e:	d10e      	bne.n	800b63e <__ieee754_pow+0x5e>
 800b620:	b16a      	cbz	r2, 800b63e <__ieee754_pow+0x5e>
 800b622:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b626:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b62a:	ea54 030a 	orrs.w	r3, r4, sl
 800b62e:	f000 84a4 	beq.w	800bf7a <__ieee754_pow+0x99a>
 800b632:	486e      	ldr	r0, [pc, #440]	; (800b7ec <__ieee754_pow+0x20c>)
 800b634:	b011      	add	sp, #68	; 0x44
 800b636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63a:	f000 bda5 	b.w	800c188 <nan>
 800b63e:	2d00      	cmp	r5, #0
 800b640:	da53      	bge.n	800b6ea <__ieee754_pow+0x10a>
 800b642:	4b6b      	ldr	r3, [pc, #428]	; (800b7f0 <__ieee754_pow+0x210>)
 800b644:	4598      	cmp	r8, r3
 800b646:	dc4d      	bgt.n	800b6e4 <__ieee754_pow+0x104>
 800b648:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b64c:	4598      	cmp	r8, r3
 800b64e:	dd4c      	ble.n	800b6ea <__ieee754_pow+0x10a>
 800b650:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b654:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b658:	2b14      	cmp	r3, #20
 800b65a:	dd26      	ble.n	800b6aa <__ieee754_pow+0xca>
 800b65c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b660:	fa22 f103 	lsr.w	r1, r2, r3
 800b664:	fa01 f303 	lsl.w	r3, r1, r3
 800b668:	4293      	cmp	r3, r2
 800b66a:	d13e      	bne.n	800b6ea <__ieee754_pow+0x10a>
 800b66c:	f001 0101 	and.w	r1, r1, #1
 800b670:	f1c1 0b02 	rsb	fp, r1, #2
 800b674:	2a00      	cmp	r2, #0
 800b676:	d15b      	bne.n	800b730 <__ieee754_pow+0x150>
 800b678:	4b5b      	ldr	r3, [pc, #364]	; (800b7e8 <__ieee754_pow+0x208>)
 800b67a:	4598      	cmp	r8, r3
 800b67c:	d124      	bne.n	800b6c8 <__ieee754_pow+0xe8>
 800b67e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b682:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b686:	ea53 030a 	orrs.w	r3, r3, sl
 800b68a:	f000 8476 	beq.w	800bf7a <__ieee754_pow+0x99a>
 800b68e:	4b59      	ldr	r3, [pc, #356]	; (800b7f4 <__ieee754_pow+0x214>)
 800b690:	429c      	cmp	r4, r3
 800b692:	dd2d      	ble.n	800b6f0 <__ieee754_pow+0x110>
 800b694:	f1b9 0f00 	cmp.w	r9, #0
 800b698:	f280 8473 	bge.w	800bf82 <__ieee754_pow+0x9a2>
 800b69c:	2000      	movs	r0, #0
 800b69e:	2100      	movs	r1, #0
 800b6a0:	ec41 0b10 	vmov	d0, r0, r1
 800b6a4:	b011      	add	sp, #68	; 0x44
 800b6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6aa:	2a00      	cmp	r2, #0
 800b6ac:	d13e      	bne.n	800b72c <__ieee754_pow+0x14c>
 800b6ae:	f1c3 0314 	rsb	r3, r3, #20
 800b6b2:	fa48 f103 	asr.w	r1, r8, r3
 800b6b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ba:	4543      	cmp	r3, r8
 800b6bc:	f040 8469 	bne.w	800bf92 <__ieee754_pow+0x9b2>
 800b6c0:	f001 0101 	and.w	r1, r1, #1
 800b6c4:	f1c1 0b02 	rsb	fp, r1, #2
 800b6c8:	4b4b      	ldr	r3, [pc, #300]	; (800b7f8 <__ieee754_pow+0x218>)
 800b6ca:	4598      	cmp	r8, r3
 800b6cc:	d118      	bne.n	800b700 <__ieee754_pow+0x120>
 800b6ce:	f1b9 0f00 	cmp.w	r9, #0
 800b6d2:	f280 845a 	bge.w	800bf8a <__ieee754_pow+0x9aa>
 800b6d6:	4948      	ldr	r1, [pc, #288]	; (800b7f8 <__ieee754_pow+0x218>)
 800b6d8:	4632      	mov	r2, r6
 800b6da:	463b      	mov	r3, r7
 800b6dc:	2000      	movs	r0, #0
 800b6de:	f7f5 f897 	bl	8000810 <__aeabi_ddiv>
 800b6e2:	e7dd      	b.n	800b6a0 <__ieee754_pow+0xc0>
 800b6e4:	f04f 0b02 	mov.w	fp, #2
 800b6e8:	e7c4      	b.n	800b674 <__ieee754_pow+0x94>
 800b6ea:	f04f 0b00 	mov.w	fp, #0
 800b6ee:	e7c1      	b.n	800b674 <__ieee754_pow+0x94>
 800b6f0:	f1b9 0f00 	cmp.w	r9, #0
 800b6f4:	dad2      	bge.n	800b69c <__ieee754_pow+0xbc>
 800b6f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b6fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b6fe:	e7cf      	b.n	800b6a0 <__ieee754_pow+0xc0>
 800b700:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b704:	d106      	bne.n	800b714 <__ieee754_pow+0x134>
 800b706:	4632      	mov	r2, r6
 800b708:	463b      	mov	r3, r7
 800b70a:	4610      	mov	r0, r2
 800b70c:	4619      	mov	r1, r3
 800b70e:	f7f4 ff55 	bl	80005bc <__aeabi_dmul>
 800b712:	e7c5      	b.n	800b6a0 <__ieee754_pow+0xc0>
 800b714:	4b39      	ldr	r3, [pc, #228]	; (800b7fc <__ieee754_pow+0x21c>)
 800b716:	4599      	cmp	r9, r3
 800b718:	d10a      	bne.n	800b730 <__ieee754_pow+0x150>
 800b71a:	2d00      	cmp	r5, #0
 800b71c:	db08      	blt.n	800b730 <__ieee754_pow+0x150>
 800b71e:	ec47 6b10 	vmov	d0, r6, r7
 800b722:	b011      	add	sp, #68	; 0x44
 800b724:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b728:	f000 bc68 	b.w	800bffc <__ieee754_sqrt>
 800b72c:	f04f 0b00 	mov.w	fp, #0
 800b730:	ec47 6b10 	vmov	d0, r6, r7
 800b734:	f000 fd12 	bl	800c15c <fabs>
 800b738:	ec51 0b10 	vmov	r0, r1, d0
 800b73c:	f1ba 0f00 	cmp.w	sl, #0
 800b740:	d127      	bne.n	800b792 <__ieee754_pow+0x1b2>
 800b742:	b124      	cbz	r4, 800b74e <__ieee754_pow+0x16e>
 800b744:	4b2c      	ldr	r3, [pc, #176]	; (800b7f8 <__ieee754_pow+0x218>)
 800b746:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d121      	bne.n	800b792 <__ieee754_pow+0x1b2>
 800b74e:	f1b9 0f00 	cmp.w	r9, #0
 800b752:	da05      	bge.n	800b760 <__ieee754_pow+0x180>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	2000      	movs	r0, #0
 800b75a:	4927      	ldr	r1, [pc, #156]	; (800b7f8 <__ieee754_pow+0x218>)
 800b75c:	f7f5 f858 	bl	8000810 <__aeabi_ddiv>
 800b760:	2d00      	cmp	r5, #0
 800b762:	da9d      	bge.n	800b6a0 <__ieee754_pow+0xc0>
 800b764:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b768:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b76c:	ea54 030b 	orrs.w	r3, r4, fp
 800b770:	d108      	bne.n	800b784 <__ieee754_pow+0x1a4>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	4610      	mov	r0, r2
 800b778:	4619      	mov	r1, r3
 800b77a:	f7f4 fd67 	bl	800024c <__aeabi_dsub>
 800b77e:	4602      	mov	r2, r0
 800b780:	460b      	mov	r3, r1
 800b782:	e7ac      	b.n	800b6de <__ieee754_pow+0xfe>
 800b784:	f1bb 0f01 	cmp.w	fp, #1
 800b788:	d18a      	bne.n	800b6a0 <__ieee754_pow+0xc0>
 800b78a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b78e:	4619      	mov	r1, r3
 800b790:	e786      	b.n	800b6a0 <__ieee754_pow+0xc0>
 800b792:	0fed      	lsrs	r5, r5, #31
 800b794:	1e6b      	subs	r3, r5, #1
 800b796:	930d      	str	r3, [sp, #52]	; 0x34
 800b798:	ea5b 0303 	orrs.w	r3, fp, r3
 800b79c:	d102      	bne.n	800b7a4 <__ieee754_pow+0x1c4>
 800b79e:	4632      	mov	r2, r6
 800b7a0:	463b      	mov	r3, r7
 800b7a2:	e7e8      	b.n	800b776 <__ieee754_pow+0x196>
 800b7a4:	4b16      	ldr	r3, [pc, #88]	; (800b800 <__ieee754_pow+0x220>)
 800b7a6:	4598      	cmp	r8, r3
 800b7a8:	f340 80fe 	ble.w	800b9a8 <__ieee754_pow+0x3c8>
 800b7ac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b7b0:	4598      	cmp	r8, r3
 800b7b2:	dd0a      	ble.n	800b7ca <__ieee754_pow+0x1ea>
 800b7b4:	4b0f      	ldr	r3, [pc, #60]	; (800b7f4 <__ieee754_pow+0x214>)
 800b7b6:	429c      	cmp	r4, r3
 800b7b8:	dc0d      	bgt.n	800b7d6 <__ieee754_pow+0x1f6>
 800b7ba:	f1b9 0f00 	cmp.w	r9, #0
 800b7be:	f6bf af6d 	bge.w	800b69c <__ieee754_pow+0xbc>
 800b7c2:	a307      	add	r3, pc, #28	; (adr r3, 800b7e0 <__ieee754_pow+0x200>)
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	e79f      	b.n	800b70a <__ieee754_pow+0x12a>
 800b7ca:	4b0e      	ldr	r3, [pc, #56]	; (800b804 <__ieee754_pow+0x224>)
 800b7cc:	429c      	cmp	r4, r3
 800b7ce:	ddf4      	ble.n	800b7ba <__ieee754_pow+0x1da>
 800b7d0:	4b09      	ldr	r3, [pc, #36]	; (800b7f8 <__ieee754_pow+0x218>)
 800b7d2:	429c      	cmp	r4, r3
 800b7d4:	dd18      	ble.n	800b808 <__ieee754_pow+0x228>
 800b7d6:	f1b9 0f00 	cmp.w	r9, #0
 800b7da:	dcf2      	bgt.n	800b7c2 <__ieee754_pow+0x1e2>
 800b7dc:	e75e      	b.n	800b69c <__ieee754_pow+0xbc>
 800b7de:	bf00      	nop
 800b7e0:	8800759c 	.word	0x8800759c
 800b7e4:	7e37e43c 	.word	0x7e37e43c
 800b7e8:	7ff00000 	.word	0x7ff00000
 800b7ec:	0800c549 	.word	0x0800c549
 800b7f0:	433fffff 	.word	0x433fffff
 800b7f4:	3fefffff 	.word	0x3fefffff
 800b7f8:	3ff00000 	.word	0x3ff00000
 800b7fc:	3fe00000 	.word	0x3fe00000
 800b800:	41e00000 	.word	0x41e00000
 800b804:	3feffffe 	.word	0x3feffffe
 800b808:	2200      	movs	r2, #0
 800b80a:	4b63      	ldr	r3, [pc, #396]	; (800b998 <__ieee754_pow+0x3b8>)
 800b80c:	f7f4 fd1e 	bl	800024c <__aeabi_dsub>
 800b810:	a355      	add	r3, pc, #340	; (adr r3, 800b968 <__ieee754_pow+0x388>)
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	4604      	mov	r4, r0
 800b818:	460d      	mov	r5, r1
 800b81a:	f7f4 fecf 	bl	80005bc <__aeabi_dmul>
 800b81e:	a354      	add	r3, pc, #336	; (adr r3, 800b970 <__ieee754_pow+0x390>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	4606      	mov	r6, r0
 800b826:	460f      	mov	r7, r1
 800b828:	4620      	mov	r0, r4
 800b82a:	4629      	mov	r1, r5
 800b82c:	f7f4 fec6 	bl	80005bc <__aeabi_dmul>
 800b830:	2200      	movs	r2, #0
 800b832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b836:	4b59      	ldr	r3, [pc, #356]	; (800b99c <__ieee754_pow+0x3bc>)
 800b838:	4620      	mov	r0, r4
 800b83a:	4629      	mov	r1, r5
 800b83c:	f7f4 febe 	bl	80005bc <__aeabi_dmul>
 800b840:	4602      	mov	r2, r0
 800b842:	460b      	mov	r3, r1
 800b844:	a14c      	add	r1, pc, #304	; (adr r1, 800b978 <__ieee754_pow+0x398>)
 800b846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b84a:	f7f4 fcff 	bl	800024c <__aeabi_dsub>
 800b84e:	4622      	mov	r2, r4
 800b850:	462b      	mov	r3, r5
 800b852:	f7f4 feb3 	bl	80005bc <__aeabi_dmul>
 800b856:	4602      	mov	r2, r0
 800b858:	460b      	mov	r3, r1
 800b85a:	2000      	movs	r0, #0
 800b85c:	4950      	ldr	r1, [pc, #320]	; (800b9a0 <__ieee754_pow+0x3c0>)
 800b85e:	f7f4 fcf5 	bl	800024c <__aeabi_dsub>
 800b862:	4622      	mov	r2, r4
 800b864:	462b      	mov	r3, r5
 800b866:	4680      	mov	r8, r0
 800b868:	4689      	mov	r9, r1
 800b86a:	4620      	mov	r0, r4
 800b86c:	4629      	mov	r1, r5
 800b86e:	f7f4 fea5 	bl	80005bc <__aeabi_dmul>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	4640      	mov	r0, r8
 800b878:	4649      	mov	r1, r9
 800b87a:	f7f4 fe9f 	bl	80005bc <__aeabi_dmul>
 800b87e:	a340      	add	r3, pc, #256	; (adr r3, 800b980 <__ieee754_pow+0x3a0>)
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	f7f4 fe9a 	bl	80005bc <__aeabi_dmul>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b890:	f7f4 fcdc 	bl	800024c <__aeabi_dsub>
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	4604      	mov	r4, r0
 800b89a:	460d      	mov	r5, r1
 800b89c:	4630      	mov	r0, r6
 800b89e:	4639      	mov	r1, r7
 800b8a0:	f7f4 fcd6 	bl	8000250 <__adddf3>
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8aa:	4632      	mov	r2, r6
 800b8ac:	463b      	mov	r3, r7
 800b8ae:	f7f4 fccd 	bl	800024c <__aeabi_dsub>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	f7f4 fcc7 	bl	800024c <__aeabi_dsub>
 800b8be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8c0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	4606      	mov	r6, r0
 800b8c8:	460f      	mov	r7, r1
 800b8ca:	f040 81eb 	bne.w	800bca4 <__ieee754_pow+0x6c4>
 800b8ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b988 <__ieee754_pow+0x3a8>
 800b8d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b8d6:	2400      	movs	r4, #0
 800b8d8:	4622      	mov	r2, r4
 800b8da:	462b      	mov	r3, r5
 800b8dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b8e4:	f7f4 fcb2 	bl	800024c <__aeabi_dsub>
 800b8e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8ec:	f7f4 fe66 	bl	80005bc <__aeabi_dmul>
 800b8f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8f4:	4680      	mov	r8, r0
 800b8f6:	4689      	mov	r9, r1
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	4639      	mov	r1, r7
 800b8fc:	f7f4 fe5e 	bl	80005bc <__aeabi_dmul>
 800b900:	4602      	mov	r2, r0
 800b902:	460b      	mov	r3, r1
 800b904:	4640      	mov	r0, r8
 800b906:	4649      	mov	r1, r9
 800b908:	f7f4 fca2 	bl	8000250 <__adddf3>
 800b90c:	4622      	mov	r2, r4
 800b90e:	462b      	mov	r3, r5
 800b910:	4680      	mov	r8, r0
 800b912:	4689      	mov	r9, r1
 800b914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b918:	f7f4 fe50 	bl	80005bc <__aeabi_dmul>
 800b91c:	460b      	mov	r3, r1
 800b91e:	4604      	mov	r4, r0
 800b920:	460d      	mov	r5, r1
 800b922:	4602      	mov	r2, r0
 800b924:	4649      	mov	r1, r9
 800b926:	4640      	mov	r0, r8
 800b928:	e9cd 4500 	strd	r4, r5, [sp]
 800b92c:	f7f4 fc90 	bl	8000250 <__adddf3>
 800b930:	4b1c      	ldr	r3, [pc, #112]	; (800b9a4 <__ieee754_pow+0x3c4>)
 800b932:	4299      	cmp	r1, r3
 800b934:	4606      	mov	r6, r0
 800b936:	460f      	mov	r7, r1
 800b938:	468b      	mov	fp, r1
 800b93a:	f340 82f7 	ble.w	800bf2c <__ieee754_pow+0x94c>
 800b93e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b942:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b946:	4303      	orrs	r3, r0
 800b948:	f000 81ea 	beq.w	800bd20 <__ieee754_pow+0x740>
 800b94c:	a310      	add	r3, pc, #64	; (adr r3, 800b990 <__ieee754_pow+0x3b0>)
 800b94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b956:	f7f4 fe31 	bl	80005bc <__aeabi_dmul>
 800b95a:	a30d      	add	r3, pc, #52	; (adr r3, 800b990 <__ieee754_pow+0x3b0>)
 800b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b960:	e6d5      	b.n	800b70e <__ieee754_pow+0x12e>
 800b962:	bf00      	nop
 800b964:	f3af 8000 	nop.w
 800b968:	60000000 	.word	0x60000000
 800b96c:	3ff71547 	.word	0x3ff71547
 800b970:	f85ddf44 	.word	0xf85ddf44
 800b974:	3e54ae0b 	.word	0x3e54ae0b
 800b978:	55555555 	.word	0x55555555
 800b97c:	3fd55555 	.word	0x3fd55555
 800b980:	652b82fe 	.word	0x652b82fe
 800b984:	3ff71547 	.word	0x3ff71547
 800b988:	00000000 	.word	0x00000000
 800b98c:	bff00000 	.word	0xbff00000
 800b990:	8800759c 	.word	0x8800759c
 800b994:	7e37e43c 	.word	0x7e37e43c
 800b998:	3ff00000 	.word	0x3ff00000
 800b99c:	3fd00000 	.word	0x3fd00000
 800b9a0:	3fe00000 	.word	0x3fe00000
 800b9a4:	408fffff 	.word	0x408fffff
 800b9a8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b9ac:	f04f 0200 	mov.w	r2, #0
 800b9b0:	da05      	bge.n	800b9be <__ieee754_pow+0x3de>
 800b9b2:	4bd3      	ldr	r3, [pc, #844]	; (800bd00 <__ieee754_pow+0x720>)
 800b9b4:	f7f4 fe02 	bl	80005bc <__aeabi_dmul>
 800b9b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b9bc:	460c      	mov	r4, r1
 800b9be:	1523      	asrs	r3, r4, #20
 800b9c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b9c4:	4413      	add	r3, r2
 800b9c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c8:	4bce      	ldr	r3, [pc, #824]	; (800bd04 <__ieee754_pow+0x724>)
 800b9ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b9ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b9d2:	429c      	cmp	r4, r3
 800b9d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b9d8:	dd08      	ble.n	800b9ec <__ieee754_pow+0x40c>
 800b9da:	4bcb      	ldr	r3, [pc, #812]	; (800bd08 <__ieee754_pow+0x728>)
 800b9dc:	429c      	cmp	r4, r3
 800b9de:	f340 815e 	ble.w	800bc9e <__ieee754_pow+0x6be>
 800b9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b9ec:	f04f 0a00 	mov.w	sl, #0
 800b9f0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b9f4:	930c      	str	r3, [sp, #48]	; 0x30
 800b9f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9f8:	4bc4      	ldr	r3, [pc, #784]	; (800bd0c <__ieee754_pow+0x72c>)
 800b9fa:	4413      	add	r3, r2
 800b9fc:	ed93 7b00 	vldr	d7, [r3]
 800ba00:	4629      	mov	r1, r5
 800ba02:	ec53 2b17 	vmov	r2, r3, d7
 800ba06:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ba0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ba0e:	f7f4 fc1d 	bl	800024c <__aeabi_dsub>
 800ba12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba16:	4606      	mov	r6, r0
 800ba18:	460f      	mov	r7, r1
 800ba1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba1e:	f7f4 fc17 	bl	8000250 <__adddf3>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	2000      	movs	r0, #0
 800ba28:	49b9      	ldr	r1, [pc, #740]	; (800bd10 <__ieee754_pow+0x730>)
 800ba2a:	f7f4 fef1 	bl	8000810 <__aeabi_ddiv>
 800ba2e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	4630      	mov	r0, r6
 800ba38:	4639      	mov	r1, r7
 800ba3a:	f7f4 fdbf 	bl	80005bc <__aeabi_dmul>
 800ba3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba42:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ba46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	9302      	str	r3, [sp, #8]
 800ba4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ba52:	106d      	asrs	r5, r5, #1
 800ba54:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ba58:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800ba62:	4640      	mov	r0, r8
 800ba64:	4649      	mov	r1, r9
 800ba66:	4614      	mov	r4, r2
 800ba68:	461d      	mov	r5, r3
 800ba6a:	f7f4 fda7 	bl	80005bc <__aeabi_dmul>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	460b      	mov	r3, r1
 800ba72:	4630      	mov	r0, r6
 800ba74:	4639      	mov	r1, r7
 800ba76:	f7f4 fbe9 	bl	800024c <__aeabi_dsub>
 800ba7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	4620      	mov	r0, r4
 800ba84:	4629      	mov	r1, r5
 800ba86:	f7f4 fbe1 	bl	800024c <__aeabi_dsub>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba92:	f7f4 fbdb 	bl	800024c <__aeabi_dsub>
 800ba96:	4642      	mov	r2, r8
 800ba98:	464b      	mov	r3, r9
 800ba9a:	f7f4 fd8f 	bl	80005bc <__aeabi_dmul>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	4630      	mov	r0, r6
 800baa4:	4639      	mov	r1, r7
 800baa6:	f7f4 fbd1 	bl	800024c <__aeabi_dsub>
 800baaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800baae:	f7f4 fd85 	bl	80005bc <__aeabi_dmul>
 800bab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bab6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800baba:	4610      	mov	r0, r2
 800babc:	4619      	mov	r1, r3
 800babe:	f7f4 fd7d 	bl	80005bc <__aeabi_dmul>
 800bac2:	a37b      	add	r3, pc, #492	; (adr r3, 800bcb0 <__ieee754_pow+0x6d0>)
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	4604      	mov	r4, r0
 800baca:	460d      	mov	r5, r1
 800bacc:	f7f4 fd76 	bl	80005bc <__aeabi_dmul>
 800bad0:	a379      	add	r3, pc, #484	; (adr r3, 800bcb8 <__ieee754_pow+0x6d8>)
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	f7f4 fbbb 	bl	8000250 <__adddf3>
 800bada:	4622      	mov	r2, r4
 800badc:	462b      	mov	r3, r5
 800bade:	f7f4 fd6d 	bl	80005bc <__aeabi_dmul>
 800bae2:	a377      	add	r3, pc, #476	; (adr r3, 800bcc0 <__ieee754_pow+0x6e0>)
 800bae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae8:	f7f4 fbb2 	bl	8000250 <__adddf3>
 800baec:	4622      	mov	r2, r4
 800baee:	462b      	mov	r3, r5
 800baf0:	f7f4 fd64 	bl	80005bc <__aeabi_dmul>
 800baf4:	a374      	add	r3, pc, #464	; (adr r3, 800bcc8 <__ieee754_pow+0x6e8>)
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	f7f4 fba9 	bl	8000250 <__adddf3>
 800bafe:	4622      	mov	r2, r4
 800bb00:	462b      	mov	r3, r5
 800bb02:	f7f4 fd5b 	bl	80005bc <__aeabi_dmul>
 800bb06:	a372      	add	r3, pc, #456	; (adr r3, 800bcd0 <__ieee754_pow+0x6f0>)
 800bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0c:	f7f4 fba0 	bl	8000250 <__adddf3>
 800bb10:	4622      	mov	r2, r4
 800bb12:	462b      	mov	r3, r5
 800bb14:	f7f4 fd52 	bl	80005bc <__aeabi_dmul>
 800bb18:	a36f      	add	r3, pc, #444	; (adr r3, 800bcd8 <__ieee754_pow+0x6f8>)
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	f7f4 fb97 	bl	8000250 <__adddf3>
 800bb22:	4622      	mov	r2, r4
 800bb24:	4606      	mov	r6, r0
 800bb26:	460f      	mov	r7, r1
 800bb28:	462b      	mov	r3, r5
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	f7f4 fd45 	bl	80005bc <__aeabi_dmul>
 800bb32:	4602      	mov	r2, r0
 800bb34:	460b      	mov	r3, r1
 800bb36:	4630      	mov	r0, r6
 800bb38:	4639      	mov	r1, r7
 800bb3a:	f7f4 fd3f 	bl	80005bc <__aeabi_dmul>
 800bb3e:	4642      	mov	r2, r8
 800bb40:	4604      	mov	r4, r0
 800bb42:	460d      	mov	r5, r1
 800bb44:	464b      	mov	r3, r9
 800bb46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb4a:	f7f4 fb81 	bl	8000250 <__adddf3>
 800bb4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb52:	f7f4 fd33 	bl	80005bc <__aeabi_dmul>
 800bb56:	4622      	mov	r2, r4
 800bb58:	462b      	mov	r3, r5
 800bb5a:	f7f4 fb79 	bl	8000250 <__adddf3>
 800bb5e:	4642      	mov	r2, r8
 800bb60:	4606      	mov	r6, r0
 800bb62:	460f      	mov	r7, r1
 800bb64:	464b      	mov	r3, r9
 800bb66:	4640      	mov	r0, r8
 800bb68:	4649      	mov	r1, r9
 800bb6a:	f7f4 fd27 	bl	80005bc <__aeabi_dmul>
 800bb6e:	2200      	movs	r2, #0
 800bb70:	4b68      	ldr	r3, [pc, #416]	; (800bd14 <__ieee754_pow+0x734>)
 800bb72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bb76:	f7f4 fb6b 	bl	8000250 <__adddf3>
 800bb7a:	4632      	mov	r2, r6
 800bb7c:	463b      	mov	r3, r7
 800bb7e:	f7f4 fb67 	bl	8000250 <__adddf3>
 800bb82:	9802      	ldr	r0, [sp, #8]
 800bb84:	460d      	mov	r5, r1
 800bb86:	4604      	mov	r4, r0
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	4640      	mov	r0, r8
 800bb8e:	4649      	mov	r1, r9
 800bb90:	f7f4 fd14 	bl	80005bc <__aeabi_dmul>
 800bb94:	2200      	movs	r2, #0
 800bb96:	4680      	mov	r8, r0
 800bb98:	4689      	mov	r9, r1
 800bb9a:	4b5e      	ldr	r3, [pc, #376]	; (800bd14 <__ieee754_pow+0x734>)
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	4629      	mov	r1, r5
 800bba0:	f7f4 fb54 	bl	800024c <__aeabi_dsub>
 800bba4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bba8:	f7f4 fb50 	bl	800024c <__aeabi_dsub>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	f7f4 fb4a 	bl	800024c <__aeabi_dsub>
 800bbb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbbc:	f7f4 fcfe 	bl	80005bc <__aeabi_dmul>
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	460f      	mov	r7, r1
 800bbc6:	462b      	mov	r3, r5
 800bbc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbcc:	f7f4 fcf6 	bl	80005bc <__aeabi_dmul>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	4639      	mov	r1, r7
 800bbd8:	f7f4 fb3a 	bl	8000250 <__adddf3>
 800bbdc:	4606      	mov	r6, r0
 800bbde:	460f      	mov	r7, r1
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	4649      	mov	r1, r9
 800bbe8:	f7f4 fb32 	bl	8000250 <__adddf3>
 800bbec:	9802      	ldr	r0, [sp, #8]
 800bbee:	a33c      	add	r3, pc, #240	; (adr r3, 800bce0 <__ieee754_pow+0x700>)
 800bbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	460d      	mov	r5, r1
 800bbf8:	f7f4 fce0 	bl	80005bc <__aeabi_dmul>
 800bbfc:	4642      	mov	r2, r8
 800bbfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc02:	464b      	mov	r3, r9
 800bc04:	4620      	mov	r0, r4
 800bc06:	4629      	mov	r1, r5
 800bc08:	f7f4 fb20 	bl	800024c <__aeabi_dsub>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	4630      	mov	r0, r6
 800bc12:	4639      	mov	r1, r7
 800bc14:	f7f4 fb1a 	bl	800024c <__aeabi_dsub>
 800bc18:	a333      	add	r3, pc, #204	; (adr r3, 800bce8 <__ieee754_pow+0x708>)
 800bc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1e:	f7f4 fccd 	bl	80005bc <__aeabi_dmul>
 800bc22:	a333      	add	r3, pc, #204	; (adr r3, 800bcf0 <__ieee754_pow+0x710>)
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	4606      	mov	r6, r0
 800bc2a:	460f      	mov	r7, r1
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	4629      	mov	r1, r5
 800bc30:	f7f4 fcc4 	bl	80005bc <__aeabi_dmul>
 800bc34:	4602      	mov	r2, r0
 800bc36:	460b      	mov	r3, r1
 800bc38:	4630      	mov	r0, r6
 800bc3a:	4639      	mov	r1, r7
 800bc3c:	f7f4 fb08 	bl	8000250 <__adddf3>
 800bc40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc42:	4b35      	ldr	r3, [pc, #212]	; (800bd18 <__ieee754_pow+0x738>)
 800bc44:	4413      	add	r3, r2
 800bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4a:	f7f4 fb01 	bl	8000250 <__adddf3>
 800bc4e:	4604      	mov	r4, r0
 800bc50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc52:	460d      	mov	r5, r1
 800bc54:	f7f4 fc48 	bl	80004e8 <__aeabi_i2d>
 800bc58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc5a:	4b30      	ldr	r3, [pc, #192]	; (800bd1c <__ieee754_pow+0x73c>)
 800bc5c:	4413      	add	r3, r2
 800bc5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc62:	4606      	mov	r6, r0
 800bc64:	460f      	mov	r7, r1
 800bc66:	4622      	mov	r2, r4
 800bc68:	462b      	mov	r3, r5
 800bc6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc6e:	f7f4 faef 	bl	8000250 <__adddf3>
 800bc72:	4642      	mov	r2, r8
 800bc74:	464b      	mov	r3, r9
 800bc76:	f7f4 faeb 	bl	8000250 <__adddf3>
 800bc7a:	4632      	mov	r2, r6
 800bc7c:	463b      	mov	r3, r7
 800bc7e:	f7f4 fae7 	bl	8000250 <__adddf3>
 800bc82:	9802      	ldr	r0, [sp, #8]
 800bc84:	4632      	mov	r2, r6
 800bc86:	463b      	mov	r3, r7
 800bc88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc8c:	f7f4 fade 	bl	800024c <__aeabi_dsub>
 800bc90:	4642      	mov	r2, r8
 800bc92:	464b      	mov	r3, r9
 800bc94:	f7f4 fada 	bl	800024c <__aeabi_dsub>
 800bc98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc9c:	e607      	b.n	800b8ae <__ieee754_pow+0x2ce>
 800bc9e:	f04f 0a01 	mov.w	sl, #1
 800bca2:	e6a5      	b.n	800b9f0 <__ieee754_pow+0x410>
 800bca4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800bcf8 <__ieee754_pow+0x718>
 800bca8:	e613      	b.n	800b8d2 <__ieee754_pow+0x2f2>
 800bcaa:	bf00      	nop
 800bcac:	f3af 8000 	nop.w
 800bcb0:	4a454eef 	.word	0x4a454eef
 800bcb4:	3fca7e28 	.word	0x3fca7e28
 800bcb8:	93c9db65 	.word	0x93c9db65
 800bcbc:	3fcd864a 	.word	0x3fcd864a
 800bcc0:	a91d4101 	.word	0xa91d4101
 800bcc4:	3fd17460 	.word	0x3fd17460
 800bcc8:	518f264d 	.word	0x518f264d
 800bccc:	3fd55555 	.word	0x3fd55555
 800bcd0:	db6fabff 	.word	0xdb6fabff
 800bcd4:	3fdb6db6 	.word	0x3fdb6db6
 800bcd8:	33333303 	.word	0x33333303
 800bcdc:	3fe33333 	.word	0x3fe33333
 800bce0:	e0000000 	.word	0xe0000000
 800bce4:	3feec709 	.word	0x3feec709
 800bce8:	dc3a03fd 	.word	0xdc3a03fd
 800bcec:	3feec709 	.word	0x3feec709
 800bcf0:	145b01f5 	.word	0x145b01f5
 800bcf4:	be3e2fe0 	.word	0xbe3e2fe0
 800bcf8:	00000000 	.word	0x00000000
 800bcfc:	3ff00000 	.word	0x3ff00000
 800bd00:	43400000 	.word	0x43400000
 800bd04:	0003988e 	.word	0x0003988e
 800bd08:	000bb679 	.word	0x000bb679
 800bd0c:	0800c758 	.word	0x0800c758
 800bd10:	3ff00000 	.word	0x3ff00000
 800bd14:	40080000 	.word	0x40080000
 800bd18:	0800c778 	.word	0x0800c778
 800bd1c:	0800c768 	.word	0x0800c768
 800bd20:	a3b4      	add	r3, pc, #720	; (adr r3, 800bff4 <__ieee754_pow+0xa14>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	4640      	mov	r0, r8
 800bd28:	4649      	mov	r1, r9
 800bd2a:	f7f4 fa91 	bl	8000250 <__adddf3>
 800bd2e:	4622      	mov	r2, r4
 800bd30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd34:	462b      	mov	r3, r5
 800bd36:	4630      	mov	r0, r6
 800bd38:	4639      	mov	r1, r7
 800bd3a:	f7f4 fa87 	bl	800024c <__aeabi_dsub>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	460b      	mov	r3, r1
 800bd42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd46:	f7f4 fec9 	bl	8000adc <__aeabi_dcmpgt>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	f47f adfe 	bne.w	800b94c <__ieee754_pow+0x36c>
 800bd50:	4aa3      	ldr	r2, [pc, #652]	; (800bfe0 <__ieee754_pow+0xa00>)
 800bd52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd56:	4293      	cmp	r3, r2
 800bd58:	f340 810a 	ble.w	800bf70 <__ieee754_pow+0x990>
 800bd5c:	151b      	asrs	r3, r3, #20
 800bd5e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bd62:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bd66:	fa4a f303 	asr.w	r3, sl, r3
 800bd6a:	445b      	add	r3, fp
 800bd6c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bd70:	4e9c      	ldr	r6, [pc, #624]	; (800bfe4 <__ieee754_pow+0xa04>)
 800bd72:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bd76:	4116      	asrs	r6, r2
 800bd78:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	ea23 0106 	bic.w	r1, r3, r6
 800bd82:	f1c2 0214 	rsb	r2, r2, #20
 800bd86:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bd8a:	fa4a fa02 	asr.w	sl, sl, r2
 800bd8e:	f1bb 0f00 	cmp.w	fp, #0
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	4620      	mov	r0, r4
 800bd98:	4629      	mov	r1, r5
 800bd9a:	bfb8      	it	lt
 800bd9c:	f1ca 0a00 	rsblt	sl, sl, #0
 800bda0:	f7f4 fa54 	bl	800024c <__aeabi_dsub>
 800bda4:	e9cd 0100 	strd	r0, r1, [sp]
 800bda8:	4642      	mov	r2, r8
 800bdaa:	464b      	mov	r3, r9
 800bdac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdb0:	f7f4 fa4e 	bl	8000250 <__adddf3>
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	a378      	add	r3, pc, #480	; (adr r3, 800bf98 <__ieee754_pow+0x9b8>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	460d      	mov	r5, r1
 800bdc0:	f7f4 fbfc 	bl	80005bc <__aeabi_dmul>
 800bdc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdc8:	4606      	mov	r6, r0
 800bdca:	460f      	mov	r7, r1
 800bdcc:	4620      	mov	r0, r4
 800bdce:	4629      	mov	r1, r5
 800bdd0:	f7f4 fa3c 	bl	800024c <__aeabi_dsub>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	4640      	mov	r0, r8
 800bdda:	4649      	mov	r1, r9
 800bddc:	f7f4 fa36 	bl	800024c <__aeabi_dsub>
 800bde0:	a36f      	add	r3, pc, #444	; (adr r3, 800bfa0 <__ieee754_pow+0x9c0>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	f7f4 fbe9 	bl	80005bc <__aeabi_dmul>
 800bdea:	a36f      	add	r3, pc, #444	; (adr r3, 800bfa8 <__ieee754_pow+0x9c8>)
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	4680      	mov	r8, r0
 800bdf2:	4689      	mov	r9, r1
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	f7f4 fbe0 	bl	80005bc <__aeabi_dmul>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4640      	mov	r0, r8
 800be02:	4649      	mov	r1, r9
 800be04:	f7f4 fa24 	bl	8000250 <__adddf3>
 800be08:	4604      	mov	r4, r0
 800be0a:	460d      	mov	r5, r1
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4630      	mov	r0, r6
 800be12:	4639      	mov	r1, r7
 800be14:	f7f4 fa1c 	bl	8000250 <__adddf3>
 800be18:	4632      	mov	r2, r6
 800be1a:	463b      	mov	r3, r7
 800be1c:	4680      	mov	r8, r0
 800be1e:	4689      	mov	r9, r1
 800be20:	f7f4 fa14 	bl	800024c <__aeabi_dsub>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	4620      	mov	r0, r4
 800be2a:	4629      	mov	r1, r5
 800be2c:	f7f4 fa0e 	bl	800024c <__aeabi_dsub>
 800be30:	4642      	mov	r2, r8
 800be32:	4606      	mov	r6, r0
 800be34:	460f      	mov	r7, r1
 800be36:	464b      	mov	r3, r9
 800be38:	4640      	mov	r0, r8
 800be3a:	4649      	mov	r1, r9
 800be3c:	f7f4 fbbe 	bl	80005bc <__aeabi_dmul>
 800be40:	a35b      	add	r3, pc, #364	; (adr r3, 800bfb0 <__ieee754_pow+0x9d0>)
 800be42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be46:	4604      	mov	r4, r0
 800be48:	460d      	mov	r5, r1
 800be4a:	f7f4 fbb7 	bl	80005bc <__aeabi_dmul>
 800be4e:	a35a      	add	r3, pc, #360	; (adr r3, 800bfb8 <__ieee754_pow+0x9d8>)
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	f7f4 f9fa 	bl	800024c <__aeabi_dsub>
 800be58:	4622      	mov	r2, r4
 800be5a:	462b      	mov	r3, r5
 800be5c:	f7f4 fbae 	bl	80005bc <__aeabi_dmul>
 800be60:	a357      	add	r3, pc, #348	; (adr r3, 800bfc0 <__ieee754_pow+0x9e0>)
 800be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be66:	f7f4 f9f3 	bl	8000250 <__adddf3>
 800be6a:	4622      	mov	r2, r4
 800be6c:	462b      	mov	r3, r5
 800be6e:	f7f4 fba5 	bl	80005bc <__aeabi_dmul>
 800be72:	a355      	add	r3, pc, #340	; (adr r3, 800bfc8 <__ieee754_pow+0x9e8>)
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f7f4 f9e8 	bl	800024c <__aeabi_dsub>
 800be7c:	4622      	mov	r2, r4
 800be7e:	462b      	mov	r3, r5
 800be80:	f7f4 fb9c 	bl	80005bc <__aeabi_dmul>
 800be84:	a352      	add	r3, pc, #328	; (adr r3, 800bfd0 <__ieee754_pow+0x9f0>)
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	f7f4 f9e1 	bl	8000250 <__adddf3>
 800be8e:	4622      	mov	r2, r4
 800be90:	462b      	mov	r3, r5
 800be92:	f7f4 fb93 	bl	80005bc <__aeabi_dmul>
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	4640      	mov	r0, r8
 800be9c:	4649      	mov	r1, r9
 800be9e:	f7f4 f9d5 	bl	800024c <__aeabi_dsub>
 800bea2:	4604      	mov	r4, r0
 800bea4:	460d      	mov	r5, r1
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	4640      	mov	r0, r8
 800beac:	4649      	mov	r1, r9
 800beae:	f7f4 fb85 	bl	80005bc <__aeabi_dmul>
 800beb2:	2200      	movs	r2, #0
 800beb4:	e9cd 0100 	strd	r0, r1, [sp]
 800beb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bebc:	4620      	mov	r0, r4
 800bebe:	4629      	mov	r1, r5
 800bec0:	f7f4 f9c4 	bl	800024c <__aeabi_dsub>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800becc:	f7f4 fca0 	bl	8000810 <__aeabi_ddiv>
 800bed0:	4632      	mov	r2, r6
 800bed2:	4604      	mov	r4, r0
 800bed4:	460d      	mov	r5, r1
 800bed6:	463b      	mov	r3, r7
 800bed8:	4640      	mov	r0, r8
 800beda:	4649      	mov	r1, r9
 800bedc:	f7f4 fb6e 	bl	80005bc <__aeabi_dmul>
 800bee0:	4632      	mov	r2, r6
 800bee2:	463b      	mov	r3, r7
 800bee4:	f7f4 f9b4 	bl	8000250 <__adddf3>
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	4620      	mov	r0, r4
 800beee:	4629      	mov	r1, r5
 800bef0:	f7f4 f9ac 	bl	800024c <__aeabi_dsub>
 800bef4:	4642      	mov	r2, r8
 800bef6:	464b      	mov	r3, r9
 800bef8:	f7f4 f9a8 	bl	800024c <__aeabi_dsub>
 800befc:	4602      	mov	r2, r0
 800befe:	460b      	mov	r3, r1
 800bf00:	2000      	movs	r0, #0
 800bf02:	4939      	ldr	r1, [pc, #228]	; (800bfe8 <__ieee754_pow+0xa08>)
 800bf04:	f7f4 f9a2 	bl	800024c <__aeabi_dsub>
 800bf08:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bf0c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	da2f      	bge.n	800bf76 <__ieee754_pow+0x996>
 800bf16:	4650      	mov	r0, sl
 800bf18:	ec43 2b10 	vmov	d0, r2, r3
 800bf1c:	f000 f9c0 	bl	800c2a0 <scalbn>
 800bf20:	ec51 0b10 	vmov	r0, r1, d0
 800bf24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf28:	f7ff bbf1 	b.w	800b70e <__ieee754_pow+0x12e>
 800bf2c:	4b2f      	ldr	r3, [pc, #188]	; (800bfec <__ieee754_pow+0xa0c>)
 800bf2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bf32:	429e      	cmp	r6, r3
 800bf34:	f77f af0c 	ble.w	800bd50 <__ieee754_pow+0x770>
 800bf38:	4b2d      	ldr	r3, [pc, #180]	; (800bff0 <__ieee754_pow+0xa10>)
 800bf3a:	440b      	add	r3, r1
 800bf3c:	4303      	orrs	r3, r0
 800bf3e:	d00b      	beq.n	800bf58 <__ieee754_pow+0x978>
 800bf40:	a325      	add	r3, pc, #148	; (adr r3, 800bfd8 <__ieee754_pow+0x9f8>)
 800bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf4a:	f7f4 fb37 	bl	80005bc <__aeabi_dmul>
 800bf4e:	a322      	add	r3, pc, #136	; (adr r3, 800bfd8 <__ieee754_pow+0x9f8>)
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	f7ff bbdb 	b.w	800b70e <__ieee754_pow+0x12e>
 800bf58:	4622      	mov	r2, r4
 800bf5a:	462b      	mov	r3, r5
 800bf5c:	f7f4 f976 	bl	800024c <__aeabi_dsub>
 800bf60:	4642      	mov	r2, r8
 800bf62:	464b      	mov	r3, r9
 800bf64:	f7f4 fdb0 	bl	8000ac8 <__aeabi_dcmpge>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	f43f aef1 	beq.w	800bd50 <__ieee754_pow+0x770>
 800bf6e:	e7e7      	b.n	800bf40 <__ieee754_pow+0x960>
 800bf70:	f04f 0a00 	mov.w	sl, #0
 800bf74:	e718      	b.n	800bda8 <__ieee754_pow+0x7c8>
 800bf76:	4621      	mov	r1, r4
 800bf78:	e7d4      	b.n	800bf24 <__ieee754_pow+0x944>
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	491a      	ldr	r1, [pc, #104]	; (800bfe8 <__ieee754_pow+0xa08>)
 800bf7e:	f7ff bb8f 	b.w	800b6a0 <__ieee754_pow+0xc0>
 800bf82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf86:	f7ff bb8b 	b.w	800b6a0 <__ieee754_pow+0xc0>
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	f7ff bb87 	b.w	800b6a0 <__ieee754_pow+0xc0>
 800bf92:	4693      	mov	fp, r2
 800bf94:	f7ff bb98 	b.w	800b6c8 <__ieee754_pow+0xe8>
 800bf98:	00000000 	.word	0x00000000
 800bf9c:	3fe62e43 	.word	0x3fe62e43
 800bfa0:	fefa39ef 	.word	0xfefa39ef
 800bfa4:	3fe62e42 	.word	0x3fe62e42
 800bfa8:	0ca86c39 	.word	0x0ca86c39
 800bfac:	be205c61 	.word	0xbe205c61
 800bfb0:	72bea4d0 	.word	0x72bea4d0
 800bfb4:	3e663769 	.word	0x3e663769
 800bfb8:	c5d26bf1 	.word	0xc5d26bf1
 800bfbc:	3ebbbd41 	.word	0x3ebbbd41
 800bfc0:	af25de2c 	.word	0xaf25de2c
 800bfc4:	3f11566a 	.word	0x3f11566a
 800bfc8:	16bebd93 	.word	0x16bebd93
 800bfcc:	3f66c16c 	.word	0x3f66c16c
 800bfd0:	5555553e 	.word	0x5555553e
 800bfd4:	3fc55555 	.word	0x3fc55555
 800bfd8:	c2f8f359 	.word	0xc2f8f359
 800bfdc:	01a56e1f 	.word	0x01a56e1f
 800bfe0:	3fe00000 	.word	0x3fe00000
 800bfe4:	000fffff 	.word	0x000fffff
 800bfe8:	3ff00000 	.word	0x3ff00000
 800bfec:	4090cbff 	.word	0x4090cbff
 800bff0:	3f6f3400 	.word	0x3f6f3400
 800bff4:	652b82fe 	.word	0x652b82fe
 800bff8:	3c971547 	.word	0x3c971547

0800bffc <__ieee754_sqrt>:
 800bffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c000:	4955      	ldr	r1, [pc, #340]	; (800c158 <__ieee754_sqrt+0x15c>)
 800c002:	ec55 4b10 	vmov	r4, r5, d0
 800c006:	43a9      	bics	r1, r5
 800c008:	462b      	mov	r3, r5
 800c00a:	462a      	mov	r2, r5
 800c00c:	d112      	bne.n	800c034 <__ieee754_sqrt+0x38>
 800c00e:	ee10 2a10 	vmov	r2, s0
 800c012:	ee10 0a10 	vmov	r0, s0
 800c016:	4629      	mov	r1, r5
 800c018:	f7f4 fad0 	bl	80005bc <__aeabi_dmul>
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	4620      	mov	r0, r4
 800c022:	4629      	mov	r1, r5
 800c024:	f7f4 f914 	bl	8000250 <__adddf3>
 800c028:	4604      	mov	r4, r0
 800c02a:	460d      	mov	r5, r1
 800c02c:	ec45 4b10 	vmov	d0, r4, r5
 800c030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c034:	2d00      	cmp	r5, #0
 800c036:	ee10 0a10 	vmov	r0, s0
 800c03a:	4621      	mov	r1, r4
 800c03c:	dc0f      	bgt.n	800c05e <__ieee754_sqrt+0x62>
 800c03e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c042:	4330      	orrs	r0, r6
 800c044:	d0f2      	beq.n	800c02c <__ieee754_sqrt+0x30>
 800c046:	b155      	cbz	r5, 800c05e <__ieee754_sqrt+0x62>
 800c048:	ee10 2a10 	vmov	r2, s0
 800c04c:	4620      	mov	r0, r4
 800c04e:	4629      	mov	r1, r5
 800c050:	f7f4 f8fc 	bl	800024c <__aeabi_dsub>
 800c054:	4602      	mov	r2, r0
 800c056:	460b      	mov	r3, r1
 800c058:	f7f4 fbda 	bl	8000810 <__aeabi_ddiv>
 800c05c:	e7e4      	b.n	800c028 <__ieee754_sqrt+0x2c>
 800c05e:	151b      	asrs	r3, r3, #20
 800c060:	d073      	beq.n	800c14a <__ieee754_sqrt+0x14e>
 800c062:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c066:	07dd      	lsls	r5, r3, #31
 800c068:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c06c:	bf48      	it	mi
 800c06e:	0fc8      	lsrmi	r0, r1, #31
 800c070:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c074:	bf44      	itt	mi
 800c076:	0049      	lslmi	r1, r1, #1
 800c078:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c07c:	2500      	movs	r5, #0
 800c07e:	1058      	asrs	r0, r3, #1
 800c080:	0fcb      	lsrs	r3, r1, #31
 800c082:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c086:	0049      	lsls	r1, r1, #1
 800c088:	2316      	movs	r3, #22
 800c08a:	462c      	mov	r4, r5
 800c08c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c090:	19a7      	adds	r7, r4, r6
 800c092:	4297      	cmp	r7, r2
 800c094:	bfde      	ittt	le
 800c096:	19bc      	addle	r4, r7, r6
 800c098:	1bd2      	suble	r2, r2, r7
 800c09a:	19ad      	addle	r5, r5, r6
 800c09c:	0fcf      	lsrs	r7, r1, #31
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c0a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c0a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c0ac:	d1f0      	bne.n	800c090 <__ieee754_sqrt+0x94>
 800c0ae:	f04f 0c20 	mov.w	ip, #32
 800c0b2:	469e      	mov	lr, r3
 800c0b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c0b8:	42a2      	cmp	r2, r4
 800c0ba:	eb06 070e 	add.w	r7, r6, lr
 800c0be:	dc02      	bgt.n	800c0c6 <__ieee754_sqrt+0xca>
 800c0c0:	d112      	bne.n	800c0e8 <__ieee754_sqrt+0xec>
 800c0c2:	428f      	cmp	r7, r1
 800c0c4:	d810      	bhi.n	800c0e8 <__ieee754_sqrt+0xec>
 800c0c6:	2f00      	cmp	r7, #0
 800c0c8:	eb07 0e06 	add.w	lr, r7, r6
 800c0cc:	da42      	bge.n	800c154 <__ieee754_sqrt+0x158>
 800c0ce:	f1be 0f00 	cmp.w	lr, #0
 800c0d2:	db3f      	blt.n	800c154 <__ieee754_sqrt+0x158>
 800c0d4:	f104 0801 	add.w	r8, r4, #1
 800c0d8:	1b12      	subs	r2, r2, r4
 800c0da:	428f      	cmp	r7, r1
 800c0dc:	bf88      	it	hi
 800c0de:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c0e2:	1bc9      	subs	r1, r1, r7
 800c0e4:	4433      	add	r3, r6
 800c0e6:	4644      	mov	r4, r8
 800c0e8:	0052      	lsls	r2, r2, #1
 800c0ea:	f1bc 0c01 	subs.w	ip, ip, #1
 800c0ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c0f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c0f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c0fa:	d1dd      	bne.n	800c0b8 <__ieee754_sqrt+0xbc>
 800c0fc:	430a      	orrs	r2, r1
 800c0fe:	d006      	beq.n	800c10e <__ieee754_sqrt+0x112>
 800c100:	1c5c      	adds	r4, r3, #1
 800c102:	bf13      	iteet	ne
 800c104:	3301      	addne	r3, #1
 800c106:	3501      	addeq	r5, #1
 800c108:	4663      	moveq	r3, ip
 800c10a:	f023 0301 	bicne.w	r3, r3, #1
 800c10e:	106a      	asrs	r2, r5, #1
 800c110:	085b      	lsrs	r3, r3, #1
 800c112:	07e9      	lsls	r1, r5, #31
 800c114:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c118:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c11c:	bf48      	it	mi
 800c11e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c122:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c126:	461c      	mov	r4, r3
 800c128:	e780      	b.n	800c02c <__ieee754_sqrt+0x30>
 800c12a:	0aca      	lsrs	r2, r1, #11
 800c12c:	3815      	subs	r0, #21
 800c12e:	0549      	lsls	r1, r1, #21
 800c130:	2a00      	cmp	r2, #0
 800c132:	d0fa      	beq.n	800c12a <__ieee754_sqrt+0x12e>
 800c134:	02d6      	lsls	r6, r2, #11
 800c136:	d50a      	bpl.n	800c14e <__ieee754_sqrt+0x152>
 800c138:	f1c3 0420 	rsb	r4, r3, #32
 800c13c:	fa21 f404 	lsr.w	r4, r1, r4
 800c140:	1e5d      	subs	r5, r3, #1
 800c142:	4099      	lsls	r1, r3
 800c144:	4322      	orrs	r2, r4
 800c146:	1b43      	subs	r3, r0, r5
 800c148:	e78b      	b.n	800c062 <__ieee754_sqrt+0x66>
 800c14a:	4618      	mov	r0, r3
 800c14c:	e7f0      	b.n	800c130 <__ieee754_sqrt+0x134>
 800c14e:	0052      	lsls	r2, r2, #1
 800c150:	3301      	adds	r3, #1
 800c152:	e7ef      	b.n	800c134 <__ieee754_sqrt+0x138>
 800c154:	46a0      	mov	r8, r4
 800c156:	e7bf      	b.n	800c0d8 <__ieee754_sqrt+0xdc>
 800c158:	7ff00000 	.word	0x7ff00000

0800c15c <fabs>:
 800c15c:	ec51 0b10 	vmov	r0, r1, d0
 800c160:	ee10 2a10 	vmov	r2, s0
 800c164:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c168:	ec43 2b10 	vmov	d0, r2, r3
 800c16c:	4770      	bx	lr

0800c16e <finite>:
 800c16e:	ee10 3a90 	vmov	r3, s1
 800c172:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800c176:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c17a:	0fc0      	lsrs	r0, r0, #31
 800c17c:	4770      	bx	lr

0800c17e <matherr>:
 800c17e:	2000      	movs	r0, #0
 800c180:	4770      	bx	lr
 800c182:	0000      	movs	r0, r0
 800c184:	0000      	movs	r0, r0
	...

0800c188 <nan>:
 800c188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c190 <nan+0x8>
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	00000000 	.word	0x00000000
 800c194:	7ff80000 	.word	0x7ff80000

0800c198 <rint>:
 800c198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c19a:	ec51 0b10 	vmov	r0, r1, d0
 800c19e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c1a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c1a6:	2e13      	cmp	r6, #19
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	ee10 4a10 	vmov	r4, s0
 800c1ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c1b2:	dc56      	bgt.n	800c262 <rint+0xca>
 800c1b4:	2e00      	cmp	r6, #0
 800c1b6:	da2b      	bge.n	800c210 <rint+0x78>
 800c1b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c1bc:	4302      	orrs	r2, r0
 800c1be:	d023      	beq.n	800c208 <rint+0x70>
 800c1c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c1c4:	4302      	orrs	r2, r0
 800c1c6:	4254      	negs	r4, r2
 800c1c8:	4314      	orrs	r4, r2
 800c1ca:	0c4b      	lsrs	r3, r1, #17
 800c1cc:	0b24      	lsrs	r4, r4, #12
 800c1ce:	045b      	lsls	r3, r3, #17
 800c1d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c1d4:	ea44 0103 	orr.w	r1, r4, r3
 800c1d8:	460b      	mov	r3, r1
 800c1da:	492f      	ldr	r1, [pc, #188]	; (800c298 <rint+0x100>)
 800c1dc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800c1e0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	4639      	mov	r1, r7
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f7f4 f831 	bl	8000250 <__adddf3>
 800c1ee:	e9cd 0100 	strd	r0, r1, [sp]
 800c1f2:	463b      	mov	r3, r7
 800c1f4:	4632      	mov	r2, r6
 800c1f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1fa:	f7f4 f827 	bl	800024c <__aeabi_dsub>
 800c1fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c202:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c206:	4639      	mov	r1, r7
 800c208:	ec41 0b10 	vmov	d0, r0, r1
 800c20c:	b003      	add	sp, #12
 800c20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c210:	4a22      	ldr	r2, [pc, #136]	; (800c29c <rint+0x104>)
 800c212:	4132      	asrs	r2, r6
 800c214:	ea01 0702 	and.w	r7, r1, r2
 800c218:	4307      	orrs	r7, r0
 800c21a:	d0f5      	beq.n	800c208 <rint+0x70>
 800c21c:	0852      	lsrs	r2, r2, #1
 800c21e:	4011      	ands	r1, r2
 800c220:	430c      	orrs	r4, r1
 800c222:	d00b      	beq.n	800c23c <rint+0xa4>
 800c224:	ea23 0202 	bic.w	r2, r3, r2
 800c228:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c22c:	2e13      	cmp	r6, #19
 800c22e:	fa43 f306 	asr.w	r3, r3, r6
 800c232:	bf0c      	ite	eq
 800c234:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c238:	2400      	movne	r4, #0
 800c23a:	4313      	orrs	r3, r2
 800c23c:	4916      	ldr	r1, [pc, #88]	; (800c298 <rint+0x100>)
 800c23e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c242:	4622      	mov	r2, r4
 800c244:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c248:	4620      	mov	r0, r4
 800c24a:	4629      	mov	r1, r5
 800c24c:	f7f4 f800 	bl	8000250 <__adddf3>
 800c250:	e9cd 0100 	strd	r0, r1, [sp]
 800c254:	4622      	mov	r2, r4
 800c256:	462b      	mov	r3, r5
 800c258:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c25c:	f7f3 fff6 	bl	800024c <__aeabi_dsub>
 800c260:	e7d2      	b.n	800c208 <rint+0x70>
 800c262:	2e33      	cmp	r6, #51	; 0x33
 800c264:	dd07      	ble.n	800c276 <rint+0xde>
 800c266:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c26a:	d1cd      	bne.n	800c208 <rint+0x70>
 800c26c:	ee10 2a10 	vmov	r2, s0
 800c270:	f7f3 ffee 	bl	8000250 <__adddf3>
 800c274:	e7c8      	b.n	800c208 <rint+0x70>
 800c276:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800c27a:	f04f 32ff 	mov.w	r2, #4294967295
 800c27e:	40f2      	lsrs	r2, r6
 800c280:	4210      	tst	r0, r2
 800c282:	d0c1      	beq.n	800c208 <rint+0x70>
 800c284:	0852      	lsrs	r2, r2, #1
 800c286:	4210      	tst	r0, r2
 800c288:	bf1f      	itttt	ne
 800c28a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c28e:	ea20 0202 	bicne.w	r2, r0, r2
 800c292:	4134      	asrne	r4, r6
 800c294:	4314      	orrne	r4, r2
 800c296:	e7d1      	b.n	800c23c <rint+0xa4>
 800c298:	0800c788 	.word	0x0800c788
 800c29c:	000fffff 	.word	0x000fffff

0800c2a0 <scalbn>:
 800c2a0:	b570      	push	{r4, r5, r6, lr}
 800c2a2:	ec55 4b10 	vmov	r4, r5, d0
 800c2a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c2aa:	4606      	mov	r6, r0
 800c2ac:	462b      	mov	r3, r5
 800c2ae:	b9aa      	cbnz	r2, 800c2dc <scalbn+0x3c>
 800c2b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c2b4:	4323      	orrs	r3, r4
 800c2b6:	d03b      	beq.n	800c330 <scalbn+0x90>
 800c2b8:	4b31      	ldr	r3, [pc, #196]	; (800c380 <scalbn+0xe0>)
 800c2ba:	4629      	mov	r1, r5
 800c2bc:	2200      	movs	r2, #0
 800c2be:	ee10 0a10 	vmov	r0, s0
 800c2c2:	f7f4 f97b 	bl	80005bc <__aeabi_dmul>
 800c2c6:	4b2f      	ldr	r3, [pc, #188]	; (800c384 <scalbn+0xe4>)
 800c2c8:	429e      	cmp	r6, r3
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	460d      	mov	r5, r1
 800c2ce:	da12      	bge.n	800c2f6 <scalbn+0x56>
 800c2d0:	a327      	add	r3, pc, #156	; (adr r3, 800c370 <scalbn+0xd0>)
 800c2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d6:	f7f4 f971 	bl	80005bc <__aeabi_dmul>
 800c2da:	e009      	b.n	800c2f0 <scalbn+0x50>
 800c2dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c2e0:	428a      	cmp	r2, r1
 800c2e2:	d10c      	bne.n	800c2fe <scalbn+0x5e>
 800c2e4:	ee10 2a10 	vmov	r2, s0
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	f7f3 ffb0 	bl	8000250 <__adddf3>
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	460d      	mov	r5, r1
 800c2f4:	e01c      	b.n	800c330 <scalbn+0x90>
 800c2f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	3a36      	subs	r2, #54	; 0x36
 800c2fe:	4432      	add	r2, r6
 800c300:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c304:	428a      	cmp	r2, r1
 800c306:	dd0b      	ble.n	800c320 <scalbn+0x80>
 800c308:	ec45 4b11 	vmov	d1, r4, r5
 800c30c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c378 <scalbn+0xd8>
 800c310:	f000 f83c 	bl	800c38c <copysign>
 800c314:	a318      	add	r3, pc, #96	; (adr r3, 800c378 <scalbn+0xd8>)
 800c316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31a:	ec51 0b10 	vmov	r0, r1, d0
 800c31e:	e7da      	b.n	800c2d6 <scalbn+0x36>
 800c320:	2a00      	cmp	r2, #0
 800c322:	dd08      	ble.n	800c336 <scalbn+0x96>
 800c324:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c328:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c32c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c330:	ec45 4b10 	vmov	d0, r4, r5
 800c334:	bd70      	pop	{r4, r5, r6, pc}
 800c336:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c33a:	da0d      	bge.n	800c358 <scalbn+0xb8>
 800c33c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c340:	429e      	cmp	r6, r3
 800c342:	ec45 4b11 	vmov	d1, r4, r5
 800c346:	dce1      	bgt.n	800c30c <scalbn+0x6c>
 800c348:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c370 <scalbn+0xd0>
 800c34c:	f000 f81e 	bl	800c38c <copysign>
 800c350:	a307      	add	r3, pc, #28	; (adr r3, 800c370 <scalbn+0xd0>)
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	e7e0      	b.n	800c31a <scalbn+0x7a>
 800c358:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c35c:	3236      	adds	r2, #54	; 0x36
 800c35e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c362:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c366:	4620      	mov	r0, r4
 800c368:	4629      	mov	r1, r5
 800c36a:	2200      	movs	r2, #0
 800c36c:	4b06      	ldr	r3, [pc, #24]	; (800c388 <scalbn+0xe8>)
 800c36e:	e7b2      	b.n	800c2d6 <scalbn+0x36>
 800c370:	c2f8f359 	.word	0xc2f8f359
 800c374:	01a56e1f 	.word	0x01a56e1f
 800c378:	8800759c 	.word	0x8800759c
 800c37c:	7e37e43c 	.word	0x7e37e43c
 800c380:	43500000 	.word	0x43500000
 800c384:	ffff3cb0 	.word	0xffff3cb0
 800c388:	3c900000 	.word	0x3c900000

0800c38c <copysign>:
 800c38c:	ec51 0b10 	vmov	r0, r1, d0
 800c390:	ee11 0a90 	vmov	r0, s3
 800c394:	ee10 2a10 	vmov	r2, s0
 800c398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c39c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c3a0:	ea41 0300 	orr.w	r3, r1, r0
 800c3a4:	ec43 2b10 	vmov	d0, r2, r3
 800c3a8:	4770      	bx	lr
	...

0800c3ac <_init>:
 800c3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ae:	bf00      	nop
 800c3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3b2:	bc08      	pop	{r3}
 800c3b4:	469e      	mov	lr, r3
 800c3b6:	4770      	bx	lr

0800c3b8 <_fini>:
 800c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ba:	bf00      	nop
 800c3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3be:	bc08      	pop	{r3}
 800c3c0:	469e      	mov	lr, r3
 800c3c2:	4770      	bx	lr

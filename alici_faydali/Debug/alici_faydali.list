
alici_faydali.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003650  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003868  08003868  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003870  08003870  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08003884  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003884  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aca2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000195f  00000000  00000000  0002acde  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b8  00000000  00000000  0002c640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  0002cff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c081  00000000  00000000  0002d8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ce9  00000000  00000000  00049959  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b1eb2  00000000  00000000  00051642  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001034f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d4  00000000  00000000  00103570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003810 	.word	0x08003810

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003810 	.word	0x08003810

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <uint8_to_float>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uint8_to_float(float *data_float, uint8_t *data_byte){
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
	    float f;
	    unsigned long ul;
	 } u;


	 u.ul = (data_byte[0] << 24) + (data_byte[1] << 16) + (data_byte[2] << 8) + data_byte[3];
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	061a      	lsls	r2, r3, #24
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	041b      	lsls	r3, r3, #16
 8000530:	441a      	add	r2, r3
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	3302      	adds	r3, #2
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	021b      	lsls	r3, r3, #8
 800053a:	4413      	add	r3, r2
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	3203      	adds	r2, #3
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	4413      	add	r3, r2
 8000544:	60fb      	str	r3, [r7, #12]
	 *data_float = u.f;
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]

};
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a1d      	ldr	r2, [pc, #116]	; (80005dc <HAL_UART_RxCpltCallback+0x84>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d133      	bne.n	80005d2 <HAL_UART_RxCpltCallback+0x7a>
		if(data_byte == 36){
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <HAL_UART_RxCpltCallback+0x88>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b24      	cmp	r3, #36	; 0x24
 8000570:	d102      	bne.n	8000578 <HAL_UART_RxCpltCallback+0x20>
			package_find = 1;
 8000572:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <HAL_UART_RxCpltCallback+0x8c>)
 8000574:	2201      	movs	r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
		}
		if(data_byte != 10 && package_find == 1){
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <HAL_UART_RxCpltCallback+0x88>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b0a      	cmp	r3, #10
 800057e:	d00f      	beq.n	80005a0 <HAL_UART_RxCpltCallback+0x48>
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <HAL_UART_RxCpltCallback+0x8c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d10b      	bne.n	80005a0 <HAL_UART_RxCpltCallback+0x48>
			data_string[data_index] = data_byte;
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <HAL_UART_RxCpltCallback+0x90>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <HAL_UART_RxCpltCallback+0x88>)
 800058e:	7811      	ldrb	r1, [r2, #0]
 8000590:	4a16      	ldr	r2, [pc, #88]	; (80005ec <HAL_UART_RxCpltCallback+0x94>)
 8000592:	54d1      	strb	r1, [r2, r3]
			data_index++;
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <HAL_UART_RxCpltCallback+0x90>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	4a13      	ldr	r2, [pc, #76]	; (80005e8 <HAL_UART_RxCpltCallback+0x90>)
 800059c:	6013      	str	r3, [r2, #0]
 800059e:	e013      	b.n	80005c8 <HAL_UART_RxCpltCallback+0x70>
		}else{
			data_string[data_index] = data_byte;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <HAL_UART_RxCpltCallback+0x90>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_UART_RxCpltCallback+0x88>)
 80005a6:	7811      	ldrb	r1, [r2, #0]
 80005a8:	4a10      	ldr	r2, [pc, #64]	; (80005ec <HAL_UART_RxCpltCallback+0x94>)
 80005aa:	54d1      	strb	r1, [r2, r3]
			uint8_to_float(&lat, &data_string[2]);
 80005ac:	4910      	ldr	r1, [pc, #64]	; (80005f0 <HAL_UART_RxCpltCallback+0x98>)
 80005ae:	4811      	ldr	r0, [pc, #68]	; (80005f4 <HAL_UART_RxCpltCallback+0x9c>)
 80005b0:	f7ff ffb2 	bl	8000518 <uint8_to_float>
			uint8_to_float(&lon, &data_string[6]);
 80005b4:	4910      	ldr	r1, [pc, #64]	; (80005f8 <HAL_UART_RxCpltCallback+0xa0>)
 80005b6:	4811      	ldr	r0, [pc, #68]	; (80005fc <HAL_UART_RxCpltCallback+0xa4>)
 80005b8:	f7ff ffae 	bl	8000518 <uint8_to_float>

			data_index = 0;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_UART_RxCpltCallback+0x90>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
			package_find = 0;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <HAL_UART_RxCpltCallback+0x8c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_DMA(&huart1, &data_byte, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	4905      	ldr	r1, [pc, #20]	; (80005e0 <HAL_UART_RxCpltCallback+0x88>)
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <HAL_UART_RxCpltCallback+0xa8>)
 80005ce:	f002 f88b 	bl	80026e8 <HAL_UART_Receive_DMA>

	}
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40013800 	.word	0x40013800
 80005e0:	20000030 	.word	0x20000030
 80005e4:	2000002c 	.word	0x2000002c
 80005e8:	20000028 	.word	0x20000028
 80005ec:	20000034 	.word	0x20000034
 80005f0:	20000036 	.word	0x20000036
 80005f4:	20000130 	.word	0x20000130
 80005f8:	2000003a 	.word	0x2000003a
 80005fc:	2000012c 	.word	0x2000012c
 8000600:	200000a0 	.word	0x200000a0

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fa51 	bl	8000aae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f810 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f8e8 	bl	80007e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000614:	f000 f8bc 	bl	8000790 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000618:	f000 f86e 	bl	80006f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart1, &data_byte, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	4902      	ldr	r1, [pc, #8]	; (8000628 <main+0x24>)
 8000620:	4802      	ldr	r0, [pc, #8]	; (800062c <main+0x28>)
 8000622:	f002 f861 	bl	80026e8 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	e7fe      	b.n	8000626 <main+0x22>
 8000628:	20000030 	.word	0x20000030
 800062c:	200000a0 	.word	0x200000a0

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0a4      	sub	sp, #144	; 0x90
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800063a:	2238      	movs	r2, #56	; 0x38
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 f8de 	bl	8003800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000654:	463b      	mov	r3, r7
 8000656:	2244      	movs	r2, #68	; 0x44
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 f8d0 	bl	8003800 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000660:	2000      	movs	r0, #0
 8000662:	f001 f819 	bl	8001698 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000666:	2302      	movs	r3, #2
 8000668:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2340      	movs	r3, #64	; 0x40
 8000672:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800067c:	2304      	movs	r3, #4
 800067e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000680:	2355      	movs	r3, #85	; 0x55
 8000682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f8af 	bl	8001800 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006a8:	f000 f8dc 	bl	8000864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2303      	movs	r3, #3
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fbb2 	bl	8001e30 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006d2:	f000 f8c7 	bl	8000864 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fdc1 	bl	8002268 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006ec:	f000 f8ba 	bl	8000864 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3790      	adds	r7, #144	; 0x90
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <MX_USART1_UART_Init+0x90>)
 80006fe:	4a23      	ldr	r2, [pc, #140]	; (800078c <MX_USART1_UART_Init+0x94>)
 8000700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MX_USART1_UART_Init+0x90>)
 8000704:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_USART1_UART_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_USART1_UART_Init+0x90>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_USART1_UART_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_USART1_UART_Init+0x90>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_USART1_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_USART1_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_USART1_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_USART1_UART_Init+0x90>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_USART1_UART_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000740:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_USART1_UART_Init+0x90>)
 8000742:	f001 ff81 	bl	8002648 <HAL_UART_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800074c:	f000 f88a 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000750:	2100      	movs	r1, #0
 8000752:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_USART1_UART_Init+0x90>)
 8000754:	f002 ff4b 	bl	80035ee <HAL_UARTEx_SetTxFifoThreshold>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800075e:	f000 f881 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000762:	2100      	movs	r1, #0
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <MX_USART1_UART_Init+0x90>)
 8000766:	f002 ff80 	bl	800366a <HAL_UARTEx_SetRxFifoThreshold>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000770:	f000 f878 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_USART1_UART_Init+0x90>)
 8000776:	f002 ff01 	bl	800357c <HAL_UARTEx_DisableFifoMode>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000780:	f000 f870 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000a0 	.word	0x200000a0
 800078c:	40013800 	.word	0x40013800

08000790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_DMA_Init+0x50>)
 8000798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <MX_DMA_Init+0x50>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6493      	str	r3, [r2, #72]	; 0x48
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_DMA_Init+0x50>)
 80007a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_DMA_Init+0x50>)
 80007b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b2:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <MX_DMA_Init+0x50>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6493      	str	r3, [r2, #72]	; 0x48
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_DMA_Init+0x50>)
 80007bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	200b      	movs	r0, #11
 80007cc:	f000 fabb 	bl	8000d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007d0:	200b      	movs	r0, #11
 80007d2:	f000 fad2 	bl	8000d7a <HAL_NVIC_EnableIRQ>

}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_GPIO_Init+0x78>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <MX_GPIO_Init+0x78>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_GPIO_Init+0x78>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_GPIO_Init+0x78>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a11      	ldr	r2, [pc, #68]	; (800085c <MX_GPIO_Init+0x78>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_GPIO_Init+0x78>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <MX_GPIO_Init+0x7c>)
 8000832:	f000 ff19 	bl	8001668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_GPIO_Init+0x7c>)
 8000850:	f000 fd88 	bl	8001364 <HAL_GPIO_Init>

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	48000400 	.word	0x48000400

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_MspInit+0x44>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6613      	str	r3, [r2, #96]	; 0x60
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_MspInit+0x44>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x44>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6593      	str	r3, [r2, #88]	; 0x58
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x44>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008aa:	f000 ff99 	bl	80017e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a30      	ldr	r2, [pc, #192]	; (800099c <HAL_UART_MspInit+0xe0>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d15a      	bne.n	8000994 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008de:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	4a2f      	ldr	r2, [pc, #188]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ea:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a29      	ldr	r2, [pc, #164]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800090e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000920:	2307      	movs	r3, #7
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092e:	f000 fd19 	bl	8001364 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 8000934:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <HAL_UART_MspInit+0xec>)
 8000936:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 800093a:	2218      	movs	r2, #24
 800093c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 800095e:	2220      	movs	r2, #32
 8000960:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000968:	480e      	ldr	r0, [pc, #56]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 800096a:	f000 fa21 	bl	8000db0 <HAL_DMA_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8000974:	f7ff ff76 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 800097c:	679a      	str	r2, [r3, #120]	; 0x78
 800097e:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	2025      	movs	r0, #37	; 0x25
 800098a:	f000 f9dc 	bl	8000d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800098e:	2025      	movs	r0, #37	; 0x25
 8000990:	f000 f9f3 	bl	8000d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	; 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40013800 	.word	0x40013800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	20000040 	.word	0x20000040
 80009a8:	40020008 	.word	0x40020008

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f8a8 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <DMA1_Channel1_IRQHandler+0x10>)
 8000a0e:	f000 fb59 	bl	80010c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000040 	.word	0x20000040

08000a1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <USART1_IRQHandler+0x10>)
 8000a22:	f001 fee9 	bl	80027f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000a0 	.word	0x200000a0

08000a30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <SystemInit+0x28>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3a:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <SystemInit+0x28>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SystemInit+0x28>)
 8000a46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a62:	490e      	ldr	r1, [pc, #56]	; (8000a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <LoopForever+0xe>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a78:	4c0b      	ldr	r4, [pc, #44]	; (8000aa8 <LoopForever+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a86:	f7ff ffd3 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f002 fe95 	bl	80037b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a8e:	f7ff fdb9 	bl	8000604 <main>

08000a92 <LoopForever>:

LoopForever:
    b LoopForever
 8000a92:	e7fe      	b.n	8000a92 <LoopForever>
  ldr   r0, =_estack
 8000a94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aa0:	08003878 	.word	0x08003878
  ldr r2, =_sbss
 8000aa4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa8:	20000138 	.word	0x20000138

08000aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_2_IRQHandler>

08000aae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f939 	bl	8000d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f80e 	bl	8000ae0 <HAL_InitTick>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	71fb      	strb	r3, [r7, #7]
 8000ace:	e001      	b.n	8000ad4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad0:	f7ff fed0 	bl	8000874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_InitTick+0x68>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d022      	beq.n	8000b3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_InitTick+0x6c>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <HAL_InitTick+0x68>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f944 	bl	8000d96 <HAL_SYSTICK_Config>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10f      	bne.n	8000b34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b0f      	cmp	r3, #15
 8000b18:	d809      	bhi.n	8000b2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b22:	f000 f910 	bl	8000d46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_InitTick+0x70>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	e007      	b.n	8000b3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e004      	b.n	8000b3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e001      	b.n	8000b3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000004 	.word	0x20000004

08000b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x1c>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a03      	ldr	r2, [pc, #12]	; (8000b70 <HAL_IncTick+0x1c>)
 8000b64:	6013      	str	r3, [r2, #0]
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	20000134 	.word	0x20000134
 8000b74:	20000008 	.word	0x20000008

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000134 	.word	0x20000134

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <__NVIC_EnableIRQ+0x38>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cfc:	d301      	bcc.n	8000d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00f      	b.n	8000d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <SysTick_Config+0x40>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f7ff ff8e 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <SysTick_Config+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <SysTick_Config+0x40>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff29 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d54:	f7ff ff40 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff ff90 	bl	8000c84 <NVIC_EncodePriority>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff5f 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff33 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffa4 	bl	8000cec <SysTick_Config>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e08d      	b.n	8000ede <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b47      	ldr	r3, [pc, #284]	; (8000ee8 <HAL_DMA_Init+0x138>)
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d80f      	bhi.n	8000dee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b45      	ldr	r3, [pc, #276]	; (8000eec <HAL_DMA_Init+0x13c>)
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a45      	ldr	r2, [pc, #276]	; (8000ef0 <HAL_DMA_Init+0x140>)
 8000dda:	fba2 2303 	umull	r2, r3, r2, r3
 8000dde:	091b      	lsrs	r3, r3, #4
 8000de0:	009a      	lsls	r2, r3, #2
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a42      	ldr	r2, [pc, #264]	; (8000ef4 <HAL_DMA_Init+0x144>)
 8000dea:	641a      	str	r2, [r3, #64]	; 0x40
 8000dec:	e00e      	b.n	8000e0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b40      	ldr	r3, [pc, #256]	; (8000ef8 <HAL_DMA_Init+0x148>)
 8000df6:	4413      	add	r3, r2
 8000df8:	4a3d      	ldr	r2, [pc, #244]	; (8000ef0 <HAL_DMA_Init+0x140>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	009a      	lsls	r2, r3, #2
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a3c      	ldr	r2, [pc, #240]	; (8000efc <HAL_DMA_Init+0x14c>)
 8000e0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2202      	movs	r2, #2
 8000e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6a1b      	ldr	r3, [r3, #32]
 8000e4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fa1e 	bl	80012a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e6c:	d102      	bne.n	8000e74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d010      	beq.n	8000eb4 <HAL_DMA_Init+0x104>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d80c      	bhi.n	8000eb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 fa3e 	bl	800131c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	e008      	b.n	8000ec6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40020407 	.word	0x40020407
 8000eec:	bffdfff8 	.word	0xbffdfff8
 8000ef0:	cccccccd 	.word	0xcccccccd
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	bffdfbf8 	.word	0xbffdfbf8
 8000efc:	40020400 	.word	0x40020400

08000f00 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d101      	bne.n	8000f20 <HAL_DMA_Start_IT+0x20>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e066      	b.n	8000fee <HAL_DMA_Start_IT+0xee>
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d155      	bne.n	8000fe0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0201 	bic.w	r2, r2, #1
 8000f50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f000 f962 	bl	8001222 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d008      	beq.n	8000f78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 020e 	orr.w	r2, r2, #14
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e00f      	b.n	8000f98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0204 	bic.w	r2, r2, #4
 8000f86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 020a 	orr.w	r2, r2, #10
 8000f96:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d007      	beq.n	8000fb6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fb4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fcc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 0201 	orr.w	r2, r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e005      	b.n	8000fec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d00d      	beq.n	800102a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2204      	movs	r2, #4
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e047      	b.n	80010ba <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 020e 	bic.w	r2, r2, #14
 8001038:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0201 	bic.w	r2, r2, #1
 8001048:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001058:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f003 021f 	and.w	r2, r3, #31
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	2101      	movs	r1, #1
 8001068:	fa01 f202 	lsl.w	r2, r1, r2
 800106c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001076:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00c      	beq.n	800109a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800108e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001098:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	4798      	blx	r3
    }
  }
  return status;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	2204      	movs	r2, #4
 80010e6:	409a      	lsls	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d026      	beq.n	800113e <HAL_DMA_IRQHandler+0x7a>
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d021      	beq.n	800113e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0320 	and.w	r3, r3, #32
 8001104:	2b00      	cmp	r3, #0
 8001106:	d107      	bne.n	8001118 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0204 	bic.w	r2, r2, #4
 8001116:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	2104      	movs	r1, #4
 8001126:	fa01 f202 	lsl.w	r2, r1, r2
 800112a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	2b00      	cmp	r3, #0
 8001132:	d071      	beq.n	8001218 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800113c:	e06c      	b.n	8001218 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f003 031f 	and.w	r3, r3, #31
 8001146:	2202      	movs	r2, #2
 8001148:	409a      	lsls	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d02e      	beq.n	80011b0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d029      	beq.n	80011b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10b      	bne.n	8001182 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 020a 	bic.w	r2, r2, #10
 8001178:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f003 021f 	and.w	r2, r3, #31
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	2102      	movs	r1, #2
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d038      	beq.n	8001218 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80011ae:	e033      	b.n	8001218 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b4:	f003 031f 	and.w	r3, r3, #31
 80011b8:	2208      	movs	r2, #8
 80011ba:	409a      	lsls	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4013      	ands	r3, r2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d02a      	beq.n	800121a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d025      	beq.n	800121a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 020e 	bic.w	r2, r2, #14
 80011dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f003 021f 	and.w	r2, r3, #31
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f202 	lsl.w	r2, r1, r2
 80011f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001218:	bf00      	nop
 800121a:	bf00      	nop
}
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001222:	b480      	push	{r7}
 8001224:	b085      	sub	sp, #20
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001238:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800124a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001250:	f003 021f 	and.w	r2, r3, #31
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	2101      	movs	r1, #1
 800125a:	fa01 f202 	lsl.w	r2, r1, r2
 800125e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b10      	cmp	r3, #16
 800126e:	d108      	bne.n	8001282 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001280:	e007      	b.n	8001292 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	60da      	str	r2, [r3, #12]
}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d802      	bhi.n	80012ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e001      	b.n	80012be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80012bc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	3b08      	subs	r3, #8
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	009a      	lsls	r2, r3, #2
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4413      	add	r3, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80012ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	2201      	movs	r2, #1
 80012f4:	409a      	lsls	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80012fa:	bf00      	nop
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40020407 	.word	0x40020407
 800130c:	40020800 	.word	0x40020800
 8001310:	40020820 	.word	0x40020820
 8001314:	cccccccd 	.word	0xcccccccd
 8001318:	40020880 	.word	0x40020880

0800131c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	461a      	mov	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a08      	ldr	r2, [pc, #32]	; (8001360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800133e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3b01      	subs	r3, #1
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	2201      	movs	r2, #1
 800134a:	409a      	lsls	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	1000823f 	.word	0x1000823f
 8001360:	40020940 	.word	0x40020940

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001372:	e15a      	b.n	800162a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2101      	movs	r1, #1
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 814c 	beq.w	8001624 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d00b      	beq.n	80013ac <HAL_GPIO_Init+0x48>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d007      	beq.n	80013ac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a0:	2b11      	cmp	r3, #17
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b12      	cmp	r3, #18
 80013aa:	d130      	bne.n	800140e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013e2:	2201      	movs	r2, #1
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f003 0201 	and.w	r2, r3, #1
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0xea>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b12      	cmp	r3, #18
 800144c:	d123      	bne.n	8001496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	08da      	lsrs	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3208      	adds	r2, #8
 8001456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	6939      	ldr	r1, [r7, #16]
 8001492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0203 	and.w	r2, r3, #3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80a6 	beq.w	8001624 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d8:	4b5b      	ldr	r3, [pc, #364]	; (8001648 <HAL_GPIO_Init+0x2e4>)
 80014da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014dc:	4a5a      	ldr	r2, [pc, #360]	; (8001648 <HAL_GPIO_Init+0x2e4>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6613      	str	r3, [r2, #96]	; 0x60
 80014e4:	4b58      	ldr	r3, [pc, #352]	; (8001648 <HAL_GPIO_Init+0x2e4>)
 80014e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f0:	4a56      	ldr	r2, [pc, #344]	; (800164c <HAL_GPIO_Init+0x2e8>)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800151a:	d01f      	beq.n	800155c <HAL_GPIO_Init+0x1f8>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a4c      	ldr	r2, [pc, #304]	; (8001650 <HAL_GPIO_Init+0x2ec>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d019      	beq.n	8001558 <HAL_GPIO_Init+0x1f4>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a4b      	ldr	r2, [pc, #300]	; (8001654 <HAL_GPIO_Init+0x2f0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d013      	beq.n	8001554 <HAL_GPIO_Init+0x1f0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a4a      	ldr	r2, [pc, #296]	; (8001658 <HAL_GPIO_Init+0x2f4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d00d      	beq.n	8001550 <HAL_GPIO_Init+0x1ec>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a49      	ldr	r2, [pc, #292]	; (800165c <HAL_GPIO_Init+0x2f8>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d007      	beq.n	800154c <HAL_GPIO_Init+0x1e8>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a48      	ldr	r2, [pc, #288]	; (8001660 <HAL_GPIO_Init+0x2fc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d101      	bne.n	8001548 <HAL_GPIO_Init+0x1e4>
 8001544:	2305      	movs	r3, #5
 8001546:	e00a      	b.n	800155e <HAL_GPIO_Init+0x1fa>
 8001548:	2306      	movs	r3, #6
 800154a:	e008      	b.n	800155e <HAL_GPIO_Init+0x1fa>
 800154c:	2304      	movs	r3, #4
 800154e:	e006      	b.n	800155e <HAL_GPIO_Init+0x1fa>
 8001550:	2303      	movs	r3, #3
 8001552:	e004      	b.n	800155e <HAL_GPIO_Init+0x1fa>
 8001554:	2302      	movs	r3, #2
 8001556:	e002      	b.n	800155e <HAL_GPIO_Init+0x1fa>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <HAL_GPIO_Init+0x1fa>
 800155c:	2300      	movs	r3, #0
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	f002 0203 	and.w	r2, r2, #3
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	4093      	lsls	r3, r2
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800156e:	4937      	ldr	r1, [pc, #220]	; (800164c <HAL_GPIO_Init+0x2e8>)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800157c:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_GPIO_Init+0x300>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015a0:	4a30      	ldr	r2, [pc, #192]	; (8001664 <HAL_GPIO_Init+0x300>)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015a6:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <HAL_GPIO_Init+0x300>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ca:	4a26      	ldr	r2, [pc, #152]	; (8001664 <HAL_GPIO_Init+0x300>)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <HAL_GPIO_Init+0x300>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <HAL_GPIO_Init+0x300>)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_GPIO_Init+0x300>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800161e:	4a11      	ldr	r2, [pc, #68]	; (8001664 <HAL_GPIO_Init+0x300>)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3301      	adds	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f ae9d 	bne.w	8001374 <HAL_GPIO_Init+0x10>
  }
}
 800163a:	bf00      	nop
 800163c:	371c      	adds	r7, #28
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	40010000 	.word	0x40010000
 8001650:	48000400 	.word	0x48000400
 8001654:	48000800 	.word	0x48000800
 8001658:	48000c00 	.word	0x48000c00
 800165c:	48001000 	.word	0x48001000
 8001660:	48001400 	.word	0x48001400
 8001664:	40010400 	.word	0x40010400

08001668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
 8001674:	4613      	mov	r3, r2
 8001676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001678:	787b      	ldrb	r3, [r7, #1]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001684:	e002      	b.n	800168c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d141      	bne.n	800172a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016a6:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b2:	d131      	bne.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016b4:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016ba:	4a46      	ldr	r2, [pc, #280]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c4:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016cc:	4a41      	ldr	r2, [pc, #260]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016d4:	4b40      	ldr	r3, [pc, #256]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2232      	movs	r2, #50	; 0x32
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	4a3f      	ldr	r2, [pc, #252]	; (80017dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	0c9b      	lsrs	r3, r3, #18
 80016e6:	3301      	adds	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ea:	e002      	b.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f2:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fe:	d102      	bne.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f2      	bne.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001706:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001712:	d158      	bne.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e057      	b.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800171e:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001724:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001728:	e04d      	b.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001730:	d141      	bne.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001732:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800173a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800173e:	d131      	bne.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001746:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001758:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2232      	movs	r2, #50	; 0x32
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	0c9b      	lsrs	r3, r3, #18
 8001772:	3301      	adds	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001776:	e002      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3b01      	subs	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178a:	d102      	bne.n	8001792 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f2      	bne.n	8001778 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179e:	d112      	bne.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e011      	b.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017b4:	e007      	b.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40007000 	.word	0x40007000
 80017d8:	20000000 	.word	0x20000000
 80017dc:	431bde83 	.word	0x431bde83

080017e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ee:	6093      	str	r3, [r2, #8]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40007000 	.word	0x40007000

08001800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e308      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d075      	beq.n	800190a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181e:	4ba3      	ldr	r3, [pc, #652]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001828:	4ba0      	ldr	r3, [pc, #640]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2b0c      	cmp	r3, #12
 8001836:	d102      	bne.n	800183e <HAL_RCC_OscConfig+0x3e>
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b03      	cmp	r3, #3
 800183c:	d002      	beq.n	8001844 <HAL_RCC_OscConfig+0x44>
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b08      	cmp	r3, #8
 8001842:	d10b      	bne.n	800185c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	4b99      	ldr	r3, [pc, #612]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d05b      	beq.n	8001908 <HAL_RCC_OscConfig+0x108>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d157      	bne.n	8001908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e2e3      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d106      	bne.n	8001874 <HAL_RCC_OscConfig+0x74>
 8001866:	4b91      	ldr	r3, [pc, #580]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a90      	ldr	r2, [pc, #576]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e01d      	b.n	80018b0 <HAL_RCC_OscConfig+0xb0>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x98>
 800187e:	4b8b      	ldr	r3, [pc, #556]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a8a      	ldr	r2, [pc, #552]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b88      	ldr	r3, [pc, #544]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a87      	ldr	r2, [pc, #540]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0xb0>
 8001898:	4b84      	ldr	r3, [pc, #528]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a83      	ldr	r2, [pc, #524]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800189e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b81      	ldr	r3, [pc, #516]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a80      	ldr	r2, [pc, #512]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80018aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff f95e 	bl	8000b78 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff f95a 	bl	8000b78 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e2a8      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018d2:	4b76      	ldr	r3, [pc, #472]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0xc0>
 80018de:	e014      	b.n	800190a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff f94a 	bl	8000b78 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff f946 	bl	8000b78 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e294      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018fa:	4b6c      	ldr	r3, [pc, #432]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0xe8>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d075      	beq.n	8001a02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001916:	4b65      	ldr	r3, [pc, #404]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001920:	4b62      	ldr	r3, [pc, #392]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2b0c      	cmp	r3, #12
 800192e:	d102      	bne.n	8001936 <HAL_RCC_OscConfig+0x136>
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d002      	beq.n	800193c <HAL_RCC_OscConfig+0x13c>
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b04      	cmp	r3, #4
 800193a:	d11f      	bne.n	800197c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800193c:	4b5b      	ldr	r3, [pc, #364]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_OscConfig+0x154>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e267      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001954:	4b55      	ldr	r3, [pc, #340]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	061b      	lsls	r3, r3, #24
 8001962:	4952      	ldr	r1, [pc, #328]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001968:	4b51      	ldr	r3, [pc, #324]	; (8001ab0 <HAL_RCC_OscConfig+0x2b0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f8b7 	bl	8000ae0 <HAL_InitTick>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d043      	beq.n	8001a00 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e253      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d023      	beq.n	80019cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001984:	4b49      	ldr	r3, [pc, #292]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a48      	ldr	r2, [pc, #288]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff f8f2 	bl	8000b78 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff f8ee 	bl	8000b78 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e23c      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019aa:	4b40      	ldr	r3, [pc, #256]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	061b      	lsls	r3, r3, #24
 80019c4:	4939      	ldr	r1, [pc, #228]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
 80019ca:	e01a      	b.n	8001a02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019cc:	4b37      	ldr	r3, [pc, #220]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a36      	ldr	r2, [pc, #216]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80019d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f8ce 	bl	8000b78 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e0:	f7ff f8ca 	bl	8000b78 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e218      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x1e0>
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d03c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d01c      	beq.n	8001a50 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1c:	4a23      	ldr	r2, [pc, #140]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff f8a7 	bl	8000b78 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2e:	f7ff f8a3 	bl	8000b78 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e1f1      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0ef      	beq.n	8001a2e <HAL_RCC_OscConfig+0x22e>
 8001a4e:	e01b      	b.n	8001a88 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a56:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff f88a 	bl	8000b78 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff f886 	bl	8000b78 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1d4      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1ef      	bne.n	8001a68 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80ab 	beq.w	8001bec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x2b4>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e005      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2b6>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	20000004 	.word	0x20000004
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00d      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4baf      	ldr	r3, [pc, #700]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	4aae      	ldr	r2, [pc, #696]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac6:	4bac      	ldr	r3, [pc, #688]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad6:	4ba9      	ldr	r3, [pc, #676]	; (8001d7c <HAL_RCC_OscConfig+0x57c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ae2:	4ba6      	ldr	r3, [pc, #664]	; (8001d7c <HAL_RCC_OscConfig+0x57c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4aa5      	ldr	r2, [pc, #660]	; (8001d7c <HAL_RCC_OscConfig+0x57c>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7ff f843 	bl	8000b78 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7ff f83f 	bl	8000b78 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e18d      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b08:	4b9c      	ldr	r3, [pc, #624]	; (8001d7c <HAL_RCC_OscConfig+0x57c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d108      	bne.n	8001b2e <HAL_RCC_OscConfig+0x32e>
 8001b1c:	4b96      	ldr	r3, [pc, #600]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b22:	4a95      	ldr	r2, [pc, #596]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b2c:	e024      	b.n	8001b78 <HAL_RCC_OscConfig+0x378>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	d110      	bne.n	8001b58 <HAL_RCC_OscConfig+0x358>
 8001b36:	4b90      	ldr	r3, [pc, #576]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3c:	4a8e      	ldr	r2, [pc, #568]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b46:	4b8c      	ldr	r3, [pc, #560]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4c:	4a8a      	ldr	r2, [pc, #552]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b56:	e00f      	b.n	8001b78 <HAL_RCC_OscConfig+0x378>
 8001b58:	4b87      	ldr	r3, [pc, #540]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5e:	4a86      	ldr	r2, [pc, #536]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b68:	4b83      	ldr	r3, [pc, #524]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	4a82      	ldr	r2, [pc, #520]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d016      	beq.n	8001bae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7fe fffa 	bl	8000b78 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b88:	f7fe fff6 	bl	8000b78 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e142      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b9e:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ed      	beq.n	8001b88 <HAL_RCC_OscConfig+0x388>
 8001bac:	e015      	b.n	8001bda <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7fe ffe3 	bl	8000b78 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7fe ffdf 	bl	8000b78 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e12b      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1ed      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bda:	7ffb      	ldrb	r3, [r7, #31]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d105      	bne.n	8001bec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be0:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	4a64      	ldr	r2, [pc, #400]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d03c      	beq.n	8001c72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01c      	beq.n	8001c3a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c00:	4b5d      	ldr	r3, [pc, #372]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c06:	4a5c      	ldr	r2, [pc, #368]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7fe ffb2 	bl	8000b78 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c18:	f7fe ffae 	bl	8000b78 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e0fc      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c2a:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0ef      	beq.n	8001c18 <HAL_RCC_OscConfig+0x418>
 8001c38:	e01b      	b.n	8001c72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c3a:	4b4f      	ldr	r3, [pc, #316]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c40:	4a4d      	ldr	r2, [pc, #308]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4a:	f7fe ff95 	bl	8000b78 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c52:	f7fe ff91 	bl	8000b78 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e0df      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c64:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1ef      	bne.n	8001c52 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 80d3 	beq.w	8001e22 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c7c:	4b3e      	ldr	r3, [pc, #248]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	f000 808d 	beq.w	8001da4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d15a      	bne.n	8001d48 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a38      	ldr	r2, [pc, #224]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7fe ff6b 	bl	8000b78 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7fe ff67 	bl	8000b78 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e0b5      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb8:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_RCC_OscConfig+0x580>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6a11      	ldr	r1, [r2, #32]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cd4:	3a01      	subs	r2, #1
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	4311      	orrs	r1, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001cde:	0212      	lsls	r2, r2, #8
 8001ce0:	4311      	orrs	r1, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ce6:	0852      	lsrs	r2, r2, #1
 8001ce8:	3a01      	subs	r2, #1
 8001cea:	0552      	lsls	r2, r2, #21
 8001cec:	4311      	orrs	r1, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cf2:	0852      	lsrs	r2, r2, #1
 8001cf4:	3a01      	subs	r2, #1
 8001cf6:	0652      	lsls	r2, r2, #25
 8001cf8:	4311      	orrs	r1, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cfe:	06d2      	lsls	r2, r2, #27
 8001d00:	430a      	orrs	r2, r1
 8001d02:	491d      	ldr	r1, [pc, #116]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1a      	ldr	r2, [pc, #104]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d12:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7fe ff2a 	bl	8000b78 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7fe ff26 	bl	8000b78 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e074      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x528>
 8001d46:	e06c      	b.n	8001e22 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d52:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d5a:	f023 0303 	bic.w	r3, r3, #3
 8001d5e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d66:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7fe ff02 	bl	8000b78 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d76:	e00e      	b.n	8001d96 <HAL_RCC_OscConfig+0x596>
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7fe fef8 	bl	8000b78 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e046      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d96:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_RCC_OscConfig+0x62c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x584>
 8001da2:	e03e      	b.n	8001e22 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e039      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <HAL_RCC_OscConfig+0x62c>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0203 	and.w	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d12c      	bne.n	8001e1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d123      	bne.n	8001e1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d11b      	bne.n	8001e1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d113      	bne.n	8001e1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	3b01      	subs	r3, #1
 8001e04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e14:	085b      	lsrs	r3, r3, #1
 8001e16:	3b01      	subs	r3, #1
 8001e18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000

08001e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e11e      	b.n	8002086 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e48:	4b91      	ldr	r3, [pc, #580]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d910      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b8e      	ldr	r3, [pc, #568]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 020f 	bic.w	r2, r3, #15
 8001e5e:	498c      	ldr	r1, [pc, #560]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b8a      	ldr	r3, [pc, #552]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e106      	b.n	8002086 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d073      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d129      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8c:	4b81      	ldr	r3, [pc, #516]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0f4      	b.n	8002086 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e9c:	f000 f99e 	bl	80021dc <RCC_GetSysClockFreqFromPLLSource>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4a7c      	ldr	r2, [pc, #496]	; (8002098 <HAL_RCC_ClockConfig+0x268>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d93f      	bls.n	8001f2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001eaa:	4b7a      	ldr	r3, [pc, #488]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d033      	beq.n	8001f2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d12f      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001eca:	4b72      	ldr	r3, [pc, #456]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed2:	4a70      	ldr	r2, [pc, #448]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e024      	b.n	8001f2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee8:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0c6      	b.n	8002086 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef8:	4b66      	ldr	r3, [pc, #408]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0be      	b.n	8002086 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f08:	f000 f8ce 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4a61      	ldr	r2, [pc, #388]	; (8002098 <HAL_RCC_ClockConfig+0x268>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d909      	bls.n	8001f2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f16:	4b5f      	ldr	r3, [pc, #380]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f1e:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f2a:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f023 0203 	bic.w	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4957      	ldr	r1, [pc, #348]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f3c:	f7fe fe1c 	bl	8000b78 <HAL_GetTick>
 8001f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f44:	f7fe fe18 	bl	8000b78 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e095      	b.n	8002086 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 020c 	and.w	r2, r3, #12
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d1eb      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d023      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f84:	4b43      	ldr	r3, [pc, #268]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4a42      	ldr	r2, [pc, #264]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f9c:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001fa4:	4a3b      	ldr	r2, [pc, #236]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001fa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001faa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fac:	4b39      	ldr	r3, [pc, #228]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4936      	ldr	r1, [pc, #216]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b80      	cmp	r3, #128	; 0x80
 8001fc4:	d105      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fc6:	4b33      	ldr	r3, [pc, #204]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4a32      	ldr	r2, [pc, #200]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8001fcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fd0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d21d      	bcs.n	800201c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 020f 	bic.w	r2, r3, #15
 8001fe8:	4929      	ldr	r1, [pc, #164]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ff0:	f7fe fdc2 	bl	8000b78 <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	f7fe fdbe 	bl	8000b78 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e03b      	b.n	8002086 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d1ed      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002028:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4917      	ldr	r1, [pc, #92]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	490f      	ldr	r1, [pc, #60]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800205a:	f000 f825 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 800205e:	4601      	mov	r1, r0
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_RCC_ClockConfig+0x264>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	4a0c      	ldr	r2, [pc, #48]	; (800209c <HAL_RCC_ClockConfig+0x26c>)
 800206c:	5cd3      	ldrb	r3, [r2, r3]
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	fa21 f303 	lsr.w	r3, r1, r3
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <HAL_RCC_ClockConfig+0x270>)
 8002078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_RCC_ClockConfig+0x274>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fd2e 	bl	8000ae0 <HAL_InitTick>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40022000 	.word	0x40022000
 8002094:	40021000 	.word	0x40021000
 8002098:	04c4b400 	.word	0x04c4b400
 800209c:	08003838 	.word	0x08003838
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000004 	.word	0x20000004

080020a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020ae:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d102      	bne.n	80020c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	e047      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d102      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020cc:	4b26      	ldr	r3, [pc, #152]	; (8002168 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	e03e      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80020d2:	4b23      	ldr	r3, [pc, #140]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d136      	bne.n	800214c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3301      	adds	r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d10c      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020fc:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	4a16      	ldr	r2, [pc, #88]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002106:	68d2      	ldr	r2, [r2, #12]
 8002108:	0a12      	lsrs	r2, r2, #8
 800210a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
      break;
 8002114:	e00c      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	4a10      	ldr	r2, [pc, #64]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002120:	68d2      	ldr	r2, [r2, #12]
 8002122:	0a12      	lsrs	r2, r2, #8
 8002124:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002128:	fb02 f303 	mul.w	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]
      break;
 800212e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0e5b      	lsrs	r3, r3, #25
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	3301      	adds	r3, #1
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	e001      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002150:	693b      	ldr	r3, [r7, #16]
}
 8002152:	4618      	mov	r0, r3
 8002154:	371c      	adds	r7, #28
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	00f42400 	.word	0x00f42400
 8002168:	007a1200 	.word	0x007a1200

0800216c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_RCC_GetHCLKFreq+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000000 	.word	0x20000000

08002184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002188:	f7ff fff0 	bl	800216c <HAL_RCC_GetHCLKFreq>
 800218c:	4601      	mov	r1, r0
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08003848 	.word	0x08003848

080021b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021b4:	f7ff ffda 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80021b8:	4601      	mov	r1, r0
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	0adb      	lsrs	r3, r3, #11
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08003848 	.word	0x08003848

080021dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3301      	adds	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d10c      	bne.n	800221a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	4a14      	ldr	r2, [pc, #80]	; (800225c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800220a:	68d2      	ldr	r2, [r2, #12]
 800220c:	0a12      	lsrs	r2, r2, #8
 800220e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	617b      	str	r3, [r7, #20]
    break;
 8002218:	e00c      	b.n	8002234 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	4a0e      	ldr	r2, [pc, #56]	; (800225c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002224:	68d2      	ldr	r2, [r2, #12]
 8002226:	0a12      	lsrs	r2, r2, #8
 8002228:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
    break;
 8002232:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0e5b      	lsrs	r3, r3, #25
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	3301      	adds	r3, #1
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800224e:	687b      	ldr	r3, [r7, #4]
}
 8002250:	4618      	mov	r0, r3
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40021000 	.word	0x40021000
 8002260:	007a1200 	.word	0x007a1200
 8002264:	00f42400 	.word	0x00f42400

08002268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002270:	2300      	movs	r3, #0
 8002272:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002274:	2300      	movs	r3, #0
 8002276:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8098 	beq.w	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228a:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10d      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	4b40      	ldr	r3, [pc, #256]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	4a3f      	ldr	r2, [pc, #252]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	6593      	str	r3, [r2, #88]	; 0x58
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ae:	2301      	movs	r3, #1
 80022b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022b2:	4b3a      	ldr	r3, [pc, #232]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a39      	ldr	r2, [pc, #228]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022be:	f7fe fc5b 	bl	8000b78 <HAL_GetTick>
 80022c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022c4:	e009      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c6:	f7fe fc57 	bl	8000b78 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d902      	bls.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	74fb      	strb	r3, [r7, #19]
        break;
 80022d8:	e005      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022da:	4b30      	ldr	r3, [pc, #192]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0ef      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80022e6:	7cfb      	ldrb	r3, [r7, #19]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d159      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d01e      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	429a      	cmp	r2, r3
 8002306:	d019      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002308:	4b23      	ldr	r3, [pc, #140]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002312:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002324:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800232c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002334:	4a18      	ldr	r2, [pc, #96]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d016      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe fc17 	bl	8000b78 <HAL_GetTick>
 800234a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234c:	e00b      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7fe fc13 	bl	8000b78 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d902      	bls.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	74fb      	strb	r3, [r7, #19]
            break;
 8002364:	e006      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ec      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10b      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800237c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002380:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	4903      	ldr	r1, [pc, #12]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002390:	e008      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	74bb      	strb	r3, [r7, #18]
 8002396:	e005      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002398:	40021000 	.word	0x40021000
 800239c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a4:	7c7b      	ldrb	r3, [r7, #17]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d105      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023aa:	4ba6      	ldr	r3, [pc, #664]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	4aa5      	ldr	r2, [pc, #660]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023c2:	4ba0      	ldr	r3, [pc, #640]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c8:	f023 0203 	bic.w	r2, r3, #3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	499c      	ldr	r1, [pc, #624]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023e4:	4b97      	ldr	r3, [pc, #604]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f023 020c 	bic.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	4994      	ldr	r1, [pc, #592]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002406:	4b8f      	ldr	r3, [pc, #572]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	498b      	ldr	r1, [pc, #556]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002428:	4b86      	ldr	r3, [pc, #536]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	4983      	ldr	r1, [pc, #524]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800244a:	4b7e      	ldr	r3, [pc, #504]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002450:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	497a      	ldr	r1, [pc, #488]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800246c:	4b75      	ldr	r3, [pc, #468]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	4972      	ldr	r1, [pc, #456]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800248e:	4b6d      	ldr	r3, [pc, #436]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002494:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	4969      	ldr	r1, [pc, #420]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024b0:	4b64      	ldr	r3, [pc, #400]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4961      	ldr	r1, [pc, #388]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024d2:	4b5c      	ldr	r3, [pc, #368]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	4958      	ldr	r1, [pc, #352]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d015      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024f4:	4b53      	ldr	r3, [pc, #332]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	4950      	ldr	r1, [pc, #320]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002512:	d105      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002514:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a4a      	ldr	r2, [pc, #296]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002528:	2b00      	cmp	r3, #0
 800252a:	d015      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800252c:	4b45      	ldr	r3, [pc, #276]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002532:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	4942      	ldr	r1, [pc, #264]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800254a:	d105      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800254c:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a3c      	ldr	r2, [pc, #240]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002556:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d015      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002564:	4b37      	ldr	r3, [pc, #220]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4934      	ldr	r1, [pc, #208]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002582:	d105      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002584:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a2e      	ldr	r2, [pc, #184]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800258a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800258e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d015      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800259c:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025aa:	4926      	ldr	r1, [pc, #152]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ba:	d105      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025bc:	4b21      	ldr	r3, [pc, #132]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4a20      	ldr	r2, [pc, #128]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	4918      	ldr	r1, [pc, #96]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025f2:	d105      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a12      	ldr	r2, [pc, #72]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	490a      	ldr	r1, [pc, #40]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800262a:	d105      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002636:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002638:	7cbb      	ldrb	r3, [r7, #18]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000

08002648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e042      	b.n	80026e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002660:	2b00      	cmp	r3, #0
 8002662:	d106      	bne.n	8002672 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7fe f925 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2224      	movs	r2, #36	; 0x24
 8002676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fa52 	bl	8002b34 <UART_SetConfig>
 8002690:	4603      	mov	r3, r0
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e022      	b.n	80026e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fcee 	bl	8003084 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fd75 	bl	80031c8 <UART_CheckIdleState>
 80026de:	4603      	mov	r3, r0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	4613      	mov	r3, r2
 80026f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d170      	bne.n	80027e2 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_UART_Receive_DMA+0x24>
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e069      	b.n	80027e4 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_UART_Receive_DMA+0x36>
 800271a:	2302      	movs	r3, #2
 800271c:	e062      	b.n	80027e4 <HAL_UART_Receive_DMA+0xfc>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	88fa      	ldrh	r2, [r7, #6]
 8002730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2222      	movs	r2, #34	; 0x22
 8002740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002748:	2b00      	cmp	r3, #0
 800274a:	d02c      	beq.n	80027a6 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002750:	4a26      	ldr	r2, [pc, #152]	; (80027ec <HAL_UART_Receive_DMA+0x104>)
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002758:	4a25      	ldr	r2, [pc, #148]	; (80027f0 <HAL_UART_Receive_DMA+0x108>)
 800275a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002760:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <HAL_UART_Receive_DMA+0x10c>)
 8002762:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002768:	2200      	movs	r2, #0
 800276a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	3324      	adds	r3, #36	; 0x24
 8002776:	4619      	mov	r1, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277c:	461a      	mov	r2, r3
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	f7fe fbbe 	bl	8000f00 <HAL_DMA_Start_IT>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00d      	beq.n	80027a6 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2210      	movs	r2, #16
 800278e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e01e      	b.n	80027e4 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027bc:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0201 	orr.w	r2, r2, #1
 80027cc:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027dc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
  }
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	080033db 	.word	0x080033db
 80027f0:	08003445 	.word	0x08003445
 80027f4:	08003461 	.word	0x08003461

080027f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	f640 030f 	movw	r3, #2063	; 0x80f
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d118      	bne.n	800285a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b00      	cmp	r3, #0
 8002830:	d013      	beq.n	800285a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8145 	beq.w	8002ada <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
      }
      return;
 8002858:	e13f      	b.n	8002ada <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80e8 	beq.w	8002a32 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4ba1      	ldr	r3, [pc, #644]	; (8002aec <HAL_UART_IRQHandler+0x2f4>)
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4ba0      	ldr	r3, [pc, #640]	; (8002af0 <HAL_UART_IRQHandler+0x2f8>)
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80dd 	beq.w	8002a32 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d010      	beq.n	80028a4 <HAL_UART_IRQHandler+0xac>
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00b      	beq.n	80028a4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2201      	movs	r2, #1
 8002892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d010      	beq.n	80028d0 <HAL_UART_IRQHandler+0xd8>
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00b      	beq.n	80028d0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2202      	movs	r2, #2
 80028be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f043 0204 	orr.w	r2, r3, #4
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d010      	beq.n	80028fc <HAL_UART_IRQHandler+0x104>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00b      	beq.n	80028fc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2204      	movs	r2, #4
 80028ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f043 0202 	orr.w	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d015      	beq.n	8002932 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d104      	bne.n	800291a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4b76      	ldr	r3, [pc, #472]	; (8002aec <HAL_UART_IRQHandler+0x2f4>)
 8002914:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2208      	movs	r2, #8
 8002920:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f043 0208 	orr.w	r2, r3, #8
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002938:	2b00      	cmp	r3, #0
 800293a:	d011      	beq.n	8002960 <HAL_UART_IRQHandler+0x168>
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00c      	beq.n	8002960 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800294e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f043 0220 	orr.w	r2, r3, #32
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80b9 	beq.w	8002ade <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b00      	cmp	r3, #0
 8002974:	d011      	beq.n	800299a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d104      	bne.n	800298a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ac:	2b40      	cmp	r3, #64	; 0x40
 80029ae:	d004      	beq.n	80029ba <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d031      	beq.n	8002a1e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fcea 	bl	8003394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d123      	bne.n	8002a16 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d013      	beq.n	8002a0e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ea:	4a42      	ldr	r2, [pc, #264]	; (8002af4 <HAL_UART_IRQHandler+0x2fc>)
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe faff 	bl	8000ff6 <HAL_DMA_Abort_IT>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d017      	beq.n	8002a2e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	e00f      	b.n	8002a2e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f886 	bl	8002b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a14:	e00b      	b.n	8002a2e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f882 	bl	8002b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	e007      	b.n	8002a2e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f87e 	bl	8002b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8002a2c:	e057      	b.n	8002ade <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2e:	bf00      	nop
    return;
 8002a30:	e055      	b.n	8002ade <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <HAL_UART_IRQHandler+0x260>
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fd75 	bl	8003540 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a56:	e045      	b.n	8002ae4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d012      	beq.n	8002a88 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d104      	bne.n	8002a76 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d031      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
    }
    return;
 8002a86:	e02c      	b.n	8002ae2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x2ac>
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fd35 	bl	800350c <UART_EndTransmit_IT>
    return;
 8002aa2:	e01f      	b.n	8002ae4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <HAL_UART_IRQHandler+0x2c8>
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fd55 	bl	8003568 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002abe:	e011      	b.n	8002ae4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00c      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x2ec>
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	da09      	bge.n	8002ae4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fd3f 	bl	8003554 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ad6:	bf00      	nop
 8002ad8:	e004      	b.n	8002ae4 <HAL_UART_IRQHandler+0x2ec>
      return;
 8002ada:	bf00      	nop
 8002adc:	e002      	b.n	8002ae4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8002ae2:	bf00      	nop
  }
}
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	10000001 	.word	0x10000001
 8002af0:	04000120 	.word	0x04000120
 8002af4:	080034e1 	.word	0x080034e1

08002af8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b34:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002b38:	b088      	sub	sp, #32
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4bb0      	ldr	r3, [pc, #704]	; (8002e2c <UART_SetConfig+0x2f8>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	69f9      	ldr	r1, [r7, #28]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4aa5      	ldr	r2, [pc, #660]	; (8002e30 <UART_SetConfig+0x2fc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002bb2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	69f9      	ldr	r1, [r7, #28]
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	f023 010f 	bic.w	r1, r3, #15
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a96      	ldr	r2, [pc, #600]	; (8002e34 <UART_SetConfig+0x300>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d121      	bne.n	8002c24 <UART_SetConfig+0xf0>
 8002be0:	4b95      	ldr	r3, [pc, #596]	; (8002e38 <UART_SetConfig+0x304>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d816      	bhi.n	8002c1c <UART_SetConfig+0xe8>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <UART_SetConfig+0xc0>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c05 	.word	0x08002c05
 8002bf8:	08002c11 	.word	0x08002c11
 8002bfc:	08002c0b 	.word	0x08002c0b
 8002c00:	08002c17 	.word	0x08002c17
 8002c04:	2301      	movs	r3, #1
 8002c06:	76fb      	strb	r3, [r7, #27]
 8002c08:	e0be      	b.n	8002d88 <UART_SetConfig+0x254>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	76fb      	strb	r3, [r7, #27]
 8002c0e:	e0bb      	b.n	8002d88 <UART_SetConfig+0x254>
 8002c10:	2304      	movs	r3, #4
 8002c12:	76fb      	strb	r3, [r7, #27]
 8002c14:	e0b8      	b.n	8002d88 <UART_SetConfig+0x254>
 8002c16:	2308      	movs	r3, #8
 8002c18:	76fb      	strb	r3, [r7, #27]
 8002c1a:	e0b5      	b.n	8002d88 <UART_SetConfig+0x254>
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	76fb      	strb	r3, [r7, #27]
 8002c20:	bf00      	nop
 8002c22:	e0b1      	b.n	8002d88 <UART_SetConfig+0x254>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a84      	ldr	r2, [pc, #528]	; (8002e3c <UART_SetConfig+0x308>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d134      	bne.n	8002c98 <UART_SetConfig+0x164>
 8002c2e:	4b82      	ldr	r3, [pc, #520]	; (8002e38 <UART_SetConfig+0x304>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	d829      	bhi.n	8002c90 <UART_SetConfig+0x15c>
 8002c3c:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <UART_SetConfig+0x110>)
 8002c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c42:	bf00      	nop
 8002c44:	08002c79 	.word	0x08002c79
 8002c48:	08002c91 	.word	0x08002c91
 8002c4c:	08002c91 	.word	0x08002c91
 8002c50:	08002c91 	.word	0x08002c91
 8002c54:	08002c85 	.word	0x08002c85
 8002c58:	08002c91 	.word	0x08002c91
 8002c5c:	08002c91 	.word	0x08002c91
 8002c60:	08002c91 	.word	0x08002c91
 8002c64:	08002c7f 	.word	0x08002c7f
 8002c68:	08002c91 	.word	0x08002c91
 8002c6c:	08002c91 	.word	0x08002c91
 8002c70:	08002c91 	.word	0x08002c91
 8002c74:	08002c8b 	.word	0x08002c8b
 8002c78:	2300      	movs	r3, #0
 8002c7a:	76fb      	strb	r3, [r7, #27]
 8002c7c:	e084      	b.n	8002d88 <UART_SetConfig+0x254>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	76fb      	strb	r3, [r7, #27]
 8002c82:	e081      	b.n	8002d88 <UART_SetConfig+0x254>
 8002c84:	2304      	movs	r3, #4
 8002c86:	76fb      	strb	r3, [r7, #27]
 8002c88:	e07e      	b.n	8002d88 <UART_SetConfig+0x254>
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	76fb      	strb	r3, [r7, #27]
 8002c8e:	e07b      	b.n	8002d88 <UART_SetConfig+0x254>
 8002c90:	2310      	movs	r3, #16
 8002c92:	76fb      	strb	r3, [r7, #27]
 8002c94:	bf00      	nop
 8002c96:	e077      	b.n	8002d88 <UART_SetConfig+0x254>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a68      	ldr	r2, [pc, #416]	; (8002e40 <UART_SetConfig+0x30c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d120      	bne.n	8002ce4 <UART_SetConfig+0x1b0>
 8002ca2:	4b65      	ldr	r3, [pc, #404]	; (8002e38 <UART_SetConfig+0x304>)
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d00f      	beq.n	8002cd0 <UART_SetConfig+0x19c>
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d802      	bhi.n	8002cba <UART_SetConfig+0x186>
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <UART_SetConfig+0x190>
 8002cb8:	e010      	b.n	8002cdc <UART_SetConfig+0x1a8>
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d005      	beq.n	8002cca <UART_SetConfig+0x196>
 8002cbe:	2b30      	cmp	r3, #48	; 0x30
 8002cc0:	d009      	beq.n	8002cd6 <UART_SetConfig+0x1a2>
 8002cc2:	e00b      	b.n	8002cdc <UART_SetConfig+0x1a8>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	76fb      	strb	r3, [r7, #27]
 8002cc8:	e05e      	b.n	8002d88 <UART_SetConfig+0x254>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	76fb      	strb	r3, [r7, #27]
 8002cce:	e05b      	b.n	8002d88 <UART_SetConfig+0x254>
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	76fb      	strb	r3, [r7, #27]
 8002cd4:	e058      	b.n	8002d88 <UART_SetConfig+0x254>
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	76fb      	strb	r3, [r7, #27]
 8002cda:	e055      	b.n	8002d88 <UART_SetConfig+0x254>
 8002cdc:	2310      	movs	r3, #16
 8002cde:	76fb      	strb	r3, [r7, #27]
 8002ce0:	bf00      	nop
 8002ce2:	e051      	b.n	8002d88 <UART_SetConfig+0x254>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a56      	ldr	r2, [pc, #344]	; (8002e44 <UART_SetConfig+0x310>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d120      	bne.n	8002d30 <UART_SetConfig+0x1fc>
 8002cee:	4b52      	ldr	r3, [pc, #328]	; (8002e38 <UART_SetConfig+0x304>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d00f      	beq.n	8002d1c <UART_SetConfig+0x1e8>
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d802      	bhi.n	8002d06 <UART_SetConfig+0x1d2>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <UART_SetConfig+0x1dc>
 8002d04:	e010      	b.n	8002d28 <UART_SetConfig+0x1f4>
 8002d06:	2b80      	cmp	r3, #128	; 0x80
 8002d08:	d005      	beq.n	8002d16 <UART_SetConfig+0x1e2>
 8002d0a:	2bc0      	cmp	r3, #192	; 0xc0
 8002d0c:	d009      	beq.n	8002d22 <UART_SetConfig+0x1ee>
 8002d0e:	e00b      	b.n	8002d28 <UART_SetConfig+0x1f4>
 8002d10:	2300      	movs	r3, #0
 8002d12:	76fb      	strb	r3, [r7, #27]
 8002d14:	e038      	b.n	8002d88 <UART_SetConfig+0x254>
 8002d16:	2302      	movs	r3, #2
 8002d18:	76fb      	strb	r3, [r7, #27]
 8002d1a:	e035      	b.n	8002d88 <UART_SetConfig+0x254>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	76fb      	strb	r3, [r7, #27]
 8002d20:	e032      	b.n	8002d88 <UART_SetConfig+0x254>
 8002d22:	2308      	movs	r3, #8
 8002d24:	76fb      	strb	r3, [r7, #27]
 8002d26:	e02f      	b.n	8002d88 <UART_SetConfig+0x254>
 8002d28:	2310      	movs	r3, #16
 8002d2a:	76fb      	strb	r3, [r7, #27]
 8002d2c:	bf00      	nop
 8002d2e:	e02b      	b.n	8002d88 <UART_SetConfig+0x254>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a3e      	ldr	r2, [pc, #248]	; (8002e30 <UART_SetConfig+0x2fc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d124      	bne.n	8002d84 <UART_SetConfig+0x250>
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <UART_SetConfig+0x304>)
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d48:	d012      	beq.n	8002d70 <UART_SetConfig+0x23c>
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	d802      	bhi.n	8002d56 <UART_SetConfig+0x222>
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <UART_SetConfig+0x230>
 8002d54:	e012      	b.n	8002d7c <UART_SetConfig+0x248>
 8002d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d5a:	d006      	beq.n	8002d6a <UART_SetConfig+0x236>
 8002d5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d60:	d009      	beq.n	8002d76 <UART_SetConfig+0x242>
 8002d62:	e00b      	b.n	8002d7c <UART_SetConfig+0x248>
 8002d64:	2300      	movs	r3, #0
 8002d66:	76fb      	strb	r3, [r7, #27]
 8002d68:	e00e      	b.n	8002d88 <UART_SetConfig+0x254>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	76fb      	strb	r3, [r7, #27]
 8002d6e:	e00b      	b.n	8002d88 <UART_SetConfig+0x254>
 8002d70:	2304      	movs	r3, #4
 8002d72:	76fb      	strb	r3, [r7, #27]
 8002d74:	e008      	b.n	8002d88 <UART_SetConfig+0x254>
 8002d76:	2308      	movs	r3, #8
 8002d78:	76fb      	strb	r3, [r7, #27]
 8002d7a:	e005      	b.n	8002d88 <UART_SetConfig+0x254>
 8002d7c:	2310      	movs	r3, #16
 8002d7e:	76fb      	strb	r3, [r7, #27]
 8002d80:	bf00      	nop
 8002d82:	e001      	b.n	8002d88 <UART_SetConfig+0x254>
 8002d84:	2310      	movs	r3, #16
 8002d86:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <UART_SetConfig+0x2fc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	f040 80a1 	bne.w	8002ed6 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d94:	7efb      	ldrb	r3, [r7, #27]
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d823      	bhi.n	8002de2 <UART_SetConfig+0x2ae>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <UART_SetConfig+0x26c>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002dc5 	.word	0x08002dc5
 8002da4:	08002de3 	.word	0x08002de3
 8002da8:	08002dcd 	.word	0x08002dcd
 8002dac:	08002de3 	.word	0x08002de3
 8002db0:	08002dd3 	.word	0x08002dd3
 8002db4:	08002de3 	.word	0x08002de3
 8002db8:	08002de3 	.word	0x08002de3
 8002dbc:	08002de3 	.word	0x08002de3
 8002dc0:	08002ddb 	.word	0x08002ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dc4:	f7ff f9de 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002dc8:	6178      	str	r0, [r7, #20]
        break;
 8002dca:	e00f      	b.n	8002dec <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dcc:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <UART_SetConfig+0x314>)
 8002dce:	617b      	str	r3, [r7, #20]
        break;
 8002dd0:	e00c      	b.n	8002dec <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd2:	f7ff f969 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002dd6:	6178      	str	r0, [r7, #20]
        break;
 8002dd8:	e008      	b.n	8002dec <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dde:	617b      	str	r3, [r7, #20]
        break;
 8002de0:	e004      	b.n	8002dec <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	76bb      	strb	r3, [r7, #26]
        break;
 8002dea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8130 	beq.w	8003054 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <UART_SetConfig+0x318>)
 8002dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d305      	bcc.n	8002e24 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d915      	bls.n	8002e50 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	76bb      	strb	r3, [r7, #26]
 8002e28:	e114      	b.n	8003054 <UART_SetConfig+0x520>
 8002e2a:	bf00      	nop
 8002e2c:	cfff69f3 	.word	0xcfff69f3
 8002e30:	40008000 	.word	0x40008000
 8002e34:	40013800 	.word	0x40013800
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40004400 	.word	0x40004400
 8002e40:	40004800 	.word	0x40004800
 8002e44:	40004c00 	.word	0x40004c00
 8002e48:	00f42400 	.word	0x00f42400
 8002e4c:	08003850 	.word	0x08003850
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f04f 0100 	mov.w	r1, #0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	4a87      	ldr	r2, [pc, #540]	; (800307c <UART_SetConfig+0x548>)
 8002e5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f04f 0400 	mov.w	r4, #0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4623      	mov	r3, r4
 8002e6c:	f7fd f9d4 	bl	8000218 <__aeabi_uldivmod>
 8002e70:	4603      	mov	r3, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	4619      	mov	r1, r3
 8002e76:	4622      	mov	r2, r4
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	f04f 0400 	mov.w	r4, #0
 8002e80:	0214      	lsls	r4, r2, #8
 8002e82:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002e86:	020b      	lsls	r3, r1, #8
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6852      	ldr	r2, [r2, #4]
 8002e8c:	0852      	lsrs	r2, r2, #1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	eb13 0b01 	adds.w	fp, r3, r1
 8002e98:	eb44 0c02 	adc.w	ip, r4, r2
 8002e9c:	4658      	mov	r0, fp
 8002e9e:	4661      	mov	r1, ip
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f04f 0400 	mov.w	r4, #0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4623      	mov	r3, r4
 8002eac:	f7fd f9b4 	bl	8000218 <__aeabi_uldivmod>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	460c      	mov	r4, r1
 8002eb4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ebc:	d308      	bcc.n	8002ed0 <UART_SetConfig+0x39c>
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ec4:	d204      	bcs.n	8002ed0 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	e0c1      	b.n	8003054 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	76bb      	strb	r3, [r7, #26]
 8002ed4:	e0be      	b.n	8003054 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ede:	d164      	bne.n	8002faa <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8002ee0:	7efb      	ldrb	r3, [r7, #27]
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d827      	bhi.n	8002f36 <UART_SetConfig+0x402>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <UART_SetConfig+0x3b8>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f11 	.word	0x08002f11
 8002ef0:	08002f19 	.word	0x08002f19
 8002ef4:	08002f21 	.word	0x08002f21
 8002ef8:	08002f37 	.word	0x08002f37
 8002efc:	08002f27 	.word	0x08002f27
 8002f00:	08002f37 	.word	0x08002f37
 8002f04:	08002f37 	.word	0x08002f37
 8002f08:	08002f37 	.word	0x08002f37
 8002f0c:	08002f2f 	.word	0x08002f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f10:	f7ff f938 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002f14:	6178      	str	r0, [r7, #20]
        break;
 8002f16:	e013      	b.n	8002f40 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f18:	f7ff f94a 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 8002f1c:	6178      	str	r0, [r7, #20]
        break;
 8002f1e:	e00f      	b.n	8002f40 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f20:	4b57      	ldr	r3, [pc, #348]	; (8003080 <UART_SetConfig+0x54c>)
 8002f22:	617b      	str	r3, [r7, #20]
        break;
 8002f24:	e00c      	b.n	8002f40 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f26:	f7ff f8bf 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002f2a:	6178      	str	r0, [r7, #20]
        break;
 8002f2c:	e008      	b.n	8002f40 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f32:	617b      	str	r3, [r7, #20]
        break;
 8002f34:	e004      	b.n	8002f40 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	76bb      	strb	r3, [r7, #26]
        break;
 8002f3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 8086 	beq.w	8003054 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	4a4b      	ldr	r2, [pc, #300]	; (800307c <UART_SetConfig+0x548>)
 8002f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f52:	461a      	mov	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f5a:	005a      	lsls	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	441a      	add	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b0f      	cmp	r3, #15
 8002f74:	d916      	bls.n	8002fa4 <UART_SetConfig+0x470>
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7c:	d212      	bcs.n	8002fa4 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	f023 030f 	bic.w	r3, r3, #15
 8002f86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	89fb      	ldrh	r3, [r7, #14]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	89fa      	ldrh	r2, [r7, #14]
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	e057      	b.n	8003054 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	76bb      	strb	r3, [r7, #26]
 8002fa8:	e054      	b.n	8003054 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002faa:	7efb      	ldrb	r3, [r7, #27]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d828      	bhi.n	8003002 <UART_SetConfig+0x4ce>
 8002fb0:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <UART_SetConfig+0x484>)
 8002fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb6:	bf00      	nop
 8002fb8:	08002fdd 	.word	0x08002fdd
 8002fbc:	08002fe5 	.word	0x08002fe5
 8002fc0:	08002fed 	.word	0x08002fed
 8002fc4:	08003003 	.word	0x08003003
 8002fc8:	08002ff3 	.word	0x08002ff3
 8002fcc:	08003003 	.word	0x08003003
 8002fd0:	08003003 	.word	0x08003003
 8002fd4:	08003003 	.word	0x08003003
 8002fd8:	08002ffb 	.word	0x08002ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f7ff f8d2 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	6178      	str	r0, [r7, #20]
        break;
 8002fe2:	e013      	b.n	800300c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe4:	f7ff f8e4 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 8002fe8:	6178      	str	r0, [r7, #20]
        break;
 8002fea:	e00f      	b.n	800300c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <UART_SetConfig+0x54c>)
 8002fee:	617b      	str	r3, [r7, #20]
        break;
 8002ff0:	e00c      	b.n	800300c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff2:	f7ff f859 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002ff6:	6178      	str	r0, [r7, #20]
        break;
 8002ff8:	e008      	b.n	800300c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffe:	617b      	str	r3, [r7, #20]
        break;
 8003000:	e004      	b.n	800300c <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	76bb      	strb	r3, [r7, #26]
        break;
 800300a:	bf00      	nop
    }

    if (pclk != 0U)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d020      	beq.n	8003054 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	4a19      	ldr	r2, [pc, #100]	; (800307c <UART_SetConfig+0x548>)
 8003018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800301c:	461a      	mov	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	fbb3 f2f2 	udiv	r2, r3, r2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	441a      	add	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	fbb2 f3f3 	udiv	r3, r2, r3
 8003034:	b29b      	uxth	r3, r3
 8003036:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	d908      	bls.n	8003050 <UART_SetConfig+0x51c>
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003044:	d204      	bcs.n	8003050 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	e001      	b.n	8003054 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003070:	7ebb      	ldrb	r3, [r7, #26]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800307c:	08003850 	.word	0x08003850
 8003080:	00f42400 	.word	0x00f42400

08003084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01a      	beq.n	800319a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003182:	d10a      	bne.n	800319a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
  }
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031d8:	f7fd fcce 	bl	8000b78 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d10e      	bne.n	800320a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f82c 	bl	8003258 <UART_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e022      	b.n	8003250 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b04      	cmp	r3, #4
 8003216:	d10e      	bne.n	8003236 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f816 	bl	8003258 <UART_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e00c      	b.n	8003250 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003268:	e062      	b.n	8003330 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d05e      	beq.n	8003330 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003272:	f7fd fc81 	bl	8000b78 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	429a      	cmp	r2, r3
 8003280:	d302      	bcc.n	8003288 <UART_WaitOnFlagUntilTimeout+0x30>
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d11d      	bne.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003296:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e045      	b.n	8003350 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d02e      	beq.n	8003330 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e0:	d126      	bne.n	8003330 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032fa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0201 	bic.w	r2, r2, #1
 800330a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2220      	movs	r2, #32
 8003310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e00f      	b.n	8003350 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4013      	ands	r3, r2
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	429a      	cmp	r2, r3
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	429a      	cmp	r2, r3
 800334c:	d08d      	beq.n	800326a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800336e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800337e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d11f      	bne.n	8003436 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800340c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0201 	bic.w	r2, r2, #1
 800341c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800342c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7fd f88e 	bl	8000558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800343c:	bf00      	nop
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7ff fb5a 	bl	8002b0c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003474:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800347c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	2b80      	cmp	r3, #128	; 0x80
 800348a:	d109      	bne.n	80034a0 <UART_DMAError+0x40>
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b21      	cmp	r3, #33	; 0x21
 8003490:	d106      	bne.n	80034a0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800349a:	6978      	ldr	r0, [r7, #20]
 800349c:	f7ff ff5c 	bl	8003358 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b40      	cmp	r3, #64	; 0x40
 80034ac:	d109      	bne.n	80034c2 <UART_DMAError+0x62>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b22      	cmp	r3, #34	; 0x22
 80034b2:	d106      	bne.n	80034c2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80034bc:	6978      	ldr	r0, [r7, #20]
 80034be:	f7ff ff69 	bl	8003394 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f043 0210 	orr.w	r2, r3, #16
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034d2:	6978      	ldr	r0, [r7, #20]
 80034d4:	f7ff fb24 	bl	8002b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034d8:	bf00      	nop
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff fb0e 	bl	8002b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003522:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fae0 	bl	8002af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_UARTEx_DisableFifoMode+0x16>
 800358e:	2302      	movs	r3, #2
 8003590:	e027      	b.n	80035e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2224      	movs	r2, #36	; 0x24
 800359e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0201 	bic.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80035c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003602:	2302      	movs	r3, #2
 8003604:	e02d      	b.n	8003662 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2224      	movs	r2, #36	; 0x24
 8003612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0201 	bic.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f850 	bl	80036e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800367e:	2302      	movs	r3, #2
 8003680:	e02d      	b.n	80036de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2224      	movs	r2, #36	; 0x24
 800368e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f812 	bl	80036e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80036f0:	4a2f      	ldr	r2, [pc, #188]	; (80037b0 <UARTEx_SetNbDataToProcess+0xc8>)
 80036f2:	f107 0314 	add.w	r3, r7, #20
 80036f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036fa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80036fe:	4a2d      	ldr	r2, [pc, #180]	; (80037b4 <UARTEx_SetNbDataToProcess+0xcc>)
 8003700:	f107 030c 	add.w	r3, r7, #12
 8003704:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003708:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003710:	2b00      	cmp	r3, #0
 8003712:	d108      	bne.n	8003726 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003724:	e03d      	b.n	80037a2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003726:	2308      	movs	r3, #8
 8003728:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800372a:	2308      	movs	r3, #8
 800372c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	0e5b      	lsrs	r3, r3, #25
 8003736:	b2db      	uxtb	r3, r3
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	0f5b      	lsrs	r3, r3, #29
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800374e:	7fbb      	ldrb	r3, [r7, #30]
 8003750:	7f3a      	ldrb	r2, [r7, #28]
 8003752:	f107 0120 	add.w	r1, r7, #32
 8003756:	440a      	add	r2, r1
 8003758:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800375c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003760:	7f3a      	ldrb	r2, [r7, #28]
 8003762:	f107 0120 	add.w	r1, r7, #32
 8003766:	440a      	add	r2, r1
 8003768:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800376c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003770:	b29a      	uxth	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003778:	7ffb      	ldrb	r3, [r7, #31]
 800377a:	7f7a      	ldrb	r2, [r7, #29]
 800377c:	f107 0120 	add.w	r1, r7, #32
 8003780:	440a      	add	r2, r1
 8003782:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003786:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800378a:	7f7a      	ldrb	r2, [r7, #29]
 800378c:	f107 0120 	add.w	r1, r7, #32
 8003790:	440a      	add	r2, r1
 8003792:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003796:	fb93 f3f2 	sdiv	r3, r3, r2
 800379a:	b29a      	uxth	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80037a2:	bf00      	nop
 80037a4:	3724      	adds	r7, #36	; 0x24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	08003828 	.word	0x08003828
 80037b4:	08003830 	.word	0x08003830

080037b8 <__libc_init_array>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	4e0d      	ldr	r6, [pc, #52]	; (80037f0 <__libc_init_array+0x38>)
 80037bc:	4c0d      	ldr	r4, [pc, #52]	; (80037f4 <__libc_init_array+0x3c>)
 80037be:	1ba4      	subs	r4, r4, r6
 80037c0:	10a4      	asrs	r4, r4, #2
 80037c2:	2500      	movs	r5, #0
 80037c4:	42a5      	cmp	r5, r4
 80037c6:	d109      	bne.n	80037dc <__libc_init_array+0x24>
 80037c8:	4e0b      	ldr	r6, [pc, #44]	; (80037f8 <__libc_init_array+0x40>)
 80037ca:	4c0c      	ldr	r4, [pc, #48]	; (80037fc <__libc_init_array+0x44>)
 80037cc:	f000 f820 	bl	8003810 <_init>
 80037d0:	1ba4      	subs	r4, r4, r6
 80037d2:	10a4      	asrs	r4, r4, #2
 80037d4:	2500      	movs	r5, #0
 80037d6:	42a5      	cmp	r5, r4
 80037d8:	d105      	bne.n	80037e6 <__libc_init_array+0x2e>
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037e0:	4798      	blx	r3
 80037e2:	3501      	adds	r5, #1
 80037e4:	e7ee      	b.n	80037c4 <__libc_init_array+0xc>
 80037e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037ea:	4798      	blx	r3
 80037ec:	3501      	adds	r5, #1
 80037ee:	e7f2      	b.n	80037d6 <__libc_init_array+0x1e>
 80037f0:	08003870 	.word	0x08003870
 80037f4:	08003870 	.word	0x08003870
 80037f8:	08003870 	.word	0x08003870
 80037fc:	08003874 	.word	0x08003874

08003800 <memset>:
 8003800:	4402      	add	r2, r0
 8003802:	4603      	mov	r3, r0
 8003804:	4293      	cmp	r3, r2
 8003806:	d100      	bne.n	800380a <memset+0xa>
 8003808:	4770      	bx	lr
 800380a:	f803 1b01 	strb.w	r1, [r3], #1
 800380e:	e7f9      	b.n	8003804 <memset+0x4>

08003810 <_init>:
 8003810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003812:	bf00      	nop
 8003814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003816:	bc08      	pop	{r3}
 8003818:	469e      	mov	lr, r3
 800381a:	4770      	bx	lr

0800381c <_fini>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	bf00      	nop
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr
